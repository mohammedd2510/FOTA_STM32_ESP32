
FOTA_Application.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08004000  08004000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006404  080041a0  080041a0  000041a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0002f5c4  0800a5a4  0800a5a4  0000a5a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08039b68  08039b68  000400ac  2**0
                  CONTENTS
  4 .ARM          00000000  08039b68  08039b68  000400ac  2**0
                  CONTENTS
  5 .preinit_array 00000000  08039b68  08039b68  000400ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08039b68  08039b68  00039b68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08039b6c  08039b6c  00039b6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ac  20000000  08039b70  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000042c0  200000ac  08039c1c  000400ac  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000436c  08039c1c  0004436c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000400ac  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000400dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b28e  00000000  00000000  0004011f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000027d3  00000000  00000000  0004b3ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bd0  00000000  00000000  0004db80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000088c  00000000  00000000  0004e750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004c0d  00000000  00000000  0004efdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c40b  00000000  00000000  00053be9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00015aef  00000000  00000000  0005fff4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002c7c  00000000  00000000  00075ae4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  00078760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080041a0 <__do_global_dtors_aux>:
 80041a0:	b510      	push	{r4, lr}
 80041a2:	4c05      	ldr	r4, [pc, #20]	; (80041b8 <__do_global_dtors_aux+0x18>)
 80041a4:	7823      	ldrb	r3, [r4, #0]
 80041a6:	b933      	cbnz	r3, 80041b6 <__do_global_dtors_aux+0x16>
 80041a8:	4b04      	ldr	r3, [pc, #16]	; (80041bc <__do_global_dtors_aux+0x1c>)
 80041aa:	b113      	cbz	r3, 80041b2 <__do_global_dtors_aux+0x12>
 80041ac:	4804      	ldr	r0, [pc, #16]	; (80041c0 <__do_global_dtors_aux+0x20>)
 80041ae:	f3af 8000 	nop.w
 80041b2:	2301      	movs	r3, #1
 80041b4:	7023      	strb	r3, [r4, #0]
 80041b6:	bd10      	pop	{r4, pc}
 80041b8:	200000ac 	.word	0x200000ac
 80041bc:	00000000 	.word	0x00000000
 80041c0:	0800a58c 	.word	0x0800a58c

080041c4 <frame_dummy>:
 80041c4:	b508      	push	{r3, lr}
 80041c6:	4b03      	ldr	r3, [pc, #12]	; (80041d4 <frame_dummy+0x10>)
 80041c8:	b11b      	cbz	r3, 80041d2 <frame_dummy+0xe>
 80041ca:	4903      	ldr	r1, [pc, #12]	; (80041d8 <frame_dummy+0x14>)
 80041cc:	4803      	ldr	r0, [pc, #12]	; (80041dc <frame_dummy+0x18>)
 80041ce:	f3af 8000 	nop.w
 80041d2:	bd08      	pop	{r3, pc}
 80041d4:	00000000 	.word	0x00000000
 80041d8:	200000b0 	.word	0x200000b0
 80041dc:	0800a58c 	.word	0x0800a58c

080041e0 <__aeabi_drsub>:
 80041e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80041e4:	e002      	b.n	80041ec <__adddf3>
 80041e6:	bf00      	nop

080041e8 <__aeabi_dsub>:
 80041e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080041ec <__adddf3>:
 80041ec:	b530      	push	{r4, r5, lr}
 80041ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80041f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80041f6:	ea94 0f05 	teq	r4, r5
 80041fa:	bf08      	it	eq
 80041fc:	ea90 0f02 	teqeq	r0, r2
 8004200:	bf1f      	itttt	ne
 8004202:	ea54 0c00 	orrsne.w	ip, r4, r0
 8004206:	ea55 0c02 	orrsne.w	ip, r5, r2
 800420a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800420e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8004212:	f000 80e2 	beq.w	80043da <__adddf3+0x1ee>
 8004216:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800421a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800421e:	bfb8      	it	lt
 8004220:	426d      	neglt	r5, r5
 8004222:	dd0c      	ble.n	800423e <__adddf3+0x52>
 8004224:	442c      	add	r4, r5
 8004226:	ea80 0202 	eor.w	r2, r0, r2
 800422a:	ea81 0303 	eor.w	r3, r1, r3
 800422e:	ea82 0000 	eor.w	r0, r2, r0
 8004232:	ea83 0101 	eor.w	r1, r3, r1
 8004236:	ea80 0202 	eor.w	r2, r0, r2
 800423a:	ea81 0303 	eor.w	r3, r1, r3
 800423e:	2d36      	cmp	r5, #54	; 0x36
 8004240:	bf88      	it	hi
 8004242:	bd30      	pophi	{r4, r5, pc}
 8004244:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8004248:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800424c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8004250:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8004254:	d002      	beq.n	800425c <__adddf3+0x70>
 8004256:	4240      	negs	r0, r0
 8004258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800425c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8004260:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8004264:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8004268:	d002      	beq.n	8004270 <__adddf3+0x84>
 800426a:	4252      	negs	r2, r2
 800426c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8004270:	ea94 0f05 	teq	r4, r5
 8004274:	f000 80a7 	beq.w	80043c6 <__adddf3+0x1da>
 8004278:	f1a4 0401 	sub.w	r4, r4, #1
 800427c:	f1d5 0e20 	rsbs	lr, r5, #32
 8004280:	db0d      	blt.n	800429e <__adddf3+0xb2>
 8004282:	fa02 fc0e 	lsl.w	ip, r2, lr
 8004286:	fa22 f205 	lsr.w	r2, r2, r5
 800428a:	1880      	adds	r0, r0, r2
 800428c:	f141 0100 	adc.w	r1, r1, #0
 8004290:	fa03 f20e 	lsl.w	r2, r3, lr
 8004294:	1880      	adds	r0, r0, r2
 8004296:	fa43 f305 	asr.w	r3, r3, r5
 800429a:	4159      	adcs	r1, r3
 800429c:	e00e      	b.n	80042bc <__adddf3+0xd0>
 800429e:	f1a5 0520 	sub.w	r5, r5, #32
 80042a2:	f10e 0e20 	add.w	lr, lr, #32
 80042a6:	2a01      	cmp	r2, #1
 80042a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80042ac:	bf28      	it	cs
 80042ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80042b2:	fa43 f305 	asr.w	r3, r3, r5
 80042b6:	18c0      	adds	r0, r0, r3
 80042b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80042bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80042c0:	d507      	bpl.n	80042d2 <__adddf3+0xe6>
 80042c2:	f04f 0e00 	mov.w	lr, #0
 80042c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80042ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80042ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80042d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80042d6:	d31b      	bcc.n	8004310 <__adddf3+0x124>
 80042d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80042dc:	d30c      	bcc.n	80042f8 <__adddf3+0x10c>
 80042de:	0849      	lsrs	r1, r1, #1
 80042e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80042e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80042e8:	f104 0401 	add.w	r4, r4, #1
 80042ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80042f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80042f4:	f080 809a 	bcs.w	800442c <__adddf3+0x240>
 80042f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80042fc:	bf08      	it	eq
 80042fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8004302:	f150 0000 	adcs.w	r0, r0, #0
 8004306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800430a:	ea41 0105 	orr.w	r1, r1, r5
 800430e:	bd30      	pop	{r4, r5, pc}
 8004310:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8004314:	4140      	adcs	r0, r0
 8004316:	eb41 0101 	adc.w	r1, r1, r1
 800431a:	3c01      	subs	r4, #1
 800431c:	bf28      	it	cs
 800431e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8004322:	d2e9      	bcs.n	80042f8 <__adddf3+0x10c>
 8004324:	f091 0f00 	teq	r1, #0
 8004328:	bf04      	itt	eq
 800432a:	4601      	moveq	r1, r0
 800432c:	2000      	moveq	r0, #0
 800432e:	fab1 f381 	clz	r3, r1
 8004332:	bf08      	it	eq
 8004334:	3320      	addeq	r3, #32
 8004336:	f1a3 030b 	sub.w	r3, r3, #11
 800433a:	f1b3 0220 	subs.w	r2, r3, #32
 800433e:	da0c      	bge.n	800435a <__adddf3+0x16e>
 8004340:	320c      	adds	r2, #12
 8004342:	dd08      	ble.n	8004356 <__adddf3+0x16a>
 8004344:	f102 0c14 	add.w	ip, r2, #20
 8004348:	f1c2 020c 	rsb	r2, r2, #12
 800434c:	fa01 f00c 	lsl.w	r0, r1, ip
 8004350:	fa21 f102 	lsr.w	r1, r1, r2
 8004354:	e00c      	b.n	8004370 <__adddf3+0x184>
 8004356:	f102 0214 	add.w	r2, r2, #20
 800435a:	bfd8      	it	le
 800435c:	f1c2 0c20 	rsble	ip, r2, #32
 8004360:	fa01 f102 	lsl.w	r1, r1, r2
 8004364:	fa20 fc0c 	lsr.w	ip, r0, ip
 8004368:	bfdc      	itt	le
 800436a:	ea41 010c 	orrle.w	r1, r1, ip
 800436e:	4090      	lslle	r0, r2
 8004370:	1ae4      	subs	r4, r4, r3
 8004372:	bfa2      	ittt	ge
 8004374:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8004378:	4329      	orrge	r1, r5
 800437a:	bd30      	popge	{r4, r5, pc}
 800437c:	ea6f 0404 	mvn.w	r4, r4
 8004380:	3c1f      	subs	r4, #31
 8004382:	da1c      	bge.n	80043be <__adddf3+0x1d2>
 8004384:	340c      	adds	r4, #12
 8004386:	dc0e      	bgt.n	80043a6 <__adddf3+0x1ba>
 8004388:	f104 0414 	add.w	r4, r4, #20
 800438c:	f1c4 0220 	rsb	r2, r4, #32
 8004390:	fa20 f004 	lsr.w	r0, r0, r4
 8004394:	fa01 f302 	lsl.w	r3, r1, r2
 8004398:	ea40 0003 	orr.w	r0, r0, r3
 800439c:	fa21 f304 	lsr.w	r3, r1, r4
 80043a0:	ea45 0103 	orr.w	r1, r5, r3
 80043a4:	bd30      	pop	{r4, r5, pc}
 80043a6:	f1c4 040c 	rsb	r4, r4, #12
 80043aa:	f1c4 0220 	rsb	r2, r4, #32
 80043ae:	fa20 f002 	lsr.w	r0, r0, r2
 80043b2:	fa01 f304 	lsl.w	r3, r1, r4
 80043b6:	ea40 0003 	orr.w	r0, r0, r3
 80043ba:	4629      	mov	r1, r5
 80043bc:	bd30      	pop	{r4, r5, pc}
 80043be:	fa21 f004 	lsr.w	r0, r1, r4
 80043c2:	4629      	mov	r1, r5
 80043c4:	bd30      	pop	{r4, r5, pc}
 80043c6:	f094 0f00 	teq	r4, #0
 80043ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80043ce:	bf06      	itte	eq
 80043d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80043d4:	3401      	addeq	r4, #1
 80043d6:	3d01      	subne	r5, #1
 80043d8:	e74e      	b.n	8004278 <__adddf3+0x8c>
 80043da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80043de:	bf18      	it	ne
 80043e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80043e4:	d029      	beq.n	800443a <__adddf3+0x24e>
 80043e6:	ea94 0f05 	teq	r4, r5
 80043ea:	bf08      	it	eq
 80043ec:	ea90 0f02 	teqeq	r0, r2
 80043f0:	d005      	beq.n	80043fe <__adddf3+0x212>
 80043f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80043f6:	bf04      	itt	eq
 80043f8:	4619      	moveq	r1, r3
 80043fa:	4610      	moveq	r0, r2
 80043fc:	bd30      	pop	{r4, r5, pc}
 80043fe:	ea91 0f03 	teq	r1, r3
 8004402:	bf1e      	ittt	ne
 8004404:	2100      	movne	r1, #0
 8004406:	2000      	movne	r0, #0
 8004408:	bd30      	popne	{r4, r5, pc}
 800440a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800440e:	d105      	bne.n	800441c <__adddf3+0x230>
 8004410:	0040      	lsls	r0, r0, #1
 8004412:	4149      	adcs	r1, r1
 8004414:	bf28      	it	cs
 8004416:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800441a:	bd30      	pop	{r4, r5, pc}
 800441c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8004420:	bf3c      	itt	cc
 8004422:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8004426:	bd30      	popcc	{r4, r5, pc}
 8004428:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800442c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8004430:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004434:	f04f 0000 	mov.w	r0, #0
 8004438:	bd30      	pop	{r4, r5, pc}
 800443a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800443e:	bf1a      	itte	ne
 8004440:	4619      	movne	r1, r3
 8004442:	4610      	movne	r0, r2
 8004444:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8004448:	bf1c      	itt	ne
 800444a:	460b      	movne	r3, r1
 800444c:	4602      	movne	r2, r0
 800444e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8004452:	bf06      	itte	eq
 8004454:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8004458:	ea91 0f03 	teqeq	r1, r3
 800445c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8004460:	bd30      	pop	{r4, r5, pc}
 8004462:	bf00      	nop

08004464 <__aeabi_ui2d>:
 8004464:	f090 0f00 	teq	r0, #0
 8004468:	bf04      	itt	eq
 800446a:	2100      	moveq	r1, #0
 800446c:	4770      	bxeq	lr
 800446e:	b530      	push	{r4, r5, lr}
 8004470:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8004474:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8004478:	f04f 0500 	mov.w	r5, #0
 800447c:	f04f 0100 	mov.w	r1, #0
 8004480:	e750      	b.n	8004324 <__adddf3+0x138>
 8004482:	bf00      	nop

08004484 <__aeabi_i2d>:
 8004484:	f090 0f00 	teq	r0, #0
 8004488:	bf04      	itt	eq
 800448a:	2100      	moveq	r1, #0
 800448c:	4770      	bxeq	lr
 800448e:	b530      	push	{r4, r5, lr}
 8004490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8004494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8004498:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800449c:	bf48      	it	mi
 800449e:	4240      	negmi	r0, r0
 80044a0:	f04f 0100 	mov.w	r1, #0
 80044a4:	e73e      	b.n	8004324 <__adddf3+0x138>
 80044a6:	bf00      	nop

080044a8 <__aeabi_f2d>:
 80044a8:	0042      	lsls	r2, r0, #1
 80044aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80044ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80044b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80044b6:	bf1f      	itttt	ne
 80044b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80044bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80044c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80044c4:	4770      	bxne	lr
 80044c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80044ca:	bf08      	it	eq
 80044cc:	4770      	bxeq	lr
 80044ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80044d2:	bf04      	itt	eq
 80044d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80044d8:	4770      	bxeq	lr
 80044da:	b530      	push	{r4, r5, lr}
 80044dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80044e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80044e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80044e8:	e71c      	b.n	8004324 <__adddf3+0x138>
 80044ea:	bf00      	nop

080044ec <__aeabi_ul2d>:
 80044ec:	ea50 0201 	orrs.w	r2, r0, r1
 80044f0:	bf08      	it	eq
 80044f2:	4770      	bxeq	lr
 80044f4:	b530      	push	{r4, r5, lr}
 80044f6:	f04f 0500 	mov.w	r5, #0
 80044fa:	e00a      	b.n	8004512 <__aeabi_l2d+0x16>

080044fc <__aeabi_l2d>:
 80044fc:	ea50 0201 	orrs.w	r2, r0, r1
 8004500:	bf08      	it	eq
 8004502:	4770      	bxeq	lr
 8004504:	b530      	push	{r4, r5, lr}
 8004506:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800450a:	d502      	bpl.n	8004512 <__aeabi_l2d+0x16>
 800450c:	4240      	negs	r0, r0
 800450e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8004512:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8004516:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800451a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800451e:	f43f aed8 	beq.w	80042d2 <__adddf3+0xe6>
 8004522:	f04f 0203 	mov.w	r2, #3
 8004526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800452a:	bf18      	it	ne
 800452c:	3203      	addne	r2, #3
 800452e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8004532:	bf18      	it	ne
 8004534:	3203      	addne	r2, #3
 8004536:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800453a:	f1c2 0320 	rsb	r3, r2, #32
 800453e:	fa00 fc03 	lsl.w	ip, r0, r3
 8004542:	fa20 f002 	lsr.w	r0, r0, r2
 8004546:	fa01 fe03 	lsl.w	lr, r1, r3
 800454a:	ea40 000e 	orr.w	r0, r0, lr
 800454e:	fa21 f102 	lsr.w	r1, r1, r2
 8004552:	4414      	add	r4, r2
 8004554:	e6bd      	b.n	80042d2 <__adddf3+0xe6>
 8004556:	bf00      	nop

08004558 <__aeabi_dmul>:
 8004558:	b570      	push	{r4, r5, r6, lr}
 800455a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800455e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8004562:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8004566:	bf1d      	ittte	ne
 8004568:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800456c:	ea94 0f0c 	teqne	r4, ip
 8004570:	ea95 0f0c 	teqne	r5, ip
 8004574:	f000 f8de 	bleq	8004734 <__aeabi_dmul+0x1dc>
 8004578:	442c      	add	r4, r5
 800457a:	ea81 0603 	eor.w	r6, r1, r3
 800457e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8004582:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8004586:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800458a:	bf18      	it	ne
 800458c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8004590:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8004594:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004598:	d038      	beq.n	800460c <__aeabi_dmul+0xb4>
 800459a:	fba0 ce02 	umull	ip, lr, r0, r2
 800459e:	f04f 0500 	mov.w	r5, #0
 80045a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80045a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80045aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80045ae:	f04f 0600 	mov.w	r6, #0
 80045b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80045b6:	f09c 0f00 	teq	ip, #0
 80045ba:	bf18      	it	ne
 80045bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80045c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80045c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80045c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80045cc:	d204      	bcs.n	80045d8 <__aeabi_dmul+0x80>
 80045ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80045d2:	416d      	adcs	r5, r5
 80045d4:	eb46 0606 	adc.w	r6, r6, r6
 80045d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80045dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80045e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80045e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80045e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80045ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80045f0:	bf88      	it	hi
 80045f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80045f6:	d81e      	bhi.n	8004636 <__aeabi_dmul+0xde>
 80045f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80045fc:	bf08      	it	eq
 80045fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8004602:	f150 0000 	adcs.w	r0, r0, #0
 8004606:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800460a:	bd70      	pop	{r4, r5, r6, pc}
 800460c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8004610:	ea46 0101 	orr.w	r1, r6, r1
 8004614:	ea40 0002 	orr.w	r0, r0, r2
 8004618:	ea81 0103 	eor.w	r1, r1, r3
 800461c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8004620:	bfc2      	ittt	gt
 8004622:	ebd4 050c 	rsbsgt	r5, r4, ip
 8004626:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800462a:	bd70      	popgt	{r4, r5, r6, pc}
 800462c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8004630:	f04f 0e00 	mov.w	lr, #0
 8004634:	3c01      	subs	r4, #1
 8004636:	f300 80ab 	bgt.w	8004790 <__aeabi_dmul+0x238>
 800463a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800463e:	bfde      	ittt	le
 8004640:	2000      	movle	r0, #0
 8004642:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8004646:	bd70      	pople	{r4, r5, r6, pc}
 8004648:	f1c4 0400 	rsb	r4, r4, #0
 800464c:	3c20      	subs	r4, #32
 800464e:	da35      	bge.n	80046bc <__aeabi_dmul+0x164>
 8004650:	340c      	adds	r4, #12
 8004652:	dc1b      	bgt.n	800468c <__aeabi_dmul+0x134>
 8004654:	f104 0414 	add.w	r4, r4, #20
 8004658:	f1c4 0520 	rsb	r5, r4, #32
 800465c:	fa00 f305 	lsl.w	r3, r0, r5
 8004660:	fa20 f004 	lsr.w	r0, r0, r4
 8004664:	fa01 f205 	lsl.w	r2, r1, r5
 8004668:	ea40 0002 	orr.w	r0, r0, r2
 800466c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8004670:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8004674:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8004678:	fa21 f604 	lsr.w	r6, r1, r4
 800467c:	eb42 0106 	adc.w	r1, r2, r6
 8004680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8004684:	bf08      	it	eq
 8004686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800468a:	bd70      	pop	{r4, r5, r6, pc}
 800468c:	f1c4 040c 	rsb	r4, r4, #12
 8004690:	f1c4 0520 	rsb	r5, r4, #32
 8004694:	fa00 f304 	lsl.w	r3, r0, r4
 8004698:	fa20 f005 	lsr.w	r0, r0, r5
 800469c:	fa01 f204 	lsl.w	r2, r1, r4
 80046a0:	ea40 0002 	orr.w	r0, r0, r2
 80046a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80046a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80046ac:	f141 0100 	adc.w	r1, r1, #0
 80046b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80046b4:	bf08      	it	eq
 80046b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80046ba:	bd70      	pop	{r4, r5, r6, pc}
 80046bc:	f1c4 0520 	rsb	r5, r4, #32
 80046c0:	fa00 f205 	lsl.w	r2, r0, r5
 80046c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80046c8:	fa20 f304 	lsr.w	r3, r0, r4
 80046cc:	fa01 f205 	lsl.w	r2, r1, r5
 80046d0:	ea43 0302 	orr.w	r3, r3, r2
 80046d4:	fa21 f004 	lsr.w	r0, r1, r4
 80046d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80046dc:	fa21 f204 	lsr.w	r2, r1, r4
 80046e0:	ea20 0002 	bic.w	r0, r0, r2
 80046e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80046e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80046ec:	bf08      	it	eq
 80046ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80046f2:	bd70      	pop	{r4, r5, r6, pc}
 80046f4:	f094 0f00 	teq	r4, #0
 80046f8:	d10f      	bne.n	800471a <__aeabi_dmul+0x1c2>
 80046fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80046fe:	0040      	lsls	r0, r0, #1
 8004700:	eb41 0101 	adc.w	r1, r1, r1
 8004704:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8004708:	bf08      	it	eq
 800470a:	3c01      	subeq	r4, #1
 800470c:	d0f7      	beq.n	80046fe <__aeabi_dmul+0x1a6>
 800470e:	ea41 0106 	orr.w	r1, r1, r6
 8004712:	f095 0f00 	teq	r5, #0
 8004716:	bf18      	it	ne
 8004718:	4770      	bxne	lr
 800471a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800471e:	0052      	lsls	r2, r2, #1
 8004720:	eb43 0303 	adc.w	r3, r3, r3
 8004724:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8004728:	bf08      	it	eq
 800472a:	3d01      	subeq	r5, #1
 800472c:	d0f7      	beq.n	800471e <__aeabi_dmul+0x1c6>
 800472e:	ea43 0306 	orr.w	r3, r3, r6
 8004732:	4770      	bx	lr
 8004734:	ea94 0f0c 	teq	r4, ip
 8004738:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800473c:	bf18      	it	ne
 800473e:	ea95 0f0c 	teqne	r5, ip
 8004742:	d00c      	beq.n	800475e <__aeabi_dmul+0x206>
 8004744:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8004748:	bf18      	it	ne
 800474a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800474e:	d1d1      	bne.n	80046f4 <__aeabi_dmul+0x19c>
 8004750:	ea81 0103 	eor.w	r1, r1, r3
 8004754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8004758:	f04f 0000 	mov.w	r0, #0
 800475c:	bd70      	pop	{r4, r5, r6, pc}
 800475e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8004762:	bf06      	itte	eq
 8004764:	4610      	moveq	r0, r2
 8004766:	4619      	moveq	r1, r3
 8004768:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800476c:	d019      	beq.n	80047a2 <__aeabi_dmul+0x24a>
 800476e:	ea94 0f0c 	teq	r4, ip
 8004772:	d102      	bne.n	800477a <__aeabi_dmul+0x222>
 8004774:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8004778:	d113      	bne.n	80047a2 <__aeabi_dmul+0x24a>
 800477a:	ea95 0f0c 	teq	r5, ip
 800477e:	d105      	bne.n	800478c <__aeabi_dmul+0x234>
 8004780:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8004784:	bf1c      	itt	ne
 8004786:	4610      	movne	r0, r2
 8004788:	4619      	movne	r1, r3
 800478a:	d10a      	bne.n	80047a2 <__aeabi_dmul+0x24a>
 800478c:	ea81 0103 	eor.w	r1, r1, r3
 8004790:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8004794:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8004798:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800479c:	f04f 0000 	mov.w	r0, #0
 80047a0:	bd70      	pop	{r4, r5, r6, pc}
 80047a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80047a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80047aa:	bd70      	pop	{r4, r5, r6, pc}

080047ac <__aeabi_ddiv>:
 80047ac:	b570      	push	{r4, r5, r6, lr}
 80047ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80047b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80047b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80047ba:	bf1d      	ittte	ne
 80047bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80047c0:	ea94 0f0c 	teqne	r4, ip
 80047c4:	ea95 0f0c 	teqne	r5, ip
 80047c8:	f000 f8a7 	bleq	800491a <__aeabi_ddiv+0x16e>
 80047cc:	eba4 0405 	sub.w	r4, r4, r5
 80047d0:	ea81 0e03 	eor.w	lr, r1, r3
 80047d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80047d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80047dc:	f000 8088 	beq.w	80048f0 <__aeabi_ddiv+0x144>
 80047e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80047e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80047e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80047ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80047f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80047f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80047f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80047fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8004800:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8004804:	429d      	cmp	r5, r3
 8004806:	bf08      	it	eq
 8004808:	4296      	cmpeq	r6, r2
 800480a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800480e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8004812:	d202      	bcs.n	800481a <__aeabi_ddiv+0x6e>
 8004814:	085b      	lsrs	r3, r3, #1
 8004816:	ea4f 0232 	mov.w	r2, r2, rrx
 800481a:	1ab6      	subs	r6, r6, r2
 800481c:	eb65 0503 	sbc.w	r5, r5, r3
 8004820:	085b      	lsrs	r3, r3, #1
 8004822:	ea4f 0232 	mov.w	r2, r2, rrx
 8004826:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800482a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800482e:	ebb6 0e02 	subs.w	lr, r6, r2
 8004832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8004836:	bf22      	ittt	cs
 8004838:	1ab6      	subcs	r6, r6, r2
 800483a:	4675      	movcs	r5, lr
 800483c:	ea40 000c 	orrcs.w	r0, r0, ip
 8004840:	085b      	lsrs	r3, r3, #1
 8004842:	ea4f 0232 	mov.w	r2, r2, rrx
 8004846:	ebb6 0e02 	subs.w	lr, r6, r2
 800484a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800484e:	bf22      	ittt	cs
 8004850:	1ab6      	subcs	r6, r6, r2
 8004852:	4675      	movcs	r5, lr
 8004854:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8004858:	085b      	lsrs	r3, r3, #1
 800485a:	ea4f 0232 	mov.w	r2, r2, rrx
 800485e:	ebb6 0e02 	subs.w	lr, r6, r2
 8004862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8004866:	bf22      	ittt	cs
 8004868:	1ab6      	subcs	r6, r6, r2
 800486a:	4675      	movcs	r5, lr
 800486c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8004870:	085b      	lsrs	r3, r3, #1
 8004872:	ea4f 0232 	mov.w	r2, r2, rrx
 8004876:	ebb6 0e02 	subs.w	lr, r6, r2
 800487a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800487e:	bf22      	ittt	cs
 8004880:	1ab6      	subcs	r6, r6, r2
 8004882:	4675      	movcs	r5, lr
 8004884:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8004888:	ea55 0e06 	orrs.w	lr, r5, r6
 800488c:	d018      	beq.n	80048c0 <__aeabi_ddiv+0x114>
 800488e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8004892:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8004896:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800489a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800489e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80048a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80048a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80048aa:	d1c0      	bne.n	800482e <__aeabi_ddiv+0x82>
 80048ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80048b0:	d10b      	bne.n	80048ca <__aeabi_ddiv+0x11e>
 80048b2:	ea41 0100 	orr.w	r1, r1, r0
 80048b6:	f04f 0000 	mov.w	r0, #0
 80048ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80048be:	e7b6      	b.n	800482e <__aeabi_ddiv+0x82>
 80048c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80048c4:	bf04      	itt	eq
 80048c6:	4301      	orreq	r1, r0
 80048c8:	2000      	moveq	r0, #0
 80048ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80048ce:	bf88      	it	hi
 80048d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80048d4:	f63f aeaf 	bhi.w	8004636 <__aeabi_dmul+0xde>
 80048d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80048dc:	bf04      	itt	eq
 80048de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80048e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80048e6:	f150 0000 	adcs.w	r0, r0, #0
 80048ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80048ee:	bd70      	pop	{r4, r5, r6, pc}
 80048f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80048f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80048f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80048fc:	bfc2      	ittt	gt
 80048fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8004902:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8004906:	bd70      	popgt	{r4, r5, r6, pc}
 8004908:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800490c:	f04f 0e00 	mov.w	lr, #0
 8004910:	3c01      	subs	r4, #1
 8004912:	e690      	b.n	8004636 <__aeabi_dmul+0xde>
 8004914:	ea45 0e06 	orr.w	lr, r5, r6
 8004918:	e68d      	b.n	8004636 <__aeabi_dmul+0xde>
 800491a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800491e:	ea94 0f0c 	teq	r4, ip
 8004922:	bf08      	it	eq
 8004924:	ea95 0f0c 	teqeq	r5, ip
 8004928:	f43f af3b 	beq.w	80047a2 <__aeabi_dmul+0x24a>
 800492c:	ea94 0f0c 	teq	r4, ip
 8004930:	d10a      	bne.n	8004948 <__aeabi_ddiv+0x19c>
 8004932:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8004936:	f47f af34 	bne.w	80047a2 <__aeabi_dmul+0x24a>
 800493a:	ea95 0f0c 	teq	r5, ip
 800493e:	f47f af25 	bne.w	800478c <__aeabi_dmul+0x234>
 8004942:	4610      	mov	r0, r2
 8004944:	4619      	mov	r1, r3
 8004946:	e72c      	b.n	80047a2 <__aeabi_dmul+0x24a>
 8004948:	ea95 0f0c 	teq	r5, ip
 800494c:	d106      	bne.n	800495c <__aeabi_ddiv+0x1b0>
 800494e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8004952:	f43f aefd 	beq.w	8004750 <__aeabi_dmul+0x1f8>
 8004956:	4610      	mov	r0, r2
 8004958:	4619      	mov	r1, r3
 800495a:	e722      	b.n	80047a2 <__aeabi_dmul+0x24a>
 800495c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8004960:	bf18      	it	ne
 8004962:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8004966:	f47f aec5 	bne.w	80046f4 <__aeabi_dmul+0x19c>
 800496a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800496e:	f47f af0d 	bne.w	800478c <__aeabi_dmul+0x234>
 8004972:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8004976:	f47f aeeb 	bne.w	8004750 <__aeabi_dmul+0x1f8>
 800497a:	e712      	b.n	80047a2 <__aeabi_dmul+0x24a>

0800497c <__aeabi_d2uiz>:
 800497c:	004a      	lsls	r2, r1, #1
 800497e:	d211      	bcs.n	80049a4 <__aeabi_d2uiz+0x28>
 8004980:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8004984:	d211      	bcs.n	80049aa <__aeabi_d2uiz+0x2e>
 8004986:	d50d      	bpl.n	80049a4 <__aeabi_d2uiz+0x28>
 8004988:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800498c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8004990:	d40e      	bmi.n	80049b0 <__aeabi_d2uiz+0x34>
 8004992:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8004996:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800499a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800499e:	fa23 f002 	lsr.w	r0, r3, r2
 80049a2:	4770      	bx	lr
 80049a4:	f04f 0000 	mov.w	r0, #0
 80049a8:	4770      	bx	lr
 80049aa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80049ae:	d102      	bne.n	80049b6 <__aeabi_d2uiz+0x3a>
 80049b0:	f04f 30ff 	mov.w	r0, #4294967295
 80049b4:	4770      	bx	lr
 80049b6:	f04f 0000 	mov.w	r0, #0
 80049ba:	4770      	bx	lr

080049bc <IR_CALLBACK>:
const u8 * Copy_pu8Signal = NULL;
u8  Signal_Stop_Flag = ZERO_INIT;
/*********************/

void IR_CALLBACK(void)
{
 80049bc:	b590      	push	{r4, r7, lr}
 80049be:	b085      	sub	sp, #20
 80049c0:	af02      	add	r7, sp, #8
	u8 TFT_Queue_Send =0;
 80049c2:	2300      	movs	r3, #0
 80049c4:	71fb      	strb	r3, [r7, #7]
    if(IR_u32GetReceivedData() == IR_TV_REMOTE_1)
 80049c6:	f000 faaf 	bl	8004f28 <IR_u32GetReceivedData>
 80049ca:	4603      	mov	r3, r0
 80049cc:	4a22      	ldr	r2, [pc, #136]	; (8004a58 <IR_CALLBACK+0x9c>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d115      	bne.n	80049fe <IR_CALLBACK+0x42>
    {
    	TFT_Queue_Send = TFT_AMRDIAB;
 80049d2:	2301      	movs	r3, #1
 80049d4:	71fb      	strb	r3, [r7, #7]
    	xQueueSendToFrontFromISR(TFT_QueueHandler,&TFT_Queue_Send,NULL);
 80049d6:	4b21      	ldr	r3, [pc, #132]	; (8004a5c <IR_CALLBACK+0xa0>)
 80049d8:	6818      	ldr	r0, [r3, #0]
 80049da:	1df9      	adds	r1, r7, #7
 80049dc:	2301      	movs	r3, #1
 80049de:	2200      	movs	r2, #0
 80049e0:	f003 f9e4 	bl	8007dac <xQueueGenericSendFromISR>
    	xTimerStartFromISR( RGB_TimerHandler,NULL );
 80049e4:	4b1e      	ldr	r3, [pc, #120]	; (8004a60 <IR_CALLBACK+0xa4>)
 80049e6:	681c      	ldr	r4, [r3, #0]
 80049e8:	f004 f8e2 	bl	8008bb0 <xTaskGetTickCountFromISR>
 80049ec:	4602      	mov	r2, r0
 80049ee:	2300      	movs	r3, #0
 80049f0:	9300      	str	r3, [sp, #0]
 80049f2:	2300      	movs	r3, #0
 80049f4:	2106      	movs	r1, #6
 80049f6:	4620      	mov	r0, r4
 80049f8:	f004 fe5e 	bl	80096b8 <xTimerGenericCommand>
    }
    else if(IR_u32GetReceivedData() == IR_TV_REMOTE_OK)
	{
      SystemReset();
	}
}
 80049fc:	e027      	b.n	8004a4e <IR_CALLBACK+0x92>
    else if(IR_u32GetReceivedData() == IR_TV_REMOTE_2)
 80049fe:	f000 fa93 	bl	8004f28 <IR_u32GetReceivedData>
 8004a02:	4603      	mov	r3, r0
 8004a04:	4a17      	ldr	r2, [pc, #92]	; (8004a64 <IR_CALLBACK+0xa8>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d109      	bne.n	8004a1e <IR_CALLBACK+0x62>
    	TFT_Queue_Send = TFT_MOUNIR;
 8004a0a:	2302      	movs	r3, #2
 8004a0c:	71fb      	strb	r3, [r7, #7]
    	xQueueSendToFrontFromISR(TFT_QueueHandler,&TFT_Queue_Send,NULL);
 8004a0e:	4b13      	ldr	r3, [pc, #76]	; (8004a5c <IR_CALLBACK+0xa0>)
 8004a10:	6818      	ldr	r0, [r3, #0]
 8004a12:	1df9      	adds	r1, r7, #7
 8004a14:	2301      	movs	r3, #1
 8004a16:	2200      	movs	r2, #0
 8004a18:	f003 f9c8 	bl	8007dac <xQueueGenericSendFromISR>
}
 8004a1c:	e017      	b.n	8004a4e <IR_CALLBACK+0x92>
    else if(IR_u32GetReceivedData() == IR_TV_REMOTE_EXIT)
 8004a1e:	f000 fa83 	bl	8004f28 <IR_u32GetReceivedData>
 8004a22:	4603      	mov	r3, r0
 8004a24:	4a10      	ldr	r2, [pc, #64]	; (8004a68 <IR_CALLBACK+0xac>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d109      	bne.n	8004a3e <IR_CALLBACK+0x82>
    	TFT_Queue_Send = TFT_STOP;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	71fb      	strb	r3, [r7, #7]
    	xQueueSendToFrontFromISR(TFT_QueueHandler,&TFT_Queue_Send,NULL);
 8004a2e:	4b0b      	ldr	r3, [pc, #44]	; (8004a5c <IR_CALLBACK+0xa0>)
 8004a30:	6818      	ldr	r0, [r3, #0]
 8004a32:	1df9      	adds	r1, r7, #7
 8004a34:	2301      	movs	r3, #1
 8004a36:	2200      	movs	r2, #0
 8004a38:	f003 f9b8 	bl	8007dac <xQueueGenericSendFromISR>
}
 8004a3c:	e007      	b.n	8004a4e <IR_CALLBACK+0x92>
    else if(IR_u32GetReceivedData() == IR_TV_REMOTE_OK)
 8004a3e:	f000 fa73 	bl	8004f28 <IR_u32GetReceivedData>
 8004a42:	4603      	mov	r3, r0
 8004a44:	4a09      	ldr	r2, [pc, #36]	; (8004a6c <IR_CALLBACK+0xb0>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d101      	bne.n	8004a4e <IR_CALLBACK+0x92>
      SystemReset();
 8004a4a:	f001 ff01 	bl	8006850 <SystemReset>
}
 8004a4e:	bf00      	nop
 8004a50:	370c      	adds	r7, #12
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd90      	pop	{r4, r7, pc}
 8004a56:	bf00      	nop
 8004a58:	22d9d827 	.word	0x22d9d827
 8004a5c:	200000d8 	.word	0x200000d8
 8004a60:	200000d4 	.word	0x200000d4
 8004a64:	22d9f00f 	.word	0x22d9f00f
 8004a68:	22d9c837 	.word	0x22d9c837
 8004a6c:	22d9609f 	.word	0x22d9609f

08004a70 <InitTask>:


void InitTask( void * pvParameters )
	{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b084      	sub	sp, #16
 8004a74:	af02      	add	r7, sp, #8
 8004a76:	6078      	str	r0, [r7, #4]
		/* Application Modules Init */
		RGB_voidInit(&RGB_Lcfg);
 8004a78:	4831      	ldr	r0, [pc, #196]	; (8004b40 <InitTask+0xd0>)
 8004a7a:	f000 fba7 	bl	80051cc <RGB_voidInit>
		MNVIC_voidSetPriority(EXTI0_IRQn, configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY+1);
 8004a7e:	2106      	movs	r1, #6
 8004a80:	2006      	movs	r0, #6
 8004a82:	f001 fddf 	bl	8006644 <MNVIC_voidSetPriority>
		IR_voidInit(&IR_Config, IR_CALLBACK);
 8004a86:	492f      	ldr	r1, [pc, #188]	; (8004b44 <InitTask+0xd4>)
 8004a88:	482f      	ldr	r0, [pc, #188]	; (8004b48 <InitTask+0xd8>)
 8004a8a:	f000 fa01 	bl	8004e90 <IR_voidInit>
		TFT_voidInit(&TFT_Config);
 8004a8e:	482f      	ldr	r0, [pc, #188]	; (8004b4c <InitTask+0xdc>)
 8004a90:	f000 fcec 	bl	800546c <TFT_voidInit>
		R2RDAC_voidInit(&R2RDAC_Config);
 8004a94:	482e      	ldr	r0, [pc, #184]	; (8004b50 <InitTask+0xe0>)
 8004a96:	f000 fb3d 	bl	8005114 <R2RDAC_voidInit>
		/* Tasks Creation */
		xTaskCreate(TFT_Task,"TFTTask",128,( void * ) NULL, 10,&TFTTaskHandle );
 8004a9a:	4b2e      	ldr	r3, [pc, #184]	; (8004b54 <InitTask+0xe4>)
 8004a9c:	9301      	str	r3, [sp, #4]
 8004a9e:	230a      	movs	r3, #10
 8004aa0:	9300      	str	r3, [sp, #0]
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	2280      	movs	r2, #128	; 0x80
 8004aa6:	492c      	ldr	r1, [pc, #176]	; (8004b58 <InitTask+0xe8>)
 8004aa8:	482c      	ldr	r0, [pc, #176]	; (8004b5c <InitTask+0xec>)
 8004aaa:	f003 fd8d 	bl	80085c8 <xTaskCreate>
		xTaskCreate(DAC_Task,"DACTask",128,( void * ) NULL, 9,&DACTaskHandle );
 8004aae:	4b2c      	ldr	r3, [pc, #176]	; (8004b60 <InitTask+0xf0>)
 8004ab0:	9301      	str	r3, [sp, #4]
 8004ab2:	2309      	movs	r3, #9
 8004ab4:	9300      	str	r3, [sp, #0]
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	2280      	movs	r2, #128	; 0x80
 8004aba:	492a      	ldr	r1, [pc, #168]	; (8004b64 <InitTask+0xf4>)
 8004abc:	482a      	ldr	r0, [pc, #168]	; (8004b68 <InitTask+0xf8>)
 8004abe:	f003 fd83 	bl	80085c8 <xTaskCreate>
		/* Kernel objects Creation */
		RGB_TimerHandler = xTimerCreate( "Timer", 20000, pdTRUE, ( void * ) 0, RGBTimerCallback);
 8004ac2:	4b2a      	ldr	r3, [pc, #168]	; (8004b6c <InitTask+0xfc>)
 8004ac4:	9300      	str	r3, [sp, #0]
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	2201      	movs	r2, #1
 8004aca:	f644 6120 	movw	r1, #20000	; 0x4e20
 8004ace:	4828      	ldr	r0, [pc, #160]	; (8004b70 <InitTask+0x100>)
 8004ad0:	f004 fd96 	bl	8009600 <xTimerCreate>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	4a27      	ldr	r2, [pc, #156]	; (8004b74 <InitTask+0x104>)
 8004ad8:	6013      	str	r3, [r2, #0]
		TFT_QueueHandler= xQueueCreate( 1, sizeof( u8 ) );
 8004ada:	2200      	movs	r2, #0
 8004adc:	2101      	movs	r1, #1
 8004ade:	2001      	movs	r0, #1
 8004ae0:	f002 ffda 	bl	8007a98 <xQueueGenericCreate>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	4a24      	ldr	r2, [pc, #144]	; (8004b78 <InitTask+0x108>)
 8004ae8:	6013      	str	r3, [r2, #0]

		AudioSignal_Mutex = xSemaphoreCreateMutex();
 8004aea:	2001      	movs	r0, #1
 8004aec:	f003 f847 	bl	8007b7e <xQueueCreateMutex>
 8004af0:	4603      	mov	r3, r0
 8004af2:	4a22      	ldr	r2, [pc, #136]	; (8004b7c <InitTask+0x10c>)
 8004af4:	6013      	str	r3, [r2, #0]
		AudioSignalStopFlag_Mutex = xSemaphoreCreateMutex();
 8004af6:	2001      	movs	r0, #1
 8004af8:	f003 f841 	bl	8007b7e <xQueueCreateMutex>
 8004afc:	4603      	mov	r3, r0
 8004afe:	4a20      	ldr	r2, [pc, #128]	; (8004b80 <InitTask+0x110>)
 8004b00:	6013      	str	r3, [r2, #0]
		AudioSignalStart_Semaphore = xSemaphoreCreateBinary();
 8004b02:	2203      	movs	r2, #3
 8004b04:	2100      	movs	r1, #0
 8004b06:	2001      	movs	r0, #1
 8004b08:	f002 ffc6 	bl	8007a98 <xQueueGenericCreate>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	4a1d      	ldr	r2, [pc, #116]	; (8004b84 <InitTask+0x114>)
 8004b10:	6013      	str	r3, [r2, #0]

		xSemaphoreGive(AudioSignal_Mutex);
 8004b12:	4b1a      	ldr	r3, [pc, #104]	; (8004b7c <InitTask+0x10c>)
 8004b14:	6818      	ldr	r0, [r3, #0]
 8004b16:	2300      	movs	r3, #0
 8004b18:	2200      	movs	r2, #0
 8004b1a:	2100      	movs	r1, #0
 8004b1c:	f003 f848 	bl	8007bb0 <xQueueGenericSend>
		xSemaphoreGive(AudioSignalStopFlag_Mutex);
 8004b20:	4b17      	ldr	r3, [pc, #92]	; (8004b80 <InitTask+0x110>)
 8004b22:	6818      	ldr	r0, [r3, #0]
 8004b24:	2300      	movs	r3, #0
 8004b26:	2200      	movs	r2, #0
 8004b28:	2100      	movs	r1, #0
 8004b2a:	f003 f841 	bl	8007bb0 <xQueueGenericSend>


		vTaskDelete(InitTaskHandle);
 8004b2e:	4b16      	ldr	r3, [pc, #88]	; (8004b88 <InitTask+0x118>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4618      	mov	r0, r3
 8004b34:	f003 fe8c 	bl	8008850 <vTaskDelete>
	}
 8004b38:	bf00      	nop
 8004b3a:	3708      	adds	r7, #8
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd80      	pop	{r7, pc}
 8004b40:	20000014 	.word	0x20000014
 8004b44:	080049bd 	.word	0x080049bd
 8004b48:	20000000 	.word	0x20000000
 8004b4c:	20000020 	.word	0x20000020
 8004b50:	20000004 	.word	0x20000004
 8004b54:	200000cc 	.word	0x200000cc
 8004b58:	0800a5a4 	.word	0x0800a5a4
 8004b5c:	08004b8d 	.word	0x08004b8d
 8004b60:	200000d0 	.word	0x200000d0
 8004b64:	0800a5ac 	.word	0x0800a5ac
 8004b68:	08004d61 	.word	0x08004d61
 8004b6c:	08004e0d 	.word	0x08004e0d
 8004b70:	0800a5b4 	.word	0x0800a5b4
 8004b74:	200000d4 	.word	0x200000d4
 8004b78:	200000d8 	.word	0x200000d8
 8004b7c:	200000dc 	.word	0x200000dc
 8004b80:	200000e0 	.word	0x200000e0
 8004b84:	200000e4 	.word	0x200000e4
 8004b88:	200000c8 	.word	0x200000c8

08004b8c <TFT_Task>:

void TFT_Task( void * pvParameters )
{
 8004b8c:	b590      	push	{r4, r7, lr}
 8004b8e:	b087      	sub	sp, #28
 8004b90:	af02      	add	r7, sp, #8
 8004b92:	6078      	str	r0, [r7, #4]
	u8 TFT_Queue_Recieve = 0;
 8004b94:	2300      	movs	r3, #0
 8004b96:	73fb      	strb	r3, [r7, #15]
	for(;;)
	{
		xQueueReceive( TFT_QueueHandler,  &( TFT_Queue_Recieve ), portMAX_DELAY );
 8004b98:	4b63      	ldr	r3, [pc, #396]	; (8004d28 <TFT_Task+0x19c>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f107 010f 	add.w	r1, r7, #15
 8004ba0:	f04f 32ff 	mov.w	r2, #4294967295
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	f003 f99d 	bl	8007ee4 <xQueueReceive>
		if(TFT_Queue_Recieve == TFT_STOP){
 8004baa:	7bfb      	ldrb	r3, [r7, #15]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d136      	bne.n	8004c1e <TFT_Task+0x92>
			TFT_ClearScreen(&TFT_Config); // Clear TFT Screen
 8004bb0:	485e      	ldr	r0, [pc, #376]	; (8004d2c <TFT_Task+0x1a0>)
 8004bb2:	f000 fd5a 	bl	800566a <TFT_ClearScreen>

	    	xTimerStop( RGB_TimerHandler,portMAX_DELAY ); // Stop RGB Animation
 8004bb6:	4b5e      	ldr	r3, [pc, #376]	; (8004d30 <TFT_Task+0x1a4>)
 8004bb8:	6818      	ldr	r0, [r3, #0]
 8004bba:	f04f 33ff 	mov.w	r3, #4294967295
 8004bbe:	9300      	str	r3, [sp, #0]
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	2103      	movs	r1, #3
 8004bc6:	f004 fd77 	bl	80096b8 <xTimerGenericCommand>
	    	RGB_Colors_Counter =0; // Reset RGB Colors Counter
 8004bca:	4b5a      	ldr	r3, [pc, #360]	; (8004d34 <TFT_Task+0x1a8>)
 8004bcc:	2200      	movs	r2, #0
 8004bce:	701a      	strb	r2, [r3, #0]
	    	RGB_voidSetColor(&RGB_Lcfg, RGB_BLACK_COLOR); // Set RGB to Black Color
 8004bd0:	2100      	movs	r1, #0
 8004bd2:	4859      	ldr	r0, [pc, #356]	; (8004d38 <TFT_Task+0x1ac>)
 8004bd4:	f000 fb1a 	bl	800520c <RGB_voidSetColor>

			xSemaphoreTake(AudioSignal_Mutex,portMAX_DELAY); // Take Audio Signal Mutex
 8004bd8:	4b58      	ldr	r3, [pc, #352]	; (8004d3c <TFT_Task+0x1b0>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f04f 31ff 	mov.w	r1, #4294967295
 8004be0:	4618      	mov	r0, r3
 8004be2:	f003 fa5f 	bl	80080a4 <xQueueSemaphoreTake>
			Copy_pu8Signal = NULL; // set signal pointer to NULL
 8004be6:	4b56      	ldr	r3, [pc, #344]	; (8004d40 <TFT_Task+0x1b4>)
 8004be8:	2200      	movs	r2, #0
 8004bea:	601a      	str	r2, [r3, #0]
			xSemaphoreGive(AudioSignal_Mutex); // Give Audio Signal Mutex
 8004bec:	4b53      	ldr	r3, [pc, #332]	; (8004d3c <TFT_Task+0x1b0>)
 8004bee:	6818      	ldr	r0, [r3, #0]
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	2100      	movs	r1, #0
 8004bf6:	f002 ffdb 	bl	8007bb0 <xQueueGenericSend>

			xSemaphoreTake(AudioSignalStopFlag_Mutex,portMAX_DELAY); // Take Audio Signal Stop Flag Mutex
 8004bfa:	4b52      	ldr	r3, [pc, #328]	; (8004d44 <TFT_Task+0x1b8>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f04f 31ff 	mov.w	r1, #4294967295
 8004c02:	4618      	mov	r0, r3
 8004c04:	f003 fa4e 	bl	80080a4 <xQueueSemaphoreTake>
			Signal_Stop_Flag =1; // Set Signal Stop Flag to 1 to stop the current song
 8004c08:	4b4f      	ldr	r3, [pc, #316]	; (8004d48 <TFT_Task+0x1bc>)
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	701a      	strb	r2, [r3, #0]
			xSemaphoreGive(AudioSignalStopFlag_Mutex); // Give Audio Signal Stop Flag Mutex
 8004c0e:	4b4d      	ldr	r3, [pc, #308]	; (8004d44 <TFT_Task+0x1b8>)
 8004c10:	6818      	ldr	r0, [r3, #0]
 8004c12:	2300      	movs	r3, #0
 8004c14:	2200      	movs	r2, #0
 8004c16:	2100      	movs	r1, #0
 8004c18:	f002 ffca 	bl	8007bb0 <xQueueGenericSend>
 8004c1c:	e7bc      	b.n	8004b98 <TFT_Task+0xc>




		}
		else if (TFT_Queue_Recieve == TFT_AMRDIAB)
 8004c1e:	7bfb      	ldrb	r3, [r7, #15]
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	d13e      	bne.n	8004ca2 <TFT_Task+0x116>
		{
			TFT_voidDisplayFullImage(&TFT_Config, AmrDiab_Image); // Display AmrDiab image
 8004c24:	4949      	ldr	r1, [pc, #292]	; (8004d4c <TFT_Task+0x1c0>)
 8004c26:	4841      	ldr	r0, [pc, #260]	; (8004d2c <TFT_Task+0x1a0>)
 8004c28:	f000 fcbb 	bl	80055a2 <TFT_voidDisplayFullImage>

			xTimerStart( RGB_TimerHandler,portMAX_DELAY ); // Start RGB Animation
 8004c2c:	4b40      	ldr	r3, [pc, #256]	; (8004d30 <TFT_Task+0x1a4>)
 8004c2e:	681c      	ldr	r4, [r3, #0]
 8004c30:	f003 ffae 	bl	8008b90 <xTaskGetTickCount>
 8004c34:	4602      	mov	r2, r0
 8004c36:	f04f 33ff 	mov.w	r3, #4294967295
 8004c3a:	9300      	str	r3, [sp, #0]
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	2101      	movs	r1, #1
 8004c40:	4620      	mov	r0, r4
 8004c42:	f004 fd39 	bl	80096b8 <xTimerGenericCommand>

			if(Copy_pu8Signal == NULL){
 8004c46:	4b3e      	ldr	r3, [pc, #248]	; (8004d40 <TFT_Task+0x1b4>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d106      	bne.n	8004c5c <TFT_Task+0xd0>
				xSemaphoreGive(AudioSignalStart_Semaphore); // signaling DAC Task to Start
 8004c4e:	4b40      	ldr	r3, [pc, #256]	; (8004d50 <TFT_Task+0x1c4>)
 8004c50:	6818      	ldr	r0, [r3, #0]
 8004c52:	2300      	movs	r3, #0
 8004c54:	2200      	movs	r2, #0
 8004c56:	2100      	movs	r1, #0
 8004c58:	f002 ffaa 	bl	8007bb0 <xQueueGenericSend>
			}
			xSemaphoreTake(AudioSignal_Mutex,portMAX_DELAY); // Take Audio Signal Mutex
 8004c5c:	4b37      	ldr	r3, [pc, #220]	; (8004d3c <TFT_Task+0x1b0>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f04f 31ff 	mov.w	r1, #4294967295
 8004c64:	4618      	mov	r0, r3
 8004c66:	f003 fa1d 	bl	80080a4 <xQueueSemaphoreTake>
			Copy_pu8Signal = wla_ala_balo_raw; // set signal pointer to wayah_song
 8004c6a:	4b35      	ldr	r3, [pc, #212]	; (8004d40 <TFT_Task+0x1b4>)
 8004c6c:	4a39      	ldr	r2, [pc, #228]	; (8004d54 <TFT_Task+0x1c8>)
 8004c6e:	601a      	str	r2, [r3, #0]
			xSemaphoreGive(AudioSignal_Mutex); // Give Audio Signal Mutex
 8004c70:	4b32      	ldr	r3, [pc, #200]	; (8004d3c <TFT_Task+0x1b0>)
 8004c72:	6818      	ldr	r0, [r3, #0]
 8004c74:	2300      	movs	r3, #0
 8004c76:	2200      	movs	r2, #0
 8004c78:	2100      	movs	r1, #0
 8004c7a:	f002 ff99 	bl	8007bb0 <xQueueGenericSend>

			xSemaphoreTake(AudioSignalStopFlag_Mutex,portMAX_DELAY); // Take Audio Signal Stop Flag Mutex
 8004c7e:	4b31      	ldr	r3, [pc, #196]	; (8004d44 <TFT_Task+0x1b8>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f04f 31ff 	mov.w	r1, #4294967295
 8004c86:	4618      	mov	r0, r3
 8004c88:	f003 fa0c 	bl	80080a4 <xQueueSemaphoreTake>
			Signal_Stop_Flag =1;  // Set Audio Signal Stop Flag to 1 to stop the cuurent song
 8004c8c:	4b2e      	ldr	r3, [pc, #184]	; (8004d48 <TFT_Task+0x1bc>)
 8004c8e:	2201      	movs	r2, #1
 8004c90:	701a      	strb	r2, [r3, #0]
			xSemaphoreGive(AudioSignalStopFlag_Mutex); // Give Audio Signal Stop Flag Mutex
 8004c92:	4b2c      	ldr	r3, [pc, #176]	; (8004d44 <TFT_Task+0x1b8>)
 8004c94:	6818      	ldr	r0, [r3, #0]
 8004c96:	2300      	movs	r3, #0
 8004c98:	2200      	movs	r2, #0
 8004c9a:	2100      	movs	r1, #0
 8004c9c:	f002 ff88 	bl	8007bb0 <xQueueGenericSend>
 8004ca0:	e77a      	b.n	8004b98 <TFT_Task+0xc>

		}
		else if (TFT_Queue_Recieve == TFT_MOUNIR)
 8004ca2:	7bfb      	ldrb	r3, [r7, #15]
 8004ca4:	2b02      	cmp	r3, #2
 8004ca6:	f47f af77 	bne.w	8004b98 <TFT_Task+0xc>
		{
			TFT_voidDisplayFullImage(&TFT_Config, Mounir_Image); // Display Mounir image
 8004caa:	492b      	ldr	r1, [pc, #172]	; (8004d58 <TFT_Task+0x1cc>)
 8004cac:	481f      	ldr	r0, [pc, #124]	; (8004d2c <TFT_Task+0x1a0>)
 8004cae:	f000 fc78 	bl	80055a2 <TFT_voidDisplayFullImage>

		   	xTimerStart( RGB_TimerHandler,portMAX_DELAY ); // Start RGB Animation
 8004cb2:	4b1f      	ldr	r3, [pc, #124]	; (8004d30 <TFT_Task+0x1a4>)
 8004cb4:	681c      	ldr	r4, [r3, #0]
 8004cb6:	f003 ff6b 	bl	8008b90 <xTaskGetTickCount>
 8004cba:	4602      	mov	r2, r0
 8004cbc:	f04f 33ff 	mov.w	r3, #4294967295
 8004cc0:	9300      	str	r3, [sp, #0]
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	2101      	movs	r1, #1
 8004cc6:	4620      	mov	r0, r4
 8004cc8:	f004 fcf6 	bl	80096b8 <xTimerGenericCommand>

			if(Copy_pu8Signal == NULL){
 8004ccc:	4b1c      	ldr	r3, [pc, #112]	; (8004d40 <TFT_Task+0x1b4>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d106      	bne.n	8004ce2 <TFT_Task+0x156>
				xSemaphoreGive(AudioSignalStart_Semaphore); // signaling DAC Task to Start
 8004cd4:	4b1e      	ldr	r3, [pc, #120]	; (8004d50 <TFT_Task+0x1c4>)
 8004cd6:	6818      	ldr	r0, [r3, #0]
 8004cd8:	2300      	movs	r3, #0
 8004cda:	2200      	movs	r2, #0
 8004cdc:	2100      	movs	r1, #0
 8004cde:	f002 ff67 	bl	8007bb0 <xQueueGenericSend>
			}
			xSemaphoreTake(AudioSignal_Mutex,portMAX_DELAY); // Take Audio Signal Mutex
 8004ce2:	4b16      	ldr	r3, [pc, #88]	; (8004d3c <TFT_Task+0x1b0>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f04f 31ff 	mov.w	r1, #4294967295
 8004cea:	4618      	mov	r0, r3
 8004cec:	f003 f9da 	bl	80080a4 <xQueueSemaphoreTake>
			Copy_pu8Signal = she2_men_b3eed_raw; // set signal pointer to ya_lally_song
 8004cf0:	4b13      	ldr	r3, [pc, #76]	; (8004d40 <TFT_Task+0x1b4>)
 8004cf2:	4a1a      	ldr	r2, [pc, #104]	; (8004d5c <TFT_Task+0x1d0>)
 8004cf4:	601a      	str	r2, [r3, #0]
			xSemaphoreGive(AudioSignal_Mutex); // Give Audio Signal Mutex
 8004cf6:	4b11      	ldr	r3, [pc, #68]	; (8004d3c <TFT_Task+0x1b0>)
 8004cf8:	6818      	ldr	r0, [r3, #0]
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	2100      	movs	r1, #0
 8004d00:	f002 ff56 	bl	8007bb0 <xQueueGenericSend>

			xSemaphoreTake(AudioSignalStopFlag_Mutex,portMAX_DELAY); // Take Audio Signal Stop Flag Mutex
 8004d04:	4b0f      	ldr	r3, [pc, #60]	; (8004d44 <TFT_Task+0x1b8>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f04f 31ff 	mov.w	r1, #4294967295
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	f003 f9c9 	bl	80080a4 <xQueueSemaphoreTake>
			Signal_Stop_Flag =1; // Set Signal Stop Flag to 1 to stop the current song
 8004d12:	4b0d      	ldr	r3, [pc, #52]	; (8004d48 <TFT_Task+0x1bc>)
 8004d14:	2201      	movs	r2, #1
 8004d16:	701a      	strb	r2, [r3, #0]
			xSemaphoreGive(AudioSignalStopFlag_Mutex); // Give Audio Signal Stop Flag Mutex
 8004d18:	4b0a      	ldr	r3, [pc, #40]	; (8004d44 <TFT_Task+0x1b8>)
 8004d1a:	6818      	ldr	r0, [r3, #0]
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	2200      	movs	r2, #0
 8004d20:	2100      	movs	r1, #0
 8004d22:	f002 ff45 	bl	8007bb0 <xQueueGenericSend>
		xQueueReceive( TFT_QueueHandler,  &( TFT_Queue_Recieve ), portMAX_DELAY );
 8004d26:	e737      	b.n	8004b98 <TFT_Task+0xc>
 8004d28:	200000d8 	.word	0x200000d8
 8004d2c:	20000020 	.word	0x20000020
 8004d30:	200000d4 	.word	0x200000d4
 8004d34:	200000e8 	.word	0x200000e8
 8004d38:	20000014 	.word	0x20000014
 8004d3c:	200000dc 	.word	0x200000dc
 8004d40:	200000ec 	.word	0x200000ec
 8004d44:	200000e0 	.word	0x200000e0
 8004d48:	200000f0 	.word	0x200000f0
 8004d4c:	0800a5e8 	.word	0x0800a5e8
 8004d50:	200000e4 	.word	0x200000e4
 8004d54:	0801e5e8 	.word	0x0801e5e8
 8004d58:	080145e8 	.word	0x080145e8
 8004d5c:	0802c0a8 	.word	0x0802c0a8

08004d60 <DAC_Task>:
	}

}

void DAC_Task( void * pvParameters )
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b086      	sub	sp, #24
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
	u32 Local_DAC_Counter = ZERO_INIT;
 8004d68:	2300      	movs	r3, #0
 8004d6a:	617b      	str	r3, [r7, #20]
	u8 	Local_DAC_BitCounter = ZERO_INIT;
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	74fb      	strb	r3, [r7, #19]
	u32 Copy_u32SignalLength = AUDIO_LENGTH;
 8004d70:	f64d 23c0 	movw	r3, #56000	; 0xdac0
 8004d74:	60fb      	str	r3, [r7, #12]

	for(;;)
	{
		Signal_Stop_Flag = 0;
 8004d76:	4b21      	ldr	r3, [pc, #132]	; (8004dfc <DAC_Task+0x9c>)
 8004d78:	2200      	movs	r2, #0
 8004d7a:	701a      	strb	r2, [r3, #0]
		if(Copy_pu8Signal == NULL){
 8004d7c:	4b20      	ldr	r3, [pc, #128]	; (8004e00 <DAC_Task+0xa0>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d106      	bne.n	8004d92 <DAC_Task+0x32>
			xSemaphoreTake(AudioSignalStart_Semaphore,portMAX_DELAY);
 8004d84:	4b1f      	ldr	r3, [pc, #124]	; (8004e04 <DAC_Task+0xa4>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f04f 31ff 	mov.w	r1, #4294967295
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	f003 f989 	bl	80080a4 <xQueueSemaphoreTake>
		}
		for(Local_DAC_Counter=ZERO_INIT;Local_DAC_Counter<Copy_u32SignalLength;Local_DAC_Counter++)
 8004d92:	2300      	movs	r3, #0
 8004d94:	617b      	str	r3, [r7, #20]
 8004d96:	e029      	b.n	8004dec <DAC_Task+0x8c>
		{
			for(Local_DAC_BitCounter=ZERO_INIT;Local_DAC_BitCounter<R2RDAC_RESOLUTION;Local_DAC_BitCounter++)
 8004d98:	2300      	movs	r3, #0
 8004d9a:	74fb      	strb	r3, [r7, #19]
 8004d9c:	e019      	b.n	8004dd2 <DAC_Task+0x72>
				{
					GPIO_voidSetPinValue
 8004d9e:	7cfb      	ldrb	r3, [r7, #19]
 8004da0:	4a19      	ldr	r2, [pc, #100]	; (8004e08 <DAC_Task+0xa8>)
 8004da2:	4413      	add	r3, r2
 8004da4:	7a18      	ldrb	r0, [r3, #8]
 8004da6:	7cfb      	ldrb	r3, [r7, #19]
 8004da8:	4a17      	ldr	r2, [pc, #92]	; (8004e08 <DAC_Task+0xa8>)
 8004daa:	5cd1      	ldrb	r1, [r2, r3]
					(
						R2RDAC_Config.R2RDAC_Bit_Port[Local_DAC_BitCounter],
						R2RDAC_Config.R2RDAC_Bit_Pin[Local_DAC_BitCounter],
						GET_BIT(Copy_pu8Signal[Local_DAC_Counter],Local_DAC_BitCounter)
 8004dac:	4b14      	ldr	r3, [pc, #80]	; (8004e00 <DAC_Task+0xa0>)
 8004dae:	681a      	ldr	r2, [r3, #0]
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	4413      	add	r3, r2
 8004db4:	781b      	ldrb	r3, [r3, #0]
 8004db6:	461a      	mov	r2, r3
 8004db8:	7cfb      	ldrb	r3, [r7, #19]
 8004dba:	fa42 f303 	asr.w	r3, r2, r3
 8004dbe:	b2db      	uxtb	r3, r3
 8004dc0:	f003 0301 	and.w	r3, r3, #1
 8004dc4:	b2db      	uxtb	r3, r3
					GPIO_voidSetPinValue
 8004dc6:	461a      	mov	r2, r3
 8004dc8:	f001 fb64 	bl	8006494 <GPIO_voidSetPinValue>
			for(Local_DAC_BitCounter=ZERO_INIT;Local_DAC_BitCounter<R2RDAC_RESOLUTION;Local_DAC_BitCounter++)
 8004dcc:	7cfb      	ldrb	r3, [r7, #19]
 8004dce:	3301      	adds	r3, #1
 8004dd0:	74fb      	strb	r3, [r7, #19]
 8004dd2:	7cfb      	ldrb	r3, [r7, #19]
 8004dd4:	2b07      	cmp	r3, #7
 8004dd6:	d9e2      	bls.n	8004d9e <DAC_Task+0x3e>
					);
				}
			if(Signal_Stop_Flag == 1){
 8004dd8:	4b08      	ldr	r3, [pc, #32]	; (8004dfc <DAC_Task+0x9c>)
 8004dda:	781b      	ldrb	r3, [r3, #0]
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	d00a      	beq.n	8004df6 <DAC_Task+0x96>
				break;
			}
			vTaskDelay(20);
 8004de0:	2014      	movs	r0, #20
 8004de2:	f003 fda7 	bl	8008934 <vTaskDelay>
		for(Local_DAC_Counter=ZERO_INIT;Local_DAC_Counter<Copy_u32SignalLength;Local_DAC_Counter++)
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	3301      	adds	r3, #1
 8004dea:	617b      	str	r3, [r7, #20]
 8004dec:	697a      	ldr	r2, [r7, #20]
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	429a      	cmp	r2, r3
 8004df2:	d3d1      	bcc.n	8004d98 <DAC_Task+0x38>
 8004df4:	e7bf      	b.n	8004d76 <DAC_Task+0x16>
				break;
 8004df6:	bf00      	nop
		Signal_Stop_Flag = 0;
 8004df8:	e7bd      	b.n	8004d76 <DAC_Task+0x16>
 8004dfa:	bf00      	nop
 8004dfc:	200000f0 	.word	0x200000f0
 8004e00:	200000ec 	.word	0x200000ec
 8004e04:	200000e4 	.word	0x200000e4
 8004e08:	20000004 	.word	0x20000004

08004e0c <RGBTimerCallback>:
	}
}


void RGBTimerCallback(TimerHandle_t xTimer)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b084      	sub	sp, #16
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
	u8 RGB_Colors[8]=
 8004e14:	4a10      	ldr	r2, [pc, #64]	; (8004e58 <RGBTimerCallback+0x4c>)
 8004e16:	f107 0308 	add.w	r3, r7, #8
 8004e1a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004e1e:	e883 0003 	stmia.w	r3, {r0, r1}
			RGB_WHITE_COLOR ,
			RGB_PURPLE_COLOR,
			RGB_CYAN_COLOR  ,
			RGB_BLACK_COLOR
	};
	RGB_voidSetColor(&RGB_Lcfg, RGB_Colors[RGB_Colors_Counter]);
 8004e22:	4b0e      	ldr	r3, [pc, #56]	; (8004e5c <RGBTimerCallback+0x50>)
 8004e24:	781b      	ldrb	r3, [r3, #0]
 8004e26:	3310      	adds	r3, #16
 8004e28:	443b      	add	r3, r7
 8004e2a:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8004e2e:	4619      	mov	r1, r3
 8004e30:	480b      	ldr	r0, [pc, #44]	; (8004e60 <RGBTimerCallback+0x54>)
 8004e32:	f000 f9eb 	bl	800520c <RGB_voidSetColor>
	RGB_Colors_Counter++;
 8004e36:	4b09      	ldr	r3, [pc, #36]	; (8004e5c <RGBTimerCallback+0x50>)
 8004e38:	781b      	ldrb	r3, [r3, #0]
 8004e3a:	3301      	adds	r3, #1
 8004e3c:	b2da      	uxtb	r2, r3
 8004e3e:	4b07      	ldr	r3, [pc, #28]	; (8004e5c <RGBTimerCallback+0x50>)
 8004e40:	701a      	strb	r2, [r3, #0]
	if(RGB_Colors_Counter == 8){
 8004e42:	4b06      	ldr	r3, [pc, #24]	; (8004e5c <RGBTimerCallback+0x50>)
 8004e44:	781b      	ldrb	r3, [r3, #0]
 8004e46:	2b08      	cmp	r3, #8
 8004e48:	d102      	bne.n	8004e50 <RGBTimerCallback+0x44>
		RGB_Colors_Counter =0;
 8004e4a:	4b04      	ldr	r3, [pc, #16]	; (8004e5c <RGBTimerCallback+0x50>)
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	701a      	strb	r2, [r3, #0]
	}
}
 8004e50:	bf00      	nop
 8004e52:	3710      	adds	r7, #16
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bd80      	pop	{r7, pc}
 8004e58:	0800a5bc 	.word	0x0800a5bc
 8004e5c:	200000e8 	.word	0x200000e8
 8004e60:	20000014 	.word	0x20000014

08004e64 <main>:

int main(void)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b082      	sub	sp, #8
 8004e68:	af02      	add	r7, sp, #8
    /* Loop forever */
	xTaskCreate(
 8004e6a:	4b06      	ldr	r3, [pc, #24]	; (8004e84 <main+0x20>)
 8004e6c:	9301      	str	r3, [sp, #4]
 8004e6e:	2337      	movs	r3, #55	; 0x37
 8004e70:	9300      	str	r3, [sp, #0]
 8004e72:	2300      	movs	r3, #0
 8004e74:	2280      	movs	r2, #128	; 0x80
 8004e76:	4904      	ldr	r1, [pc, #16]	; (8004e88 <main+0x24>)
 8004e78:	4804      	ldr	r0, [pc, #16]	; (8004e8c <main+0x28>)
 8004e7a:	f003 fba5 	bl	80085c8 <xTaskCreate>
			TASK_MAX_PRIORITY,/* Priority at which the task is created. */
			&InitTaskHandle );



	vTaskStartScheduler();
 8004e7e:	f003 fd8d 	bl	800899c <vTaskStartScheduler>

	for(;;){
 8004e82:	e7fe      	b.n	8004e82 <main+0x1e>
 8004e84:	200000c8 	.word	0x200000c8
 8004e88:	0800a5c4 	.word	0x0800a5c4
 8004e8c:	08004a71 	.word	0x08004a71

08004e90 <IR_voidInit>:

/**********************************************************************************************************************
 *  GLOBAL FUNCTIONS
 *********************************************************************************************************************/
void IR_voidInit (IR_Config_t *Copy_IR_Config , pCallBackNotification IR_CallbackNotification)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b084      	sub	sp, #16
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
 8004e98:	6039      	str	r1, [r7, #0]
	MEXTI_CONFIG_t IR_EXTI_Config;
	IR_EXTI_Config.MEXTI_Mode = MEXTI_INTERRUPT_MODE;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	73fb      	strb	r3, [r7, #15]
	IR_EXTI_Config.MEXTI_SenseSignal = Copy_IR_Config->IR_Trigger_Mode;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	789b      	ldrb	r3, [r3, #2]
 8004ea2:	73bb      	strb	r3, [r7, #14]
	IR_EXTI_Config.MEXTI_Line = Copy_IR_Config->IR_Pin;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	785b      	ldrb	r3, [r3, #1]
 8004ea8:	737b      	strb	r3, [r7, #13]
    IR_EXTI_Config.MEXTI_Port = Copy_IR_Config->IR_Port;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	781b      	ldrb	r3, [r3, #0]
 8004eae:	733b      	strb	r3, [r7, #12]
	MEXTI_voidInit(&IR_EXTI_Config,IR_EXTI_Handler);
 8004eb0:	f107 030c 	add.w	r3, r7, #12
 8004eb4:	491a      	ldr	r1, [pc, #104]	; (8004f20 <IR_voidInit+0x90>)
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f000 feec 	bl	8005c94 <MEXTI_voidInit>
	switch (Copy_IR_Config->IR_Port)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	781b      	ldrb	r3, [r3, #0]
 8004ec0:	2b02      	cmp	r3, #2
 8004ec2:	d010      	beq.n	8004ee6 <IR_voidInit+0x56>
 8004ec4:	2b02      	cmp	r3, #2
 8004ec6:	dc13      	bgt.n	8004ef0 <IR_voidInit+0x60>
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d002      	beq.n	8004ed2 <IR_voidInit+0x42>
 8004ecc:	2b01      	cmp	r3, #1
 8004ece:	d005      	beq.n	8004edc <IR_voidInit+0x4c>
	      break;
	    case GPIO_PORTC:
	      RCC_voidEnablePeripheralClock(RCC_AHB,RCC_AHB_GPIOCEN);
	      break;
	    default:
	      break;
 8004ed0:	e00e      	b.n	8004ef0 <IR_voidInit+0x60>
	      RCC_voidEnablePeripheralClock(RCC_AHB,RCC_AHB_GPIOAEN);
 8004ed2:	2100      	movs	r1, #0
 8004ed4:	2000      	movs	r0, #0
 8004ed6:	f001 fc7b 	bl	80067d0 <RCC_voidEnablePeripheralClock>
	      break;
 8004eda:	e00a      	b.n	8004ef2 <IR_voidInit+0x62>
	      RCC_voidEnablePeripheralClock(RCC_AHB,RCC_AHB_GPIOBEN);
 8004edc:	2101      	movs	r1, #1
 8004ede:	2000      	movs	r0, #0
 8004ee0:	f001 fc76 	bl	80067d0 <RCC_voidEnablePeripheralClock>
	      break;
 8004ee4:	e005      	b.n	8004ef2 <IR_voidInit+0x62>
	      RCC_voidEnablePeripheralClock(RCC_AHB,RCC_AHB_GPIOCEN);
 8004ee6:	2102      	movs	r1, #2
 8004ee8:	2000      	movs	r0, #0
 8004eea:	f001 fc71 	bl	80067d0 <RCC_voidEnablePeripheralClock>
	      break;
 8004eee:	e000      	b.n	8004ef2 <IR_voidInit+0x62>
	      break;
 8004ef0:	bf00      	nop
	  }
	  GPIO_voidSetPinMode(Copy_IR_Config->IR_Port,Copy_IR_Config->IR_Pin,GPIO_INPUT_PIN_MODE);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	7818      	ldrb	r0, [r3, #0]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	785b      	ldrb	r3, [r3, #1]
 8004efa:	2200      	movs	r2, #0
 8004efc:	4619      	mov	r1, r3
 8004efe:	f001 f91b 	bl	8006138 <GPIO_voidSetPinMode>
	  GPIO_voidSetPinPullUpDownResistor(Copy_IR_Config->IR_Port,Copy_IR_Config->IR_Pin,GPIO_INPUT_PIN_FLOAT);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	7818      	ldrb	r0, [r3, #0]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	785b      	ldrb	r3, [r3, #1]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	4619      	mov	r1, r3
 8004f0e:	f001 fb21 	bl	8006554 <GPIO_voidSetPinPullUpDownResistor>
	  IR_callback = IR_CallbackNotification;
 8004f12:	4a04      	ldr	r2, [pc, #16]	; (8004f24 <IR_voidInit+0x94>)
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	6013      	str	r3, [r2, #0]
}
 8004f18:	bf00      	nop
 8004f1a:	3710      	adds	r7, #16
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}
 8004f20:	08004f41 	.word	0x08004f41
 8004f24:	200000f4 	.word	0x200000f4

08004f28 <IR_u32GetReceivedData>:
	}
	return Local_IR_ReceivedFlag;
}

u32  IR_u32GetReceivedData(void)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	af00      	add	r7, sp, #0
	return IR_ReceivedData;
 8004f2c:	4b03      	ldr	r3, [pc, #12]	; (8004f3c <IR_u32GetReceivedData+0x14>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	46bd      	mov	sp, r7
 8004f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f38:	4770      	bx	lr
 8004f3a:	bf00      	nop
 8004f3c:	200000f8 	.word	0x200000f8

08004f40 <IR_EXTI_Handler>:

static void IR_EXTI_Handler()
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b082      	sub	sp, #8
 8004f44:	af00      	add	r7, sp, #0
	static u8 IR_Status_Flag = IR_START_SIGNAL_STARTED;
	static s8 IR_BitCounter = IR_BIT_COUNT_INIT;
	u32 IR_ElapsedTime = ZERO_INIT;
 8004f46:	2300      	movs	r3, #0
 8004f48:	607b      	str	r3, [r7, #4]
	if(IR_Status_Flag == IR_START_SIGNAL_STARTED)
 8004f4a:	4b4d      	ldr	r3, [pc, #308]	; (8005080 <IR_EXTI_Handler+0x140>)
 8004f4c:	781b      	ldrb	r3, [r3, #0]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d108      	bne.n	8004f64 <IR_EXTI_Handler+0x24>
	{
		IR_Status_Flag = IR_START_SIGNAL_ENDED;
 8004f52:	4b4b      	ldr	r3, [pc, #300]	; (8005080 <IR_EXTI_Handler+0x140>)
 8004f54:	2201      	movs	r2, #1
 8004f56:	701a      	strb	r2, [r3, #0]
		TIM_SetPreload(&TIM2_Cfg,IR_START_SIGNAL_RANGE_HIGH);
 8004f58:	f643 2198 	movw	r1, #15000	; 0x3a98
 8004f5c:	4849      	ldr	r0, [pc, #292]	; (8005084 <IR_EXTI_Handler+0x144>)
 8004f5e:	f002 fa05 	bl	800736c <TIM_SetPreload>
			IR_ReceivedFlag = IR_RECEIVED_DATA_STATUS;
		}

	}

}
 8004f62:	e089      	b.n	8005078 <IR_EXTI_Handler+0x138>
	else if (IR_Status_Flag == IR_START_SIGNAL_ENDED)
 8004f64:	4b46      	ldr	r3, [pc, #280]	; (8005080 <IR_EXTI_Handler+0x140>)
 8004f66:	781b      	ldrb	r3, [r3, #0]
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	d124      	bne.n	8004fb6 <IR_EXTI_Handler+0x76>
		IR_ElapsedTime = TIM_GetElapsedTime(&TIM2_Cfg);
 8004f6c:	4845      	ldr	r0, [pc, #276]	; (8005084 <IR_EXTI_Handler+0x144>)
 8004f6e:	f002 f957 	bl	8007220 <TIM_GetElapsedTime>
 8004f72:	6078      	str	r0, [r7, #4]
		if(IR_ElapsedTime >= IR_START_SIGNAL_RANGE_LOW && IR_ElapsedTime <= IR_START_SIGNAL_RANGE_HIGH)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	f243 22c7 	movw	r2, #12999	; 0x32c7
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d908      	bls.n	8004f90 <IR_EXTI_Handler+0x50>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	f643 2298 	movw	r2, #15000	; 0x3a98
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d803      	bhi.n	8004f90 <IR_EXTI_Handler+0x50>
			IR_Status_Flag = IR_GETTING_DATA;
 8004f88:	4b3d      	ldr	r3, [pc, #244]	; (8005080 <IR_EXTI_Handler+0x140>)
 8004f8a:	2202      	movs	r2, #2
 8004f8c:	701a      	strb	r2, [r3, #0]
 8004f8e:	e00c      	b.n	8004faa <IR_EXTI_Handler+0x6a>
		else if(IR_ElapsedTime >=IR_REPEAT_SIGNAL_RANGE_LOW  && IR_ElapsedTime <= IR_REPEAT_SIGNAL_RANGE_HIGH){
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	f642 22f7 	movw	r2, #10999	; 0x2af7
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d907      	bls.n	8004faa <IR_EXTI_Handler+0x6a>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d802      	bhi.n	8004faa <IR_EXTI_Handler+0x6a>
			IR_callback();
 8004fa4:	4b38      	ldr	r3, [pc, #224]	; (8005088 <IR_EXTI_Handler+0x148>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4798      	blx	r3
		TIM_SetPreload(&TIM2_Cfg,IR_START_SIGNAL_RANGE_HIGH);
 8004faa:	f643 2198 	movw	r1, #15000	; 0x3a98
 8004fae:	4835      	ldr	r0, [pc, #212]	; (8005084 <IR_EXTI_Handler+0x144>)
 8004fb0:	f002 f9dc 	bl	800736c <TIM_SetPreload>
}
 8004fb4:	e060      	b.n	8005078 <IR_EXTI_Handler+0x138>
	else if (IR_Status_Flag == IR_GETTING_DATA)
 8004fb6:	4b32      	ldr	r3, [pc, #200]	; (8005080 <IR_EXTI_Handler+0x140>)
 8004fb8:	781b      	ldrb	r3, [r3, #0]
 8004fba:	2b02      	cmp	r3, #2
 8004fbc:	d147      	bne.n	800504e <IR_EXTI_Handler+0x10e>
		IR_ElapsedTime = TIM_GetElapsedTime(&TIM2_Cfg);
 8004fbe:	4831      	ldr	r0, [pc, #196]	; (8005084 <IR_EXTI_Handler+0x144>)
 8004fc0:	f002 f92e 	bl	8007220 <TIM_GetElapsedTime>
 8004fc4:	6078      	str	r0, [r7, #4]
		if(IR_ElapsedTime >= IR_LOW_LEVEL_SIGNAL_RANGE_LOW && IR_ElapsedTime <= IR_LOW_LEVEL_SIGNAL_RANGE_HIGH)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004fcc:	d312      	bcc.n	8004ff4 <IR_EXTI_Handler+0xb4>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d80d      	bhi.n	8004ff4 <IR_EXTI_Handler+0xb4>
			CLR_BIT(IR_ReceivedData,IR_BitCounter);
 8004fd8:	4b2c      	ldr	r3, [pc, #176]	; (800508c <IR_EXTI_Handler+0x14c>)
 8004fda:	f993 3000 	ldrsb.w	r3, [r3]
 8004fde:	461a      	mov	r2, r3
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	4093      	lsls	r3, r2
 8004fe4:	43db      	mvns	r3, r3
 8004fe6:	461a      	mov	r2, r3
 8004fe8:	4b29      	ldr	r3, [pc, #164]	; (8005090 <IR_EXTI_Handler+0x150>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4013      	ands	r3, r2
 8004fee:	4a28      	ldr	r2, [pc, #160]	; (8005090 <IR_EXTI_Handler+0x150>)
 8004ff0:	6013      	str	r3, [r2, #0]
 8004ff2:	e014      	b.n	800501e <IR_EXTI_Handler+0xde>
		else if (IR_ElapsedTime >= IR_HIGH_LEVEL_SIGNAL_RANGE_LOW && IR_ElapsedTime <= IR_HIGH_LEVEL_SIGNAL_RANGE_HIGH)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004ffa:	d310      	bcc.n	800501e <IR_EXTI_Handler+0xde>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8005002:	4293      	cmp	r3, r2
 8005004:	d80b      	bhi.n	800501e <IR_EXTI_Handler+0xde>
			SET_BIT(IR_ReceivedData,IR_BitCounter);
 8005006:	4b21      	ldr	r3, [pc, #132]	; (800508c <IR_EXTI_Handler+0x14c>)
 8005008:	f993 3000 	ldrsb.w	r3, [r3]
 800500c:	461a      	mov	r2, r3
 800500e:	2301      	movs	r3, #1
 8005010:	4093      	lsls	r3, r2
 8005012:	461a      	mov	r2, r3
 8005014:	4b1e      	ldr	r3, [pc, #120]	; (8005090 <IR_EXTI_Handler+0x150>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4313      	orrs	r3, r2
 800501a:	4a1d      	ldr	r2, [pc, #116]	; (8005090 <IR_EXTI_Handler+0x150>)
 800501c:	6013      	str	r3, [r2, #0]
		IR_BitCounter--;
 800501e:	4b1b      	ldr	r3, [pc, #108]	; (800508c <IR_EXTI_Handler+0x14c>)
 8005020:	f993 3000 	ldrsb.w	r3, [r3]
 8005024:	b2db      	uxtb	r3, r3
 8005026:	3b01      	subs	r3, #1
 8005028:	b2db      	uxtb	r3, r3
 800502a:	b25a      	sxtb	r2, r3
 800502c:	4b17      	ldr	r3, [pc, #92]	; (800508c <IR_EXTI_Handler+0x14c>)
 800502e:	701a      	strb	r2, [r3, #0]
		if(IR_BitCounter == IR_BIT_COUNT_END) IR_Status_Flag = IR_END_OF_FRAME_DETECTED;
 8005030:	4b16      	ldr	r3, [pc, #88]	; (800508c <IR_EXTI_Handler+0x14c>)
 8005032:	f993 3000 	ldrsb.w	r3, [r3]
 8005036:	f1b3 3fff 	cmp.w	r3, #4294967295
 800503a:	d102      	bne.n	8005042 <IR_EXTI_Handler+0x102>
 800503c:	4b10      	ldr	r3, [pc, #64]	; (8005080 <IR_EXTI_Handler+0x140>)
 800503e:	2205      	movs	r2, #5
 8005040:	701a      	strb	r2, [r3, #0]
		TIM_SetPreload(&TIM2_Cfg,IR_START_SIGNAL_RANGE_HIGH);
 8005042:	f643 2198 	movw	r1, #15000	; 0x3a98
 8005046:	480f      	ldr	r0, [pc, #60]	; (8005084 <IR_EXTI_Handler+0x144>)
 8005048:	f002 f990 	bl	800736c <TIM_SetPreload>
}
 800504c:	e014      	b.n	8005078 <IR_EXTI_Handler+0x138>
	else if(IR_Status_Flag == IR_END_OF_FRAME_DETECTED)
 800504e:	4b0c      	ldr	r3, [pc, #48]	; (8005080 <IR_EXTI_Handler+0x140>)
 8005050:	781b      	ldrb	r3, [r3, #0]
 8005052:	2b05      	cmp	r3, #5
 8005054:	d110      	bne.n	8005078 <IR_EXTI_Handler+0x138>
		IR_BitCounter = IR_BIT_COUNT_INIT;
 8005056:	4b0d      	ldr	r3, [pc, #52]	; (800508c <IR_EXTI_Handler+0x14c>)
 8005058:	221f      	movs	r2, #31
 800505a:	701a      	strb	r2, [r3, #0]
		IR_Status_Flag =  IR_START_SIGNAL_STARTED;
 800505c:	4b08      	ldr	r3, [pc, #32]	; (8005080 <IR_EXTI_Handler+0x140>)
 800505e:	2200      	movs	r2, #0
 8005060:	701a      	strb	r2, [r3, #0]
		if(IR_callback != NULL){
 8005062:	4b09      	ldr	r3, [pc, #36]	; (8005088 <IR_EXTI_Handler+0x148>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d003      	beq.n	8005072 <IR_EXTI_Handler+0x132>
			IR_callback();
 800506a:	4b07      	ldr	r3, [pc, #28]	; (8005088 <IR_EXTI_Handler+0x148>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4798      	blx	r3
}
 8005070:	e002      	b.n	8005078 <IR_EXTI_Handler+0x138>
			IR_ReceivedFlag = IR_RECEIVED_DATA_STATUS;
 8005072:	4b08      	ldr	r3, [pc, #32]	; (8005094 <IR_EXTI_Handler+0x154>)
 8005074:	2201      	movs	r2, #1
 8005076:	701a      	strb	r2, [r3, #0]
}
 8005078:	bf00      	nop
 800507a:	3708      	adds	r7, #8
 800507c:	46bd      	mov	sp, r7
 800507e:	bd80      	pop	{r7, pc}
 8005080:	200000fd 	.word	0x200000fd
 8005084:	2000008c 	.word	0x2000008c
 8005088:	200000f4 	.word	0x200000f4
 800508c:	20000003 	.word	0x20000003
 8005090:	200000f8 	.word	0x200000f8
 8005094:	200000fc 	.word	0x200000fc

08005098 <R2RDAC_Bit_init>:

/**********************************************************************************************************************
 *  LOCAL FUNCTIONS
 *********************************************************************************************************************/
static void R2RDAC_Bit_init(port_index_t R2RDAC_BitPort, pin_index_t R2RDAC_BitPin)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b082      	sub	sp, #8
 800509c:	af00      	add	r7, sp, #0
 800509e:	4603      	mov	r3, r0
 80050a0:	460a      	mov	r2, r1
 80050a2:	71fb      	strb	r3, [r7, #7]
 80050a4:	4613      	mov	r3, r2
 80050a6:	71bb      	strb	r3, [r7, #6]
	switch (R2RDAC_BitPort)
 80050a8:	79fb      	ldrb	r3, [r7, #7]
 80050aa:	2b02      	cmp	r3, #2
 80050ac:	d010      	beq.n	80050d0 <R2RDAC_Bit_init+0x38>
 80050ae:	2b02      	cmp	r3, #2
 80050b0:	dc13      	bgt.n	80050da <R2RDAC_Bit_init+0x42>
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d002      	beq.n	80050bc <R2RDAC_Bit_init+0x24>
 80050b6:	2b01      	cmp	r3, #1
 80050b8:	d005      	beq.n	80050c6 <R2RDAC_Bit_init+0x2e>
	      break;
	    case GPIO_PORTC:
	      RCC_voidEnablePeripheralClock(RCC_AHB,RCC_AHB_GPIOCEN);
	      break;
	    default:
	      break;
 80050ba:	e00e      	b.n	80050da <R2RDAC_Bit_init+0x42>
	      RCC_voidEnablePeripheralClock(RCC_AHB,RCC_AHB_GPIOAEN);
 80050bc:	2100      	movs	r1, #0
 80050be:	2000      	movs	r0, #0
 80050c0:	f001 fb86 	bl	80067d0 <RCC_voidEnablePeripheralClock>
	      break;
 80050c4:	e00a      	b.n	80050dc <R2RDAC_Bit_init+0x44>
	      RCC_voidEnablePeripheralClock(RCC_AHB,RCC_AHB_GPIOBEN);
 80050c6:	2101      	movs	r1, #1
 80050c8:	2000      	movs	r0, #0
 80050ca:	f001 fb81 	bl	80067d0 <RCC_voidEnablePeripheralClock>
	      break;
 80050ce:	e005      	b.n	80050dc <R2RDAC_Bit_init+0x44>
	      RCC_voidEnablePeripheralClock(RCC_AHB,RCC_AHB_GPIOCEN);
 80050d0:	2102      	movs	r1, #2
 80050d2:	2000      	movs	r0, #0
 80050d4:	f001 fb7c 	bl	80067d0 <RCC_voidEnablePeripheralClock>
	      break;
 80050d8:	e000      	b.n	80050dc <R2RDAC_Bit_init+0x44>
	      break;
 80050da:	bf00      	nop
	  }
	  GPIO_voidSetPinMode(R2RDAC_BitPort,R2RDAC_BitPin,GPIO_OUTPUT_PIN_MODE);
 80050dc:	79b9      	ldrb	r1, [r7, #6]
 80050de:	79fb      	ldrb	r3, [r7, #7]
 80050e0:	2201      	movs	r2, #1
 80050e2:	4618      	mov	r0, r3
 80050e4:	f001 f828 	bl	8006138 <GPIO_voidSetPinMode>
	  GPIO_voidSetPinOutputMode(R2RDAC_BitPort,R2RDAC_BitPin,GPIO_OUTPUT_PIN_PUSH_PULL);
 80050e8:	79b9      	ldrb	r1, [r7, #6]
 80050ea:	79fb      	ldrb	r3, [r7, #7]
 80050ec:	2200      	movs	r2, #0
 80050ee:	4618      	mov	r0, r3
 80050f0:	f001 f87c 	bl	80061ec <GPIO_voidSetPinOutputMode>
	  GPIO_voidSetPinOutputSpeed(R2RDAC_BitPort,R2RDAC_BitPin,GPIO_OUTPUT_PIN_LOW_SPEED);
 80050f4:	79b9      	ldrb	r1, [r7, #6]
 80050f6:	79fb      	ldrb	r3, [r7, #7]
 80050f8:	2200      	movs	r2, #0
 80050fa:	4618      	mov	r0, r3
 80050fc:	f001 f970 	bl	80063e0 <GPIO_voidSetPinOutputSpeed>
	  GPIO_voidSetPinValue(R2RDAC_BitPort,R2RDAC_BitPin,GPIO_LOW);
 8005100:	79b9      	ldrb	r1, [r7, #6]
 8005102:	79fb      	ldrb	r3, [r7, #7]
 8005104:	2200      	movs	r2, #0
 8005106:	4618      	mov	r0, r3
 8005108:	f001 f9c4 	bl	8006494 <GPIO_voidSetPinValue>
}
 800510c:	bf00      	nop
 800510e:	3708      	adds	r7, #8
 8005110:	46bd      	mov	sp, r7
 8005112:	bd80      	pop	{r7, pc}

08005114 <R2RDAC_voidInit>:
/**********************************************************************************************************************
 *  GLOBAL FUNCTIONS
 *********************************************************************************************************************/
void R2RDAC_voidInit(R2RDAC_config_t* R2RDAC_Config)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b084      	sub	sp, #16
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
	u8 	Local_DAC_BitCounter = ZERO_INIT;
 800511c:	2300      	movs	r3, #0
 800511e:	73fb      	strb	r3, [r7, #15]
	for(Local_DAC_BitCounter = ZERO_INIT;Local_DAC_BitCounter<R2RDAC_RESOLUTION;Local_DAC_BitCounter++)
 8005120:	2300      	movs	r3, #0
 8005122:	73fb      	strb	r3, [r7, #15]
 8005124:	e00c      	b.n	8005140 <R2RDAC_voidInit+0x2c>
	{
		R2RDAC_Bit_init(R2RDAC_Config->R2RDAC_Bit_Port[Local_DAC_BitCounter],R2RDAC_Config->R2RDAC_Bit_Pin[Local_DAC_BitCounter]);
 8005126:	7bfb      	ldrb	r3, [r7, #15]
 8005128:	687a      	ldr	r2, [r7, #4]
 800512a:	4413      	add	r3, r2
 800512c:	7a18      	ldrb	r0, [r3, #8]
 800512e:	7bfb      	ldrb	r3, [r7, #15]
 8005130:	687a      	ldr	r2, [r7, #4]
 8005132:	5cd3      	ldrb	r3, [r2, r3]
 8005134:	4619      	mov	r1, r3
 8005136:	f7ff ffaf 	bl	8005098 <R2RDAC_Bit_init>
	for(Local_DAC_BitCounter = ZERO_INIT;Local_DAC_BitCounter<R2RDAC_RESOLUTION;Local_DAC_BitCounter++)
 800513a:	7bfb      	ldrb	r3, [r7, #15]
 800513c:	3301      	adds	r3, #1
 800513e:	73fb      	strb	r3, [r7, #15]
 8005140:	7bfb      	ldrb	r3, [r7, #15]
 8005142:	2b07      	cmp	r3, #7
 8005144:	d9ef      	bls.n	8005126 <R2RDAC_voidInit+0x12>
	}

}
 8005146:	bf00      	nop
 8005148:	bf00      	nop
 800514a:	3710      	adds	r7, #16
 800514c:	46bd      	mov	sp, r7
 800514e:	bd80      	pop	{r7, pc}

08005150 <RGB_init_led>:

/**********************************************************************************************************************
 *  LOCAL FUNCTIONS
 *********************************************************************************************************************/
static void RGB_init_led(port_index_t RGB_LedPort, pin_index_t RGB_LedPin)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b082      	sub	sp, #8
 8005154:	af00      	add	r7, sp, #0
 8005156:	4603      	mov	r3, r0
 8005158:	460a      	mov	r2, r1
 800515a:	71fb      	strb	r3, [r7, #7]
 800515c:	4613      	mov	r3, r2
 800515e:	71bb      	strb	r3, [r7, #6]
	switch (RGB_LedPort) {
 8005160:	79fb      	ldrb	r3, [r7, #7]
 8005162:	2b02      	cmp	r3, #2
 8005164:	d010      	beq.n	8005188 <RGB_init_led+0x38>
 8005166:	2b02      	cmp	r3, #2
 8005168:	dc13      	bgt.n	8005192 <RGB_init_led+0x42>
 800516a:	2b00      	cmp	r3, #0
 800516c:	d002      	beq.n	8005174 <RGB_init_led+0x24>
 800516e:	2b01      	cmp	r3, #1
 8005170:	d005      	beq.n	800517e <RGB_init_led+0x2e>
	      break;
	    case GPIO_PORTC:
	      RCC_voidEnablePeripheralClock(RCC_AHB,RCC_AHB_GPIOCEN);
	      break;
	    default:
	      break;
 8005172:	e00e      	b.n	8005192 <RGB_init_led+0x42>
	      RCC_voidEnablePeripheralClock(RCC_AHB,RCC_AHB_GPIOAEN);
 8005174:	2100      	movs	r1, #0
 8005176:	2000      	movs	r0, #0
 8005178:	f001 fb2a 	bl	80067d0 <RCC_voidEnablePeripheralClock>
	      break;
 800517c:	e00a      	b.n	8005194 <RGB_init_led+0x44>
	      RCC_voidEnablePeripheralClock(RCC_AHB,RCC_AHB_GPIOBEN);
 800517e:	2101      	movs	r1, #1
 8005180:	2000      	movs	r0, #0
 8005182:	f001 fb25 	bl	80067d0 <RCC_voidEnablePeripheralClock>
	      break;
 8005186:	e005      	b.n	8005194 <RGB_init_led+0x44>
	      RCC_voidEnablePeripheralClock(RCC_AHB,RCC_AHB_GPIOCEN);
 8005188:	2102      	movs	r1, #2
 800518a:	2000      	movs	r0, #0
 800518c:	f001 fb20 	bl	80067d0 <RCC_voidEnablePeripheralClock>
	      break;
 8005190:	e000      	b.n	8005194 <RGB_init_led+0x44>
	      break;
 8005192:	bf00      	nop
	  }
	  GPIO_voidSetPinMode(RGB_LedPort,RGB_LedPin,GPIO_OUTPUT_PIN_MODE);
 8005194:	79b9      	ldrb	r1, [r7, #6]
 8005196:	79fb      	ldrb	r3, [r7, #7]
 8005198:	2201      	movs	r2, #1
 800519a:	4618      	mov	r0, r3
 800519c:	f000 ffcc 	bl	8006138 <GPIO_voidSetPinMode>
	  GPIO_voidSetPinOutputMode(RGB_LedPort,RGB_LedPin,GPIO_OUTPUT_PIN_PUSH_PULL);
 80051a0:	79b9      	ldrb	r1, [r7, #6]
 80051a2:	79fb      	ldrb	r3, [r7, #7]
 80051a4:	2200      	movs	r2, #0
 80051a6:	4618      	mov	r0, r3
 80051a8:	f001 f820 	bl	80061ec <GPIO_voidSetPinOutputMode>
	  GPIO_voidSetPinOutputSpeed(RGB_LedPort,RGB_LedPin,GPIO_OUTPUT_PIN_LOW_SPEED);
 80051ac:	79b9      	ldrb	r1, [r7, #6]
 80051ae:	79fb      	ldrb	r3, [r7, #7]
 80051b0:	2200      	movs	r2, #0
 80051b2:	4618      	mov	r0, r3
 80051b4:	f001 f914 	bl	80063e0 <GPIO_voidSetPinOutputSpeed>
	  GPIO_voidSetPinValue(RGB_LedPort,RGB_LedPin,GPIO_HIGH);
 80051b8:	79b9      	ldrb	r1, [r7, #6]
 80051ba:	79fb      	ldrb	r3, [r7, #7]
 80051bc:	2201      	movs	r2, #1
 80051be:	4618      	mov	r0, r3
 80051c0:	f001 f968 	bl	8006494 <GPIO_voidSetPinValue>
}
 80051c4:	bf00      	nop
 80051c6:	3708      	adds	r7, #8
 80051c8:	46bd      	mov	sp, r7
 80051ca:	bd80      	pop	{r7, pc}

080051cc <RGB_voidInit>:
/**********************************************************************************************************************
 *  GLOBAL FUNCTIONS
 *********************************************************************************************************************/

void RGB_voidInit(RGB_Config_t* REF_RGBObj)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b082      	sub	sp, #8
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
	RGB_init_led(REF_RGBObj->RGB_Red_Port, REF_RGBObj->RGB_Red_Pin);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	785a      	ldrb	r2, [r3, #1]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	781b      	ldrb	r3, [r3, #0]
 80051dc:	4619      	mov	r1, r3
 80051de:	4610      	mov	r0, r2
 80051e0:	f7ff ffb6 	bl	8005150 <RGB_init_led>
	RGB_init_led(REF_RGBObj->RGB_Green_Port, REF_RGBObj->RGB_Green_Pin);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	791a      	ldrb	r2, [r3, #4]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	78db      	ldrb	r3, [r3, #3]
 80051ec:	4619      	mov	r1, r3
 80051ee:	4610      	mov	r0, r2
 80051f0:	f7ff ffae 	bl	8005150 <RGB_init_led>
	RGB_init_led(REF_RGBObj->RGB_Blue_Port, REF_RGBObj->RGB_Blue_Pin);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	79da      	ldrb	r2, [r3, #7]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	799b      	ldrb	r3, [r3, #6]
 80051fc:	4619      	mov	r1, r3
 80051fe:	4610      	mov	r0, r2
 8005200:	f7ff ffa6 	bl	8005150 <RGB_init_led>
}
 8005204:	bf00      	nop
 8005206:	3708      	adds	r7, #8
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}

0800520c <RGB_voidSetColor>:
void RGB_voidSetColor(RGB_Config_t* REF_RGBObj, u8 RGB_color)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b082      	sub	sp, #8
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
 8005214:	460b      	mov	r3, r1
 8005216:	70fb      	strb	r3, [r7, #3]
	GPIO_voidSetPinValue(REF_RGBObj->RGB_Red_Port, REF_RGBObj->RGB_Red_Pin, !(RGB_color>>2 & 0x01));
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	7858      	ldrb	r0, [r3, #1]
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	7819      	ldrb	r1, [r3, #0]
 8005220:	78fb      	ldrb	r3, [r7, #3]
 8005222:	089b      	lsrs	r3, r3, #2
 8005224:	b2db      	uxtb	r3, r3
 8005226:	f003 0301 	and.w	r3, r3, #1
 800522a:	2b00      	cmp	r3, #0
 800522c:	bf0c      	ite	eq
 800522e:	2301      	moveq	r3, #1
 8005230:	2300      	movne	r3, #0
 8005232:	b2db      	uxtb	r3, r3
 8005234:	461a      	mov	r2, r3
 8005236:	f001 f92d 	bl	8006494 <GPIO_voidSetPinValue>
	REF_RGBObj->RGB_Red_State = !(RGB_color>>2 & 0x01);
 800523a:	78fb      	ldrb	r3, [r7, #3]
 800523c:	089b      	lsrs	r3, r3, #2
 800523e:	b2db      	uxtb	r3, r3
 8005240:	f003 0301 	and.w	r3, r3, #1
 8005244:	2b00      	cmp	r3, #0
 8005246:	bf0c      	ite	eq
 8005248:	2301      	moveq	r3, #1
 800524a:	2300      	movne	r3, #0
 800524c:	b2db      	uxtb	r3, r3
 800524e:	461a      	mov	r2, r3
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	709a      	strb	r2, [r3, #2]
	GPIO_voidSetPinValue(REF_RGBObj->RGB_Green_Port, REF_RGBObj->RGB_Green_Pin, !(RGB_color>>1 & 0x01));
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	7918      	ldrb	r0, [r3, #4]
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	78d9      	ldrb	r1, [r3, #3]
 800525c:	78fb      	ldrb	r3, [r7, #3]
 800525e:	085b      	lsrs	r3, r3, #1
 8005260:	b2db      	uxtb	r3, r3
 8005262:	f003 0301 	and.w	r3, r3, #1
 8005266:	2b00      	cmp	r3, #0
 8005268:	bf0c      	ite	eq
 800526a:	2301      	moveq	r3, #1
 800526c:	2300      	movne	r3, #0
 800526e:	b2db      	uxtb	r3, r3
 8005270:	461a      	mov	r2, r3
 8005272:	f001 f90f 	bl	8006494 <GPIO_voidSetPinValue>
	REF_RGBObj->RGB_Green_State = !(RGB_color>>1 & 0x01);
 8005276:	78fb      	ldrb	r3, [r7, #3]
 8005278:	085b      	lsrs	r3, r3, #1
 800527a:	b2db      	uxtb	r3, r3
 800527c:	f003 0301 	and.w	r3, r3, #1
 8005280:	2b00      	cmp	r3, #0
 8005282:	bf0c      	ite	eq
 8005284:	2301      	moveq	r3, #1
 8005286:	2300      	movne	r3, #0
 8005288:	b2db      	uxtb	r3, r3
 800528a:	461a      	mov	r2, r3
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	715a      	strb	r2, [r3, #5]
	GPIO_voidSetPinValue(REF_RGBObj->RGB_Blue_Port, REF_RGBObj->RGB_Blue_Pin, !(RGB_color>>0 & 0x01));
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	79d8      	ldrb	r0, [r3, #7]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	7999      	ldrb	r1, [r3, #6]
 8005298:	78fb      	ldrb	r3, [r7, #3]
 800529a:	f003 0301 	and.w	r3, r3, #1
 800529e:	2b00      	cmp	r3, #0
 80052a0:	bf0c      	ite	eq
 80052a2:	2301      	moveq	r3, #1
 80052a4:	2300      	movne	r3, #0
 80052a6:	b2db      	uxtb	r3, r3
 80052a8:	461a      	mov	r2, r3
 80052aa:	f001 f8f3 	bl	8006494 <GPIO_voidSetPinValue>
	REF_RGBObj->RGB_Blue_State = !(RGB_color>>0 & 0x01);
 80052ae:	78fb      	ldrb	r3, [r7, #3]
 80052b0:	f003 0301 	and.w	r3, r3, #1
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	bf0c      	ite	eq
 80052b8:	2301      	moveq	r3, #1
 80052ba:	2300      	movne	r3, #0
 80052bc:	b2db      	uxtb	r3, r3
 80052be:	461a      	mov	r2, r3
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	721a      	strb	r2, [r3, #8]
}
 80052c4:	bf00      	nop
 80052c6:	3708      	adds	r7, #8
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bd80      	pop	{r7, pc}

080052cc <TFT_GPIO_PinsInit>:

/**********************************************************************************************************************
 *  LOCAL FUNCTIONS
 *********************************************************************************************************************/
static void TFT_GPIO_PinsInit(port_index_t port, pin_index_t pin)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b082      	sub	sp, #8
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	4603      	mov	r3, r0
 80052d4:	460a      	mov	r2, r1
 80052d6:	71fb      	strb	r3, [r7, #7]
 80052d8:	4613      	mov	r3, r2
 80052da:	71bb      	strb	r3, [r7, #6]
	switch (port)
 80052dc:	79fb      	ldrb	r3, [r7, #7]
 80052de:	2b02      	cmp	r3, #2
 80052e0:	d010      	beq.n	8005304 <TFT_GPIO_PinsInit+0x38>
 80052e2:	2b02      	cmp	r3, #2
 80052e4:	dc13      	bgt.n	800530e <TFT_GPIO_PinsInit+0x42>
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d002      	beq.n	80052f0 <TFT_GPIO_PinsInit+0x24>
 80052ea:	2b01      	cmp	r3, #1
 80052ec:	d005      	beq.n	80052fa <TFT_GPIO_PinsInit+0x2e>
			      break;
			    case GPIO_PORTC:
			      RCC_voidEnablePeripheralClock(RCC_AHB,RCC_AHB_GPIOCEN);
			      break;
			    default:
			      break;
 80052ee:	e00e      	b.n	800530e <TFT_GPIO_PinsInit+0x42>
			      RCC_voidEnablePeripheralClock(RCC_AHB,RCC_AHB_GPIOAEN);
 80052f0:	2100      	movs	r1, #0
 80052f2:	2000      	movs	r0, #0
 80052f4:	f001 fa6c 	bl	80067d0 <RCC_voidEnablePeripheralClock>
			      break;
 80052f8:	e00a      	b.n	8005310 <TFT_GPIO_PinsInit+0x44>
			      RCC_voidEnablePeripheralClock(RCC_AHB,RCC_AHB_GPIOBEN);
 80052fa:	2101      	movs	r1, #1
 80052fc:	2000      	movs	r0, #0
 80052fe:	f001 fa67 	bl	80067d0 <RCC_voidEnablePeripheralClock>
			      break;
 8005302:	e005      	b.n	8005310 <TFT_GPIO_PinsInit+0x44>
			      RCC_voidEnablePeripheralClock(RCC_AHB,RCC_AHB_GPIOCEN);
 8005304:	2102      	movs	r1, #2
 8005306:	2000      	movs	r0, #0
 8005308:	f001 fa62 	bl	80067d0 <RCC_voidEnablePeripheralClock>
			      break;
 800530c:	e000      	b.n	8005310 <TFT_GPIO_PinsInit+0x44>
			      break;
 800530e:	bf00      	nop
			  }
	GPIO_voidSetPinMode(port,pin,GPIO_OUTPUT_PIN_MODE);
 8005310:	79b9      	ldrb	r1, [r7, #6]
 8005312:	79fb      	ldrb	r3, [r7, #7]
 8005314:	2201      	movs	r2, #1
 8005316:	4618      	mov	r0, r3
 8005318:	f000 ff0e 	bl	8006138 <GPIO_voidSetPinMode>
}
 800531c:	bf00      	nop
 800531e:	3708      	adds	r7, #8
 8005320:	46bd      	mov	sp, r7
 8005322:	bd80      	pop	{r7, pc}

08005324 <TFT_ResetSequence>:

static void TFT_ResetSequence(TFT_t* TFT_Config)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b088      	sub	sp, #32
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
	GPIO_voidSetPinValue(TFT_Config->TFT_RESET_Port,TFT_Config->TFT_RESET_Pin, GPIO_HIGH);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005338:	2201      	movs	r2, #1
 800533a:	4619      	mov	r1, r3
 800533c:	f001 f8aa 	bl	8006494 <GPIO_voidSetPinValue>
	Delay_us(100);
 8005340:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
 8005344:	61fb      	str	r3, [r7, #28]
 8005346:	e002      	b.n	800534e <TFT_ResetSequence+0x2a>
 8005348:	69fb      	ldr	r3, [r7, #28]
 800534a:	3b01      	subs	r3, #1
 800534c:	61fb      	str	r3, [r7, #28]
 800534e:	69fb      	ldr	r3, [r7, #28]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d1f9      	bne.n	8005348 <TFT_ResetSequence+0x24>
	GPIO_voidSetPinValue(TFT_Config->TFT_RESET_Port,TFT_Config->TFT_RESET_Pin, GPIO_LOW);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005360:	2200      	movs	r2, #0
 8005362:	4619      	mov	r1, r3
 8005364:	f001 f896 	bl	8006494 <GPIO_voidSetPinValue>
	Delay_us(1);
 8005368:	2304      	movs	r3, #4
 800536a:	61bb      	str	r3, [r7, #24]
 800536c:	e002      	b.n	8005374 <TFT_ResetSequence+0x50>
 800536e:	69bb      	ldr	r3, [r7, #24]
 8005370:	3b01      	subs	r3, #1
 8005372:	61bb      	str	r3, [r7, #24]
 8005374:	69bb      	ldr	r3, [r7, #24]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d1f9      	bne.n	800536e <TFT_ResetSequence+0x4a>
	GPIO_voidSetPinValue(TFT_Config->TFT_RESET_Port,TFT_Config->TFT_RESET_Pin, GPIO_HIGH);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005386:	2201      	movs	r2, #1
 8005388:	4619      	mov	r1, r3
 800538a:	f001 f883 	bl	8006494 <GPIO_voidSetPinValue>
	Delay_us(100);
 800538e:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
 8005392:	617b      	str	r3, [r7, #20]
 8005394:	e002      	b.n	800539c <TFT_ResetSequence+0x78>
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	3b01      	subs	r3, #1
 800539a:	617b      	str	r3, [r7, #20]
 800539c:	697b      	ldr	r3, [r7, #20]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d1f9      	bne.n	8005396 <TFT_ResetSequence+0x72>
	GPIO_voidSetPinValue(TFT_Config->TFT_RESET_Port,TFT_Config->TFT_RESET_Pin, GPIO_LOW);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80053ae:	2200      	movs	r2, #0
 80053b0:	4619      	mov	r1, r3
 80053b2:	f001 f86f 	bl	8006494 <GPIO_voidSetPinValue>
	Delay_us(100);
 80053b6:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
 80053ba:	613b      	str	r3, [r7, #16]
 80053bc:	e002      	b.n	80053c4 <TFT_ResetSequence+0xa0>
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	3b01      	subs	r3, #1
 80053c2:	613b      	str	r3, [r7, #16]
 80053c4:	693b      	ldr	r3, [r7, #16]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d1f9      	bne.n	80053be <TFT_ResetSequence+0x9a>
	GPIO_voidSetPinValue(TFT_Config->TFT_RESET_Port,TFT_Config->TFT_RESET_Pin, GPIO_HIGH);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80053d6:	2201      	movs	r2, #1
 80053d8:	4619      	mov	r1, r3
 80053da:	f001 f85b 	bl	8006494 <GPIO_voidSetPinValue>
	Delay_ms(120);
 80053de:	4b07      	ldr	r3, [pc, #28]	; (80053fc <TFT_ResetSequence+0xd8>)
 80053e0:	60fb      	str	r3, [r7, #12]
 80053e2:	e002      	b.n	80053ea <TFT_ResetSequence+0xc6>
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	3b01      	subs	r3, #1
 80053e8:	60fb      	str	r3, [r7, #12]
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d1f9      	bne.n	80053e4 <TFT_ResetSequence+0xc0>
}
 80053f0:	bf00      	nop
 80053f2:	bf00      	nop
 80053f4:	3720      	adds	r7, #32
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bd80      	pop	{r7, pc}
 80053fa:	bf00      	nop
 80053fc:	0007b0c0 	.word	0x0007b0c0

08005400 <TFT_voidSendCommand>:
static void TFT_voidSendCommand(TFT_t* TFT_Config, u8 Command)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b082      	sub	sp, #8
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
 8005408:	460b      	mov	r3, r1
 800540a:	70fb      	strb	r3, [r7, #3]
	GPIO_voidSetPinValue(TFT_Config->TFT_DC_Port,TFT_Config->TFT_DC_Pin, GPIO_LOW);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	f893 005a 	ldrb.w	r0, [r3, #90]	; 0x5a
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 8005418:	2200      	movs	r2, #0
 800541a:	4619      	mov	r1, r3
 800541c:	f001 f83a 	bl	8006494 <GPIO_voidSetPinValue>
	MSPI_TransmitByte(&TFT_Config->TFT_SPI_Config, Command , 1000);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	78f9      	ldrb	r1, [r7, #3]
 8005424:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005428:	4618      	mov	r0, r3
 800542a:	f001 fb05 	bl	8006a38 <MSPI_TransmitByte>
}
 800542e:	bf00      	nop
 8005430:	3708      	adds	r7, #8
 8005432:	46bd      	mov	sp, r7
 8005434:	bd80      	pop	{r7, pc}

08005436 <TFT_voidSendData>:
static void TFT_voidSendData(TFT_t* TFT_Config, u8 Data){
 8005436:	b580      	push	{r7, lr}
 8005438:	b082      	sub	sp, #8
 800543a:	af00      	add	r7, sp, #0
 800543c:	6078      	str	r0, [r7, #4]
 800543e:	460b      	mov	r3, r1
 8005440:	70fb      	strb	r3, [r7, #3]
	GPIO_voidSetPinValue(TFT_Config->TFT_DC_Port,TFT_Config->TFT_DC_Pin, GPIO_HIGH);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	f893 005a 	ldrb.w	r0, [r3, #90]	; 0x5a
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 800544e:	2201      	movs	r2, #1
 8005450:	4619      	mov	r1, r3
 8005452:	f001 f81f 	bl	8006494 <GPIO_voidSetPinValue>
	MSPI_TransmitByte(&TFT_Config->TFT_SPI_Config, Data , 1000);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	78f9      	ldrb	r1, [r7, #3]
 800545a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800545e:	4618      	mov	r0, r3
 8005460:	f001 faea 	bl	8006a38 <MSPI_TransmitByte>
}
 8005464:	bf00      	nop
 8005466:	3708      	adds	r7, #8
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}

0800546c <TFT_voidInit>:
/**********************************************************************************************************************
 *  GLOBAL FUNCTIONS
 *********************************************************************************************************************/

void TFT_voidInit(TFT_t* TFT_Config)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b084      	sub	sp, #16
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
	TFT_GPIO_PinsInit(TFT_Config->TFT_RESET_Port, TFT_Config->TFT_RESET_Pin);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005480:	4619      	mov	r1, r3
 8005482:	4610      	mov	r0, r2
 8005484:	f7ff ff22 	bl	80052cc <TFT_GPIO_PinsInit>
	TFT_GPIO_PinsInit(TFT_Config->TFT_DC_Port, TFT_Config->TFT_DC_Pin);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	f893 205a 	ldrb.w	r2, [r3, #90]	; 0x5a
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 8005494:	4619      	mov	r1, r3
 8005496:	4610      	mov	r0, r2
 8005498:	f7ff ff18 	bl	80052cc <TFT_GPIO_PinsInit>
	MSPI_voidInit(&TFT_Config->TFT_SPI_Config);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	4618      	mov	r0, r3
 80054a0:	f001 fa80 	bl	80069a4 <MSPI_voidInit>
	TFT_ResetSequence(TFT_Config);
 80054a4:	6878      	ldr	r0, [r7, #4]
 80054a6:	f7ff ff3d 	bl	8005324 <TFT_ResetSequence>
	TFT_voidSendCommand(TFT_Config,SLPOUT_CMD);
 80054aa:	2111      	movs	r1, #17
 80054ac:	6878      	ldr	r0, [r7, #4]
 80054ae:	f7ff ffa7 	bl	8005400 <TFT_voidSendCommand>
	Delay_ms(150);
 80054b2:	4b1a      	ldr	r3, [pc, #104]	; (800551c <TFT_voidInit+0xb0>)
 80054b4:	60fb      	str	r3, [r7, #12]
 80054b6:	e002      	b.n	80054be <TFT_voidInit+0x52>
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	3b01      	subs	r3, #1
 80054bc:	60fb      	str	r3, [r7, #12]
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d1f9      	bne.n	80054b8 <TFT_voidInit+0x4c>
	TFT_voidSendCommand(TFT_Config,COLMOD_CMD);
 80054c4:	213a      	movs	r1, #58	; 0x3a
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	f7ff ff9a 	bl	8005400 <TFT_voidSendCommand>
	TFT_voidSendData(TFT_Config,RGB565_COLOR_MODE);
 80054cc:	2105      	movs	r1, #5
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	f7ff ffb1 	bl	8005436 <TFT_voidSendData>
	TFT_voidSendCommand(TFT_Config,INVON_CMD);
 80054d4:	2121      	movs	r1, #33	; 0x21
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	f7ff ff92 	bl	8005400 <TFT_voidSendCommand>
	TFT_voidSendCommand(TFT_Config,MADCTL_CMD);
 80054dc:	2136      	movs	r1, #54	; 0x36
 80054de:	6878      	ldr	r0, [r7, #4]
 80054e0:	f7ff ff8e 	bl	8005400 <TFT_voidSendCommand>
	TFT_voidSendData(TFT_Config,TOP_TO_BOTTOM_MODE);
 80054e4:	21c0      	movs	r1, #192	; 0xc0
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	f7ff ffa5 	bl	8005436 <TFT_voidSendData>
	TFT_FillScreen(TFT_Config,TFT_Config->TFT_InitColor);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80054f2:	b29b      	uxth	r3, r3
 80054f4:	4619      	mov	r1, r3
 80054f6:	6878      	ldr	r0, [r7, #4]
 80054f8:	f000 f875 	bl	80055e6 <TFT_FillScreen>
	TFT_voidSendCommand(TFT_Config,DISPON_CMD);
 80054fc:	2129      	movs	r1, #41	; 0x29
 80054fe:	6878      	ldr	r0, [r7, #4]
 8005500:	f7ff ff7e 	bl	8005400 <TFT_voidSendCommand>
	TFT_Config->TFT_Row_Loc = 0;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2200      	movs	r2, #0
 8005508:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
	TFT_Config->TFT_Col_Loc = 0;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2200      	movs	r2, #0
 8005510:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
}
 8005514:	bf00      	nop
 8005516:	3710      	adds	r7, #16
 8005518:	46bd      	mov	sp, r7
 800551a:	bd80      	pop	{r7, pc}
 800551c:	00099cf0 	.word	0x00099cf0

08005520 <TFT_voidSetWindow>:

void TFT_voidSetWindow(TFT_t* TFT_Config ,u8 Copy_u8X0, u8 Copy_u8X1, u8 Copy_u8Y0, u8 Copy_u8Y1)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b082      	sub	sp, #8
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
 8005528:	4608      	mov	r0, r1
 800552a:	4611      	mov	r1, r2
 800552c:	461a      	mov	r2, r3
 800552e:	4603      	mov	r3, r0
 8005530:	70fb      	strb	r3, [r7, #3]
 8005532:	460b      	mov	r3, r1
 8005534:	70bb      	strb	r3, [r7, #2]
 8005536:	4613      	mov	r3, r2
 8005538:	707b      	strb	r3, [r7, #1]
    // Send Set X Addresses Command
    TFT_voidSendCommand(TFT_Config,CASET_CMD);
 800553a:	212a      	movs	r1, #42	; 0x2a
 800553c:	6878      	ldr	r0, [r7, #4]
 800553e:	f7ff ff5f 	bl	8005400 <TFT_voidSendCommand>
    TFT_voidSendData(TFT_Config,0);
 8005542:	2100      	movs	r1, #0
 8005544:	6878      	ldr	r0, [r7, #4]
 8005546:	f7ff ff76 	bl	8005436 <TFT_voidSendData>
    TFT_voidSendData(TFT_Config , Copy_u8X0);
 800554a:	78fb      	ldrb	r3, [r7, #3]
 800554c:	4619      	mov	r1, r3
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	f7ff ff71 	bl	8005436 <TFT_voidSendData>
    TFT_voidSendData(TFT_Config , 0);
 8005554:	2100      	movs	r1, #0
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f7ff ff6d 	bl	8005436 <TFT_voidSendData>
    TFT_voidSendData(TFT_Config,Copy_u8X1);
 800555c:	78bb      	ldrb	r3, [r7, #2]
 800555e:	4619      	mov	r1, r3
 8005560:	6878      	ldr	r0, [r7, #4]
 8005562:	f7ff ff68 	bl	8005436 <TFT_voidSendData>
    // Send Set Y Addresses Command
    TFT_voidSendCommand(TFT_Config,RASET_CMD);
 8005566:	212b      	movs	r1, #43	; 0x2b
 8005568:	6878      	ldr	r0, [r7, #4]
 800556a:	f7ff ff49 	bl	8005400 <TFT_voidSendCommand>
    TFT_voidSendData(TFT_Config,0);
 800556e:	2100      	movs	r1, #0
 8005570:	6878      	ldr	r0, [r7, #4]
 8005572:	f7ff ff60 	bl	8005436 <TFT_voidSendData>
    TFT_voidSendData(TFT_Config,Copy_u8Y0);
 8005576:	787b      	ldrb	r3, [r7, #1]
 8005578:	4619      	mov	r1, r3
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	f7ff ff5b 	bl	8005436 <TFT_voidSendData>
    TFT_voidSendData(TFT_Config,0);
 8005580:	2100      	movs	r1, #0
 8005582:	6878      	ldr	r0, [r7, #4]
 8005584:	f7ff ff57 	bl	8005436 <TFT_voidSendData>
    TFT_voidSendData(TFT_Config,Copy_u8Y1);
 8005588:	7c3b      	ldrb	r3, [r7, #16]
 800558a:	4619      	mov	r1, r3
 800558c:	6878      	ldr	r0, [r7, #4]
 800558e:	f7ff ff52 	bl	8005436 <TFT_voidSendData>
    TFT_voidSendCommand(TFT_Config,RAM_WR_CMD);
 8005592:	212c      	movs	r1, #44	; 0x2c
 8005594:	6878      	ldr	r0, [r7, #4]
 8005596:	f7ff ff33 	bl	8005400 <TFT_voidSendCommand>
}
 800559a:	bf00      	nop
 800559c:	3708      	adds	r7, #8
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}

080055a2 <TFT_voidDisplayFullImage>:
    TFT_voidSetWindow(TFT_Config,Copy_u8ColStart,Copy_u8ColEnd,Copy_u8RowStart,Copy_u8RowEnd);
    GPIO_voidSetPinValue(TFT_Config->TFT_DC_Port,TFT_Config->TFT_DC_Pin, GPIO_HIGH);
    MSPI_DMA_Transmit(&TFT_Config->TFT_SPI_Config, Copy_pu8Image, Height*Width*2);
}
void TFT_voidDisplayFullImage(TFT_t* TFT_Config,const u16 * Copy_pu8Image)
{
 80055a2:	b580      	push	{r7, lr}
 80055a4:	b084      	sub	sp, #16
 80055a6:	af02      	add	r7, sp, #8
 80055a8:	6078      	str	r0, [r7, #4]
 80055aa:	6039      	str	r1, [r7, #0]
	TFT_voidSetWindow(TFT_Config,0,TFT_WIDTH-1,0,TFT_HEIGHT-1);
 80055ac:	239f      	movs	r3, #159	; 0x9f
 80055ae:	9300      	str	r3, [sp, #0]
 80055b0:	2300      	movs	r3, #0
 80055b2:	227f      	movs	r2, #127	; 0x7f
 80055b4:	2100      	movs	r1, #0
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	f7ff ffb2 	bl	8005520 <TFT_voidSetWindow>
	GPIO_voidSetPinValue(TFT_Config->TFT_DC_Port,TFT_Config->TFT_DC_Pin, GPIO_HIGH);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	f893 005a 	ldrb.w	r0, [r3, #90]	; 0x5a
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 80055c8:	2201      	movs	r2, #1
 80055ca:	4619      	mov	r1, r3
 80055cc:	f000 ff62 	bl	8006494 <GPIO_voidSetPinValue>
	MSPI_DMA_Transmit(&TFT_Config->TFT_SPI_Config, Copy_pu8Image,TFT_WIDTH*TFT_HEIGHT*2);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 80055d6:	6839      	ldr	r1, [r7, #0]
 80055d8:	4618      	mov	r0, r3
 80055da:	f001 fa7d 	bl	8006ad8 <MSPI_DMA_Transmit>
}
 80055de:	bf00      	nop
 80055e0:	3708      	adds	r7, #8
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bd80      	pop	{r7, pc}

080055e6 <TFT_FillScreen>:
		str++;
	}
}

void TFT_FillScreen(TFT_t* TFT_Config, u16 color)
{
 80055e6:	b580      	push	{r7, lr}
 80055e8:	b086      	sub	sp, #24
 80055ea:	af02      	add	r7, sp, #8
 80055ec:	6078      	str	r0, [r7, #4]
 80055ee:	460b      	mov	r3, r1
 80055f0:	807b      	strh	r3, [r7, #2]
	u16 Local_RowCounter = ZERO_INIT;
 80055f2:	2300      	movs	r3, #0
 80055f4:	81fb      	strh	r3, [r7, #14]
	u16 Local_ColCounter = ZERO_INIT;
 80055f6:	2300      	movs	r3, #0
 80055f8:	81bb      	strh	r3, [r7, #12]
	u8 color_arr[2]={color>>8,(u8)color};
 80055fa:	887b      	ldrh	r3, [r7, #2]
 80055fc:	0a1b      	lsrs	r3, r3, #8
 80055fe:	b29b      	uxth	r3, r3
 8005600:	b2db      	uxtb	r3, r3
 8005602:	723b      	strb	r3, [r7, #8]
 8005604:	887b      	ldrh	r3, [r7, #2]
 8005606:	b2db      	uxtb	r3, r3
 8005608:	727b      	strb	r3, [r7, #9]
	TFT_voidSetWindow(TFT_Config,0,TFT_WIDTH-1,0,TFT_HEIGHT-1);
 800560a:	239f      	movs	r3, #159	; 0x9f
 800560c:	9300      	str	r3, [sp, #0]
 800560e:	2300      	movs	r3, #0
 8005610:	227f      	movs	r2, #127	; 0x7f
 8005612:	2100      	movs	r1, #0
 8005614:	6878      	ldr	r0, [r7, #4]
 8005616:	f7ff ff83 	bl	8005520 <TFT_voidSetWindow>
	GPIO_voidSetPinValue(TFT_Config->TFT_DC_Port,TFT_Config->TFT_DC_Pin, GPIO_HIGH);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	f893 005a 	ldrb.w	r0, [r3, #90]	; 0x5a
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 8005626:	2201      	movs	r2, #1
 8005628:	4619      	mov	r1, r3
 800562a:	f000 ff33 	bl	8006494 <GPIO_voidSetPinValue>
	for(Local_RowCounter = ZERO_INIT; Local_RowCounter < TFT_HEIGHT; Local_RowCounter++)
 800562e:	2300      	movs	r3, #0
 8005630:	81fb      	strh	r3, [r7, #14]
 8005632:	e012      	b.n	800565a <TFT_FillScreen+0x74>
	{
		for(Local_ColCounter = ZERO_INIT; Local_ColCounter < TFT_WIDTH; Local_ColCounter++)
 8005634:	2300      	movs	r3, #0
 8005636:	81bb      	strh	r3, [r7, #12]
 8005638:	e009      	b.n	800564e <TFT_FillScreen+0x68>
		{
			MSPI_DMA_Transmit(&TFT_Config->TFT_SPI_Config, color_arr,2);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	f107 0108 	add.w	r1, r7, #8
 8005640:	2202      	movs	r2, #2
 8005642:	4618      	mov	r0, r3
 8005644:	f001 fa48 	bl	8006ad8 <MSPI_DMA_Transmit>
		for(Local_ColCounter = ZERO_INIT; Local_ColCounter < TFT_WIDTH; Local_ColCounter++)
 8005648:	89bb      	ldrh	r3, [r7, #12]
 800564a:	3301      	adds	r3, #1
 800564c:	81bb      	strh	r3, [r7, #12]
 800564e:	89bb      	ldrh	r3, [r7, #12]
 8005650:	2b7f      	cmp	r3, #127	; 0x7f
 8005652:	d9f2      	bls.n	800563a <TFT_FillScreen+0x54>
	for(Local_RowCounter = ZERO_INIT; Local_RowCounter < TFT_HEIGHT; Local_RowCounter++)
 8005654:	89fb      	ldrh	r3, [r7, #14]
 8005656:	3301      	adds	r3, #1
 8005658:	81fb      	strh	r3, [r7, #14]
 800565a:	89fb      	ldrh	r3, [r7, #14]
 800565c:	2b9f      	cmp	r3, #159	; 0x9f
 800565e:	d9e9      	bls.n	8005634 <TFT_FillScreen+0x4e>
		}
	}
}
 8005660:	bf00      	nop
 8005662:	bf00      	nop
 8005664:	3710      	adds	r7, #16
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}

0800566a <TFT_ClearScreen>:

void TFT_ClearScreen(TFT_t* TFT_Config)
{
 800566a:	b580      	push	{r7, lr}
 800566c:	b082      	sub	sp, #8
 800566e:	af00      	add	r7, sp, #0
 8005670:	6078      	str	r0, [r7, #4]
	TFT_Config->TFT_Col_Loc = ZERO_INIT;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2200      	movs	r2, #0
 8005676:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
	TFT_Config->TFT_Row_Loc = ZERO_INIT;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2200      	movs	r2, #0
 800567e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
	TFT_FillScreen(TFT_Config, TFT_Config->TFT_InitColor);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005688:	b29b      	uxth	r3, r3
 800568a:	4619      	mov	r1, r3
 800568c:	6878      	ldr	r0, [r7, #4]
 800568e:	f7ff ffaa 	bl	80055e6 <TFT_FillScreen>
}
 8005692:	bf00      	nop
 8005694:	3708      	adds	r7, #8
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}

0800569a <DMA_ClearTCInterruptFlag>:
/**********************************************************************************************************************
 *  LOCAL FUNCTIONS
 *********************************************************************************************************************
*********************************************************************************************************************/
static void DMA_ClearTCInterruptFlag(DMA_Config_t* DMA_Config)
{
 800569a:	b480      	push	{r7}
 800569c:	b083      	sub	sp, #12
 800569e:	af00      	add	r7, sp, #0
 80056a0:	6078      	str	r0, [r7, #4]
	if(DMA_Config->Stream == DMA_STREAM_0)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d108      	bne.n	80056bc <DMA_ClearTCInterruptFlag+0x22>
	{
		SET_BIT(DMA_Config->Instance->LIFCR ,DMA_CTCIF0_BIT_POS);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	689a      	ldr	r2, [r3, #8]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f042 0220 	orr.w	r2, r2, #32
 80056b8:	609a      	str	r2, [r3, #8]
	}
	else if (DMA_Config->Stream == DMA_STREAM_7)
	{
		SET_BIT(DMA_Config->Instance->HIFCR ,DMA_CTCIF7_BIT_POS);
	}
}
 80056ba:	e059      	b.n	8005770 <DMA_ClearTCInterruptFlag+0xd6>
	else if (DMA_Config->Stream == DMA_STREAM_1)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	2b01      	cmp	r3, #1
 80056c2:	d108      	bne.n	80056d6 <DMA_ClearTCInterruptFlag+0x3c>
		SET_BIT(DMA_Config->Instance->LIFCR ,DMA_CTCIF1_BIT_POS);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	689a      	ldr	r2, [r3, #8]
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056d2:	609a      	str	r2, [r3, #8]
}
 80056d4:	e04c      	b.n	8005770 <DMA_ClearTCInterruptFlag+0xd6>
	else if (DMA_Config->Stream == DMA_STREAM_2)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	685b      	ldr	r3, [r3, #4]
 80056da:	2b02      	cmp	r3, #2
 80056dc:	d108      	bne.n	80056f0 <DMA_ClearTCInterruptFlag+0x56>
		SET_BIT(DMA_Config->Instance->LIFCR ,DMA_CTCIF2_BIT_POS);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	689a      	ldr	r2, [r3, #8]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80056ec:	609a      	str	r2, [r3, #8]
}
 80056ee:	e03f      	b.n	8005770 <DMA_ClearTCInterruptFlag+0xd6>
	else if (DMA_Config->Stream == DMA_STREAM_3)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	2b03      	cmp	r3, #3
 80056f6:	d108      	bne.n	800570a <DMA_ClearTCInterruptFlag+0x70>
		SET_BIT(DMA_Config->Instance->LIFCR ,DMA_CTCIF3_BIT_POS);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	689a      	ldr	r2, [r3, #8]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8005706:	609a      	str	r2, [r3, #8]
}
 8005708:	e032      	b.n	8005770 <DMA_ClearTCInterruptFlag+0xd6>
	else if (DMA_Config->Stream == DMA_STREAM_4)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	685b      	ldr	r3, [r3, #4]
 800570e:	2b04      	cmp	r3, #4
 8005710:	d108      	bne.n	8005724 <DMA_ClearTCInterruptFlag+0x8a>
		SET_BIT(DMA_Config->Instance->HIFCR ,DMA_CTCIF4_BIT_POS);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	68da      	ldr	r2, [r3, #12]
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f042 0220 	orr.w	r2, r2, #32
 8005720:	60da      	str	r2, [r3, #12]
}
 8005722:	e025      	b.n	8005770 <DMA_ClearTCInterruptFlag+0xd6>
	else if (DMA_Config->Stream == DMA_STREAM_5)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	2b05      	cmp	r3, #5
 800572a:	d108      	bne.n	800573e <DMA_ClearTCInterruptFlag+0xa4>
		SET_BIT(DMA_Config->Instance->HIFCR ,DMA_CTCIF5_BIT_POS);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	68da      	ldr	r2, [r3, #12]
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800573a:	60da      	str	r2, [r3, #12]
}
 800573c:	e018      	b.n	8005770 <DMA_ClearTCInterruptFlag+0xd6>
	else if (DMA_Config->Stream == DMA_STREAM_6)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	2b06      	cmp	r3, #6
 8005744:	d108      	bne.n	8005758 <DMA_ClearTCInterruptFlag+0xbe>
		SET_BIT(DMA_Config->Instance->HIFCR ,DMA_CTCIF6_BIT_POS);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	68da      	ldr	r2, [r3, #12]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8005754:	60da      	str	r2, [r3, #12]
}
 8005756:	e00b      	b.n	8005770 <DMA_ClearTCInterruptFlag+0xd6>
	else if (DMA_Config->Stream == DMA_STREAM_7)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	2b07      	cmp	r3, #7
 800575e:	d107      	bne.n	8005770 <DMA_ClearTCInterruptFlag+0xd6>
		SET_BIT(DMA_Config->Instance->HIFCR ,DMA_CTCIF7_BIT_POS);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	68da      	ldr	r2, [r3, #12]
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800576e:	60da      	str	r2, [r3, #12]
}
 8005770:	bf00      	nop
 8005772:	370c      	adds	r7, #12
 8005774:	46bd      	mov	sp, r7
 8005776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577a:	4770      	bx	lr

0800577c <DMA_Interrupt_Init>:
static void DMA_Interrupt_Init(DMA_Config_t* DMA_Config)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b082      	sub	sp, #8
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
	if(DMA_Config->Instance ==  DMA1)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4a33      	ldr	r2, [pc, #204]	; (8005858 <DMA_Interrupt_Init+0xdc>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d11c      	bne.n	80057c8 <DMA_Interrupt_Init+0x4c>
	{
		if(DMA_Config->Stream <=6)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	2b06      	cmp	r3, #6
 8005794:	d809      	bhi.n	80057aa <DMA_Interrupt_Init+0x2e>
		{
			MNVIC_voidEnableIRQ(DMA_Config->Stream + 11);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	b2db      	uxtb	r3, r3
 800579c:	330b      	adds	r3, #11
 800579e:	b2db      	uxtb	r3, r3
 80057a0:	b25b      	sxtb	r3, r3
 80057a2:	4618      	mov	r0, r3
 80057a4:	f000 ff30 	bl	8006608 <MNVIC_voidEnableIRQ>
 80057a8:	e006      	b.n	80057b8 <DMA_Interrupt_Init+0x3c>
		}
		else if (DMA_Config->Stream == 7 )
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	2b07      	cmp	r3, #7
 80057b0:	d102      	bne.n	80057b8 <DMA_Interrupt_Init+0x3c>
		{
			MNVIC_voidEnableIRQ(DMA1_Stream7_IRQn);
 80057b2:	202f      	movs	r0, #47	; 0x2f
 80057b4:	f000 ff28 	bl	8006608 <MNVIC_voidEnableIRQ>
		}
		DMA1_TCx_Callback[DMA_Config->Stream] = DMA_Config->DMA_TC_Callback;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	685b      	ldr	r3, [r3, #4]
 80057bc:	687a      	ldr	r2, [r7, #4]
 80057be:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80057c0:	4926      	ldr	r1, [pc, #152]	; (800585c <DMA_Interrupt_Init+0xe0>)
 80057c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80057c6:	e02a      	b.n	800581e <DMA_Interrupt_Init+0xa2>
	}
	else if (DMA_Config->Instance == DMA2)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4a24      	ldr	r2, [pc, #144]	; (8005860 <DMA_Interrupt_Init+0xe4>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d125      	bne.n	800581e <DMA_Interrupt_Init+0xa2>
	{
		if(DMA_Config->Stream <=4)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	685b      	ldr	r3, [r3, #4]
 80057d6:	2b04      	cmp	r3, #4
 80057d8:	d809      	bhi.n	80057ee <DMA_Interrupt_Init+0x72>
		{
			MNVIC_voidEnableIRQ(DMA_Config->Stream + 56);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	b2db      	uxtb	r3, r3
 80057e0:	3338      	adds	r3, #56	; 0x38
 80057e2:	b2db      	uxtb	r3, r3
 80057e4:	b25b      	sxtb	r3, r3
 80057e6:	4618      	mov	r0, r3
 80057e8:	f000 ff0e 	bl	8006608 <MNVIC_voidEnableIRQ>
 80057ec:	e010      	b.n	8005810 <DMA_Interrupt_Init+0x94>
		}
		else if ((DMA_Config->Stream > 4) && (DMA_Config->Stream <= 7 ))
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	2b04      	cmp	r3, #4
 80057f4:	d90c      	bls.n	8005810 <DMA_Interrupt_Init+0x94>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	685b      	ldr	r3, [r3, #4]
 80057fa:	2b07      	cmp	r3, #7
 80057fc:	d808      	bhi.n	8005810 <DMA_Interrupt_Init+0x94>
		{
			MNVIC_voidEnableIRQ(DMA_Config->Stream + 68);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	685b      	ldr	r3, [r3, #4]
 8005802:	b2db      	uxtb	r3, r3
 8005804:	3344      	adds	r3, #68	; 0x44
 8005806:	b2db      	uxtb	r3, r3
 8005808:	b25b      	sxtb	r3, r3
 800580a:	4618      	mov	r0, r3
 800580c:	f000 fefc 	bl	8006608 <MNVIC_voidEnableIRQ>
		}
		DMA2_TCx_Callback[DMA_Config->Stream] = DMA_Config->DMA_TC_Callback;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	685b      	ldr	r3, [r3, #4]
 8005814:	687a      	ldr	r2, [r7, #4]
 8005816:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005818:	4912      	ldr	r1, [pc, #72]	; (8005864 <DMA_Interrupt_Init+0xe8>)
 800581a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}
	else
	{
		/* Nothing */
	}
	SET_BIT(DMA_Config->Instance->DMA_Sx[DMA_Config->Stream].CR,DMA_TCIE_BIT_POS);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6819      	ldr	r1, [r3, #0]
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	685a      	ldr	r2, [r3, #4]
 8005826:	4613      	mov	r3, r2
 8005828:	005b      	lsls	r3, r3, #1
 800582a:	4413      	add	r3, r2
 800582c:	00db      	lsls	r3, r3, #3
 800582e:	440b      	add	r3, r1
 8005830:	3310      	adds	r3, #16
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	687a      	ldr	r2, [r7, #4]
 8005836:	6810      	ldr	r0, [r2, #0]
 8005838:	687a      	ldr	r2, [r7, #4]
 800583a:	6852      	ldr	r2, [r2, #4]
 800583c:	f043 0110 	orr.w	r1, r3, #16
 8005840:	4613      	mov	r3, r2
 8005842:	005b      	lsls	r3, r3, #1
 8005844:	4413      	add	r3, r2
 8005846:	00db      	lsls	r3, r3, #3
 8005848:	4403      	add	r3, r0
 800584a:	3310      	adds	r3, #16
 800584c:	6019      	str	r1, [r3, #0]
}
 800584e:	bf00      	nop
 8005850:	3708      	adds	r7, #8
 8005852:	46bd      	mov	sp, r7
 8005854:	bd80      	pop	{r7, pc}
 8005856:	bf00      	nop
 8005858:	40026000 	.word	0x40026000
 800585c:	20000100 	.word	0x20000100
 8005860:	40026400 	.word	0x40026400
 8005864:	20000120 	.word	0x20000120

08005868 <MDMA_voidInit>:
/**********************************************************************************************************************
 *  GLOBAL FUNCTIONS
 *********************************************************************************************************************/

void MDMA_voidInit(DMA_Config_t* DMA_Config)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b082      	sub	sp, #8
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
	/* Enable DMA Clock */
	if(DMA_Config->Instance ==  DMA1)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4a24      	ldr	r2, [pc, #144]	; (8005908 <MDMA_voidInit+0xa0>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d104      	bne.n	8005884 <MDMA_voidInit+0x1c>
	{
		RCC_voidEnablePeripheralClock(RCC_AHB, RCC_AHB_DMA1EN);
 800587a:	2115      	movs	r1, #21
 800587c:	2000      	movs	r0, #0
 800587e:	f000 ffa7 	bl	80067d0 <RCC_voidEnablePeripheralClock>
 8005882:	e008      	b.n	8005896 <MDMA_voidInit+0x2e>
	}
	else if (DMA_Config->Instance == DMA2)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a20      	ldr	r2, [pc, #128]	; (800590c <MDMA_voidInit+0xa4>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d103      	bne.n	8005896 <MDMA_voidInit+0x2e>
	{
		RCC_voidEnablePeripheralClock(RCC_AHB, RCC_AHB_DMA2EN);
 800588e:	2116      	movs	r1, #22
 8005890:	2000      	movs	r0, #0
 8005892:	f000 ff9d 	bl	80067d0 <RCC_voidEnablePeripheralClock>
	else
	{
		/* Nothing */
	}
	/* Clear DMA stream pervious configuration */
	DMA_Config->Instance->DMA_Sx[DMA_Config->Stream].CR =0;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6819      	ldr	r1, [r3, #0]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	685a      	ldr	r2, [r3, #4]
 800589e:	4613      	mov	r3, r2
 80058a0:	005b      	lsls	r3, r3, #1
 80058a2:	4413      	add	r3, r2
 80058a4:	00db      	lsls	r3, r3, #3
 80058a6:	440b      	add	r3, r1
 80058a8:	3310      	adds	r3, #16
 80058aa:	2200      	movs	r2, #0
 80058ac:	601a      	str	r2, [r3, #0]
	/* Clear DMA TC interrupt Flag */
	DMA_ClearTCInterruptFlag(DMA_Config);
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	f7ff fef3 	bl	800569a <DMA_ClearTCInterruptFlag>
	/* Configure DMA Stream */
	DMA_Config->Instance->DMA_Sx[DMA_Config->Stream].CR =
			((DMA_Config->Channel) |
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	689a      	ldr	r2, [r3, #8]
			(DMA_Config->Direction) |
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	68db      	ldr	r3, [r3, #12]
			((DMA_Config->Channel) |
 80058bc:	431a      	orrs	r2, r3
			(DMA_Config->PeriphInc) |
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	691b      	ldr	r3, [r3, #16]
			(DMA_Config->Direction) |
 80058c2:	431a      	orrs	r2, r3
			(DMA_Config->MemInc) |
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	695b      	ldr	r3, [r3, #20]
			(DMA_Config->PeriphInc) |
 80058c8:	431a      	orrs	r2, r3
			(DMA_Config->PeriphDataSize) |
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	699b      	ldr	r3, [r3, #24]
			(DMA_Config->MemInc) |
 80058ce:	ea42 0103 	orr.w	r1, r2, r3
			(DMA_Config->MemDataSize) );
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	69db      	ldr	r3, [r3, #28]
	DMA_Config->Instance->DMA_Sx[DMA_Config->Stream].CR =
 80058d6:	687a      	ldr	r2, [r7, #4]
 80058d8:	6810      	ldr	r0, [r2, #0]
 80058da:	687a      	ldr	r2, [r7, #4]
 80058dc:	6852      	ldr	r2, [r2, #4]
			(DMA_Config->PeriphDataSize) |
 80058de:	4319      	orrs	r1, r3
	DMA_Config->Instance->DMA_Sx[DMA_Config->Stream].CR =
 80058e0:	4613      	mov	r3, r2
 80058e2:	005b      	lsls	r3, r3, #1
 80058e4:	4413      	add	r3, r2
 80058e6:	00db      	lsls	r3, r3, #3
 80058e8:	4403      	add	r3, r0
 80058ea:	3310      	adds	r3, #16
 80058ec:	6019      	str	r1, [r3, #0]
	if(DMA_Config->DMA_TC_InterruptEnable == INTERRUPT_ENABLED)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80058f4:	2b01      	cmp	r3, #1
 80058f6:	d102      	bne.n	80058fe <MDMA_voidInit+0x96>
	{
		DMA_Interrupt_Init(DMA_Config);
 80058f8:	6878      	ldr	r0, [r7, #4]
 80058fa:	f7ff ff3f 	bl	800577c <DMA_Interrupt_Init>
	}
}
 80058fe:	bf00      	nop
 8005900:	3708      	adds	r7, #8
 8005902:	46bd      	mov	sp, r7
 8005904:	bd80      	pop	{r7, pc}
 8005906:	bf00      	nop
 8005908:	40026000 	.word	0x40026000
 800590c:	40026400 	.word	0x40026400

08005910 <MDMA_voidStart>:
void MDMA_voidStart(DMA_Config_t* DMA_Config , u32* PeriphAddr , u32* MemAddr , u32 DataLength)
{
 8005910:	b480      	push	{r7}
 8005912:	b085      	sub	sp, #20
 8005914:	af00      	add	r7, sp, #0
 8005916:	60f8      	str	r0, [r7, #12]
 8005918:	60b9      	str	r1, [r7, #8]
 800591a:	607a      	str	r2, [r7, #4]
 800591c:	603b      	str	r3, [r7, #0]
	CLR_BIT(DMA_Config->Instance->DMA_Sx[DMA_Config->Stream].CR ,DMA_STREAM_ENABLE_BIT_POS);
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	6819      	ldr	r1, [r3, #0]
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	685a      	ldr	r2, [r3, #4]
 8005926:	4613      	mov	r3, r2
 8005928:	005b      	lsls	r3, r3, #1
 800592a:	4413      	add	r3, r2
 800592c:	00db      	lsls	r3, r3, #3
 800592e:	440b      	add	r3, r1
 8005930:	3310      	adds	r3, #16
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	68fa      	ldr	r2, [r7, #12]
 8005936:	6810      	ldr	r0, [r2, #0]
 8005938:	68fa      	ldr	r2, [r7, #12]
 800593a:	6852      	ldr	r2, [r2, #4]
 800593c:	f023 0101 	bic.w	r1, r3, #1
 8005940:	4613      	mov	r3, r2
 8005942:	005b      	lsls	r3, r3, #1
 8005944:	4413      	add	r3, r2
 8005946:	00db      	lsls	r3, r3, #3
 8005948:	4403      	add	r3, r0
 800594a:	3310      	adds	r3, #16
 800594c:	6019      	str	r1, [r3, #0]
	DMA_Config->Instance->DMA_Sx[DMA_Config->Stream].NDTR = DataLength;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	6819      	ldr	r1, [r3, #0]
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	685a      	ldr	r2, [r3, #4]
 8005956:	4613      	mov	r3, r2
 8005958:	005b      	lsls	r3, r3, #1
 800595a:	4413      	add	r3, r2
 800595c:	00db      	lsls	r3, r3, #3
 800595e:	440b      	add	r3, r1
 8005960:	3314      	adds	r3, #20
 8005962:	683a      	ldr	r2, [r7, #0]
 8005964:	601a      	str	r2, [r3, #0]
	DMA_Config->Instance->DMA_Sx[DMA_Config->Stream].PAR = (u32)PeriphAddr;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	6818      	ldr	r0, [r3, #0]
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	685b      	ldr	r3, [r3, #4]
 800596e:	68b9      	ldr	r1, [r7, #8]
 8005970:	1c5a      	adds	r2, r3, #1
 8005972:	4613      	mov	r3, r2
 8005974:	005b      	lsls	r3, r3, #1
 8005976:	4413      	add	r3, r2
 8005978:	00db      	lsls	r3, r3, #3
 800597a:	4403      	add	r3, r0
 800597c:	6019      	str	r1, [r3, #0]
	DMA_Config->Instance->DMA_Sx[DMA_Config->Stream].M0AR = (u32)MemAddr;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	6818      	ldr	r0, [r3, #0]
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	6879      	ldr	r1, [r7, #4]
 8005988:	1c5a      	adds	r2, r3, #1
 800598a:	4613      	mov	r3, r2
 800598c:	005b      	lsls	r3, r3, #1
 800598e:	4413      	add	r3, r2
 8005990:	00db      	lsls	r3, r3, #3
 8005992:	4403      	add	r3, r0
 8005994:	3304      	adds	r3, #4
 8005996:	6019      	str	r1, [r3, #0]
	SET_BIT(DMA_Config->Instance->DMA_Sx[DMA_Config->Stream].CR ,DMA_STREAM_ENABLE_BIT_POS);
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	6819      	ldr	r1, [r3, #0]
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	685a      	ldr	r2, [r3, #4]
 80059a0:	4613      	mov	r3, r2
 80059a2:	005b      	lsls	r3, r3, #1
 80059a4:	4413      	add	r3, r2
 80059a6:	00db      	lsls	r3, r3, #3
 80059a8:	440b      	add	r3, r1
 80059aa:	3310      	adds	r3, #16
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	68fa      	ldr	r2, [r7, #12]
 80059b0:	6810      	ldr	r0, [r2, #0]
 80059b2:	68fa      	ldr	r2, [r7, #12]
 80059b4:	6852      	ldr	r2, [r2, #4]
 80059b6:	f043 0101 	orr.w	r1, r3, #1
 80059ba:	4613      	mov	r3, r2
 80059bc:	005b      	lsls	r3, r3, #1
 80059be:	4413      	add	r3, r2
 80059c0:	00db      	lsls	r3, r3, #3
 80059c2:	4403      	add	r3, r0
 80059c4:	3310      	adds	r3, #16
 80059c6:	6019      	str	r1, [r3, #0]
}
 80059c8:	bf00      	nop
 80059ca:	3714      	adds	r7, #20
 80059cc:	46bd      	mov	sp, r7
 80059ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d2:	4770      	bx	lr

080059d4 <DMA1_Stream0_IRQHandler>:

/************************************* DMA1 ISRs************************************************/
void DMA1_Stream0_IRQHandler(void)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	af00      	add	r7, sp, #0
	SET_BIT(DMA1->LIFCR ,DMA_CTCIF0_BIT_POS);
 80059d8:	4b07      	ldr	r3, [pc, #28]	; (80059f8 <DMA1_Stream0_IRQHandler+0x24>)
 80059da:	689b      	ldr	r3, [r3, #8]
 80059dc:	4a06      	ldr	r2, [pc, #24]	; (80059f8 <DMA1_Stream0_IRQHandler+0x24>)
 80059de:	f043 0320 	orr.w	r3, r3, #32
 80059e2:	6093      	str	r3, [r2, #8]
	if(DMA1_TCx_Callback[0] != NULL)
 80059e4:	4b05      	ldr	r3, [pc, #20]	; (80059fc <DMA1_Stream0_IRQHandler+0x28>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d002      	beq.n	80059f2 <DMA1_Stream0_IRQHandler+0x1e>
	{
		DMA1_TCx_Callback[0]();
 80059ec:	4b03      	ldr	r3, [pc, #12]	; (80059fc <DMA1_Stream0_IRQHandler+0x28>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4798      	blx	r3
	}
}
 80059f2:	bf00      	nop
 80059f4:	bd80      	pop	{r7, pc}
 80059f6:	bf00      	nop
 80059f8:	40026000 	.word	0x40026000
 80059fc:	20000100 	.word	0x20000100

08005a00 <DMA1_Stream1_IRQHandler>:
void DMA1_Stream1_IRQHandler(void){
 8005a00:	b580      	push	{r7, lr}
 8005a02:	af00      	add	r7, sp, #0
	SET_BIT(DMA1->LIFCR ,DMA_CTCIF1_BIT_POS);
 8005a04:	4b07      	ldr	r3, [pc, #28]	; (8005a24 <DMA1_Stream1_IRQHandler+0x24>)
 8005a06:	689b      	ldr	r3, [r3, #8]
 8005a08:	4a06      	ldr	r2, [pc, #24]	; (8005a24 <DMA1_Stream1_IRQHandler+0x24>)
 8005a0a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005a0e:	6093      	str	r3, [r2, #8]
	if(DMA1_TCx_Callback[1] != NULL)
 8005a10:	4b05      	ldr	r3, [pc, #20]	; (8005a28 <DMA1_Stream1_IRQHandler+0x28>)
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d002      	beq.n	8005a1e <DMA1_Stream1_IRQHandler+0x1e>
	{
		DMA1_TCx_Callback[1]();
 8005a18:	4b03      	ldr	r3, [pc, #12]	; (8005a28 <DMA1_Stream1_IRQHandler+0x28>)
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	4798      	blx	r3
	}
}
 8005a1e:	bf00      	nop
 8005a20:	bd80      	pop	{r7, pc}
 8005a22:	bf00      	nop
 8005a24:	40026000 	.word	0x40026000
 8005a28:	20000100 	.word	0x20000100

08005a2c <DMA1_Stream2_IRQHandler>:
void DMA1_Stream2_IRQHandler(void){
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	af00      	add	r7, sp, #0
	SET_BIT(DMA1->LIFCR ,DMA_CTCIF2_BIT_POS);
 8005a30:	4b07      	ldr	r3, [pc, #28]	; (8005a50 <DMA1_Stream2_IRQHandler+0x24>)
 8005a32:	689b      	ldr	r3, [r3, #8]
 8005a34:	4a06      	ldr	r2, [pc, #24]	; (8005a50 <DMA1_Stream2_IRQHandler+0x24>)
 8005a36:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005a3a:	6093      	str	r3, [r2, #8]
	if(DMA1_TCx_Callback[2] != NULL)
 8005a3c:	4b05      	ldr	r3, [pc, #20]	; (8005a54 <DMA1_Stream2_IRQHandler+0x28>)
 8005a3e:	689b      	ldr	r3, [r3, #8]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d002      	beq.n	8005a4a <DMA1_Stream2_IRQHandler+0x1e>
	{
		DMA1_TCx_Callback[2]();
 8005a44:	4b03      	ldr	r3, [pc, #12]	; (8005a54 <DMA1_Stream2_IRQHandler+0x28>)
 8005a46:	689b      	ldr	r3, [r3, #8]
 8005a48:	4798      	blx	r3
	}
}
 8005a4a:	bf00      	nop
 8005a4c:	bd80      	pop	{r7, pc}
 8005a4e:	bf00      	nop
 8005a50:	40026000 	.word	0x40026000
 8005a54:	20000100 	.word	0x20000100

08005a58 <DMA1_Stream3_IRQHandler>:
void DMA1_Stream3_IRQHandler(void)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	af00      	add	r7, sp, #0
	SET_BIT(DMA1->LIFCR ,DMA_CTCIF3_BIT_POS);
 8005a5c:	4b07      	ldr	r3, [pc, #28]	; (8005a7c <DMA1_Stream3_IRQHandler+0x24>)
 8005a5e:	689b      	ldr	r3, [r3, #8]
 8005a60:	4a06      	ldr	r2, [pc, #24]	; (8005a7c <DMA1_Stream3_IRQHandler+0x24>)
 8005a62:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005a66:	6093      	str	r3, [r2, #8]
	if(DMA1_TCx_Callback[3] != NULL)
 8005a68:	4b05      	ldr	r3, [pc, #20]	; (8005a80 <DMA1_Stream3_IRQHandler+0x28>)
 8005a6a:	68db      	ldr	r3, [r3, #12]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d002      	beq.n	8005a76 <DMA1_Stream3_IRQHandler+0x1e>
	{
		DMA1_TCx_Callback[3]();
 8005a70:	4b03      	ldr	r3, [pc, #12]	; (8005a80 <DMA1_Stream3_IRQHandler+0x28>)
 8005a72:	68db      	ldr	r3, [r3, #12]
 8005a74:	4798      	blx	r3
	}
}
 8005a76:	bf00      	nop
 8005a78:	bd80      	pop	{r7, pc}
 8005a7a:	bf00      	nop
 8005a7c:	40026000 	.word	0x40026000
 8005a80:	20000100 	.word	0x20000100

08005a84 <DMA1_Stream4_IRQHandler>:
void DMA1_Stream4_IRQHandler(void){
 8005a84:	b580      	push	{r7, lr}
 8005a86:	af00      	add	r7, sp, #0
	SET_BIT(DMA1->HIFCR ,DMA_CTCIF4_BIT_POS);
 8005a88:	4b07      	ldr	r3, [pc, #28]	; (8005aa8 <DMA1_Stream4_IRQHandler+0x24>)
 8005a8a:	68db      	ldr	r3, [r3, #12]
 8005a8c:	4a06      	ldr	r2, [pc, #24]	; (8005aa8 <DMA1_Stream4_IRQHandler+0x24>)
 8005a8e:	f043 0320 	orr.w	r3, r3, #32
 8005a92:	60d3      	str	r3, [r2, #12]
	if(DMA1_TCx_Callback[4] != NULL)
 8005a94:	4b05      	ldr	r3, [pc, #20]	; (8005aac <DMA1_Stream4_IRQHandler+0x28>)
 8005a96:	691b      	ldr	r3, [r3, #16]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d002      	beq.n	8005aa2 <DMA1_Stream4_IRQHandler+0x1e>
	{
		DMA1_TCx_Callback[4]();
 8005a9c:	4b03      	ldr	r3, [pc, #12]	; (8005aac <DMA1_Stream4_IRQHandler+0x28>)
 8005a9e:	691b      	ldr	r3, [r3, #16]
 8005aa0:	4798      	blx	r3
	}
}
 8005aa2:	bf00      	nop
 8005aa4:	bd80      	pop	{r7, pc}
 8005aa6:	bf00      	nop
 8005aa8:	40026000 	.word	0x40026000
 8005aac:	20000100 	.word	0x20000100

08005ab0 <DMA1_Stream5_IRQHandler>:
void DMA1_Stream5_IRQHandler(void){
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	af00      	add	r7, sp, #0
	SET_BIT(DMA1->HIFCR ,DMA_CTCIF5_BIT_POS);
 8005ab4:	4b07      	ldr	r3, [pc, #28]	; (8005ad4 <DMA1_Stream5_IRQHandler+0x24>)
 8005ab6:	68db      	ldr	r3, [r3, #12]
 8005ab8:	4a06      	ldr	r2, [pc, #24]	; (8005ad4 <DMA1_Stream5_IRQHandler+0x24>)
 8005aba:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005abe:	60d3      	str	r3, [r2, #12]
	if(DMA1_TCx_Callback[5] != NULL)
 8005ac0:	4b05      	ldr	r3, [pc, #20]	; (8005ad8 <DMA1_Stream5_IRQHandler+0x28>)
 8005ac2:	695b      	ldr	r3, [r3, #20]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d002      	beq.n	8005ace <DMA1_Stream5_IRQHandler+0x1e>
	{
		DMA1_TCx_Callback[5]();
 8005ac8:	4b03      	ldr	r3, [pc, #12]	; (8005ad8 <DMA1_Stream5_IRQHandler+0x28>)
 8005aca:	695b      	ldr	r3, [r3, #20]
 8005acc:	4798      	blx	r3
	}
}
 8005ace:	bf00      	nop
 8005ad0:	bd80      	pop	{r7, pc}
 8005ad2:	bf00      	nop
 8005ad4:	40026000 	.word	0x40026000
 8005ad8:	20000100 	.word	0x20000100

08005adc <DMA1_Stream6_IRQHandler>:
void DMA1_Stream6_IRQHandler(void){
 8005adc:	b580      	push	{r7, lr}
 8005ade:	af00      	add	r7, sp, #0
	SET_BIT(DMA1->HIFCR ,DMA_CTCIF6_BIT_POS);
 8005ae0:	4b07      	ldr	r3, [pc, #28]	; (8005b00 <DMA1_Stream6_IRQHandler+0x24>)
 8005ae2:	68db      	ldr	r3, [r3, #12]
 8005ae4:	4a06      	ldr	r2, [pc, #24]	; (8005b00 <DMA1_Stream6_IRQHandler+0x24>)
 8005ae6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005aea:	60d3      	str	r3, [r2, #12]
	if(DMA1_TCx_Callback[6] != NULL)
 8005aec:	4b05      	ldr	r3, [pc, #20]	; (8005b04 <DMA1_Stream6_IRQHandler+0x28>)
 8005aee:	699b      	ldr	r3, [r3, #24]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d002      	beq.n	8005afa <DMA1_Stream6_IRQHandler+0x1e>
	{
		DMA1_TCx_Callback[6]();
 8005af4:	4b03      	ldr	r3, [pc, #12]	; (8005b04 <DMA1_Stream6_IRQHandler+0x28>)
 8005af6:	699b      	ldr	r3, [r3, #24]
 8005af8:	4798      	blx	r3
	}
}
 8005afa:	bf00      	nop
 8005afc:	bd80      	pop	{r7, pc}
 8005afe:	bf00      	nop
 8005b00:	40026000 	.word	0x40026000
 8005b04:	20000100 	.word	0x20000100

08005b08 <DMA1_Stream7_IRQHandler>:
void DMA1_Stream7_IRQHandler(void){
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	af00      	add	r7, sp, #0
	SET_BIT(DMA1->HIFCR ,DMA_CTCIF7_BIT_POS);
 8005b0c:	4b07      	ldr	r3, [pc, #28]	; (8005b2c <DMA1_Stream7_IRQHandler+0x24>)
 8005b0e:	68db      	ldr	r3, [r3, #12]
 8005b10:	4a06      	ldr	r2, [pc, #24]	; (8005b2c <DMA1_Stream7_IRQHandler+0x24>)
 8005b12:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005b16:	60d3      	str	r3, [r2, #12]
	if(DMA1_TCx_Callback[7] != NULL)
 8005b18:	4b05      	ldr	r3, [pc, #20]	; (8005b30 <DMA1_Stream7_IRQHandler+0x28>)
 8005b1a:	69db      	ldr	r3, [r3, #28]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d002      	beq.n	8005b26 <DMA1_Stream7_IRQHandler+0x1e>
	{
		DMA1_TCx_Callback[7]();
 8005b20:	4b03      	ldr	r3, [pc, #12]	; (8005b30 <DMA1_Stream7_IRQHandler+0x28>)
 8005b22:	69db      	ldr	r3, [r3, #28]
 8005b24:	4798      	blx	r3
	}
}
 8005b26:	bf00      	nop
 8005b28:	bd80      	pop	{r7, pc}
 8005b2a:	bf00      	nop
 8005b2c:	40026000 	.word	0x40026000
 8005b30:	20000100 	.word	0x20000100

08005b34 <DMA2_Stream0_IRQHandler>:

/************************************* DMA2 ISRs************************************************/
void DMA2_Stream0_IRQHandler(void)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	af00      	add	r7, sp, #0
	SET_BIT(DMA2->LIFCR ,DMA_CTCIF0_BIT_POS);
 8005b38:	4b07      	ldr	r3, [pc, #28]	; (8005b58 <DMA2_Stream0_IRQHandler+0x24>)
 8005b3a:	689b      	ldr	r3, [r3, #8]
 8005b3c:	4a06      	ldr	r2, [pc, #24]	; (8005b58 <DMA2_Stream0_IRQHandler+0x24>)
 8005b3e:	f043 0320 	orr.w	r3, r3, #32
 8005b42:	6093      	str	r3, [r2, #8]
	if(DMA2_TCx_Callback[0] != NULL)
 8005b44:	4b05      	ldr	r3, [pc, #20]	; (8005b5c <DMA2_Stream0_IRQHandler+0x28>)
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d002      	beq.n	8005b52 <DMA2_Stream0_IRQHandler+0x1e>
	{
		DMA2_TCx_Callback[0]();
 8005b4c:	4b03      	ldr	r3, [pc, #12]	; (8005b5c <DMA2_Stream0_IRQHandler+0x28>)
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4798      	blx	r3
	}
}
 8005b52:	bf00      	nop
 8005b54:	bd80      	pop	{r7, pc}
 8005b56:	bf00      	nop
 8005b58:	40026400 	.word	0x40026400
 8005b5c:	20000120 	.word	0x20000120

08005b60 <DMA2_Stream1_IRQHandler>:
void DMA2_Stream1_IRQHandler(void){
 8005b60:	b580      	push	{r7, lr}
 8005b62:	af00      	add	r7, sp, #0
	SET_BIT(DMA2->LIFCR ,DMA_CTCIF1_BIT_POS);
 8005b64:	4b07      	ldr	r3, [pc, #28]	; (8005b84 <DMA2_Stream1_IRQHandler+0x24>)
 8005b66:	689b      	ldr	r3, [r3, #8]
 8005b68:	4a06      	ldr	r2, [pc, #24]	; (8005b84 <DMA2_Stream1_IRQHandler+0x24>)
 8005b6a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005b6e:	6093      	str	r3, [r2, #8]
	if(DMA2_TCx_Callback[1] != NULL)
 8005b70:	4b05      	ldr	r3, [pc, #20]	; (8005b88 <DMA2_Stream1_IRQHandler+0x28>)
 8005b72:	685b      	ldr	r3, [r3, #4]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d002      	beq.n	8005b7e <DMA2_Stream1_IRQHandler+0x1e>
	{
		DMA2_TCx_Callback[1]();
 8005b78:	4b03      	ldr	r3, [pc, #12]	; (8005b88 <DMA2_Stream1_IRQHandler+0x28>)
 8005b7a:	685b      	ldr	r3, [r3, #4]
 8005b7c:	4798      	blx	r3
	}
}
 8005b7e:	bf00      	nop
 8005b80:	bd80      	pop	{r7, pc}
 8005b82:	bf00      	nop
 8005b84:	40026400 	.word	0x40026400
 8005b88:	20000120 	.word	0x20000120

08005b8c <DMA2_Stream2_IRQHandler>:
void DMA2_Stream2_IRQHandler(void){
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	af00      	add	r7, sp, #0
	SET_BIT(DMA2->LIFCR ,DMA_CTCIF2_BIT_POS);
 8005b90:	4b07      	ldr	r3, [pc, #28]	; (8005bb0 <DMA2_Stream2_IRQHandler+0x24>)
 8005b92:	689b      	ldr	r3, [r3, #8]
 8005b94:	4a06      	ldr	r2, [pc, #24]	; (8005bb0 <DMA2_Stream2_IRQHandler+0x24>)
 8005b96:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005b9a:	6093      	str	r3, [r2, #8]
	if(DMA2_TCx_Callback[2] != NULL)
 8005b9c:	4b05      	ldr	r3, [pc, #20]	; (8005bb4 <DMA2_Stream2_IRQHandler+0x28>)
 8005b9e:	689b      	ldr	r3, [r3, #8]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d002      	beq.n	8005baa <DMA2_Stream2_IRQHandler+0x1e>
	{
		DMA2_TCx_Callback[2]();
 8005ba4:	4b03      	ldr	r3, [pc, #12]	; (8005bb4 <DMA2_Stream2_IRQHandler+0x28>)
 8005ba6:	689b      	ldr	r3, [r3, #8]
 8005ba8:	4798      	blx	r3
	}
}
 8005baa:	bf00      	nop
 8005bac:	bd80      	pop	{r7, pc}
 8005bae:	bf00      	nop
 8005bb0:	40026400 	.word	0x40026400
 8005bb4:	20000120 	.word	0x20000120

08005bb8 <DMA2_Stream3_IRQHandler>:
void DMA2_Stream3_IRQHandler(void)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	af00      	add	r7, sp, #0
	SET_BIT(DMA2->LIFCR ,DMA_CTCIF3_BIT_POS);
 8005bbc:	4b07      	ldr	r3, [pc, #28]	; (8005bdc <DMA2_Stream3_IRQHandler+0x24>)
 8005bbe:	689b      	ldr	r3, [r3, #8]
 8005bc0:	4a06      	ldr	r2, [pc, #24]	; (8005bdc <DMA2_Stream3_IRQHandler+0x24>)
 8005bc2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005bc6:	6093      	str	r3, [r2, #8]
	if(DMA2_TCx_Callback[3] != NULL)
 8005bc8:	4b05      	ldr	r3, [pc, #20]	; (8005be0 <DMA2_Stream3_IRQHandler+0x28>)
 8005bca:	68db      	ldr	r3, [r3, #12]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d002      	beq.n	8005bd6 <DMA2_Stream3_IRQHandler+0x1e>
	{
		DMA2_TCx_Callback[3]();
 8005bd0:	4b03      	ldr	r3, [pc, #12]	; (8005be0 <DMA2_Stream3_IRQHandler+0x28>)
 8005bd2:	68db      	ldr	r3, [r3, #12]
 8005bd4:	4798      	blx	r3
	}
}
 8005bd6:	bf00      	nop
 8005bd8:	bd80      	pop	{r7, pc}
 8005bda:	bf00      	nop
 8005bdc:	40026400 	.word	0x40026400
 8005be0:	20000120 	.word	0x20000120

08005be4 <DMA2_Stream4_IRQHandler>:
void DMA2_Stream4_IRQHandler(void){
 8005be4:	b580      	push	{r7, lr}
 8005be6:	af00      	add	r7, sp, #0
	SET_BIT(DMA2->HIFCR ,DMA_CTCIF4_BIT_POS);
 8005be8:	4b07      	ldr	r3, [pc, #28]	; (8005c08 <DMA2_Stream4_IRQHandler+0x24>)
 8005bea:	68db      	ldr	r3, [r3, #12]
 8005bec:	4a06      	ldr	r2, [pc, #24]	; (8005c08 <DMA2_Stream4_IRQHandler+0x24>)
 8005bee:	f043 0320 	orr.w	r3, r3, #32
 8005bf2:	60d3      	str	r3, [r2, #12]
	if(DMA2_TCx_Callback[4] != NULL)
 8005bf4:	4b05      	ldr	r3, [pc, #20]	; (8005c0c <DMA2_Stream4_IRQHandler+0x28>)
 8005bf6:	691b      	ldr	r3, [r3, #16]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d002      	beq.n	8005c02 <DMA2_Stream4_IRQHandler+0x1e>
	{
		DMA2_TCx_Callback[4]();
 8005bfc:	4b03      	ldr	r3, [pc, #12]	; (8005c0c <DMA2_Stream4_IRQHandler+0x28>)
 8005bfe:	691b      	ldr	r3, [r3, #16]
 8005c00:	4798      	blx	r3
	}
}
 8005c02:	bf00      	nop
 8005c04:	bd80      	pop	{r7, pc}
 8005c06:	bf00      	nop
 8005c08:	40026400 	.word	0x40026400
 8005c0c:	20000120 	.word	0x20000120

08005c10 <DMA2_Stream5_IRQHandler>:
void DMA2_Stream5_IRQHandler(void){
 8005c10:	b580      	push	{r7, lr}
 8005c12:	af00      	add	r7, sp, #0
	SET_BIT(DMA2->HIFCR ,DMA_CTCIF5_BIT_POS);
 8005c14:	4b07      	ldr	r3, [pc, #28]	; (8005c34 <DMA2_Stream5_IRQHandler+0x24>)
 8005c16:	68db      	ldr	r3, [r3, #12]
 8005c18:	4a06      	ldr	r2, [pc, #24]	; (8005c34 <DMA2_Stream5_IRQHandler+0x24>)
 8005c1a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005c1e:	60d3      	str	r3, [r2, #12]
	if(DMA2_TCx_Callback[5] != NULL)
 8005c20:	4b05      	ldr	r3, [pc, #20]	; (8005c38 <DMA2_Stream5_IRQHandler+0x28>)
 8005c22:	695b      	ldr	r3, [r3, #20]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d002      	beq.n	8005c2e <DMA2_Stream5_IRQHandler+0x1e>
	{
		DMA2_TCx_Callback[5]();
 8005c28:	4b03      	ldr	r3, [pc, #12]	; (8005c38 <DMA2_Stream5_IRQHandler+0x28>)
 8005c2a:	695b      	ldr	r3, [r3, #20]
 8005c2c:	4798      	blx	r3
	}
}
 8005c2e:	bf00      	nop
 8005c30:	bd80      	pop	{r7, pc}
 8005c32:	bf00      	nop
 8005c34:	40026400 	.word	0x40026400
 8005c38:	20000120 	.word	0x20000120

08005c3c <DMA2_Stream6_IRQHandler>:
void DMA2_Stream6_IRQHandler(void){
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	af00      	add	r7, sp, #0
	SET_BIT(DMA2->HIFCR ,DMA_CTCIF6_BIT_POS);
 8005c40:	4b07      	ldr	r3, [pc, #28]	; (8005c60 <DMA2_Stream6_IRQHandler+0x24>)
 8005c42:	68db      	ldr	r3, [r3, #12]
 8005c44:	4a06      	ldr	r2, [pc, #24]	; (8005c60 <DMA2_Stream6_IRQHandler+0x24>)
 8005c46:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005c4a:	60d3      	str	r3, [r2, #12]
	if(DMA2_TCx_Callback[6] != NULL)
 8005c4c:	4b05      	ldr	r3, [pc, #20]	; (8005c64 <DMA2_Stream6_IRQHandler+0x28>)
 8005c4e:	699b      	ldr	r3, [r3, #24]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d002      	beq.n	8005c5a <DMA2_Stream6_IRQHandler+0x1e>
	{
		DMA2_TCx_Callback[6]();
 8005c54:	4b03      	ldr	r3, [pc, #12]	; (8005c64 <DMA2_Stream6_IRQHandler+0x28>)
 8005c56:	699b      	ldr	r3, [r3, #24]
 8005c58:	4798      	blx	r3
	}
}
 8005c5a:	bf00      	nop
 8005c5c:	bd80      	pop	{r7, pc}
 8005c5e:	bf00      	nop
 8005c60:	40026400 	.word	0x40026400
 8005c64:	20000120 	.word	0x20000120

08005c68 <DMA2_Stream7_IRQHandler>:
void DMA2_Stream7_IRQHandler(void){
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	af00      	add	r7, sp, #0
	SET_BIT(DMA2->HIFCR ,DMA_CTCIF7_BIT_POS);
 8005c6c:	4b07      	ldr	r3, [pc, #28]	; (8005c8c <DMA2_Stream7_IRQHandler+0x24>)
 8005c6e:	68db      	ldr	r3, [r3, #12]
 8005c70:	4a06      	ldr	r2, [pc, #24]	; (8005c8c <DMA2_Stream7_IRQHandler+0x24>)
 8005c72:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005c76:	60d3      	str	r3, [r2, #12]
	if(DMA2_TCx_Callback[7] != NULL)
 8005c78:	4b05      	ldr	r3, [pc, #20]	; (8005c90 <DMA2_Stream7_IRQHandler+0x28>)
 8005c7a:	69db      	ldr	r3, [r3, #28]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d002      	beq.n	8005c86 <DMA2_Stream7_IRQHandler+0x1e>
	{
		DMA2_TCx_Callback[7]();
 8005c80:	4b03      	ldr	r3, [pc, #12]	; (8005c90 <DMA2_Stream7_IRQHandler+0x28>)
 8005c82:	69db      	ldr	r3, [r3, #28]
 8005c84:	4798      	blx	r3
	}
}
 8005c86:	bf00      	nop
 8005c88:	bd80      	pop	{r7, pc}
 8005c8a:	bf00      	nop
 8005c8c:	40026400 	.word	0x40026400
 8005c90:	20000120 	.word	0x20000120

08005c94 <MEXTI_voidInit>:
 *********************************************************************************************************************/

/**********************************************************************************************************************
 *  GLOBAL FUNCTIONS
 *********************************************************************************************************************/
void MEXTI_voidInit(MEXTI_CONFIG_t* Copy_tEXTIConfig ,void (*pCallBackFunction)(void)){
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b082      	sub	sp, #8
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
 8005c9c:	6039      	str	r1, [r7, #0]

	/*Enable EXTI Line mode interrupt or event*/
	switch(Copy_tEXTIConfig->MEXTI_Mode)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	78db      	ldrb	r3, [r3, #3]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d002      	beq.n	8005cac <MEXTI_voidInit+0x18>
 8005ca6:	2b01      	cmp	r3, #1
 8005ca8:	d00c      	beq.n	8005cc4 <MEXTI_voidInit+0x30>
			break;
		case MEXTI_EVENT_MODE:
			SET_BIT(EXTI->EMR,Copy_tEXTIConfig->MEXTI_Line);
			break;
		default:
			break;
 8005caa:	e017      	b.n	8005cdc <MEXTI_voidInit+0x48>
			SET_BIT(EXTI->IMR,Copy_tEXTIConfig->MEXTI_Line);
 8005cac:	4b7a      	ldr	r3, [pc, #488]	; (8005e98 <MEXTI_voidInit+0x204>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	687a      	ldr	r2, [r7, #4]
 8005cb2:	7852      	ldrb	r2, [r2, #1]
 8005cb4:	4611      	mov	r1, r2
 8005cb6:	2201      	movs	r2, #1
 8005cb8:	408a      	lsls	r2, r1
 8005cba:	4611      	mov	r1, r2
 8005cbc:	4a76      	ldr	r2, [pc, #472]	; (8005e98 <MEXTI_voidInit+0x204>)
 8005cbe:	430b      	orrs	r3, r1
 8005cc0:	6013      	str	r3, [r2, #0]
			break;
 8005cc2:	e00b      	b.n	8005cdc <MEXTI_voidInit+0x48>
			SET_BIT(EXTI->EMR,Copy_tEXTIConfig->MEXTI_Line);
 8005cc4:	4b74      	ldr	r3, [pc, #464]	; (8005e98 <MEXTI_voidInit+0x204>)
 8005cc6:	685b      	ldr	r3, [r3, #4]
 8005cc8:	687a      	ldr	r2, [r7, #4]
 8005cca:	7852      	ldrb	r2, [r2, #1]
 8005ccc:	4611      	mov	r1, r2
 8005cce:	2201      	movs	r2, #1
 8005cd0:	408a      	lsls	r2, r1
 8005cd2:	4611      	mov	r1, r2
 8005cd4:	4a70      	ldr	r2, [pc, #448]	; (8005e98 <MEXTI_voidInit+0x204>)
 8005cd6:	430b      	orrs	r3, r1
 8005cd8:	6053      	str	r3, [r2, #4]
			break;
 8005cda:	bf00      	nop
	}

	/*Set Notification function*/
	EXTI_pNotificationFunction[Copy_tEXTIConfig->MEXTI_Line] = pCallBackFunction;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	785b      	ldrb	r3, [r3, #1]
 8005ce0:	4619      	mov	r1, r3
 8005ce2:	4a6e      	ldr	r2, [pc, #440]	; (8005e9c <MEXTI_voidInit+0x208>)
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

	/*Set Sense Signal mode RISING, FALLING, ONCHANGE */
	switch(Copy_tEXTIConfig->MEXTI_SenseSignal){
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	789b      	ldrb	r3, [r3, #2]
 8005cee:	2b02      	cmp	r3, #2
 8005cf0:	d036      	beq.n	8005d60 <MEXTI_voidInit+0xcc>
 8005cf2:	2b02      	cmp	r3, #2
 8005cf4:	dc4b      	bgt.n	8005d8e <MEXTI_voidInit+0xfa>
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d002      	beq.n	8005d00 <MEXTI_voidInit+0x6c>
 8005cfa:	2b01      	cmp	r3, #1
 8005cfc:	d018      	beq.n	8005d30 <MEXTI_voidInit+0x9c>
		case MEXTI_ONCHANGE:
			SET_BIT(EXTI->RTSR,Copy_tEXTIConfig->MEXTI_Line);
			SET_BIT(EXTI->FTSR,Copy_tEXTIConfig->MEXTI_Line);
			break;
		default:
			break;
 8005cfe:	e046      	b.n	8005d8e <MEXTI_voidInit+0xfa>
			SET_BIT(EXTI->RTSR,Copy_tEXTIConfig->MEXTI_Line);
 8005d00:	4b65      	ldr	r3, [pc, #404]	; (8005e98 <MEXTI_voidInit+0x204>)
 8005d02:	689b      	ldr	r3, [r3, #8]
 8005d04:	687a      	ldr	r2, [r7, #4]
 8005d06:	7852      	ldrb	r2, [r2, #1]
 8005d08:	4611      	mov	r1, r2
 8005d0a:	2201      	movs	r2, #1
 8005d0c:	408a      	lsls	r2, r1
 8005d0e:	4611      	mov	r1, r2
 8005d10:	4a61      	ldr	r2, [pc, #388]	; (8005e98 <MEXTI_voidInit+0x204>)
 8005d12:	430b      	orrs	r3, r1
 8005d14:	6093      	str	r3, [r2, #8]
			CLR_BIT(EXTI->FTSR,Copy_tEXTIConfig->MEXTI_Line);
 8005d16:	4b60      	ldr	r3, [pc, #384]	; (8005e98 <MEXTI_voidInit+0x204>)
 8005d18:	68db      	ldr	r3, [r3, #12]
 8005d1a:	687a      	ldr	r2, [r7, #4]
 8005d1c:	7852      	ldrb	r2, [r2, #1]
 8005d1e:	4611      	mov	r1, r2
 8005d20:	2201      	movs	r2, #1
 8005d22:	408a      	lsls	r2, r1
 8005d24:	43d2      	mvns	r2, r2
 8005d26:	4611      	mov	r1, r2
 8005d28:	4a5b      	ldr	r2, [pc, #364]	; (8005e98 <MEXTI_voidInit+0x204>)
 8005d2a:	400b      	ands	r3, r1
 8005d2c:	60d3      	str	r3, [r2, #12]
			break;
 8005d2e:	e02f      	b.n	8005d90 <MEXTI_voidInit+0xfc>
			SET_BIT(EXTI->FTSR,Copy_tEXTIConfig->MEXTI_Line);
 8005d30:	4b59      	ldr	r3, [pc, #356]	; (8005e98 <MEXTI_voidInit+0x204>)
 8005d32:	68db      	ldr	r3, [r3, #12]
 8005d34:	687a      	ldr	r2, [r7, #4]
 8005d36:	7852      	ldrb	r2, [r2, #1]
 8005d38:	4611      	mov	r1, r2
 8005d3a:	2201      	movs	r2, #1
 8005d3c:	408a      	lsls	r2, r1
 8005d3e:	4611      	mov	r1, r2
 8005d40:	4a55      	ldr	r2, [pc, #340]	; (8005e98 <MEXTI_voidInit+0x204>)
 8005d42:	430b      	orrs	r3, r1
 8005d44:	60d3      	str	r3, [r2, #12]
			CLR_BIT(EXTI->RTSR,Copy_tEXTIConfig->MEXTI_Line);
 8005d46:	4b54      	ldr	r3, [pc, #336]	; (8005e98 <MEXTI_voidInit+0x204>)
 8005d48:	689b      	ldr	r3, [r3, #8]
 8005d4a:	687a      	ldr	r2, [r7, #4]
 8005d4c:	7852      	ldrb	r2, [r2, #1]
 8005d4e:	4611      	mov	r1, r2
 8005d50:	2201      	movs	r2, #1
 8005d52:	408a      	lsls	r2, r1
 8005d54:	43d2      	mvns	r2, r2
 8005d56:	4611      	mov	r1, r2
 8005d58:	4a4f      	ldr	r2, [pc, #316]	; (8005e98 <MEXTI_voidInit+0x204>)
 8005d5a:	400b      	ands	r3, r1
 8005d5c:	6093      	str	r3, [r2, #8]
			break;
 8005d5e:	e017      	b.n	8005d90 <MEXTI_voidInit+0xfc>
			SET_BIT(EXTI->RTSR,Copy_tEXTIConfig->MEXTI_Line);
 8005d60:	4b4d      	ldr	r3, [pc, #308]	; (8005e98 <MEXTI_voidInit+0x204>)
 8005d62:	689b      	ldr	r3, [r3, #8]
 8005d64:	687a      	ldr	r2, [r7, #4]
 8005d66:	7852      	ldrb	r2, [r2, #1]
 8005d68:	4611      	mov	r1, r2
 8005d6a:	2201      	movs	r2, #1
 8005d6c:	408a      	lsls	r2, r1
 8005d6e:	4611      	mov	r1, r2
 8005d70:	4a49      	ldr	r2, [pc, #292]	; (8005e98 <MEXTI_voidInit+0x204>)
 8005d72:	430b      	orrs	r3, r1
 8005d74:	6093      	str	r3, [r2, #8]
			SET_BIT(EXTI->FTSR,Copy_tEXTIConfig->MEXTI_Line);
 8005d76:	4b48      	ldr	r3, [pc, #288]	; (8005e98 <MEXTI_voidInit+0x204>)
 8005d78:	68db      	ldr	r3, [r3, #12]
 8005d7a:	687a      	ldr	r2, [r7, #4]
 8005d7c:	7852      	ldrb	r2, [r2, #1]
 8005d7e:	4611      	mov	r1, r2
 8005d80:	2201      	movs	r2, #1
 8005d82:	408a      	lsls	r2, r1
 8005d84:	4611      	mov	r1, r2
 8005d86:	4a44      	ldr	r2, [pc, #272]	; (8005e98 <MEXTI_voidInit+0x204>)
 8005d88:	430b      	orrs	r3, r1
 8005d8a:	60d3      	str	r3, [r2, #12]
			break;
 8005d8c:	e000      	b.n	8005d90 <MEXTI_voidInit+0xfc>
			break;
 8005d8e:	bf00      	nop
	}
	/* Enable SYSCFG Peripheral Clock*/
	RCC_voidEnablePeripheralClock(RCC_APB2, RCC_APB2_SYSCFGEN);
 8005d90:	210e      	movs	r1, #14
 8005d92:	2002      	movs	r0, #2
 8005d94:	f000 fd1c 	bl	80067d0 <RCC_voidEnablePeripheralClock>
	/*Set EXTI Port PORTA, PORTB, PORTC*/
	if(Copy_tEXTIConfig->MEXTI_Line < 4 && Copy_tEXTIConfig->MEXTI_Line >= 0)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	785b      	ldrb	r3, [r3, #1]
 8005d9c:	2b03      	cmp	r3, #3
 8005d9e:	d80e      	bhi.n	8005dbe <MEXTI_voidInit+0x12a>
	{
		SYSCFG_EXTICR1 |= (Copy_tEXTIConfig->MEXTI_Port << (Copy_tEXTIConfig->MEXTI_Line*4));
 8005da0:	4b3f      	ldr	r3, [pc, #252]	; (8005ea0 <MEXTI_voidInit+0x20c>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	687a      	ldr	r2, [r7, #4]
 8005da6:	7812      	ldrb	r2, [r2, #0]
 8005da8:	4611      	mov	r1, r2
 8005daa:	687a      	ldr	r2, [r7, #4]
 8005dac:	7852      	ldrb	r2, [r2, #1]
 8005dae:	0092      	lsls	r2, r2, #2
 8005db0:	fa01 f202 	lsl.w	r2, r1, r2
 8005db4:	4611      	mov	r1, r2
 8005db6:	4a3a      	ldr	r2, [pc, #232]	; (8005ea0 <MEXTI_voidInit+0x20c>)
 8005db8:	430b      	orrs	r3, r1
 8005dba:	6013      	str	r3, [r2, #0]
 8005dbc:	e043      	b.n	8005e46 <MEXTI_voidInit+0x1b2>

	}
	else if(Copy_tEXTIConfig->MEXTI_Line < 8 && Copy_tEXTIConfig->MEXTI_Line >= 4){
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	785b      	ldrb	r3, [r3, #1]
 8005dc2:	2b07      	cmp	r3, #7
 8005dc4:	d812      	bhi.n	8005dec <MEXTI_voidInit+0x158>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	785b      	ldrb	r3, [r3, #1]
 8005dca:	2b03      	cmp	r3, #3
 8005dcc:	d90e      	bls.n	8005dec <MEXTI_voidInit+0x158>
		SYSCFG_EXTICR2 |= (Copy_tEXTIConfig->MEXTI_Port << (Copy_tEXTIConfig->MEXTI_Line*4));
 8005dce:	4b35      	ldr	r3, [pc, #212]	; (8005ea4 <MEXTI_voidInit+0x210>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	687a      	ldr	r2, [r7, #4]
 8005dd4:	7812      	ldrb	r2, [r2, #0]
 8005dd6:	4611      	mov	r1, r2
 8005dd8:	687a      	ldr	r2, [r7, #4]
 8005dda:	7852      	ldrb	r2, [r2, #1]
 8005ddc:	0092      	lsls	r2, r2, #2
 8005dde:	fa01 f202 	lsl.w	r2, r1, r2
 8005de2:	4611      	mov	r1, r2
 8005de4:	4a2f      	ldr	r2, [pc, #188]	; (8005ea4 <MEXTI_voidInit+0x210>)
 8005de6:	430b      	orrs	r3, r1
 8005de8:	6013      	str	r3, [r2, #0]
 8005dea:	e02c      	b.n	8005e46 <MEXTI_voidInit+0x1b2>
	}
	else if(Copy_tEXTIConfig->MEXTI_Line < 12 && Copy_tEXTIConfig->MEXTI_Line >= 8){
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	785b      	ldrb	r3, [r3, #1]
 8005df0:	2b0b      	cmp	r3, #11
 8005df2:	d812      	bhi.n	8005e1a <MEXTI_voidInit+0x186>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	785b      	ldrb	r3, [r3, #1]
 8005df8:	2b07      	cmp	r3, #7
 8005dfa:	d90e      	bls.n	8005e1a <MEXTI_voidInit+0x186>
		SYSCFG_EXTICR3 |= (Copy_tEXTIConfig->MEXTI_Port << (Copy_tEXTIConfig->MEXTI_Line*4));
 8005dfc:	4b2a      	ldr	r3, [pc, #168]	; (8005ea8 <MEXTI_voidInit+0x214>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	687a      	ldr	r2, [r7, #4]
 8005e02:	7812      	ldrb	r2, [r2, #0]
 8005e04:	4611      	mov	r1, r2
 8005e06:	687a      	ldr	r2, [r7, #4]
 8005e08:	7852      	ldrb	r2, [r2, #1]
 8005e0a:	0092      	lsls	r2, r2, #2
 8005e0c:	fa01 f202 	lsl.w	r2, r1, r2
 8005e10:	4611      	mov	r1, r2
 8005e12:	4a25      	ldr	r2, [pc, #148]	; (8005ea8 <MEXTI_voidInit+0x214>)
 8005e14:	430b      	orrs	r3, r1
 8005e16:	6013      	str	r3, [r2, #0]
 8005e18:	e015      	b.n	8005e46 <MEXTI_voidInit+0x1b2>
	}
	else if(Copy_tEXTIConfig->MEXTI_Line < 16 && Copy_tEXTIConfig->MEXTI_Line >= 12){
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	785b      	ldrb	r3, [r3, #1]
 8005e1e:	2b0f      	cmp	r3, #15
 8005e20:	d811      	bhi.n	8005e46 <MEXTI_voidInit+0x1b2>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	785b      	ldrb	r3, [r3, #1]
 8005e26:	2b0b      	cmp	r3, #11
 8005e28:	d90d      	bls.n	8005e46 <MEXTI_voidInit+0x1b2>
		SYSCFG_EXTICR4 |= (Copy_tEXTIConfig->MEXTI_Port << (Copy_tEXTIConfig->MEXTI_Line*4));
 8005e2a:	4b20      	ldr	r3, [pc, #128]	; (8005eac <MEXTI_voidInit+0x218>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	687a      	ldr	r2, [r7, #4]
 8005e30:	7812      	ldrb	r2, [r2, #0]
 8005e32:	4611      	mov	r1, r2
 8005e34:	687a      	ldr	r2, [r7, #4]
 8005e36:	7852      	ldrb	r2, [r2, #1]
 8005e38:	0092      	lsls	r2, r2, #2
 8005e3a:	fa01 f202 	lsl.w	r2, r1, r2
 8005e3e:	4611      	mov	r1, r2
 8005e40:	4a1a      	ldr	r2, [pc, #104]	; (8005eac <MEXTI_voidInit+0x218>)
 8005e42:	430b      	orrs	r3, r1
 8005e44:	6013      	str	r3, [r2, #0]
	}

	/*Enable NVIC Mask for EXTI Line*/
	if(Copy_tEXTIConfig->MEXTI_Line <5){
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	785b      	ldrb	r3, [r3, #1]
 8005e4a:	2b04      	cmp	r3, #4
 8005e4c:	d808      	bhi.n	8005e60 <MEXTI_voidInit+0x1cc>
		MNVIC_voidEnableIRQ(EXTI0_IRQn+Copy_tEXTIConfig->MEXTI_Line);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	785b      	ldrb	r3, [r3, #1]
 8005e52:	3306      	adds	r3, #6
 8005e54:	b2db      	uxtb	r3, r3
 8005e56:	b25b      	sxtb	r3, r3
 8005e58:	4618      	mov	r0, r3
 8005e5a:	f000 fbd5 	bl	8006608 <MNVIC_voidEnableIRQ>
		MNVIC_voidEnableIRQ(EXTI9_5_IRQn);
	}
	else if(Copy_tEXTIConfig->MEXTI_Line >= 10 && Copy_tEXTIConfig->MEXTI_Line <= 15){
		MNVIC_voidEnableIRQ(EXTI15_10_IRQn);
	}
}
 8005e5e:	e016      	b.n	8005e8e <MEXTI_voidInit+0x1fa>
	else if(Copy_tEXTIConfig->MEXTI_Line >= 5 && Copy_tEXTIConfig->MEXTI_Line <= 9){
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	785b      	ldrb	r3, [r3, #1]
 8005e64:	2b04      	cmp	r3, #4
 8005e66:	d907      	bls.n	8005e78 <MEXTI_voidInit+0x1e4>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	785b      	ldrb	r3, [r3, #1]
 8005e6c:	2b09      	cmp	r3, #9
 8005e6e:	d803      	bhi.n	8005e78 <MEXTI_voidInit+0x1e4>
		MNVIC_voidEnableIRQ(EXTI9_5_IRQn);
 8005e70:	2017      	movs	r0, #23
 8005e72:	f000 fbc9 	bl	8006608 <MNVIC_voidEnableIRQ>
}
 8005e76:	e00a      	b.n	8005e8e <MEXTI_voidInit+0x1fa>
	else if(Copy_tEXTIConfig->MEXTI_Line >= 10 && Copy_tEXTIConfig->MEXTI_Line <= 15){
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	785b      	ldrb	r3, [r3, #1]
 8005e7c:	2b09      	cmp	r3, #9
 8005e7e:	d906      	bls.n	8005e8e <MEXTI_voidInit+0x1fa>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	785b      	ldrb	r3, [r3, #1]
 8005e84:	2b0f      	cmp	r3, #15
 8005e86:	d802      	bhi.n	8005e8e <MEXTI_voidInit+0x1fa>
		MNVIC_voidEnableIRQ(EXTI15_10_IRQn);
 8005e88:	2028      	movs	r0, #40	; 0x28
 8005e8a:	f000 fbbd 	bl	8006608 <MNVIC_voidEnableIRQ>
}
 8005e8e:	bf00      	nop
 8005e90:	3708      	adds	r7, #8
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bd80      	pop	{r7, pc}
 8005e96:	bf00      	nop
 8005e98:	40013c00 	.word	0x40013c00
 8005e9c:	20000140 	.word	0x20000140
 8005ea0:	40013808 	.word	0x40013808
 8005ea4:	4001380c 	.word	0x4001380c
 8005ea8:	40013810 	.word	0x40013810
 8005eac:	40013814 	.word	0x40013814

08005eb0 <MEXTI_voidClearPendingFlag>:

void MEXTI_voidSetCallBack(MEXTI_INTERRUPT_LINE_t Copy_tInterruptLine, void (*pCallBackFunction)(void)){
    EXTI_pNotificationFunction[Copy_tInterruptLine] = pCallBackFunction;
}

void MEXTI_voidClearPendingFlag(MEXTI_INTERRUPT_LINE_t Copy_tInterruptLine){
 8005eb0:	b480      	push	{r7}
 8005eb2:	b083      	sub	sp, #12
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	4603      	mov	r3, r0
 8005eb8:	71fb      	strb	r3, [r7, #7]
	SET_BIT(EXTI->PR,Copy_tInterruptLine);
 8005eba:	4b08      	ldr	r3, [pc, #32]	; (8005edc <MEXTI_voidClearPendingFlag+0x2c>)
 8005ebc:	695b      	ldr	r3, [r3, #20]
 8005ebe:	79fa      	ldrb	r2, [r7, #7]
 8005ec0:	2101      	movs	r1, #1
 8005ec2:	fa01 f202 	lsl.w	r2, r1, r2
 8005ec6:	4611      	mov	r1, r2
 8005ec8:	4a04      	ldr	r2, [pc, #16]	; (8005edc <MEXTI_voidClearPendingFlag+0x2c>)
 8005eca:	430b      	orrs	r3, r1
 8005ecc:	6153      	str	r3, [r2, #20]
}
 8005ece:	bf00      	nop
 8005ed0:	370c      	adds	r7, #12
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed8:	4770      	bx	lr
 8005eda:	bf00      	nop
 8005edc:	40013c00 	.word	0x40013c00

08005ee0 <MEXTI_u8GetPendingFlag>:

u8 MEXTI_u8GetPendingFlag(MEXTI_INTERRUPT_LINE_t Copy_tInterruptLine)
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	b083      	sub	sp, #12
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	71fb      	strb	r3, [r7, #7]
	return GET_BIT(EXTI->PR,Copy_tInterruptLine);
 8005eea:	4b07      	ldr	r3, [pc, #28]	; (8005f08 <MEXTI_u8GetPendingFlag+0x28>)
 8005eec:	695a      	ldr	r2, [r3, #20]
 8005eee:	79fb      	ldrb	r3, [r7, #7]
 8005ef0:	fa22 f303 	lsr.w	r3, r2, r3
 8005ef4:	b2db      	uxtb	r3, r3
 8005ef6:	f003 0301 	and.w	r3, r3, #1
 8005efa:	b2db      	uxtb	r3, r3
}
 8005efc:	4618      	mov	r0, r3
 8005efe:	370c      	adds	r7, #12
 8005f00:	46bd      	mov	sp, r7
 8005f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f06:	4770      	bx	lr
 8005f08:	40013c00 	.word	0x40013c00

08005f0c <EXTI0_IRQHandler>:


/*********************************************EXTI0_15_IRQHandlers******************************/
void EXTI0_IRQHandler(void){
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	af00      	add	r7, sp, #0
    if(EXTI_pNotificationFunction[0] != NULL){
 8005f10:	4b05      	ldr	r3, [pc, #20]	; (8005f28 <EXTI0_IRQHandler+0x1c>)
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d002      	beq.n	8005f1e <EXTI0_IRQHandler+0x12>
        EXTI_pNotificationFunction[0]();
 8005f18:	4b03      	ldr	r3, [pc, #12]	; (8005f28 <EXTI0_IRQHandler+0x1c>)
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4798      	blx	r3
    }
    MEXTI_voidClearPendingFlag(MEXTI_EXTI0);
 8005f1e:	2000      	movs	r0, #0
 8005f20:	f7ff ffc6 	bl	8005eb0 <MEXTI_voidClearPendingFlag>
}
 8005f24:	bf00      	nop
 8005f26:	bd80      	pop	{r7, pc}
 8005f28:	20000140 	.word	0x20000140

08005f2c <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void){
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	af00      	add	r7, sp, #0
    if(EXTI_pNotificationFunction[1] != NULL){
 8005f30:	4b05      	ldr	r3, [pc, #20]	; (8005f48 <EXTI1_IRQHandler+0x1c>)
 8005f32:	685b      	ldr	r3, [r3, #4]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d002      	beq.n	8005f3e <EXTI1_IRQHandler+0x12>
        EXTI_pNotificationFunction[1]();
 8005f38:	4b03      	ldr	r3, [pc, #12]	; (8005f48 <EXTI1_IRQHandler+0x1c>)
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	4798      	blx	r3
    }
    MEXTI_voidClearPendingFlag(MEXTI_EXTI1);
 8005f3e:	2001      	movs	r0, #1
 8005f40:	f7ff ffb6 	bl	8005eb0 <MEXTI_voidClearPendingFlag>
}
 8005f44:	bf00      	nop
 8005f46:	bd80      	pop	{r7, pc}
 8005f48:	20000140 	.word	0x20000140

08005f4c <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void){
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	af00      	add	r7, sp, #0
    if(EXTI_pNotificationFunction[2] != NULL){
 8005f50:	4b05      	ldr	r3, [pc, #20]	; (8005f68 <EXTI2_IRQHandler+0x1c>)
 8005f52:	689b      	ldr	r3, [r3, #8]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d002      	beq.n	8005f5e <EXTI2_IRQHandler+0x12>
        EXTI_pNotificationFunction[2]();
 8005f58:	4b03      	ldr	r3, [pc, #12]	; (8005f68 <EXTI2_IRQHandler+0x1c>)
 8005f5a:	689b      	ldr	r3, [r3, #8]
 8005f5c:	4798      	blx	r3
    }
    MEXTI_voidClearPendingFlag(MEXTI_EXTI2);
 8005f5e:	2002      	movs	r0, #2
 8005f60:	f7ff ffa6 	bl	8005eb0 <MEXTI_voidClearPendingFlag>
}
 8005f64:	bf00      	nop
 8005f66:	bd80      	pop	{r7, pc}
 8005f68:	20000140 	.word	0x20000140

08005f6c <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void){
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	af00      	add	r7, sp, #0
    if(EXTI_pNotificationFunction[3] != NULL){
 8005f70:	4b05      	ldr	r3, [pc, #20]	; (8005f88 <EXTI3_IRQHandler+0x1c>)
 8005f72:	68db      	ldr	r3, [r3, #12]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d002      	beq.n	8005f7e <EXTI3_IRQHandler+0x12>
        EXTI_pNotificationFunction[3]();
 8005f78:	4b03      	ldr	r3, [pc, #12]	; (8005f88 <EXTI3_IRQHandler+0x1c>)
 8005f7a:	68db      	ldr	r3, [r3, #12]
 8005f7c:	4798      	blx	r3
    }
    MEXTI_voidClearPendingFlag(MEXTI_EXTI3);
 8005f7e:	2003      	movs	r0, #3
 8005f80:	f7ff ff96 	bl	8005eb0 <MEXTI_voidClearPendingFlag>
}
 8005f84:	bf00      	nop
 8005f86:	bd80      	pop	{r7, pc}
 8005f88:	20000140 	.word	0x20000140

08005f8c <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void){
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	af00      	add	r7, sp, #0
    if(EXTI_pNotificationFunction[4] != NULL){
 8005f90:	4b05      	ldr	r3, [pc, #20]	; (8005fa8 <EXTI4_IRQHandler+0x1c>)
 8005f92:	691b      	ldr	r3, [r3, #16]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d002      	beq.n	8005f9e <EXTI4_IRQHandler+0x12>
        EXTI_pNotificationFunction[4]();
 8005f98:	4b03      	ldr	r3, [pc, #12]	; (8005fa8 <EXTI4_IRQHandler+0x1c>)
 8005f9a:	691b      	ldr	r3, [r3, #16]
 8005f9c:	4798      	blx	r3
    }
    MEXTI_voidClearPendingFlag(MEXTI_EXTI4);
 8005f9e:	2004      	movs	r0, #4
 8005fa0:	f7ff ff86 	bl	8005eb0 <MEXTI_voidClearPendingFlag>
}
 8005fa4:	bf00      	nop
 8005fa6:	bd80      	pop	{r7, pc}
 8005fa8:	20000140 	.word	0x20000140

08005fac <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	af00      	add	r7, sp, #0
	if(MEXTI_u8GetPendingFlag(MEXTI_EXTI5))
 8005fb0:	2005      	movs	r0, #5
 8005fb2:	f7ff ff95 	bl	8005ee0 <MEXTI_u8GetPendingFlag>
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d00a      	beq.n	8005fd2 <EXTI9_5_IRQHandler+0x26>
	{
		if(EXTI_pNotificationFunction[5] != NULL){
 8005fbc:	4b27      	ldr	r3, [pc, #156]	; (800605c <EXTI9_5_IRQHandler+0xb0>)
 8005fbe:	695b      	ldr	r3, [r3, #20]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d002      	beq.n	8005fca <EXTI9_5_IRQHandler+0x1e>
			EXTI_pNotificationFunction[5]();
 8005fc4:	4b25      	ldr	r3, [pc, #148]	; (800605c <EXTI9_5_IRQHandler+0xb0>)
 8005fc6:	695b      	ldr	r3, [r3, #20]
 8005fc8:	4798      	blx	r3
		}
		MEXTI_voidClearPendingFlag(MEXTI_EXTI5);
 8005fca:	2005      	movs	r0, #5
 8005fcc:	f7ff ff70 	bl	8005eb0 <MEXTI_voidClearPendingFlag>
		if(EXTI_pNotificationFunction[9] != NULL){
			EXTI_pNotificationFunction[9]();
		}
		MEXTI_voidClearPendingFlag(MEXTI_EXTI9);
	}
}
 8005fd0:	e042      	b.n	8006058 <EXTI9_5_IRQHandler+0xac>
	else if(MEXTI_u8GetPendingFlag(MEXTI_EXTI6))
 8005fd2:	2006      	movs	r0, #6
 8005fd4:	f7ff ff84 	bl	8005ee0 <MEXTI_u8GetPendingFlag>
 8005fd8:	4603      	mov	r3, r0
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d00a      	beq.n	8005ff4 <EXTI9_5_IRQHandler+0x48>
		if(EXTI_pNotificationFunction[6] != NULL){
 8005fde:	4b1f      	ldr	r3, [pc, #124]	; (800605c <EXTI9_5_IRQHandler+0xb0>)
 8005fe0:	699b      	ldr	r3, [r3, #24]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d002      	beq.n	8005fec <EXTI9_5_IRQHandler+0x40>
			EXTI_pNotificationFunction[6]();
 8005fe6:	4b1d      	ldr	r3, [pc, #116]	; (800605c <EXTI9_5_IRQHandler+0xb0>)
 8005fe8:	699b      	ldr	r3, [r3, #24]
 8005fea:	4798      	blx	r3
		MEXTI_voidClearPendingFlag(MEXTI_EXTI6);
 8005fec:	2006      	movs	r0, #6
 8005fee:	f7ff ff5f 	bl	8005eb0 <MEXTI_voidClearPendingFlag>
}
 8005ff2:	e031      	b.n	8006058 <EXTI9_5_IRQHandler+0xac>
	else if(MEXTI_u8GetPendingFlag(MEXTI_EXTI7))
 8005ff4:	2007      	movs	r0, #7
 8005ff6:	f7ff ff73 	bl	8005ee0 <MEXTI_u8GetPendingFlag>
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d00a      	beq.n	8006016 <EXTI9_5_IRQHandler+0x6a>
		if(EXTI_pNotificationFunction[7] != NULL){
 8006000:	4b16      	ldr	r3, [pc, #88]	; (800605c <EXTI9_5_IRQHandler+0xb0>)
 8006002:	69db      	ldr	r3, [r3, #28]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d002      	beq.n	800600e <EXTI9_5_IRQHandler+0x62>
			EXTI_pNotificationFunction[7]();
 8006008:	4b14      	ldr	r3, [pc, #80]	; (800605c <EXTI9_5_IRQHandler+0xb0>)
 800600a:	69db      	ldr	r3, [r3, #28]
 800600c:	4798      	blx	r3
		MEXTI_voidClearPendingFlag(MEXTI_EXTI7);
 800600e:	2007      	movs	r0, #7
 8006010:	f7ff ff4e 	bl	8005eb0 <MEXTI_voidClearPendingFlag>
}
 8006014:	e020      	b.n	8006058 <EXTI9_5_IRQHandler+0xac>
	else if (MEXTI_u8GetPendingFlag(MEXTI_EXTI8))
 8006016:	2008      	movs	r0, #8
 8006018:	f7ff ff62 	bl	8005ee0 <MEXTI_u8GetPendingFlag>
 800601c:	4603      	mov	r3, r0
 800601e:	2b00      	cmp	r3, #0
 8006020:	d00a      	beq.n	8006038 <EXTI9_5_IRQHandler+0x8c>
		if(EXTI_pNotificationFunction[8] != NULL){
 8006022:	4b0e      	ldr	r3, [pc, #56]	; (800605c <EXTI9_5_IRQHandler+0xb0>)
 8006024:	6a1b      	ldr	r3, [r3, #32]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d002      	beq.n	8006030 <EXTI9_5_IRQHandler+0x84>
			EXTI_pNotificationFunction[8]();
 800602a:	4b0c      	ldr	r3, [pc, #48]	; (800605c <EXTI9_5_IRQHandler+0xb0>)
 800602c:	6a1b      	ldr	r3, [r3, #32]
 800602e:	4798      	blx	r3
		MEXTI_voidClearPendingFlag(MEXTI_EXTI8);
 8006030:	2008      	movs	r0, #8
 8006032:	f7ff ff3d 	bl	8005eb0 <MEXTI_voidClearPendingFlag>
}
 8006036:	e00f      	b.n	8006058 <EXTI9_5_IRQHandler+0xac>
	else if (MEXTI_u8GetPendingFlag(MEXTI_EXTI9))
 8006038:	2009      	movs	r0, #9
 800603a:	f7ff ff51 	bl	8005ee0 <MEXTI_u8GetPendingFlag>
 800603e:	4603      	mov	r3, r0
 8006040:	2b00      	cmp	r3, #0
 8006042:	d009      	beq.n	8006058 <EXTI9_5_IRQHandler+0xac>
		if(EXTI_pNotificationFunction[9] != NULL){
 8006044:	4b05      	ldr	r3, [pc, #20]	; (800605c <EXTI9_5_IRQHandler+0xb0>)
 8006046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006048:	2b00      	cmp	r3, #0
 800604a:	d002      	beq.n	8006052 <EXTI9_5_IRQHandler+0xa6>
			EXTI_pNotificationFunction[9]();
 800604c:	4b03      	ldr	r3, [pc, #12]	; (800605c <EXTI9_5_IRQHandler+0xb0>)
 800604e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006050:	4798      	blx	r3
		MEXTI_voidClearPendingFlag(MEXTI_EXTI9);
 8006052:	2009      	movs	r0, #9
 8006054:	f7ff ff2c 	bl	8005eb0 <MEXTI_voidClearPendingFlag>
}
 8006058:	bf00      	nop
 800605a:	bd80      	pop	{r7, pc}
 800605c:	20000140 	.word	0x20000140

08006060 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 8006060:	b580      	push	{r7, lr}
 8006062:	af00      	add	r7, sp, #0
	if(MEXTI_u8GetPendingFlag(MEXTI_EXTI10))
 8006064:	200a      	movs	r0, #10
 8006066:	f7ff ff3b 	bl	8005ee0 <MEXTI_u8GetPendingFlag>
 800606a:	4603      	mov	r3, r0
 800606c:	2b00      	cmp	r3, #0
 800606e:	d00a      	beq.n	8006086 <EXTI15_10_IRQHandler+0x26>
	{
		if(EXTI_pNotificationFunction[10] != NULL){
 8006070:	4b30      	ldr	r3, [pc, #192]	; (8006134 <EXTI15_10_IRQHandler+0xd4>)
 8006072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006074:	2b00      	cmp	r3, #0
 8006076:	d002      	beq.n	800607e <EXTI15_10_IRQHandler+0x1e>
			EXTI_pNotificationFunction[10]();
 8006078:	4b2e      	ldr	r3, [pc, #184]	; (8006134 <EXTI15_10_IRQHandler+0xd4>)
 800607a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800607c:	4798      	blx	r3
		}
		MEXTI_voidClearPendingFlag(MEXTI_EXTI10);
 800607e:	200a      	movs	r0, #10
 8006080:	f7ff ff16 	bl	8005eb0 <MEXTI_voidClearPendingFlag>
		if(EXTI_pNotificationFunction[15] != NULL){
			EXTI_pNotificationFunction[15]();
		}
		MEXTI_voidClearPendingFlag(MEXTI_EXTI15);
	}
}
 8006084:	e053      	b.n	800612e <EXTI15_10_IRQHandler+0xce>
	else if(MEXTI_u8GetPendingFlag(MEXTI_EXTI11))
 8006086:	200b      	movs	r0, #11
 8006088:	f7ff ff2a 	bl	8005ee0 <MEXTI_u8GetPendingFlag>
 800608c:	4603      	mov	r3, r0
 800608e:	2b00      	cmp	r3, #0
 8006090:	d00a      	beq.n	80060a8 <EXTI15_10_IRQHandler+0x48>
		if(EXTI_pNotificationFunction[11] != NULL){
 8006092:	4b28      	ldr	r3, [pc, #160]	; (8006134 <EXTI15_10_IRQHandler+0xd4>)
 8006094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006096:	2b00      	cmp	r3, #0
 8006098:	d002      	beq.n	80060a0 <EXTI15_10_IRQHandler+0x40>
			EXTI_pNotificationFunction[11]();
 800609a:	4b26      	ldr	r3, [pc, #152]	; (8006134 <EXTI15_10_IRQHandler+0xd4>)
 800609c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800609e:	4798      	blx	r3
		MEXTI_voidClearPendingFlag(MEXTI_EXTI11);
 80060a0:	200b      	movs	r0, #11
 80060a2:	f7ff ff05 	bl	8005eb0 <MEXTI_voidClearPendingFlag>
}
 80060a6:	e042      	b.n	800612e <EXTI15_10_IRQHandler+0xce>
	else if(MEXTI_u8GetPendingFlag(MEXTI_EXTI12))
 80060a8:	200c      	movs	r0, #12
 80060aa:	f7ff ff19 	bl	8005ee0 <MEXTI_u8GetPendingFlag>
 80060ae:	4603      	mov	r3, r0
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d00a      	beq.n	80060ca <EXTI15_10_IRQHandler+0x6a>
		if(EXTI_pNotificationFunction[12] != NULL){
 80060b4:	4b1f      	ldr	r3, [pc, #124]	; (8006134 <EXTI15_10_IRQHandler+0xd4>)
 80060b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d002      	beq.n	80060c2 <EXTI15_10_IRQHandler+0x62>
			EXTI_pNotificationFunction[12]();
 80060bc:	4b1d      	ldr	r3, [pc, #116]	; (8006134 <EXTI15_10_IRQHandler+0xd4>)
 80060be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060c0:	4798      	blx	r3
		MEXTI_voidClearPendingFlag(MEXTI_EXTI12);
 80060c2:	200c      	movs	r0, #12
 80060c4:	f7ff fef4 	bl	8005eb0 <MEXTI_voidClearPendingFlag>
}
 80060c8:	e031      	b.n	800612e <EXTI15_10_IRQHandler+0xce>
	else if (MEXTI_u8GetPendingFlag(MEXTI_EXTI13))
 80060ca:	200d      	movs	r0, #13
 80060cc:	f7ff ff08 	bl	8005ee0 <MEXTI_u8GetPendingFlag>
 80060d0:	4603      	mov	r3, r0
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d00a      	beq.n	80060ec <EXTI15_10_IRQHandler+0x8c>
		if(EXTI_pNotificationFunction[13] != NULL){
 80060d6:	4b17      	ldr	r3, [pc, #92]	; (8006134 <EXTI15_10_IRQHandler+0xd4>)
 80060d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d002      	beq.n	80060e4 <EXTI15_10_IRQHandler+0x84>
			EXTI_pNotificationFunction[13]();
 80060de:	4b15      	ldr	r3, [pc, #84]	; (8006134 <EXTI15_10_IRQHandler+0xd4>)
 80060e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060e2:	4798      	blx	r3
		MEXTI_voidClearPendingFlag(MEXTI_EXTI13);
 80060e4:	200d      	movs	r0, #13
 80060e6:	f7ff fee3 	bl	8005eb0 <MEXTI_voidClearPendingFlag>
}
 80060ea:	e020      	b.n	800612e <EXTI15_10_IRQHandler+0xce>
	else if (MEXTI_u8GetPendingFlag(MEXTI_EXTI14))
 80060ec:	200e      	movs	r0, #14
 80060ee:	f7ff fef7 	bl	8005ee0 <MEXTI_u8GetPendingFlag>
 80060f2:	4603      	mov	r3, r0
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d00a      	beq.n	800610e <EXTI15_10_IRQHandler+0xae>
		if(EXTI_pNotificationFunction[14] != NULL){
 80060f8:	4b0e      	ldr	r3, [pc, #56]	; (8006134 <EXTI15_10_IRQHandler+0xd4>)
 80060fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d002      	beq.n	8006106 <EXTI15_10_IRQHandler+0xa6>
			EXTI_pNotificationFunction[14]();
 8006100:	4b0c      	ldr	r3, [pc, #48]	; (8006134 <EXTI15_10_IRQHandler+0xd4>)
 8006102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006104:	4798      	blx	r3
		MEXTI_voidClearPendingFlag(MEXTI_EXTI14);
 8006106:	200e      	movs	r0, #14
 8006108:	f7ff fed2 	bl	8005eb0 <MEXTI_voidClearPendingFlag>
}
 800610c:	e00f      	b.n	800612e <EXTI15_10_IRQHandler+0xce>
	else if (MEXTI_u8GetPendingFlag(MEXTI_EXTI15))
 800610e:	200f      	movs	r0, #15
 8006110:	f7ff fee6 	bl	8005ee0 <MEXTI_u8GetPendingFlag>
 8006114:	4603      	mov	r3, r0
 8006116:	2b00      	cmp	r3, #0
 8006118:	d009      	beq.n	800612e <EXTI15_10_IRQHandler+0xce>
		if(EXTI_pNotificationFunction[15] != NULL){
 800611a:	4b06      	ldr	r3, [pc, #24]	; (8006134 <EXTI15_10_IRQHandler+0xd4>)
 800611c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800611e:	2b00      	cmp	r3, #0
 8006120:	d002      	beq.n	8006128 <EXTI15_10_IRQHandler+0xc8>
			EXTI_pNotificationFunction[15]();
 8006122:	4b04      	ldr	r3, [pc, #16]	; (8006134 <EXTI15_10_IRQHandler+0xd4>)
 8006124:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006126:	4798      	blx	r3
		MEXTI_voidClearPendingFlag(MEXTI_EXTI15);
 8006128:	200f      	movs	r0, #15
 800612a:	f7ff fec1 	bl	8005eb0 <MEXTI_voidClearPendingFlag>
}
 800612e:	bf00      	nop
 8006130:	bd80      	pop	{r7, pc}
 8006132:	bf00      	nop
 8006134:	20000140 	.word	0x20000140

08006138 <GPIO_voidSetPinMode>:
#include"GPIO_config.h"
#include"GPIO_interface.h"
#include"GPIO_private.h"

void GPIO_voidSetPinMode(port_index_t Copy_PortIndex, pin_index_t Copy_PinIndex,
                         gpio_pin_mode_t Copy_GPIOPinMode) {
 8006138:	b480      	push	{r7}
 800613a:	b083      	sub	sp, #12
 800613c:	af00      	add	r7, sp, #0
 800613e:	4603      	mov	r3, r0
 8006140:	71fb      	strb	r3, [r7, #7]
 8006142:	460b      	mov	r3, r1
 8006144:	71bb      	strb	r3, [r7, #6]
 8006146:	4613      	mov	r3, r2
 8006148:	717b      	strb	r3, [r7, #5]
  switch (Copy_PortIndex) {
 800614a:	79fb      	ldrb	r3, [r7, #7]
 800614c:	2b02      	cmp	r3, #2
 800614e:	d02c      	beq.n	80061aa <GPIO_voidSetPinMode+0x72>
 8006150:	2b02      	cmp	r3, #2
 8006152:	dc3d      	bgt.n	80061d0 <GPIO_voidSetPinMode+0x98>
 8006154:	2b00      	cmp	r3, #0
 8006156:	d002      	beq.n	800615e <GPIO_voidSetPinMode+0x26>
 8006158:	2b01      	cmp	r3, #1
 800615a:	d013      	beq.n	8006184 <GPIO_voidSetPinMode+0x4c>
      MODIFY_REG(GPIOC_MODER,
                 GPIO_MODER_CLEAR_MASK << GPIO_MODER_PIN_BITS * Copy_PinIndex,
                 Copy_GPIOPinMode << GPIO_MODER_PIN_BITS * Copy_PinIndex);
      break;
    default:
      break;
 800615c:	e038      	b.n	80061d0 <GPIO_voidSetPinMode+0x98>
      MODIFY_REG(GPIOA_MODER,
 800615e:	4b20      	ldr	r3, [pc, #128]	; (80061e0 <GPIO_voidSetPinMode+0xa8>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	79ba      	ldrb	r2, [r7, #6]
 8006164:	0052      	lsls	r2, r2, #1
 8006166:	2103      	movs	r1, #3
 8006168:	fa01 f202 	lsl.w	r2, r1, r2
 800616c:	43d2      	mvns	r2, r2
 800616e:	4013      	ands	r3, r2
 8006170:	7979      	ldrb	r1, [r7, #5]
 8006172:	79ba      	ldrb	r2, [r7, #6]
 8006174:	0052      	lsls	r2, r2, #1
 8006176:	fa01 f202 	lsl.w	r2, r1, r2
 800617a:	4611      	mov	r1, r2
 800617c:	4a18      	ldr	r2, [pc, #96]	; (80061e0 <GPIO_voidSetPinMode+0xa8>)
 800617e:	430b      	orrs	r3, r1
 8006180:	6013      	str	r3, [r2, #0]
      break;
 8006182:	e026      	b.n	80061d2 <GPIO_voidSetPinMode+0x9a>
      MODIFY_REG(GPIOB_MODER,
 8006184:	4b17      	ldr	r3, [pc, #92]	; (80061e4 <GPIO_voidSetPinMode+0xac>)
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	79ba      	ldrb	r2, [r7, #6]
 800618a:	0052      	lsls	r2, r2, #1
 800618c:	2103      	movs	r1, #3
 800618e:	fa01 f202 	lsl.w	r2, r1, r2
 8006192:	43d2      	mvns	r2, r2
 8006194:	4013      	ands	r3, r2
 8006196:	7979      	ldrb	r1, [r7, #5]
 8006198:	79ba      	ldrb	r2, [r7, #6]
 800619a:	0052      	lsls	r2, r2, #1
 800619c:	fa01 f202 	lsl.w	r2, r1, r2
 80061a0:	4611      	mov	r1, r2
 80061a2:	4a10      	ldr	r2, [pc, #64]	; (80061e4 <GPIO_voidSetPinMode+0xac>)
 80061a4:	430b      	orrs	r3, r1
 80061a6:	6013      	str	r3, [r2, #0]
      break;
 80061a8:	e013      	b.n	80061d2 <GPIO_voidSetPinMode+0x9a>
      MODIFY_REG(GPIOC_MODER,
 80061aa:	4b0f      	ldr	r3, [pc, #60]	; (80061e8 <GPIO_voidSetPinMode+0xb0>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	79ba      	ldrb	r2, [r7, #6]
 80061b0:	0052      	lsls	r2, r2, #1
 80061b2:	2103      	movs	r1, #3
 80061b4:	fa01 f202 	lsl.w	r2, r1, r2
 80061b8:	43d2      	mvns	r2, r2
 80061ba:	4013      	ands	r3, r2
 80061bc:	7979      	ldrb	r1, [r7, #5]
 80061be:	79ba      	ldrb	r2, [r7, #6]
 80061c0:	0052      	lsls	r2, r2, #1
 80061c2:	fa01 f202 	lsl.w	r2, r1, r2
 80061c6:	4611      	mov	r1, r2
 80061c8:	4a07      	ldr	r2, [pc, #28]	; (80061e8 <GPIO_voidSetPinMode+0xb0>)
 80061ca:	430b      	orrs	r3, r1
 80061cc:	6013      	str	r3, [r2, #0]
      break;
 80061ce:	e000      	b.n	80061d2 <GPIO_voidSetPinMode+0x9a>
      break;
 80061d0:	bf00      	nop
  }
}
 80061d2:	bf00      	nop
 80061d4:	370c      	adds	r7, #12
 80061d6:	46bd      	mov	sp, r7
 80061d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061dc:	4770      	bx	lr
 80061de:	bf00      	nop
 80061e0:	40020000 	.word	0x40020000
 80061e4:	40020400 	.word	0x40020400
 80061e8:	40020800 	.word	0x40020800

080061ec <GPIO_voidSetPinOutputMode>:
void GPIO_voidSetPinOutputMode(port_index_t Copy_PortIndex,
                               pin_index_t Copy_PinIndex,
                               output_pin_mode_t Copy_OutputPinMode) {
 80061ec:	b480      	push	{r7}
 80061ee:	b083      	sub	sp, #12
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	4603      	mov	r3, r0
 80061f4:	71fb      	strb	r3, [r7, #7]
 80061f6:	460b      	mov	r3, r1
 80061f8:	71bb      	strb	r3, [r7, #6]
 80061fa:	4613      	mov	r3, r2
 80061fc:	717b      	strb	r3, [r7, #5]
  switch (Copy_PortIndex) {
 80061fe:	79fb      	ldrb	r3, [r7, #7]
 8006200:	2b02      	cmp	r3, #2
 8006202:	d028      	beq.n	8006256 <GPIO_voidSetPinOutputMode+0x6a>
 8006204:	2b02      	cmp	r3, #2
 8006206:	dc37      	bgt.n	8006278 <GPIO_voidSetPinOutputMode+0x8c>
 8006208:	2b00      	cmp	r3, #0
 800620a:	d002      	beq.n	8006212 <GPIO_voidSetPinOutputMode+0x26>
 800620c:	2b01      	cmp	r3, #1
 800620e:	d011      	beq.n	8006234 <GPIO_voidSetPinOutputMode+0x48>
    case GPIO_PORTC:
      MODIFY_REG(GPIOC_OTYPER, GPIO_OTYPER_CLEAR_MASK << Copy_PinIndex,
                 Copy_OutputPinMode << Copy_PinIndex);
      break;
    default:
      break;
 8006210:	e032      	b.n	8006278 <GPIO_voidSetPinOutputMode+0x8c>
      MODIFY_REG(GPIOB_OTYPER, GPIO_OTYPER_CLEAR_MASK << Copy_PinIndex,
 8006212:	4b1d      	ldr	r3, [pc, #116]	; (8006288 <GPIO_voidSetPinOutputMode+0x9c>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	79ba      	ldrb	r2, [r7, #6]
 8006218:	2101      	movs	r1, #1
 800621a:	fa01 f202 	lsl.w	r2, r1, r2
 800621e:	43d2      	mvns	r2, r2
 8006220:	4013      	ands	r3, r2
 8006222:	7979      	ldrb	r1, [r7, #5]
 8006224:	79ba      	ldrb	r2, [r7, #6]
 8006226:	fa01 f202 	lsl.w	r2, r1, r2
 800622a:	4611      	mov	r1, r2
 800622c:	4a16      	ldr	r2, [pc, #88]	; (8006288 <GPIO_voidSetPinOutputMode+0x9c>)
 800622e:	430b      	orrs	r3, r1
 8006230:	6013      	str	r3, [r2, #0]
      break;
 8006232:	e022      	b.n	800627a <GPIO_voidSetPinOutputMode+0x8e>
      MODIFY_REG(GPIOB_OTYPER, GPIO_OTYPER_CLEAR_MASK << Copy_PinIndex,
 8006234:	4b14      	ldr	r3, [pc, #80]	; (8006288 <GPIO_voidSetPinOutputMode+0x9c>)
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	79ba      	ldrb	r2, [r7, #6]
 800623a:	2101      	movs	r1, #1
 800623c:	fa01 f202 	lsl.w	r2, r1, r2
 8006240:	43d2      	mvns	r2, r2
 8006242:	4013      	ands	r3, r2
 8006244:	7979      	ldrb	r1, [r7, #5]
 8006246:	79ba      	ldrb	r2, [r7, #6]
 8006248:	fa01 f202 	lsl.w	r2, r1, r2
 800624c:	4611      	mov	r1, r2
 800624e:	4a0e      	ldr	r2, [pc, #56]	; (8006288 <GPIO_voidSetPinOutputMode+0x9c>)
 8006250:	430b      	orrs	r3, r1
 8006252:	6013      	str	r3, [r2, #0]
      break;
 8006254:	e011      	b.n	800627a <GPIO_voidSetPinOutputMode+0x8e>
      MODIFY_REG(GPIOC_OTYPER, GPIO_OTYPER_CLEAR_MASK << Copy_PinIndex,
 8006256:	4b0d      	ldr	r3, [pc, #52]	; (800628c <GPIO_voidSetPinOutputMode+0xa0>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	79ba      	ldrb	r2, [r7, #6]
 800625c:	2101      	movs	r1, #1
 800625e:	fa01 f202 	lsl.w	r2, r1, r2
 8006262:	43d2      	mvns	r2, r2
 8006264:	4013      	ands	r3, r2
 8006266:	7979      	ldrb	r1, [r7, #5]
 8006268:	79ba      	ldrb	r2, [r7, #6]
 800626a:	fa01 f202 	lsl.w	r2, r1, r2
 800626e:	4611      	mov	r1, r2
 8006270:	4a06      	ldr	r2, [pc, #24]	; (800628c <GPIO_voidSetPinOutputMode+0xa0>)
 8006272:	430b      	orrs	r3, r1
 8006274:	6013      	str	r3, [r2, #0]
      break;
 8006276:	e000      	b.n	800627a <GPIO_voidSetPinOutputMode+0x8e>
      break;
 8006278:	bf00      	nop
  }
}
 800627a:	bf00      	nop
 800627c:	370c      	adds	r7, #12
 800627e:	46bd      	mov	sp, r7
 8006280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006284:	4770      	bx	lr
 8006286:	bf00      	nop
 8006288:	40020404 	.word	0x40020404
 800628c:	40020804 	.word	0x40020804

08006290 <GPIO_voidSetPinAlternateFunction>:
void GPIO_voidSetPinAlternateFunction(port_index_t Copy_PortIndex, pin_index_t Copy_PinIndex, u8 Copy_u8AlternateFunction)
{
 8006290:	b480      	push	{r7}
 8006292:	b083      	sub	sp, #12
 8006294:	af00      	add	r7, sp, #0
 8006296:	4603      	mov	r3, r0
 8006298:	71fb      	strb	r3, [r7, #7]
 800629a:	460b      	mov	r3, r1
 800629c:	71bb      	strb	r3, [r7, #6]
 800629e:	4613      	mov	r3, r2
 80062a0:	717b      	strb	r3, [r7, #5]
	switch (Copy_PortIndex) {
 80062a2:	79fb      	ldrb	r3, [r7, #7]
 80062a4:	2b02      	cmp	r3, #2
 80062a6:	d05d      	beq.n	8006364 <GPIO_voidSetPinAlternateFunction+0xd4>
 80062a8:	2b02      	cmp	r3, #2
 80062aa:	f300 8086 	bgt.w	80063ba <GPIO_voidSetPinAlternateFunction+0x12a>
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d002      	beq.n	80062b8 <GPIO_voidSetPinAlternateFunction+0x28>
 80062b2:	2b01      	cmp	r3, #1
 80062b4:	d02b      	beq.n	800630e <GPIO_voidSetPinAlternateFunction+0x7e>
	    		MODIFY_REG(GPIOC_AFRH, GPIO_AF_CLEAR_MASK << (Copy_PinIndex-8) * GPIO_AF_PIN_BITS,
	    				Copy_u8AlternateFunction << (Copy_PinIndex-8) * GPIO_AF_PIN_BITS);
	    	}
	      break;
	    default:
	      break;
 80062b6:	e080      	b.n	80063ba <GPIO_voidSetPinAlternateFunction+0x12a>
             if(Copy_PinIndex < 8)
 80062b8:	79bb      	ldrb	r3, [r7, #6]
 80062ba:	2b07      	cmp	r3, #7
 80062bc:	d812      	bhi.n	80062e4 <GPIO_voidSetPinAlternateFunction+0x54>
            	 MODIFY_REG(GPIOA_AFRL, GPIO_AF_CLEAR_MASK << Copy_PinIndex * GPIO_AF_PIN_BITS,
 80062be:	4b42      	ldr	r3, [pc, #264]	; (80063c8 <GPIO_voidSetPinAlternateFunction+0x138>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	79ba      	ldrb	r2, [r7, #6]
 80062c4:	0092      	lsls	r2, r2, #2
 80062c6:	210f      	movs	r1, #15
 80062c8:	fa01 f202 	lsl.w	r2, r1, r2
 80062cc:	43d2      	mvns	r2, r2
 80062ce:	4013      	ands	r3, r2
 80062d0:	7979      	ldrb	r1, [r7, #5]
 80062d2:	79ba      	ldrb	r2, [r7, #6]
 80062d4:	0092      	lsls	r2, r2, #2
 80062d6:	fa01 f202 	lsl.w	r2, r1, r2
 80062da:	4611      	mov	r1, r2
 80062dc:	4a3a      	ldr	r2, [pc, #232]	; (80063c8 <GPIO_voidSetPinAlternateFunction+0x138>)
 80062de:	430b      	orrs	r3, r1
 80062e0:	6013      	str	r3, [r2, #0]
	      break;
 80062e2:	e06b      	b.n	80063bc <GPIO_voidSetPinAlternateFunction+0x12c>
            	 MODIFY_REG(GPIOA_AFRH, GPIO_AF_CLEAR_MASK << (Copy_PinIndex-8) * GPIO_AF_PIN_BITS,
 80062e4:	4b39      	ldr	r3, [pc, #228]	; (80063cc <GPIO_voidSetPinAlternateFunction+0x13c>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	79ba      	ldrb	r2, [r7, #6]
 80062ea:	3a08      	subs	r2, #8
 80062ec:	0092      	lsls	r2, r2, #2
 80062ee:	210f      	movs	r1, #15
 80062f0:	fa01 f202 	lsl.w	r2, r1, r2
 80062f4:	43d2      	mvns	r2, r2
 80062f6:	4013      	ands	r3, r2
 80062f8:	7979      	ldrb	r1, [r7, #5]
 80062fa:	79ba      	ldrb	r2, [r7, #6]
 80062fc:	3a08      	subs	r2, #8
 80062fe:	0092      	lsls	r2, r2, #2
 8006300:	fa01 f202 	lsl.w	r2, r1, r2
 8006304:	4611      	mov	r1, r2
 8006306:	4a31      	ldr	r2, [pc, #196]	; (80063cc <GPIO_voidSetPinAlternateFunction+0x13c>)
 8006308:	430b      	orrs	r3, r1
 800630a:	6013      	str	r3, [r2, #0]
	      break;
 800630c:	e056      	b.n	80063bc <GPIO_voidSetPinAlternateFunction+0x12c>
	    	if(Copy_PinIndex < 8)
 800630e:	79bb      	ldrb	r3, [r7, #6]
 8006310:	2b07      	cmp	r3, #7
 8006312:	d812      	bhi.n	800633a <GPIO_voidSetPinAlternateFunction+0xaa>
	    		MODIFY_REG(GPIOB_AFRL, GPIO_AF_CLEAR_MASK << Copy_PinIndex * GPIO_AF_PIN_BITS,
 8006314:	4b2e      	ldr	r3, [pc, #184]	; (80063d0 <GPIO_voidSetPinAlternateFunction+0x140>)
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	79ba      	ldrb	r2, [r7, #6]
 800631a:	0092      	lsls	r2, r2, #2
 800631c:	210f      	movs	r1, #15
 800631e:	fa01 f202 	lsl.w	r2, r1, r2
 8006322:	43d2      	mvns	r2, r2
 8006324:	4013      	ands	r3, r2
 8006326:	7979      	ldrb	r1, [r7, #5]
 8006328:	79ba      	ldrb	r2, [r7, #6]
 800632a:	0092      	lsls	r2, r2, #2
 800632c:	fa01 f202 	lsl.w	r2, r1, r2
 8006330:	4611      	mov	r1, r2
 8006332:	4a27      	ldr	r2, [pc, #156]	; (80063d0 <GPIO_voidSetPinAlternateFunction+0x140>)
 8006334:	430b      	orrs	r3, r1
 8006336:	6013      	str	r3, [r2, #0]
	      break;
 8006338:	e040      	b.n	80063bc <GPIO_voidSetPinAlternateFunction+0x12c>
	    		MODIFY_REG(GPIOB_AFRH, GPIO_AF_CLEAR_MASK << (Copy_PinIndex-8) * GPIO_AF_PIN_BITS,
 800633a:	4b26      	ldr	r3, [pc, #152]	; (80063d4 <GPIO_voidSetPinAlternateFunction+0x144>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	79ba      	ldrb	r2, [r7, #6]
 8006340:	3a08      	subs	r2, #8
 8006342:	0092      	lsls	r2, r2, #2
 8006344:	210f      	movs	r1, #15
 8006346:	fa01 f202 	lsl.w	r2, r1, r2
 800634a:	43d2      	mvns	r2, r2
 800634c:	4013      	ands	r3, r2
 800634e:	7979      	ldrb	r1, [r7, #5]
 8006350:	79ba      	ldrb	r2, [r7, #6]
 8006352:	3a08      	subs	r2, #8
 8006354:	0092      	lsls	r2, r2, #2
 8006356:	fa01 f202 	lsl.w	r2, r1, r2
 800635a:	4611      	mov	r1, r2
 800635c:	4a1d      	ldr	r2, [pc, #116]	; (80063d4 <GPIO_voidSetPinAlternateFunction+0x144>)
 800635e:	430b      	orrs	r3, r1
 8006360:	6013      	str	r3, [r2, #0]
	      break;
 8006362:	e02b      	b.n	80063bc <GPIO_voidSetPinAlternateFunction+0x12c>
	    	if(Copy_PinIndex < 8)
 8006364:	79bb      	ldrb	r3, [r7, #6]
 8006366:	2b07      	cmp	r3, #7
 8006368:	d812      	bhi.n	8006390 <GPIO_voidSetPinAlternateFunction+0x100>
	    		MODIFY_REG(GPIOC_AFRL, GPIO_AF_CLEAR_MASK << Copy_PinIndex * GPIO_AF_PIN_BITS,
 800636a:	4b1b      	ldr	r3, [pc, #108]	; (80063d8 <GPIO_voidSetPinAlternateFunction+0x148>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	79ba      	ldrb	r2, [r7, #6]
 8006370:	0092      	lsls	r2, r2, #2
 8006372:	210f      	movs	r1, #15
 8006374:	fa01 f202 	lsl.w	r2, r1, r2
 8006378:	43d2      	mvns	r2, r2
 800637a:	4013      	ands	r3, r2
 800637c:	7979      	ldrb	r1, [r7, #5]
 800637e:	79ba      	ldrb	r2, [r7, #6]
 8006380:	0092      	lsls	r2, r2, #2
 8006382:	fa01 f202 	lsl.w	r2, r1, r2
 8006386:	4611      	mov	r1, r2
 8006388:	4a13      	ldr	r2, [pc, #76]	; (80063d8 <GPIO_voidSetPinAlternateFunction+0x148>)
 800638a:	430b      	orrs	r3, r1
 800638c:	6013      	str	r3, [r2, #0]
	      break;
 800638e:	e015      	b.n	80063bc <GPIO_voidSetPinAlternateFunction+0x12c>
	    		MODIFY_REG(GPIOC_AFRH, GPIO_AF_CLEAR_MASK << (Copy_PinIndex-8) * GPIO_AF_PIN_BITS,
 8006390:	4b12      	ldr	r3, [pc, #72]	; (80063dc <GPIO_voidSetPinAlternateFunction+0x14c>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	79ba      	ldrb	r2, [r7, #6]
 8006396:	3a08      	subs	r2, #8
 8006398:	0092      	lsls	r2, r2, #2
 800639a:	210f      	movs	r1, #15
 800639c:	fa01 f202 	lsl.w	r2, r1, r2
 80063a0:	43d2      	mvns	r2, r2
 80063a2:	4013      	ands	r3, r2
 80063a4:	7979      	ldrb	r1, [r7, #5]
 80063a6:	79ba      	ldrb	r2, [r7, #6]
 80063a8:	3a08      	subs	r2, #8
 80063aa:	0092      	lsls	r2, r2, #2
 80063ac:	fa01 f202 	lsl.w	r2, r1, r2
 80063b0:	4611      	mov	r1, r2
 80063b2:	4a0a      	ldr	r2, [pc, #40]	; (80063dc <GPIO_voidSetPinAlternateFunction+0x14c>)
 80063b4:	430b      	orrs	r3, r1
 80063b6:	6013      	str	r3, [r2, #0]
	      break;
 80063b8:	e000      	b.n	80063bc <GPIO_voidSetPinAlternateFunction+0x12c>
	      break;
 80063ba:	bf00      	nop
	  }
}
 80063bc:	bf00      	nop
 80063be:	370c      	adds	r7, #12
 80063c0:	46bd      	mov	sp, r7
 80063c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c6:	4770      	bx	lr
 80063c8:	40020020 	.word	0x40020020
 80063cc:	40020024 	.word	0x40020024
 80063d0:	40020420 	.word	0x40020420
 80063d4:	40020424 	.word	0x40020424
 80063d8:	40020820 	.word	0x40020820
 80063dc:	40020824 	.word	0x40020824

080063e0 <GPIO_voidSetPinOutputSpeed>:
void GPIO_voidSetPinOutputSpeed(port_index_t Copy_PortIndex,
                                pin_index_t Copy_PinIndex,
                                output_pin_speed_mode_t Copy_OutputPinSpeed) {
 80063e0:	b480      	push	{r7}
 80063e2:	b083      	sub	sp, #12
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	4603      	mov	r3, r0
 80063e8:	71fb      	strb	r3, [r7, #7]
 80063ea:	460b      	mov	r3, r1
 80063ec:	71bb      	strb	r3, [r7, #6]
 80063ee:	4613      	mov	r3, r2
 80063f0:	717b      	strb	r3, [r7, #5]
  switch (Copy_PortIndex) {
 80063f2:	79fb      	ldrb	r3, [r7, #7]
 80063f4:	2b02      	cmp	r3, #2
 80063f6:	d02c      	beq.n	8006452 <GPIO_voidSetPinOutputSpeed+0x72>
 80063f8:	2b02      	cmp	r3, #2
 80063fa:	dc3d      	bgt.n	8006478 <GPIO_voidSetPinOutputSpeed+0x98>
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d002      	beq.n	8006406 <GPIO_voidSetPinOutputSpeed+0x26>
 8006400:	2b01      	cmp	r3, #1
 8006402:	d013      	beq.n	800642c <GPIO_voidSetPinOutputSpeed+0x4c>
      MODIFY_REG(GPIOC_OSPEEDR,
                 GPIO_MODER_CLEAR_MASK << GPIO_OSPEEDR_PIN_BITS * Copy_PinIndex,
                 Copy_OutputPinSpeed << GPIO_OSPEEDR_PIN_BITS * Copy_PinIndex);
      break;
    default:
      break;
 8006404:	e038      	b.n	8006478 <GPIO_voidSetPinOutputSpeed+0x98>
      MODIFY_REG(
 8006406:	4b20      	ldr	r3, [pc, #128]	; (8006488 <GPIO_voidSetPinOutputSpeed+0xa8>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	79ba      	ldrb	r2, [r7, #6]
 800640c:	0052      	lsls	r2, r2, #1
 800640e:	2103      	movs	r1, #3
 8006410:	fa01 f202 	lsl.w	r2, r1, r2
 8006414:	43d2      	mvns	r2, r2
 8006416:	4013      	ands	r3, r2
 8006418:	7979      	ldrb	r1, [r7, #5]
 800641a:	79ba      	ldrb	r2, [r7, #6]
 800641c:	0052      	lsls	r2, r2, #1
 800641e:	fa01 f202 	lsl.w	r2, r1, r2
 8006422:	4611      	mov	r1, r2
 8006424:	4a18      	ldr	r2, [pc, #96]	; (8006488 <GPIO_voidSetPinOutputSpeed+0xa8>)
 8006426:	430b      	orrs	r3, r1
 8006428:	6013      	str	r3, [r2, #0]
      break;
 800642a:	e026      	b.n	800647a <GPIO_voidSetPinOutputSpeed+0x9a>
      MODIFY_REG(
 800642c:	4b17      	ldr	r3, [pc, #92]	; (800648c <GPIO_voidSetPinOutputSpeed+0xac>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	79ba      	ldrb	r2, [r7, #6]
 8006432:	0052      	lsls	r2, r2, #1
 8006434:	2103      	movs	r1, #3
 8006436:	fa01 f202 	lsl.w	r2, r1, r2
 800643a:	43d2      	mvns	r2, r2
 800643c:	4013      	ands	r3, r2
 800643e:	7979      	ldrb	r1, [r7, #5]
 8006440:	79ba      	ldrb	r2, [r7, #6]
 8006442:	0052      	lsls	r2, r2, #1
 8006444:	fa01 f202 	lsl.w	r2, r1, r2
 8006448:	4611      	mov	r1, r2
 800644a:	4a10      	ldr	r2, [pc, #64]	; (800648c <GPIO_voidSetPinOutputSpeed+0xac>)
 800644c:	430b      	orrs	r3, r1
 800644e:	6013      	str	r3, [r2, #0]
      break;
 8006450:	e013      	b.n	800647a <GPIO_voidSetPinOutputSpeed+0x9a>
      MODIFY_REG(GPIOC_OSPEEDR,
 8006452:	4b0f      	ldr	r3, [pc, #60]	; (8006490 <GPIO_voidSetPinOutputSpeed+0xb0>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	79ba      	ldrb	r2, [r7, #6]
 8006458:	0052      	lsls	r2, r2, #1
 800645a:	2103      	movs	r1, #3
 800645c:	fa01 f202 	lsl.w	r2, r1, r2
 8006460:	43d2      	mvns	r2, r2
 8006462:	4013      	ands	r3, r2
 8006464:	7979      	ldrb	r1, [r7, #5]
 8006466:	79ba      	ldrb	r2, [r7, #6]
 8006468:	0052      	lsls	r2, r2, #1
 800646a:	fa01 f202 	lsl.w	r2, r1, r2
 800646e:	4611      	mov	r1, r2
 8006470:	4a07      	ldr	r2, [pc, #28]	; (8006490 <GPIO_voidSetPinOutputSpeed+0xb0>)
 8006472:	430b      	orrs	r3, r1
 8006474:	6013      	str	r3, [r2, #0]
      break;
 8006476:	e000      	b.n	800647a <GPIO_voidSetPinOutputSpeed+0x9a>
      break;
 8006478:	bf00      	nop
  }
}
 800647a:	bf00      	nop
 800647c:	370c      	adds	r7, #12
 800647e:	46bd      	mov	sp, r7
 8006480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006484:	4770      	bx	lr
 8006486:	bf00      	nop
 8006488:	40020008 	.word	0x40020008
 800648c:	40020408 	.word	0x40020408
 8006490:	40020808 	.word	0x40020808

08006494 <GPIO_voidSetPinValue>:
void GPIO_voidSetPinValue(port_index_t Copy_PortIndex,
                          pin_index_t Copy_PinIndex,
                          gpio_logic_t Copy_GPIOLogic) {
 8006494:	b480      	push	{r7}
 8006496:	b083      	sub	sp, #12
 8006498:	af00      	add	r7, sp, #0
 800649a:	4603      	mov	r3, r0
 800649c:	71fb      	strb	r3, [r7, #7]
 800649e:	460b      	mov	r3, r1
 80064a0:	71bb      	strb	r3, [r7, #6]
 80064a2:	4613      	mov	r3, r2
 80064a4:	717b      	strb	r3, [r7, #5]
  switch (Copy_PortIndex) {
 80064a6:	79fb      	ldrb	r3, [r7, #7]
 80064a8:	2b02      	cmp	r3, #2
 80064aa:	d02c      	beq.n	8006506 <GPIO_voidSetPinValue+0x72>
 80064ac:	2b02      	cmp	r3, #2
 80064ae:	dc3d      	bgt.n	800652c <GPIO_voidSetPinValue+0x98>
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d002      	beq.n	80064ba <GPIO_voidSetPinValue+0x26>
 80064b4:	2b01      	cmp	r3, #1
 80064b6:	d013      	beq.n	80064e0 <GPIO_voidSetPinValue+0x4c>
        WRITE_REG(GPIOC_BSRR, GPIO_RESET_BIT_POS << Copy_PinIndex);
      } else { /* Nothing */
      }
      break;
    default:
      break;
 80064b8:	e038      	b.n	800652c <GPIO_voidSetPinValue+0x98>
      if (Copy_GPIOLogic == GPIO_HIGH) {
 80064ba:	797b      	ldrb	r3, [r7, #5]
 80064bc:	2b01      	cmp	r3, #1
 80064be:	d105      	bne.n	80064cc <GPIO_voidSetPinValue+0x38>
        WRITE_REG(GPIOA_BSRR, GPIO_SET_BIT_POS << Copy_PinIndex);
 80064c0:	79bb      	ldrb	r3, [r7, #6]
 80064c2:	2201      	movs	r2, #1
 80064c4:	409a      	lsls	r2, r3
 80064c6:	4b20      	ldr	r3, [pc, #128]	; (8006548 <GPIO_voidSetPinValue+0xb4>)
 80064c8:	601a      	str	r2, [r3, #0]
      break;
 80064ca:	e031      	b.n	8006530 <GPIO_voidSetPinValue+0x9c>
      } else if (Copy_GPIOLogic == GPIO_LOW) {
 80064cc:	797b      	ldrb	r3, [r7, #5]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d12e      	bne.n	8006530 <GPIO_voidSetPinValue+0x9c>
        WRITE_REG(GPIOA_BSRR, GPIO_RESET_BIT_POS << Copy_PinIndex);
 80064d2:	79bb      	ldrb	r3, [r7, #6]
 80064d4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80064d8:	409a      	lsls	r2, r3
 80064da:	4b1b      	ldr	r3, [pc, #108]	; (8006548 <GPIO_voidSetPinValue+0xb4>)
 80064dc:	601a      	str	r2, [r3, #0]
      break;
 80064de:	e027      	b.n	8006530 <GPIO_voidSetPinValue+0x9c>
      if (Copy_GPIOLogic == GPIO_HIGH) {
 80064e0:	797b      	ldrb	r3, [r7, #5]
 80064e2:	2b01      	cmp	r3, #1
 80064e4:	d105      	bne.n	80064f2 <GPIO_voidSetPinValue+0x5e>
        WRITE_REG(GPIOB_BSRR, GPIO_SET_BIT_POS << Copy_PinIndex);
 80064e6:	79bb      	ldrb	r3, [r7, #6]
 80064e8:	2201      	movs	r2, #1
 80064ea:	409a      	lsls	r2, r3
 80064ec:	4b17      	ldr	r3, [pc, #92]	; (800654c <GPIO_voidSetPinValue+0xb8>)
 80064ee:	601a      	str	r2, [r3, #0]
      break;
 80064f0:	e020      	b.n	8006534 <GPIO_voidSetPinValue+0xa0>
      } else if (Copy_GPIOLogic == GPIO_LOW) {
 80064f2:	797b      	ldrb	r3, [r7, #5]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d11d      	bne.n	8006534 <GPIO_voidSetPinValue+0xa0>
        WRITE_REG(GPIOB_BSRR, GPIO_RESET_BIT_POS << Copy_PinIndex);
 80064f8:	79bb      	ldrb	r3, [r7, #6]
 80064fa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80064fe:	409a      	lsls	r2, r3
 8006500:	4b12      	ldr	r3, [pc, #72]	; (800654c <GPIO_voidSetPinValue+0xb8>)
 8006502:	601a      	str	r2, [r3, #0]
      break;
 8006504:	e016      	b.n	8006534 <GPIO_voidSetPinValue+0xa0>
      if (Copy_GPIOLogic == GPIO_HIGH) {
 8006506:	797b      	ldrb	r3, [r7, #5]
 8006508:	2b01      	cmp	r3, #1
 800650a:	d105      	bne.n	8006518 <GPIO_voidSetPinValue+0x84>
        WRITE_REG(GPIOC_BSRR, GPIO_SET_BIT_POS << Copy_PinIndex);
 800650c:	79bb      	ldrb	r3, [r7, #6]
 800650e:	2201      	movs	r2, #1
 8006510:	409a      	lsls	r2, r3
 8006512:	4b0f      	ldr	r3, [pc, #60]	; (8006550 <GPIO_voidSetPinValue+0xbc>)
 8006514:	601a      	str	r2, [r3, #0]
      break;
 8006516:	e00f      	b.n	8006538 <GPIO_voidSetPinValue+0xa4>
      } else if (Copy_GPIOLogic == GPIO_LOW) {
 8006518:	797b      	ldrb	r3, [r7, #5]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d10c      	bne.n	8006538 <GPIO_voidSetPinValue+0xa4>
        WRITE_REG(GPIOC_BSRR, GPIO_RESET_BIT_POS << Copy_PinIndex);
 800651e:	79bb      	ldrb	r3, [r7, #6]
 8006520:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006524:	409a      	lsls	r2, r3
 8006526:	4b0a      	ldr	r3, [pc, #40]	; (8006550 <GPIO_voidSetPinValue+0xbc>)
 8006528:	601a      	str	r2, [r3, #0]
      break;
 800652a:	e005      	b.n	8006538 <GPIO_voidSetPinValue+0xa4>
      break;
 800652c:	bf00      	nop
 800652e:	e004      	b.n	800653a <GPIO_voidSetPinValue+0xa6>
      break;
 8006530:	bf00      	nop
 8006532:	e002      	b.n	800653a <GPIO_voidSetPinValue+0xa6>
      break;
 8006534:	bf00      	nop
 8006536:	e000      	b.n	800653a <GPIO_voidSetPinValue+0xa6>
      break;
 8006538:	bf00      	nop
  }
}
 800653a:	bf00      	nop
 800653c:	370c      	adds	r7, #12
 800653e:	46bd      	mov	sp, r7
 8006540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006544:	4770      	bx	lr
 8006546:	bf00      	nop
 8006548:	40020018 	.word	0x40020018
 800654c:	40020418 	.word	0x40020418
 8006550:	40020818 	.word	0x40020818

08006554 <GPIO_voidSetPinPullUpDownResistor>:
void GPIO_voidSetPinPullUpDownResistor(port_index_t Copy_PortIndex,
                                       pin_index_t Copy_PinIndex,
                                       input_pin_mode_t Copy_InputPinMode) {
 8006554:	b480      	push	{r7}
 8006556:	b083      	sub	sp, #12
 8006558:	af00      	add	r7, sp, #0
 800655a:	4603      	mov	r3, r0
 800655c:	71fb      	strb	r3, [r7, #7]
 800655e:	460b      	mov	r3, r1
 8006560:	71bb      	strb	r3, [r7, #6]
 8006562:	4613      	mov	r3, r2
 8006564:	717b      	strb	r3, [r7, #5]
  switch (Copy_PortIndex) {
 8006566:	79fb      	ldrb	r3, [r7, #7]
 8006568:	2b02      	cmp	r3, #2
 800656a:	d02c      	beq.n	80065c6 <GPIO_voidSetPinPullUpDownResistor+0x72>
 800656c:	2b02      	cmp	r3, #2
 800656e:	dc3d      	bgt.n	80065ec <GPIO_voidSetPinPullUpDownResistor+0x98>
 8006570:	2b00      	cmp	r3, #0
 8006572:	d002      	beq.n	800657a <GPIO_voidSetPinPullUpDownResistor+0x26>
 8006574:	2b01      	cmp	r3, #1
 8006576:	d013      	beq.n	80065a0 <GPIO_voidSetPinPullUpDownResistor+0x4c>
      MODIFY_REG(GPIOC_PUPDR,
                 GPIO_PUPDR_CLEAR_MASK << GPIO_PUPDR_PIN_BITS * Copy_PinIndex,
                 Copy_InputPinMode << GPIO_PUPDR_PIN_BITS * Copy_PinIndex);
      break;
    default:
      break;
 8006578:	e038      	b.n	80065ec <GPIO_voidSetPinPullUpDownResistor+0x98>
      MODIFY_REG(GPIOA_PUPDR,
 800657a:	4b20      	ldr	r3, [pc, #128]	; (80065fc <GPIO_voidSetPinPullUpDownResistor+0xa8>)
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	79ba      	ldrb	r2, [r7, #6]
 8006580:	0052      	lsls	r2, r2, #1
 8006582:	2103      	movs	r1, #3
 8006584:	fa01 f202 	lsl.w	r2, r1, r2
 8006588:	43d2      	mvns	r2, r2
 800658a:	4013      	ands	r3, r2
 800658c:	7979      	ldrb	r1, [r7, #5]
 800658e:	79ba      	ldrb	r2, [r7, #6]
 8006590:	0052      	lsls	r2, r2, #1
 8006592:	fa01 f202 	lsl.w	r2, r1, r2
 8006596:	4611      	mov	r1, r2
 8006598:	4a18      	ldr	r2, [pc, #96]	; (80065fc <GPIO_voidSetPinPullUpDownResistor+0xa8>)
 800659a:	430b      	orrs	r3, r1
 800659c:	6013      	str	r3, [r2, #0]
      break;
 800659e:	e026      	b.n	80065ee <GPIO_voidSetPinPullUpDownResistor+0x9a>
      MODIFY_REG(GPIOB_PUPDR,
 80065a0:	4b17      	ldr	r3, [pc, #92]	; (8006600 <GPIO_voidSetPinPullUpDownResistor+0xac>)
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	79ba      	ldrb	r2, [r7, #6]
 80065a6:	0052      	lsls	r2, r2, #1
 80065a8:	2103      	movs	r1, #3
 80065aa:	fa01 f202 	lsl.w	r2, r1, r2
 80065ae:	43d2      	mvns	r2, r2
 80065b0:	4013      	ands	r3, r2
 80065b2:	7979      	ldrb	r1, [r7, #5]
 80065b4:	79ba      	ldrb	r2, [r7, #6]
 80065b6:	0052      	lsls	r2, r2, #1
 80065b8:	fa01 f202 	lsl.w	r2, r1, r2
 80065bc:	4611      	mov	r1, r2
 80065be:	4a10      	ldr	r2, [pc, #64]	; (8006600 <GPIO_voidSetPinPullUpDownResistor+0xac>)
 80065c0:	430b      	orrs	r3, r1
 80065c2:	6013      	str	r3, [r2, #0]
      break;
 80065c4:	e013      	b.n	80065ee <GPIO_voidSetPinPullUpDownResistor+0x9a>
      MODIFY_REG(GPIOC_PUPDR,
 80065c6:	4b0f      	ldr	r3, [pc, #60]	; (8006604 <GPIO_voidSetPinPullUpDownResistor+0xb0>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	79ba      	ldrb	r2, [r7, #6]
 80065cc:	0052      	lsls	r2, r2, #1
 80065ce:	2103      	movs	r1, #3
 80065d0:	fa01 f202 	lsl.w	r2, r1, r2
 80065d4:	43d2      	mvns	r2, r2
 80065d6:	4013      	ands	r3, r2
 80065d8:	7979      	ldrb	r1, [r7, #5]
 80065da:	79ba      	ldrb	r2, [r7, #6]
 80065dc:	0052      	lsls	r2, r2, #1
 80065de:	fa01 f202 	lsl.w	r2, r1, r2
 80065e2:	4611      	mov	r1, r2
 80065e4:	4a07      	ldr	r2, [pc, #28]	; (8006604 <GPIO_voidSetPinPullUpDownResistor+0xb0>)
 80065e6:	430b      	orrs	r3, r1
 80065e8:	6013      	str	r3, [r2, #0]
      break;
 80065ea:	e000      	b.n	80065ee <GPIO_voidSetPinPullUpDownResistor+0x9a>
      break;
 80065ec:	bf00      	nop
  }
}
 80065ee:	bf00      	nop
 80065f0:	370c      	adds	r7, #12
 80065f2:	46bd      	mov	sp, r7
 80065f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f8:	4770      	bx	lr
 80065fa:	bf00      	nop
 80065fc:	4002000c 	.word	0x4002000c
 8006600:	4002040c 	.word	0x4002040c
 8006604:	4002080c 	.word	0x4002080c

08006608 <MNVIC_voidEnableIRQ>:
{
	MSCB_voidSetPriorityGrouping();
}

void MNVIC_voidEnableIRQ(IRQn_Type IRQn)
{
 8006608:	b480      	push	{r7}
 800660a:	b083      	sub	sp, #12
 800660c:	af00      	add	r7, sp, #0
 800660e:	4603      	mov	r3, r0
 8006610:	71fb      	strb	r3, [r7, #7]
	if(IRQn >=0)
 8006612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006616:	2b00      	cmp	r3, #0
 8006618:	db0b      	blt.n	8006632 <MNVIC_voidEnableIRQ+0x2a>
	{
		NVIC->ISER[((u32)IRQn >> 5)] = (1UL << ((u32)IRQn & 0x1F));
 800661a:	79fb      	ldrb	r3, [r7, #7]
 800661c:	f003 021f 	and.w	r2, r3, #31
 8006620:	4907      	ldr	r1, [pc, #28]	; (8006640 <MNVIC_voidEnableIRQ+0x38>)
 8006622:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006626:	095b      	lsrs	r3, r3, #5
 8006628:	2001      	movs	r0, #1
 800662a:	fa00 f202 	lsl.w	r2, r0, r2
 800662e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}
}
 8006632:	bf00      	nop
 8006634:	370c      	adds	r7, #12
 8006636:	46bd      	mov	sp, r7
 8006638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663c:	4770      	bx	lr
 800663e:	bf00      	nop
 8006640:	e000e100 	.word	0xe000e100

08006644 <MNVIC_voidSetPriority>:
	}
	else return 0;
}

void MNVIC_voidSetPriority(IRQn_Type IRQn, u32 Priority)
{
 8006644:	b480      	push	{r7}
 8006646:	b083      	sub	sp, #12
 8006648:	af00      	add	r7, sp, #0
 800664a:	4603      	mov	r3, r0
 800664c:	6039      	str	r1, [r7, #0]
 800664e:	71fb      	strb	r3, [r7, #7]
	if(IRQn >=0)
 8006650:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006654:	2b00      	cmp	r3, #0
 8006656:	db09      	blt.n	800666c <MNVIC_voidSetPriority+0x28>
	{
		NVIC->IP[(u32)IRQn] = (u8)(Priority << (8 - NVIC_PRIO_BITS));
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	b2da      	uxtb	r2, r3
 800665c:	4906      	ldr	r1, [pc, #24]	; (8006678 <MNVIC_voidSetPriority+0x34>)
 800665e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006662:	0112      	lsls	r2, r2, #4
 8006664:	b2d2      	uxtb	r2, r2
 8006666:	440b      	add	r3, r1
 8006668:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
	}
	else
	{
		/*Nothing*/
	}
}
 800666c:	bf00      	nop
 800666e:	370c      	adds	r7, #12
 8006670:	46bd      	mov	sp, r7
 8006672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006676:	4770      	bx	lr
 8006678:	e000e100 	.word	0xe000e100

0800667c <RCC_void_PLL_Init>:
    while (GET_BIT(RCC_CR,RCC_CR_HSERDY_Pos) == 0);
    SET_BIT(RCC_CFGR,RCC_CFGR_SW0_Pos);
    CLR_BIT(RCC_CFGR,RCC_CFGR_SW1_Pos);
}
static void RCC_void_PLL_Init(void)
{
 800667c:	b480      	push	{r7}
 800667e:	af00      	add	r7, sp, #0
    /**Must Disable PLL & PLLI2S FIRST**/
    CLR_BIT(RCC_CR,RCC_CR_PLLON_Pos);
 8006680:	4b2a      	ldr	r3, [pc, #168]	; (800672c <RCC_void_PLL_Init+0xb0>)
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4a29      	ldr	r2, [pc, #164]	; (800672c <RCC_void_PLL_Init+0xb0>)
 8006686:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800668a:	6013      	str	r3, [r2, #0]
    CLR_BIT(RCC_CR,RCC_CR_PLLI2SON_Pos);
 800668c:	4b27      	ldr	r3, [pc, #156]	; (800672c <RCC_void_PLL_Init+0xb0>)
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4a26      	ldr	r2, [pc, #152]	; (800672c <RCC_void_PLL_Init+0xb0>)
 8006692:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006696:	6013      	str	r3, [r2, #0]
    /**RCC_PLLN_CFG**/
    RCC_PLLCFGR &=~(RCC_PLLN_MASK);
 8006698:	4b25      	ldr	r3, [pc, #148]	; (8006730 <RCC_void_PLL_Init+0xb4>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4a24      	ldr	r2, [pc, #144]	; (8006730 <RCC_void_PLL_Init+0xb4>)
 800669e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80066a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066a6:	6013      	str	r3, [r2, #0]
    RCC_PLLCFGR |=(RCC_PLLN_VALUE<<RCC_PLLCFGR_PLLN_Pos);
 80066a8:	4b21      	ldr	r3, [pc, #132]	; (8006730 <RCC_void_PLL_Init+0xb4>)
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4a20      	ldr	r2, [pc, #128]	; (8006730 <RCC_void_PLL_Init+0xb4>)
 80066ae:	f443 5328 	orr.w	r3, r3, #10752	; 0x2a00
 80066b2:	6013      	str	r3, [r2, #0]
    /** RCC_PLLM_CFG**/
    RCC_PLLCFGR &=~(RCC_PLLM_MASK);
 80066b4:	4b1e      	ldr	r3, [pc, #120]	; (8006730 <RCC_void_PLL_Init+0xb4>)
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	4a1d      	ldr	r2, [pc, #116]	; (8006730 <RCC_void_PLL_Init+0xb4>)
 80066ba:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80066be:	6013      	str	r3, [r2, #0]
    RCC_PLLCFGR |=(RCC_PLLM_VALUE<<RCC_PLLCFGR_PLLM0_Pos);
 80066c0:	4b1b      	ldr	r3, [pc, #108]	; (8006730 <RCC_void_PLL_Init+0xb4>)
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	4a1a      	ldr	r2, [pc, #104]	; (8006730 <RCC_void_PLL_Init+0xb4>)
 80066c6:	f043 0319 	orr.w	r3, r3, #25
 80066ca:	6013      	str	r3, [r2, #0]
    /** RCC_PLLP_CFG**/
    RCC_PLLCFGR &=~(RCC_PLLP_MASK);
 80066cc:	4b18      	ldr	r3, [pc, #96]	; (8006730 <RCC_void_PLL_Init+0xb4>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	4a17      	ldr	r2, [pc, #92]	; (8006730 <RCC_void_PLL_Init+0xb4>)
 80066d2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80066d6:	6013      	str	r3, [r2, #0]
    RCC_PLLCFGR |= RCC_PLLP_VALUE;
 80066d8:	4b15      	ldr	r3, [pc, #84]	; (8006730 <RCC_void_PLL_Init+0xb4>)
 80066da:	4a15      	ldr	r2, [pc, #84]	; (8006730 <RCC_void_PLL_Init+0xb4>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	6013      	str	r3, [r2, #0]
    /* Enabling RCC_PLL_CLK */
    #if RCC_CLK_PLL_SRC == RCC_CLK_HSI
        CLR_BIT(RCC_PLLCFGR,RCC_PLLCFGR_PLLSRC_Pos);
    #elif RCC_CLK_PLL_SRC == RCC_CLK_HSE
        SET_BIT(RCC_PLLCFGR,RCC_PLLCFGR_PLLSRC_Pos);
 80066e0:	4b13      	ldr	r3, [pc, #76]	; (8006730 <RCC_void_PLL_Init+0xb4>)
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	4a12      	ldr	r2, [pc, #72]	; (8006730 <RCC_void_PLL_Init+0xb4>)
 80066e6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80066ea:	6013      	str	r3, [r2, #0]
    #else
    #endif
    SET_BIT(RCC_CR,RCC_CR_HSEON_Pos); // Disable HSE
 80066ec:	4b0f      	ldr	r3, [pc, #60]	; (800672c <RCC_void_PLL_Init+0xb0>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4a0e      	ldr	r2, [pc, #56]	; (800672c <RCC_void_PLL_Init+0xb0>)
 80066f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80066f6:	6013      	str	r3, [r2, #0]
    SET_BIT(RCC_CR,RCC_CR_PLLON_Pos); // Enable PLL
 80066f8:	4b0c      	ldr	r3, [pc, #48]	; (800672c <RCC_void_PLL_Init+0xb0>)
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4a0b      	ldr	r2, [pc, #44]	; (800672c <RCC_void_PLL_Init+0xb0>)
 80066fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006702:	6013      	str	r3, [r2, #0]
    FPEC->ACR = 0x02;
 8006704:	4b0b      	ldr	r3, [pc, #44]	; (8006734 <RCC_void_PLL_Init+0xb8>)
 8006706:	2202      	movs	r2, #2
 8006708:	601a      	str	r2, [r3, #0]
    CLR_BIT(RCC_CFGR,RCC_CFGR_SW0_Pos);
 800670a:	4b0b      	ldr	r3, [pc, #44]	; (8006738 <RCC_void_PLL_Init+0xbc>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4a0a      	ldr	r2, [pc, #40]	; (8006738 <RCC_void_PLL_Init+0xbc>)
 8006710:	f023 0301 	bic.w	r3, r3, #1
 8006714:	6013      	str	r3, [r2, #0]
    SET_BIT(RCC_CFGR,RCC_CFGR_SW1_Pos); 
 8006716:	4b08      	ldr	r3, [pc, #32]	; (8006738 <RCC_void_PLL_Init+0xbc>)
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	4a07      	ldr	r2, [pc, #28]	; (8006738 <RCC_void_PLL_Init+0xbc>)
 800671c:	f043 0302 	orr.w	r3, r3, #2
 8006720:	6013      	str	r3, [r2, #0]
}
 8006722:	bf00      	nop
 8006724:	46bd      	mov	sp, r7
 8006726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672a:	4770      	bx	lr
 800672c:	40023800 	.word	0x40023800
 8006730:	40023804 	.word	0x40023804
 8006734:	40023c00 	.word	0x40023c00
 8006738:	40023808 	.word	0x40023808

0800673c <RCC_void_AHB1Prescaler_Init>:
static void RCC_void_AHB1Prescaler_Init(void)
{
 800673c:	b480      	push	{r7}
 800673e:	af00      	add	r7, sp, #0
    #if   RCC_AHB_PRESCALER == RCC_AHB_DIV_1
        RCC_CFGR &= ~(RCC_AHB_PRESCALER_MASK);
 8006740:	4b07      	ldr	r3, [pc, #28]	; (8006760 <RCC_void_AHB1Prescaler_Init+0x24>)
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	4a06      	ldr	r2, [pc, #24]	; (8006760 <RCC_void_AHB1Prescaler_Init+0x24>)
 8006746:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800674a:	6013      	str	r3, [r2, #0]
        RCC_CFGR |= RCC_AHB_DIV_1;
 800674c:	4b04      	ldr	r3, [pc, #16]	; (8006760 <RCC_void_AHB1Prescaler_Init+0x24>)
 800674e:	4a04      	ldr	r2, [pc, #16]	; (8006760 <RCC_void_AHB1Prescaler_Init+0x24>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	6013      	str	r3, [r2, #0]
        RCC_CFGR |= RCC_AHB_DIV_256;
    #elif RCC_AHB_PRESCALER == RCC_AHB_DIV_512
        RCC_CFGR &= ~(RCC_AHB_PRESCALER_MASK);
        RCC_CFGR |= RCC_AHB_DIV_512;
    #endif
}
 8006754:	bf00      	nop
 8006756:	46bd      	mov	sp, r7
 8006758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675c:	4770      	bx	lr
 800675e:	bf00      	nop
 8006760:	40023808 	.word	0x40023808

08006764 <RCC_void_APB1Prescaler_Init>:
static void RCC_void_APB1Prescaler_Init(void)
{
 8006764:	b480      	push	{r7}
 8006766:	af00      	add	r7, sp, #0
    #if RCC_APB1_PRESCALER == RCC_APB1_DIV_1
        RCC_CFGR &= ~(RCC_APB1_PRESCALER_MASK);
        RCC_CFGR |= RCC_APB1_DIV_1;
    #elif RCC_APB1_PRESCALER == RCC_APB1_DIV_2
        RCC_CFGR &= ~(RCC_APB1_PRESCALER_MASK);
 8006768:	4b08      	ldr	r3, [pc, #32]	; (800678c <RCC_void_APB1Prescaler_Init+0x28>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	4a07      	ldr	r2, [pc, #28]	; (800678c <RCC_void_APB1Prescaler_Init+0x28>)
 800676e:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8006772:	6013      	str	r3, [r2, #0]
        RCC_CFGR |= RCC_APB1_DIV_2;
 8006774:	4b05      	ldr	r3, [pc, #20]	; (800678c <RCC_void_APB1Prescaler_Init+0x28>)
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	4a04      	ldr	r2, [pc, #16]	; (800678c <RCC_void_APB1Prescaler_Init+0x28>)
 800677a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800677e:	6013      	str	r3, [r2, #0]
        RCC_CFGR |= RCC_APB1_DIV_8;
    #elif RCC_APB1_PRESCALER == RCC_APB1_DIV_16
        RCC_CFGR &= ~(RCC_APB1_PRESCALER_MASK);
        RCC_CFGR |= RCC_APB1_DIV_16;
    #endif
}
 8006780:	bf00      	nop
 8006782:	46bd      	mov	sp, r7
 8006784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006788:	4770      	bx	lr
 800678a:	bf00      	nop
 800678c:	40023808 	.word	0x40023808

08006790 <RCC_void_APB2Prescaler_Init>:
static void RCC_void_APB2Prescaler_Init(void)
{
 8006790:	b480      	push	{r7}
 8006792:	af00      	add	r7, sp, #0
    #if (RCC_APB2_PRESCALER == RCC_APB2_DIV_1)
        RCC_CFGR &= ~(RCC_APB2_PRESCALER_MASK);
 8006794:	4b07      	ldr	r3, [pc, #28]	; (80067b4 <RCC_void_APB2Prescaler_Init+0x24>)
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	4a06      	ldr	r2, [pc, #24]	; (80067b4 <RCC_void_APB2Prescaler_Init+0x24>)
 800679a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800679e:	6013      	str	r3, [r2, #0]
        RCC_CFGR |= RCC_APB2_DIV_1;
 80067a0:	4b04      	ldr	r3, [pc, #16]	; (80067b4 <RCC_void_APB2Prescaler_Init+0x24>)
 80067a2:	4a04      	ldr	r2, [pc, #16]	; (80067b4 <RCC_void_APB2Prescaler_Init+0x24>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	6013      	str	r3, [r2, #0]
        RCC_CFGR |= RCC_APB2_DIV_8;
    #elif (RCC_APB2_PRESCALER == RCC_APB2_DIV_16)
        RCC_CFGR &= ~(RCC_APB2_PRESCALER_MASK);
        RCC_CFGR |= RCC_APB2_DIV_16;
    #endif
}
 80067a8:	bf00      	nop
 80067aa:	46bd      	mov	sp, r7
 80067ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b0:	4770      	bx	lr
 80067b2:	bf00      	nop
 80067b4:	40023808 	.word	0x40023808

080067b8 <RCC_voidInit>:
/**********************************************  */
void RCC_voidInit(void)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	af00      	add	r7, sp, #0
    RCC_void_AHB1Prescaler_Init();
 80067bc:	f7ff ffbe 	bl	800673c <RCC_void_AHB1Prescaler_Init>
    RCC_void_APB1Prescaler_Init();
 80067c0:	f7ff ffd0 	bl	8006764 <RCC_void_APB1Prescaler_Init>
    RCC_void_APB2Prescaler_Init();
 80067c4:	f7ff ffe4 	bl	8006790 <RCC_void_APB2Prescaler_Init>
    #if RCC_CLOCK_SOURCE == RCC_CLK_HSI
        RCC_void_HSI_Init();        
    #elif RCC_CLOCK_SOURCE == RCC_CLK_HSE
        RCC_void_HSE_Init();
    #elif RCC_CLOCK_SOURCE == RCC_CLK_PLL
        RCC_void_PLL_Init();
 80067c8:	f7ff ff58 	bl	800667c <RCC_void_PLL_Init>
    #else
        #error "RCC_ClOCK_SOURCE_Configuration_Error"
    #endif
}
 80067cc:	bf00      	nop
 80067ce:	bd80      	pop	{r7, pc}

080067d0 <RCC_voidEnablePeripheralClock>:
    else
    {
        // Error
    }
}
void RCC_voidEnablePeripheralClock (u8 Copy_u8BusName, u8 Copy_u8PeripheralName){
 80067d0:	b480      	push	{r7}
 80067d2:	b083      	sub	sp, #12
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	4603      	mov	r3, r0
 80067d8:	460a      	mov	r2, r1
 80067da:	71fb      	strb	r3, [r7, #7]
 80067dc:	4613      	mov	r3, r2
 80067de:	71bb      	strb	r3, [r7, #6]
    switch (Copy_u8BusName)
 80067e0:	79fb      	ldrb	r3, [r7, #7]
 80067e2:	2b02      	cmp	r3, #2
 80067e4:	d01c      	beq.n	8006820 <RCC_voidEnablePeripheralClock+0x50>
 80067e6:	2b02      	cmp	r3, #2
 80067e8:	dc25      	bgt.n	8006836 <RCC_voidEnablePeripheralClock+0x66>
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d002      	beq.n	80067f4 <RCC_voidEnablePeripheralClock+0x24>
 80067ee:	2b01      	cmp	r3, #1
 80067f0:	d00b      	beq.n	800680a <RCC_voidEnablePeripheralClock+0x3a>
        SET_BIT(RCC_APB2ENR,Copy_u8PeripheralName);
        /* code */
        break;  
    default:
        // Error
        break;
 80067f2:	e020      	b.n	8006836 <RCC_voidEnablePeripheralClock+0x66>
        SET_BIT(RCC_AHB1ENR,Copy_u8PeripheralName);
 80067f4:	4b13      	ldr	r3, [pc, #76]	; (8006844 <RCC_voidEnablePeripheralClock+0x74>)
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	79ba      	ldrb	r2, [r7, #6]
 80067fa:	2101      	movs	r1, #1
 80067fc:	fa01 f202 	lsl.w	r2, r1, r2
 8006800:	4611      	mov	r1, r2
 8006802:	4a10      	ldr	r2, [pc, #64]	; (8006844 <RCC_voidEnablePeripheralClock+0x74>)
 8006804:	430b      	orrs	r3, r1
 8006806:	6013      	str	r3, [r2, #0]
        break;
 8006808:	e016      	b.n	8006838 <RCC_voidEnablePeripheralClock+0x68>
        SET_BIT(RCC_APB1ENR,Copy_u8PeripheralName);
 800680a:	4b0f      	ldr	r3, [pc, #60]	; (8006848 <RCC_voidEnablePeripheralClock+0x78>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	79ba      	ldrb	r2, [r7, #6]
 8006810:	2101      	movs	r1, #1
 8006812:	fa01 f202 	lsl.w	r2, r1, r2
 8006816:	4611      	mov	r1, r2
 8006818:	4a0b      	ldr	r2, [pc, #44]	; (8006848 <RCC_voidEnablePeripheralClock+0x78>)
 800681a:	430b      	orrs	r3, r1
 800681c:	6013      	str	r3, [r2, #0]
        break;
 800681e:	e00b      	b.n	8006838 <RCC_voidEnablePeripheralClock+0x68>
        SET_BIT(RCC_APB2ENR,Copy_u8PeripheralName);
 8006820:	4b0a      	ldr	r3, [pc, #40]	; (800684c <RCC_voidEnablePeripheralClock+0x7c>)
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	79ba      	ldrb	r2, [r7, #6]
 8006826:	2101      	movs	r1, #1
 8006828:	fa01 f202 	lsl.w	r2, r1, r2
 800682c:	4611      	mov	r1, r2
 800682e:	4a07      	ldr	r2, [pc, #28]	; (800684c <RCC_voidEnablePeripheralClock+0x7c>)
 8006830:	430b      	orrs	r3, r1
 8006832:	6013      	str	r3, [r2, #0]
        break;  
 8006834:	e000      	b.n	8006838 <RCC_voidEnablePeripheralClock+0x68>
        break;
 8006836:	bf00      	nop
    }
}
 8006838:	bf00      	nop
 800683a:	370c      	adds	r7, #12
 800683c:	46bd      	mov	sp, r7
 800683e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006842:	4770      	bx	lr
 8006844:	40023830 	.word	0x40023830
 8006848:	40023840 	.word	0x40023840
 800684c:	40023844 	.word	0x40023844

08006850 <SystemReset>:
	Register_Value >>= SCB_AIRCR_PRIGROUP_POS;
	return Register_Value;
}

void SystemReset()
{
 8006850:	b480      	push	{r7}
 8006852:	af00      	add	r7, sp, #0
	  SCB->AIRCR  = (u32)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
	                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8006854:	4b04      	ldr	r3, [pc, #16]	; (8006868 <SystemReset+0x18>)
 8006856:	68db      	ldr	r3, [r3, #12]
 8006858:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
	  SCB->AIRCR  = (u32)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800685c:	4902      	ldr	r1, [pc, #8]	; (8006868 <SystemReset+0x18>)
	                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800685e:	4b03      	ldr	r3, [pc, #12]	; (800686c <SystemReset+0x1c>)
 8006860:	4313      	orrs	r3, r2
	  SCB->AIRCR  = (u32)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8006862:	60cb      	str	r3, [r1, #12]
	                            SCB_AIRCR_SYSRESETREQ_Msk    );
	  for(;;){
		  asm("NOP");
 8006864:	bf00      	nop
 8006866:	e7fd      	b.n	8006864 <SystemReset+0x14>
 8006868:	e000ed00 	.word	0xe000ed00
 800686c:	05fa0004 	.word	0x05fa0004

08006870 <MSPI_GPIOInit>:

/**********************************************************************************************************************
 *  LOCAL FUNCTIONS
 *********************************************************************************************************************/
static void MSPI_GPIOInit(const SPI_Config_t* SPIConfig)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b082      	sub	sp, #8
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
	switch (SPIConfig->SPI_Instance)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	781b      	ldrb	r3, [r3, #0]
 800687c:	2b02      	cmp	r3, #2
 800687e:	d042      	beq.n	8006906 <MSPI_GPIOInit+0x96>
 8006880:	2b02      	cmp	r3, #2
 8006882:	dc5d      	bgt.n	8006940 <MSPI_GPIOInit+0xd0>
 8006884:	2b00      	cmp	r3, #0
 8006886:	d002      	beq.n	800688e <MSPI_GPIOInit+0x1e>
 8006888:	2b01      	cmp	r3, #1
 800688a:	d023      	beq.n	80068d4 <MSPI_GPIOInit+0x64>
				GPIO_voidSetPinMode(GPIO_PORTB, GPIO_PIN5, GPIO_ALTERNATE_FUNCTION_PIN_MODE);  // SPI3_MOSI_PIN
				GPIO_voidSetPinAlternateFunction(GPIO_PORTB, GPIO_PIN5, SPI3_MOSI_AF);

				break;
		}
}
 800688c:	e058      	b.n	8006940 <MSPI_GPIOInit+0xd0>
				RCC_voidEnablePeripheralClock(RCC_AHB,RCC_AHB_GPIOAEN);
 800688e:	2100      	movs	r1, #0
 8006890:	2000      	movs	r0, #0
 8006892:	f7ff ff9d 	bl	80067d0 <RCC_voidEnablePeripheralClock>
				GPIO_voidSetPinMode(GPIO_PORTA, GPIO_PIN4, GPIO_ALTERNATE_FUNCTION_PIN_MODE); // SPI1_NSS_PIN
 8006896:	2202      	movs	r2, #2
 8006898:	2104      	movs	r1, #4
 800689a:	2000      	movs	r0, #0
 800689c:	f7ff fc4c 	bl	8006138 <GPIO_voidSetPinMode>
				GPIO_voidSetPinAlternateFunction(GPIO_PORTA,GPIO_PIN4,SPI1_NSS_AF);
 80068a0:	2205      	movs	r2, #5
 80068a2:	2104      	movs	r1, #4
 80068a4:	2000      	movs	r0, #0
 80068a6:	f7ff fcf3 	bl	8006290 <GPIO_voidSetPinAlternateFunction>
				GPIO_voidSetPinMode(GPIO_PORTA, GPIO_PIN5, GPIO_ALTERNATE_FUNCTION_PIN_MODE); // SPI1_SCK_PIN
 80068aa:	2202      	movs	r2, #2
 80068ac:	2105      	movs	r1, #5
 80068ae:	2000      	movs	r0, #0
 80068b0:	f7ff fc42 	bl	8006138 <GPIO_voidSetPinMode>
				GPIO_voidSetPinAlternateFunction(GPIO_PORTA,GPIO_PIN5,SPI1_SCK_AF);
 80068b4:	2205      	movs	r2, #5
 80068b6:	2105      	movs	r1, #5
 80068b8:	2000      	movs	r0, #0
 80068ba:	f7ff fce9 	bl	8006290 <GPIO_voidSetPinAlternateFunction>
				GPIO_voidSetPinMode(GPIO_PORTA, GPIO_PIN7, GPIO_ALTERNATE_FUNCTION_PIN_MODE); // SPI1_MOSI_PIN
 80068be:	2202      	movs	r2, #2
 80068c0:	2107      	movs	r1, #7
 80068c2:	2000      	movs	r0, #0
 80068c4:	f7ff fc38 	bl	8006138 <GPIO_voidSetPinMode>
				GPIO_voidSetPinAlternateFunction(GPIO_PORTA,GPIO_PIN7,SPI1_MOSI_AF);
 80068c8:	2205      	movs	r2, #5
 80068ca:	2107      	movs	r1, #7
 80068cc:	2000      	movs	r0, #0
 80068ce:	f7ff fcdf 	bl	8006290 <GPIO_voidSetPinAlternateFunction>
				break;
 80068d2:	e035      	b.n	8006940 <MSPI_GPIOInit+0xd0>
				RCC_voidEnablePeripheralClock(RCC_AHB,RCC_AHB_GPIOBEN);
 80068d4:	2101      	movs	r1, #1
 80068d6:	2000      	movs	r0, #0
 80068d8:	f7ff ff7a 	bl	80067d0 <RCC_voidEnablePeripheralClock>
				GPIO_voidSetPinMode(GPIO_PORTB, GPIO_PIN10, GPIO_ALTERNATE_FUNCTION_PIN_MODE); // SP2_SCK_PIN
 80068dc:	2202      	movs	r2, #2
 80068de:	210a      	movs	r1, #10
 80068e0:	2001      	movs	r0, #1
 80068e2:	f7ff fc29 	bl	8006138 <GPIO_voidSetPinMode>
				GPIO_voidSetPinAlternateFunction(GPIO_PORTB, GPIO_PIN10, SPI2_SCK_AF);
 80068e6:	2205      	movs	r2, #5
 80068e8:	210a      	movs	r1, #10
 80068ea:	2001      	movs	r0, #1
 80068ec:	f7ff fcd0 	bl	8006290 <GPIO_voidSetPinAlternateFunction>
				GPIO_voidSetPinMode(GPIO_PORTB, GPIO_PIN15, GPIO_ALTERNATE_FUNCTION_PIN_MODE); // SPI2_MOSI_PIN
 80068f0:	2202      	movs	r2, #2
 80068f2:	210f      	movs	r1, #15
 80068f4:	2001      	movs	r0, #1
 80068f6:	f7ff fc1f 	bl	8006138 <GPIO_voidSetPinMode>
				GPIO_voidSetPinAlternateFunction(GPIO_PORTB, GPIO_PIN15, SPI2_MOSI_AF);
 80068fa:	2205      	movs	r2, #5
 80068fc:	210f      	movs	r1, #15
 80068fe:	2001      	movs	r0, #1
 8006900:	f7ff fcc6 	bl	8006290 <GPIO_voidSetPinAlternateFunction>
				break;
 8006904:	e01c      	b.n	8006940 <MSPI_GPIOInit+0xd0>
				RCC_voidEnablePeripheralClock(RCC_AHB,RCC_AHB_GPIOAEN);
 8006906:	2100      	movs	r1, #0
 8006908:	2000      	movs	r0, #0
 800690a:	f7ff ff61 	bl	80067d0 <RCC_voidEnablePeripheralClock>
				RCC_voidEnablePeripheralClock(RCC_AHB,RCC_AHB_GPIOBEN);
 800690e:	2101      	movs	r1, #1
 8006910:	2000      	movs	r0, #0
 8006912:	f7ff ff5d 	bl	80067d0 <RCC_voidEnablePeripheralClock>
				GPIO_voidSetPinMode(GPIO_PORTB, GPIO_PIN3, GPIO_ALTERNATE_FUNCTION_PIN_MODE);  // SPI3_SCK_PIN
 8006916:	2202      	movs	r2, #2
 8006918:	2103      	movs	r1, #3
 800691a:	2001      	movs	r0, #1
 800691c:	f7ff fc0c 	bl	8006138 <GPIO_voidSetPinMode>
				GPIO_voidSetPinAlternateFunction(GPIO_PORTB, GPIO_PIN3, SPI3_SCK_AF);
 8006920:	2206      	movs	r2, #6
 8006922:	2103      	movs	r1, #3
 8006924:	2001      	movs	r0, #1
 8006926:	f7ff fcb3 	bl	8006290 <GPIO_voidSetPinAlternateFunction>
				GPIO_voidSetPinMode(GPIO_PORTB, GPIO_PIN5, GPIO_ALTERNATE_FUNCTION_PIN_MODE);  // SPI3_MOSI_PIN
 800692a:	2202      	movs	r2, #2
 800692c:	2105      	movs	r1, #5
 800692e:	2001      	movs	r0, #1
 8006930:	f7ff fc02 	bl	8006138 <GPIO_voidSetPinMode>
				GPIO_voidSetPinAlternateFunction(GPIO_PORTB, GPIO_PIN5, SPI3_MOSI_AF);
 8006934:	2206      	movs	r2, #6
 8006936:	2105      	movs	r1, #5
 8006938:	2001      	movs	r0, #1
 800693a:	f7ff fca9 	bl	8006290 <GPIO_voidSetPinAlternateFunction>
				break;
 800693e:	bf00      	nop
}
 8006940:	bf00      	nop
 8006942:	3708      	adds	r7, #8
 8006944:	46bd      	mov	sp, r7
 8006946:	bd80      	pop	{r7, pc}

08006948 <SPI_Timeout_Handler>:
						break;
				}
	}
#endif
static void SPI_Timeout_Handler(void)
{
 8006948:	b480      	push	{r7}
 800694a:	af00      	add	r7, sp, #0
	SPI_Timeout_Flag=SPI_TIMEOUT;
 800694c:	4b03      	ldr	r3, [pc, #12]	; (800695c <SPI_Timeout_Handler+0x14>)
 800694e:	2201      	movs	r2, #1
 8006950:	701a      	strb	r2, [r3, #0]
}
 8006952:	bf00      	nop
 8006954:	46bd      	mov	sp, r7
 8006956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695a:	4770      	bx	lr
 800695c:	20000180 	.word	0x20000180

08006960 <MSPIx_voidClockEnable>:


static void MSPIx_voidClockEnable(const SPI_Config_t* SPIConfig){
 8006960:	b580      	push	{r7, lr}
 8006962:	b082      	sub	sp, #8
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
	switch (SPIConfig->SPI_Instance){
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	781b      	ldrb	r3, [r3, #0]
 800696c:	2b02      	cmp	r3, #2
 800696e:	d010      	beq.n	8006992 <MSPIx_voidClockEnable+0x32>
 8006970:	2b02      	cmp	r3, #2
 8006972:	dc13      	bgt.n	800699c <MSPIx_voidClockEnable+0x3c>
 8006974:	2b00      	cmp	r3, #0
 8006976:	d002      	beq.n	800697e <MSPIx_voidClockEnable+0x1e>
 8006978:	2b01      	cmp	r3, #1
 800697a:	d005      	beq.n	8006988 <MSPIx_voidClockEnable+0x28>
		break;
	case SPI3_INSTANCE:
		RCC_voidEnablePeripheralClock(RCC_APB1,RCC_APB1_SPI3EN);
		break;
	}
}
 800697c:	e00e      	b.n	800699c <MSPIx_voidClockEnable+0x3c>
		RCC_voidEnablePeripheralClock(RCC_APB2,RCC_APB2_SPI1EN);
 800697e:	210c      	movs	r1, #12
 8006980:	2002      	movs	r0, #2
 8006982:	f7ff ff25 	bl	80067d0 <RCC_voidEnablePeripheralClock>
		break;
 8006986:	e009      	b.n	800699c <MSPIx_voidClockEnable+0x3c>
		RCC_voidEnablePeripheralClock(RCC_APB1,RCC_APB1_SPI2EN);
 8006988:	210e      	movs	r1, #14
 800698a:	2001      	movs	r0, #1
 800698c:	f7ff ff20 	bl	80067d0 <RCC_voidEnablePeripheralClock>
		break;
 8006990:	e004      	b.n	800699c <MSPIx_voidClockEnable+0x3c>
		RCC_voidEnablePeripheralClock(RCC_APB1,RCC_APB1_SPI3EN);
 8006992:	210f      	movs	r1, #15
 8006994:	2001      	movs	r0, #1
 8006996:	f7ff ff1b 	bl	80067d0 <RCC_voidEnablePeripheralClock>
		break;
 800699a:	bf00      	nop
}
 800699c:	bf00      	nop
 800699e:	3708      	adds	r7, #8
 80069a0:	46bd      	mov	sp, r7
 80069a2:	bd80      	pop	{r7, pc}

080069a4 <MSPI_voidInit>:
/**********************************************************************************************************************
 *  GLOBAL FUNCTIONS
 *********************************************************************************************************************/
void MSPI_voidInit(const SPI_Config_t* SPIConfig)
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b082      	sub	sp, #8
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
	MSPI_GPIOInit(SPIConfig);
 80069ac:	6878      	ldr	r0, [r7, #4]
 80069ae:	f7ff ff5f 	bl	8006870 <MSPI_GPIOInit>
	MSPIx_voidClockEnable(SPIConfig);
 80069b2:	6878      	ldr	r0, [r7, #4]
 80069b4:	f7ff ffd4 	bl	8006960 <MSPIx_voidClockEnable>
#if (SPI1_TX_INT_ENABLE || SPI2_TX_INT_ENABLE || SPI3_TX_INT_ENABLE ) ||(SPI1_RX_INT_ENABLE || SPI2_RX_INT_ENABLE || SPI3_RX_INT_ENABLE)==(INTERRUPT_ENABLED)
	MSPI_InterruptInit(SPIConfig);
#endif
	SPIx[SPIConfig->SPI_Instance]->CR1 =SPIConfig->SPI_Mode | SPIConfig->SPI_CLKPolarity | SPIConfig->SPI_CLKPhase
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	785a      	ldrb	r2, [r3, #1]
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	789b      	ldrb	r3, [r3, #2]
			| SPIConfig->SPI_FirstBit | SPIConfig->SPI_BaudRatePrescaler;
 80069c0:	4313      	orrs	r3, r2
 80069c2:	b2da      	uxtb	r2, r3
	SPIx[SPIConfig->SPI_Instance]->CR1 =SPIConfig->SPI_Mode | SPIConfig->SPI_CLKPolarity | SPIConfig->SPI_CLKPhase
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	78db      	ldrb	r3, [r3, #3]
			| SPIConfig->SPI_FirstBit | SPIConfig->SPI_BaudRatePrescaler;
 80069c8:	4313      	orrs	r3, r2
 80069ca:	b2da      	uxtb	r2, r3
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	791b      	ldrb	r3, [r3, #4]
 80069d0:	4313      	orrs	r3, r2
 80069d2:	b2da      	uxtb	r2, r3
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	795b      	ldrb	r3, [r3, #5]
 80069d8:	4313      	orrs	r3, r2
 80069da:	b2da      	uxtb	r2, r3
	SPIx[SPIConfig->SPI_Instance]->CR1 =SPIConfig->SPI_Mode | SPIConfig->SPI_CLKPolarity | SPIConfig->SPI_CLKPhase
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	781b      	ldrb	r3, [r3, #0]
 80069e0:	4619      	mov	r1, r3
 80069e2:	4b14      	ldr	r3, [pc, #80]	; (8006a34 <MSPI_voidInit+0x90>)
 80069e4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80069e8:	601a      	str	r2, [r3, #0]
	SET_BIT(SPIx[SPIConfig->SPI_Instance]->CR2,SSOE_BIT_POS);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	781b      	ldrb	r3, [r3, #0]
 80069ee:	461a      	mov	r2, r3
 80069f0:	4b10      	ldr	r3, [pc, #64]	; (8006a34 <MSPI_voidInit+0x90>)
 80069f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069f6:	685a      	ldr	r2, [r3, #4]
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	781b      	ldrb	r3, [r3, #0]
 80069fc:	4619      	mov	r1, r3
 80069fe:	4b0d      	ldr	r3, [pc, #52]	; (8006a34 <MSPI_voidInit+0x90>)
 8006a00:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006a04:	f042 0204 	orr.w	r2, r2, #4
 8006a08:	605a      	str	r2, [r3, #4]
	SET_BIT(SPIx[SPIConfig->SPI_Instance]->CR1, SPI_EN_BIT_POS);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	781b      	ldrb	r3, [r3, #0]
 8006a0e:	461a      	mov	r2, r3
 8006a10:	4b08      	ldr	r3, [pc, #32]	; (8006a34 <MSPI_voidInit+0x90>)
 8006a12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a16:	681a      	ldr	r2, [r3, #0]
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	781b      	ldrb	r3, [r3, #0]
 8006a1c:	4619      	mov	r1, r3
 8006a1e:	4b05      	ldr	r3, [pc, #20]	; (8006a34 <MSPI_voidInit+0x90>)
 8006a20:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006a24:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006a28:	601a      	str	r2, [r3, #0]
}
 8006a2a:	bf00      	nop
 8006a2c:	3708      	adds	r7, #8
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	bd80      	pop	{r7, pc}
 8006a32:	bf00      	nop
 8006a34:	20000080 	.word	0x20000080

08006a38 <MSPI_TransmitByte>:
						}
}
#endif

Std_ReturnType MSPI_TransmitByte(SPI_Config_t* SPIConfig , u8 Copy_u8Data , u32 Copy_u32Timeout)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b086      	sub	sp, #24
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	60f8      	str	r0, [r7, #12]
 8006a40:	460b      	mov	r3, r1
 8006a42:	607a      	str	r2, [r7, #4]
 8006a44:	72fb      	strb	r3, [r7, #11]
	Std_ReturnType Local_u8ErrorState = STD_OK;
 8006a46:	2300      	movs	r3, #0
 8006a48:	75fb      	strb	r3, [r7, #23]
    u8 Local_u8DummyReceieve = 0;
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	75bb      	strb	r3, [r7, #22]
    TIM_SingleInterval(&TIM2_Cfg, Copy_u32Timeout*1000, SPI_Timeout_Handler);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006a54:	fb02 f303 	mul.w	r3, r2, r3
 8006a58:	4a1b      	ldr	r2, [pc, #108]	; (8006ac8 <MSPI_TransmitByte+0x90>)
 8006a5a:	4619      	mov	r1, r3
 8006a5c:	481b      	ldr	r0, [pc, #108]	; (8006acc <MSPI_TransmitByte+0x94>)
 8006a5e:	f000 fc01 	bl	8007264 <TIM_SingleInterval>
    SPIx[SPIConfig->SPI_Instance]->DR = Copy_u8Data;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	781b      	ldrb	r3, [r3, #0]
 8006a66:	461a      	mov	r2, r3
 8006a68:	4b19      	ldr	r3, [pc, #100]	; (8006ad0 <MSPI_TransmitByte+0x98>)
 8006a6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a6e:	7afa      	ldrb	r2, [r7, #11]
 8006a70:	60da      	str	r2, [r3, #12]
    while((GET_BIT(SPIx[SPIConfig->SPI_Instance]->SR,SPI_BSY_BIT_POS) == SPI_BUSY) && (SPI_Timeout_Flag != SPI_TIMEOUT));
 8006a72:	bf00      	nop
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	781b      	ldrb	r3, [r3, #0]
 8006a78:	461a      	mov	r2, r3
 8006a7a:	4b15      	ldr	r3, [pc, #84]	; (8006ad0 <MSPI_TransmitByte+0x98>)
 8006a7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a80:	689b      	ldr	r3, [r3, #8]
 8006a82:	09db      	lsrs	r3, r3, #7
 8006a84:	f003 0301 	and.w	r3, r3, #1
 8006a88:	2b01      	cmp	r3, #1
 8006a8a:	d103      	bne.n	8006a94 <MSPI_TransmitByte+0x5c>
 8006a8c:	4b11      	ldr	r3, [pc, #68]	; (8006ad4 <MSPI_TransmitByte+0x9c>)
 8006a8e:	781b      	ldrb	r3, [r3, #0]
 8006a90:	2b01      	cmp	r3, #1
 8006a92:	d1ef      	bne.n	8006a74 <MSPI_TransmitByte+0x3c>
    if(SPI_Timeout_Flag == SPI_TIMEOUT)
 8006a94:	4b0f      	ldr	r3, [pc, #60]	; (8006ad4 <MSPI_TransmitByte+0x9c>)
 8006a96:	781b      	ldrb	r3, [r3, #0]
 8006a98:	2b01      	cmp	r3, #1
 8006a9a:	d105      	bne.n	8006aa8 <MSPI_TransmitByte+0x70>
    {
    	Local_u8ErrorState = STD_TIMEOUT;
 8006a9c:	2302      	movs	r3, #2
 8006a9e:	75fb      	strb	r3, [r7, #23]
    	SPI_Timeout_Flag = SPI_NO_TIMEOUT;
 8006aa0:	4b0c      	ldr	r3, [pc, #48]	; (8006ad4 <MSPI_TransmitByte+0x9c>)
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	701a      	strb	r2, [r3, #0]
 8006aa6:	e00a      	b.n	8006abe <MSPI_TransmitByte+0x86>
    }
    else
    {
    	TIM_DeInit(&TIM2_Cfg);
 8006aa8:	4808      	ldr	r0, [pc, #32]	; (8006acc <MSPI_TransmitByte+0x94>)
 8006aaa:	f000 fb97 	bl	80071dc <TIM_DeInit>
    	Local_u8DummyReceieve = SPIx[SPIConfig->SPI_Instance]->DR;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	781b      	ldrb	r3, [r3, #0]
 8006ab2:	461a      	mov	r2, r3
 8006ab4:	4b06      	ldr	r3, [pc, #24]	; (8006ad0 <MSPI_TransmitByte+0x98>)
 8006ab6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006aba:	68db      	ldr	r3, [r3, #12]
 8006abc:	75bb      	strb	r3, [r7, #22]
    }
	return Local_u8ErrorState;
 8006abe:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	3718      	adds	r7, #24
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	bd80      	pop	{r7, pc}
 8006ac8:	08006949 	.word	0x08006949
 8006acc:	2000008c 	.word	0x2000008c
 8006ad0:	20000080 	.word	0x20000080
 8006ad4:	20000180 	.word	0x20000180

08006ad8 <MSPI_DMA_Transmit>:
	}
	return Local_u8ErrorState;
}

void MSPI_DMA_Transmit(SPI_Config_t* SPIConfig , u8* Ptr_u8Data , u16 Copy_u16DataSize)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b084      	sub	sp, #16
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	60f8      	str	r0, [r7, #12]
 8006ae0:	60b9      	str	r1, [r7, #8]
 8006ae2:	4613      	mov	r3, r2
 8006ae4:	80fb      	strh	r3, [r7, #6]
	MDMA_voidInit(&SPIConfig->SPI_TX_DMA_Config);
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	3308      	adds	r3, #8
 8006aea:	4618      	mov	r0, r3
 8006aec:	f7fe febc 	bl	8005868 <MDMA_voidInit>
	MDMA_voidStart(&SPIConfig->SPI_TX_DMA_Config, &SPIx[SPIConfig->SPI_Instance]->DR,(u32*)Ptr_u8Data, Copy_u16DataSize);
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	f103 0008 	add.w	r0, r3, #8
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	781b      	ldrb	r3, [r3, #0]
 8006afa:	461a      	mov	r2, r3
 8006afc:	4b0e      	ldr	r3, [pc, #56]	; (8006b38 <MSPI_DMA_Transmit+0x60>)
 8006afe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b02:	f103 010c 	add.w	r1, r3, #12
 8006b06:	88fb      	ldrh	r3, [r7, #6]
 8006b08:	68ba      	ldr	r2, [r7, #8]
 8006b0a:	f7fe ff01 	bl	8005910 <MDMA_voidStart>
	SET_BIT(SPIx[SPIConfig->SPI_Instance]->CR2, TXDMAEN_BIT_POS);
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	781b      	ldrb	r3, [r3, #0]
 8006b12:	461a      	mov	r2, r3
 8006b14:	4b08      	ldr	r3, [pc, #32]	; (8006b38 <MSPI_DMA_Transmit+0x60>)
 8006b16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b1a:	685a      	ldr	r2, [r3, #4]
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	781b      	ldrb	r3, [r3, #0]
 8006b20:	4619      	mov	r1, r3
 8006b22:	4b05      	ldr	r3, [pc, #20]	; (8006b38 <MSPI_DMA_Transmit+0x60>)
 8006b24:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006b28:	f042 0202 	orr.w	r2, r2, #2
 8006b2c:	605a      	str	r2, [r3, #4]
}
 8006b2e:	bf00      	nop
 8006b30:	3710      	adds	r7, #16
 8006b32:	46bd      	mov	sp, r7
 8006b34:	bd80      	pop	{r7, pc}
 8006b36:	bf00      	nop
 8006b38:	20000080 	.word	0x20000080

08006b3c <SPI1_IRQHandler>:
	SET_BIT(SPIx[SPIConfig->SPI_Instance]->CR2, TXDMAEN_BIT_POS);
	SET_BIT(SPIx[SPIConfig->SPI_Instance]->CR2, RXDMAEN_BIT_POS);
}
/*************************************************************SPI IRQ HANDLERS******************************************************************/
void SPI1_IRQHandler(void)
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	af00      	add	r7, sp, #0
		{
			SPI1_RX_INT_Callback();
		}
	}
#endif
}
 8006b40:	bf00      	nop
 8006b42:	46bd      	mov	sp, r7
 8006b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b48:	4770      	bx	lr

08006b4a <SPI2_IRQHandler>:
void SPI2_IRQHandler(void)
{
 8006b4a:	b480      	push	{r7}
 8006b4c:	af00      	add	r7, sp, #0
		{
			SPI2_RX_INT_Callback();
		}
	}
#endif
}
 8006b4e:	bf00      	nop
 8006b50:	46bd      	mov	sp, r7
 8006b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b56:	4770      	bx	lr

08006b58 <SPI3_IRQHandler>:
void SPI3_IRQHandler(void)
{
 8006b58:	b480      	push	{r7}
 8006b5a:	af00      	add	r7, sp, #0
		{
			SPI3_RX_INT_Callback();
		}
	}
#endif
}
 8006b5c:	bf00      	nop
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b64:	4770      	bx	lr
	...

08006b68 <TIM_RCC_ENABLE>:

/**********************************************************************************************************************
 *  LOCAL FUNCTIONS
 *********************************************************************************************************************/
static void TIM_RCC_ENABLE(volatile TIM_t* TIM_Instance)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b082      	sub	sp, #8
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
	if(TIM_Instance == TIM1)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	4a25      	ldr	r2, [pc, #148]	; (8006c08 <TIM_RCC_ENABLE+0xa0>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d104      	bne.n	8006b82 <TIM_RCC_ENABLE+0x1a>
	{
		RCC_voidEnablePeripheralClock(RCC_APB2, RCC_APB2_TIM1EN);
 8006b78:	2100      	movs	r1, #0
 8006b7a:	2002      	movs	r0, #2
 8006b7c:	f7ff fe28 	bl	80067d0 <RCC_voidEnablePeripheralClock>
	}
	else if(TIM_Instance == TIM11)
	{
		RCC_voidEnablePeripheralClock(RCC_APB2, RCC_APB2_TIM11EN);
	}
}
 8006b80:	e03d      	b.n	8006bfe <TIM_RCC_ENABLE+0x96>
	else if(TIM_Instance == TIM2)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b88:	d104      	bne.n	8006b94 <TIM_RCC_ENABLE+0x2c>
		RCC_voidEnablePeripheralClock(RCC_APB1, RCC_APB1_TIM2EN);
 8006b8a:	2100      	movs	r1, #0
 8006b8c:	2001      	movs	r0, #1
 8006b8e:	f7ff fe1f 	bl	80067d0 <RCC_voidEnablePeripheralClock>
}
 8006b92:	e034      	b.n	8006bfe <TIM_RCC_ENABLE+0x96>
	else if(TIM_Instance == TIM3)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	4a1d      	ldr	r2, [pc, #116]	; (8006c0c <TIM_RCC_ENABLE+0xa4>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d104      	bne.n	8006ba6 <TIM_RCC_ENABLE+0x3e>
		RCC_voidEnablePeripheralClock(RCC_APB1, RCC_APB1_TIM3EN);
 8006b9c:	2101      	movs	r1, #1
 8006b9e:	2001      	movs	r0, #1
 8006ba0:	f7ff fe16 	bl	80067d0 <RCC_voidEnablePeripheralClock>
}
 8006ba4:	e02b      	b.n	8006bfe <TIM_RCC_ENABLE+0x96>
	else if(TIM_Instance == TIM4)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	4a19      	ldr	r2, [pc, #100]	; (8006c10 <TIM_RCC_ENABLE+0xa8>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d104      	bne.n	8006bb8 <TIM_RCC_ENABLE+0x50>
		RCC_voidEnablePeripheralClock(RCC_APB1, RCC_APB1_TIM4EN);
 8006bae:	2102      	movs	r1, #2
 8006bb0:	2001      	movs	r0, #1
 8006bb2:	f7ff fe0d 	bl	80067d0 <RCC_voidEnablePeripheralClock>
}
 8006bb6:	e022      	b.n	8006bfe <TIM_RCC_ENABLE+0x96>
	else if(TIM_Instance == TIM5)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	4a16      	ldr	r2, [pc, #88]	; (8006c14 <TIM_RCC_ENABLE+0xac>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d104      	bne.n	8006bca <TIM_RCC_ENABLE+0x62>
		RCC_voidEnablePeripheralClock(RCC_APB1, RCC_APB1_TIM5EN);
 8006bc0:	2103      	movs	r1, #3
 8006bc2:	2001      	movs	r0, #1
 8006bc4:	f7ff fe04 	bl	80067d0 <RCC_voidEnablePeripheralClock>
}
 8006bc8:	e019      	b.n	8006bfe <TIM_RCC_ENABLE+0x96>
	else if(TIM_Instance == TIM9)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	4a12      	ldr	r2, [pc, #72]	; (8006c18 <TIM_RCC_ENABLE+0xb0>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d104      	bne.n	8006bdc <TIM_RCC_ENABLE+0x74>
		RCC_voidEnablePeripheralClock(RCC_APB2, RCC_APB2_TIM9EN);
 8006bd2:	2110      	movs	r1, #16
 8006bd4:	2002      	movs	r0, #2
 8006bd6:	f7ff fdfb 	bl	80067d0 <RCC_voidEnablePeripheralClock>
}
 8006bda:	e010      	b.n	8006bfe <TIM_RCC_ENABLE+0x96>
	else if(TIM_Instance == TIM10)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	4a0f      	ldr	r2, [pc, #60]	; (8006c1c <TIM_RCC_ENABLE+0xb4>)
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d104      	bne.n	8006bee <TIM_RCC_ENABLE+0x86>
		RCC_voidEnablePeripheralClock(RCC_APB2, RCC_APB2_TIM10EN);
 8006be4:	2111      	movs	r1, #17
 8006be6:	2002      	movs	r0, #2
 8006be8:	f7ff fdf2 	bl	80067d0 <RCC_voidEnablePeripheralClock>
}
 8006bec:	e007      	b.n	8006bfe <TIM_RCC_ENABLE+0x96>
	else if(TIM_Instance == TIM11)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	4a0b      	ldr	r2, [pc, #44]	; (8006c20 <TIM_RCC_ENABLE+0xb8>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d103      	bne.n	8006bfe <TIM_RCC_ENABLE+0x96>
		RCC_voidEnablePeripheralClock(RCC_APB2, RCC_APB2_TIM11EN);
 8006bf6:	2112      	movs	r1, #18
 8006bf8:	2002      	movs	r0, #2
 8006bfa:	f7ff fde9 	bl	80067d0 <RCC_voidEnablePeripheralClock>
}
 8006bfe:	bf00      	nop
 8006c00:	3708      	adds	r7, #8
 8006c02:	46bd      	mov	sp, r7
 8006c04:	bd80      	pop	{r7, pc}
 8006c06:	bf00      	nop
 8006c08:	40010000 	.word	0x40010000
 8006c0c:	40000400 	.word	0x40000400
 8006c10:	40000800 	.word	0x40000800
 8006c14:	40000c00 	.word	0x40000c00
 8006c18:	40014000 	.word	0x40014000
 8006c1c:	40014400 	.word	0x40014400
 8006c20:	40014800 	.word	0x40014800

08006c24 <TIM_GPIO_INIT>:
static void TIM_GPIO_INIT(volatile TIM_t* TIM_Instance)
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b082      	sub	sp, #8
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
	RCC_voidEnablePeripheralClock(RCC_AHB,RCC_AHB_GPIOAEN);
 8006c2c:	2100      	movs	r1, #0
 8006c2e:	2000      	movs	r0, #0
 8006c30:	f7ff fdce 	bl	80067d0 <RCC_voidEnablePeripheralClock>
	RCC_voidEnablePeripheralClock(RCC_AHB,RCC_AHB_GPIOBEN);
 8006c34:	2101      	movs	r1, #1
 8006c36:	2000      	movs	r0, #0
 8006c38:	f7ff fdca 	bl	80067d0 <RCC_voidEnablePeripheralClock>
	if(TIM_Instance == TIM1)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	4a3d      	ldr	r2, [pc, #244]	; (8006d34 <TIM_GPIO_INIT+0x110>)
 8006c40:	4293      	cmp	r3, r2
 8006c42:	d10a      	bne.n	8006c5a <TIM_GPIO_INIT+0x36>
	{
		GPIO_voidSetPinMode(GPIO_PORTA, GPIO_PIN8, GPIO_ALTERNATE_FUNCTION_PIN_MODE);
 8006c44:	2202      	movs	r2, #2
 8006c46:	2108      	movs	r1, #8
 8006c48:	2000      	movs	r0, #0
 8006c4a:	f7ff fa75 	bl	8006138 <GPIO_voidSetPinMode>
		GPIO_voidSetPinAlternateFunction(GPIO_PORTA, GPIO_PIN8, 1);
 8006c4e:	2201      	movs	r2, #1
 8006c50:	2108      	movs	r1, #8
 8006c52:	2000      	movs	r0, #0
 8006c54:	f7ff fb1c 	bl	8006290 <GPIO_voidSetPinAlternateFunction>
	else if(TIM_Instance == TIM11)
	{
		GPIO_voidSetPinMode(GPIO_PORTB, GPIO_PIN9, GPIO_ALTERNATE_FUNCTION_PIN_MODE);
		GPIO_voidSetPinAlternateFunction(GPIO_PORTB, GPIO_PIN9, 2);
	}
}
 8006c58:	e067      	b.n	8006d2a <TIM_GPIO_INIT+0x106>
	else if(TIM_Instance == TIM2)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c60:	d10a      	bne.n	8006c78 <TIM_GPIO_INIT+0x54>
		GPIO_voidSetPinMode(GPIO_PORTA, GPIO_PIN5, GPIO_ALTERNATE_FUNCTION_PIN_MODE);
 8006c62:	2202      	movs	r2, #2
 8006c64:	2105      	movs	r1, #5
 8006c66:	2000      	movs	r0, #0
 8006c68:	f7ff fa66 	bl	8006138 <GPIO_voidSetPinMode>
		GPIO_voidSetPinAlternateFunction(GPIO_PORTA, GPIO_PIN5, 1);
 8006c6c:	2201      	movs	r2, #1
 8006c6e:	2105      	movs	r1, #5
 8006c70:	2000      	movs	r0, #0
 8006c72:	f7ff fb0d 	bl	8006290 <GPIO_voidSetPinAlternateFunction>
}
 8006c76:	e058      	b.n	8006d2a <TIM_GPIO_INIT+0x106>
	else if(TIM_Instance == TIM3)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	4a2f      	ldr	r2, [pc, #188]	; (8006d38 <TIM_GPIO_INIT+0x114>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d10a      	bne.n	8006c96 <TIM_GPIO_INIT+0x72>
		GPIO_voidSetPinMode(GPIO_PORTB, GPIO_PIN4, GPIO_ALTERNATE_FUNCTION_PIN_MODE);
 8006c80:	2202      	movs	r2, #2
 8006c82:	2104      	movs	r1, #4
 8006c84:	2001      	movs	r0, #1
 8006c86:	f7ff fa57 	bl	8006138 <GPIO_voidSetPinMode>
		GPIO_voidSetPinAlternateFunction(GPIO_PORTB, GPIO_PIN4, 2);
 8006c8a:	2202      	movs	r2, #2
 8006c8c:	2104      	movs	r1, #4
 8006c8e:	2001      	movs	r0, #1
 8006c90:	f7ff fafe 	bl	8006290 <GPIO_voidSetPinAlternateFunction>
}
 8006c94:	e049      	b.n	8006d2a <TIM_GPIO_INIT+0x106>
	else if(TIM_Instance == TIM4)
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	4a28      	ldr	r2, [pc, #160]	; (8006d3c <TIM_GPIO_INIT+0x118>)
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d10a      	bne.n	8006cb4 <TIM_GPIO_INIT+0x90>
		GPIO_voidSetPinMode(GPIO_PORTB, GPIO_PIN6, GPIO_ALTERNATE_FUNCTION_PIN_MODE);
 8006c9e:	2202      	movs	r2, #2
 8006ca0:	2106      	movs	r1, #6
 8006ca2:	2001      	movs	r0, #1
 8006ca4:	f7ff fa48 	bl	8006138 <GPIO_voidSetPinMode>
		GPIO_voidSetPinAlternateFunction(GPIO_PORTB, GPIO_PIN6, 2);
 8006ca8:	2202      	movs	r2, #2
 8006caa:	2106      	movs	r1, #6
 8006cac:	2001      	movs	r0, #1
 8006cae:	f7ff faef 	bl	8006290 <GPIO_voidSetPinAlternateFunction>
}
 8006cb2:	e03a      	b.n	8006d2a <TIM_GPIO_INIT+0x106>
	else if(TIM_Instance == TIM5)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	4a22      	ldr	r2, [pc, #136]	; (8006d40 <TIM_GPIO_INIT+0x11c>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d10a      	bne.n	8006cd2 <TIM_GPIO_INIT+0xae>
		GPIO_voidSetPinMode(GPIO_PORTA, GPIO_PIN0, GPIO_ALTERNATE_FUNCTION_PIN_MODE);
 8006cbc:	2202      	movs	r2, #2
 8006cbe:	2100      	movs	r1, #0
 8006cc0:	2000      	movs	r0, #0
 8006cc2:	f7ff fa39 	bl	8006138 <GPIO_voidSetPinMode>
		GPIO_voidSetPinAlternateFunction(GPIO_PORTA, GPIO_PIN0, 2);
 8006cc6:	2202      	movs	r2, #2
 8006cc8:	2100      	movs	r1, #0
 8006cca:	2000      	movs	r0, #0
 8006ccc:	f7ff fae0 	bl	8006290 <GPIO_voidSetPinAlternateFunction>
}
 8006cd0:	e02b      	b.n	8006d2a <TIM_GPIO_INIT+0x106>
	else if(TIM_Instance == TIM9)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	4a1b      	ldr	r2, [pc, #108]	; (8006d44 <TIM_GPIO_INIT+0x120>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d10a      	bne.n	8006cf0 <TIM_GPIO_INIT+0xcc>
		GPIO_voidSetPinMode(GPIO_PORTA, GPIO_PIN2, GPIO_ALTERNATE_FUNCTION_PIN_MODE);
 8006cda:	2202      	movs	r2, #2
 8006cdc:	2102      	movs	r1, #2
 8006cde:	2000      	movs	r0, #0
 8006ce0:	f7ff fa2a 	bl	8006138 <GPIO_voidSetPinMode>
		GPIO_voidSetPinAlternateFunction(GPIO_PORTA, GPIO_PIN2, 3);
 8006ce4:	2203      	movs	r2, #3
 8006ce6:	2102      	movs	r1, #2
 8006ce8:	2000      	movs	r0, #0
 8006cea:	f7ff fad1 	bl	8006290 <GPIO_voidSetPinAlternateFunction>
}
 8006cee:	e01c      	b.n	8006d2a <TIM_GPIO_INIT+0x106>
	else if(TIM_Instance == TIM10)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	4a15      	ldr	r2, [pc, #84]	; (8006d48 <TIM_GPIO_INIT+0x124>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d10a      	bne.n	8006d0e <TIM_GPIO_INIT+0xea>
		GPIO_voidSetPinMode(GPIO_PORTB, GPIO_PIN8, GPIO_ALTERNATE_FUNCTION_PIN_MODE);
 8006cf8:	2202      	movs	r2, #2
 8006cfa:	2108      	movs	r1, #8
 8006cfc:	2001      	movs	r0, #1
 8006cfe:	f7ff fa1b 	bl	8006138 <GPIO_voidSetPinMode>
		GPIO_voidSetPinAlternateFunction(GPIO_PORTB, GPIO_PIN8, 2);
 8006d02:	2202      	movs	r2, #2
 8006d04:	2108      	movs	r1, #8
 8006d06:	2001      	movs	r0, #1
 8006d08:	f7ff fac2 	bl	8006290 <GPIO_voidSetPinAlternateFunction>
}
 8006d0c:	e00d      	b.n	8006d2a <TIM_GPIO_INIT+0x106>
	else if(TIM_Instance == TIM11)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	4a0e      	ldr	r2, [pc, #56]	; (8006d4c <TIM_GPIO_INIT+0x128>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d109      	bne.n	8006d2a <TIM_GPIO_INIT+0x106>
		GPIO_voidSetPinMode(GPIO_PORTB, GPIO_PIN9, GPIO_ALTERNATE_FUNCTION_PIN_MODE);
 8006d16:	2202      	movs	r2, #2
 8006d18:	2109      	movs	r1, #9
 8006d1a:	2001      	movs	r0, #1
 8006d1c:	f7ff fa0c 	bl	8006138 <GPIO_voidSetPinMode>
		GPIO_voidSetPinAlternateFunction(GPIO_PORTB, GPIO_PIN9, 2);
 8006d20:	2202      	movs	r2, #2
 8006d22:	2109      	movs	r1, #9
 8006d24:	2001      	movs	r0, #1
 8006d26:	f7ff fab3 	bl	8006290 <GPIO_voidSetPinAlternateFunction>
}
 8006d2a:	bf00      	nop
 8006d2c:	3708      	adds	r7, #8
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	bd80      	pop	{r7, pc}
 8006d32:	bf00      	nop
 8006d34:	40010000 	.word	0x40010000
 8006d38:	40000400 	.word	0x40000400
 8006d3c:	40000800 	.word	0x40000800
 8006d40:	40000c00 	.word	0x40000c00
 8006d44:	40014000 	.word	0x40014000
 8006d48:	40014400 	.word	0x40014400
 8006d4c:	40014800 	.word	0x40014800

08006d50 <TIM_Update_INT_Init>:
static void TIM_Update_INT_Init(const TIM_Config_t* TIM_Config)
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b082      	sub	sp, #8
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
	if(TIM_Config->TIM_Instance == TIM1)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	4a4d      	ldr	r2, [pc, #308]	; (8006e94 <TIM_Update_INT_Init+0x144>)
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d10d      	bne.n	8006d7e <TIM_Update_INT_Init+0x2e>
	{
		MNVIC_voidEnableIRQ(TIM1_UP_TIM10_IRQn);
 8006d62:	2019      	movs	r0, #25
 8006d64:	f7ff fc50 	bl	8006608 <MNVIC_voidEnableIRQ>
		TIMx_UP_INT_Callback[TIM1_CALLBACK] = TIM_Config->UP_Callback;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	695b      	ldr	r3, [r3, #20]
 8006d6c:	4a4a      	ldr	r2, [pc, #296]	; (8006e98 <TIM_Update_INT_Init+0x148>)
 8006d6e:	6013      	str	r3, [r2, #0]
		TIM1->DIER |= TIM_UIE;
 8006d70:	4b48      	ldr	r3, [pc, #288]	; (8006e94 <TIM_Update_INT_Init+0x144>)
 8006d72:	68db      	ldr	r3, [r3, #12]
 8006d74:	4a47      	ldr	r2, [pc, #284]	; (8006e94 <TIM_Update_INT_Init+0x144>)
 8006d76:	f043 0301 	orr.w	r3, r3, #1
 8006d7a:	60d3      	str	r3, [r2, #12]
		MNVIC_voidEnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
		TIMx_UP_INT_Callback[TIM11_CALLBACK] = TIM_Config->UP_Callback;
		TIM11->DIER |= TIM_UIE;
	}

}
 8006d7c:	e085      	b.n	8006e8a <TIM_Update_INT_Init+0x13a>
	else if(TIM_Config->TIM_Instance == TIM2)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d86:	d10f      	bne.n	8006da8 <TIM_Update_INT_Init+0x58>
		MNVIC_voidEnableIRQ(TIM2_IRQn);
 8006d88:	201c      	movs	r0, #28
 8006d8a:	f7ff fc3d 	bl	8006608 <MNVIC_voidEnableIRQ>
		TIMx_UP_INT_Callback[TIM2_CALLBACK] = TIM_Config->UP_Callback;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	695b      	ldr	r3, [r3, #20]
 8006d92:	4a41      	ldr	r2, [pc, #260]	; (8006e98 <TIM_Update_INT_Init+0x148>)
 8006d94:	6053      	str	r3, [r2, #4]
		TIM2->DIER |= TIM_UIE;
 8006d96:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006d9a:	68db      	ldr	r3, [r3, #12]
 8006d9c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006da0:	f043 0301 	orr.w	r3, r3, #1
 8006da4:	60d3      	str	r3, [r2, #12]
}
 8006da6:	e070      	b.n	8006e8a <TIM_Update_INT_Init+0x13a>
	else if(TIM_Config->TIM_Instance == TIM3)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	4a3b      	ldr	r2, [pc, #236]	; (8006e9c <TIM_Update_INT_Init+0x14c>)
 8006dae:	4293      	cmp	r3, r2
 8006db0:	d10d      	bne.n	8006dce <TIM_Update_INT_Init+0x7e>
		MNVIC_voidEnableIRQ(TIM3_IRQn);
 8006db2:	201d      	movs	r0, #29
 8006db4:	f7ff fc28 	bl	8006608 <MNVIC_voidEnableIRQ>
		TIMx_UP_INT_Callback[TIM3_CALLBACK] = TIM_Config->UP_Callback;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	695b      	ldr	r3, [r3, #20]
 8006dbc:	4a36      	ldr	r2, [pc, #216]	; (8006e98 <TIM_Update_INT_Init+0x148>)
 8006dbe:	6093      	str	r3, [r2, #8]
		TIM3->DIER |= TIM_UIE;
 8006dc0:	4b36      	ldr	r3, [pc, #216]	; (8006e9c <TIM_Update_INT_Init+0x14c>)
 8006dc2:	68db      	ldr	r3, [r3, #12]
 8006dc4:	4a35      	ldr	r2, [pc, #212]	; (8006e9c <TIM_Update_INT_Init+0x14c>)
 8006dc6:	f043 0301 	orr.w	r3, r3, #1
 8006dca:	60d3      	str	r3, [r2, #12]
}
 8006dcc:	e05d      	b.n	8006e8a <TIM_Update_INT_Init+0x13a>
	else if(TIM_Config->TIM_Instance == TIM4)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	4a33      	ldr	r2, [pc, #204]	; (8006ea0 <TIM_Update_INT_Init+0x150>)
 8006dd4:	4293      	cmp	r3, r2
 8006dd6:	d10d      	bne.n	8006df4 <TIM_Update_INT_Init+0xa4>
		MNVIC_voidEnableIRQ(TIM4_IRQn);
 8006dd8:	201e      	movs	r0, #30
 8006dda:	f7ff fc15 	bl	8006608 <MNVIC_voidEnableIRQ>
		TIMx_UP_INT_Callback[TIM4_CALLBACK] = TIM_Config->UP_Callback;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	695b      	ldr	r3, [r3, #20]
 8006de2:	4a2d      	ldr	r2, [pc, #180]	; (8006e98 <TIM_Update_INT_Init+0x148>)
 8006de4:	60d3      	str	r3, [r2, #12]
		TIM4->DIER |= TIM_UIE;
 8006de6:	4b2e      	ldr	r3, [pc, #184]	; (8006ea0 <TIM_Update_INT_Init+0x150>)
 8006de8:	68db      	ldr	r3, [r3, #12]
 8006dea:	4a2d      	ldr	r2, [pc, #180]	; (8006ea0 <TIM_Update_INT_Init+0x150>)
 8006dec:	f043 0301 	orr.w	r3, r3, #1
 8006df0:	60d3      	str	r3, [r2, #12]
}
 8006df2:	e04a      	b.n	8006e8a <TIM_Update_INT_Init+0x13a>
	else if(TIM_Config->TIM_Instance == TIM5)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	4a2a      	ldr	r2, [pc, #168]	; (8006ea4 <TIM_Update_INT_Init+0x154>)
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d10d      	bne.n	8006e1a <TIM_Update_INT_Init+0xca>
		MNVIC_voidEnableIRQ(TIM5_IRQn);
 8006dfe:	2032      	movs	r0, #50	; 0x32
 8006e00:	f7ff fc02 	bl	8006608 <MNVIC_voidEnableIRQ>
		TIMx_UP_INT_Callback[TIM5_CALLBACK] = TIM_Config->UP_Callback;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	695b      	ldr	r3, [r3, #20]
 8006e08:	4a23      	ldr	r2, [pc, #140]	; (8006e98 <TIM_Update_INT_Init+0x148>)
 8006e0a:	6113      	str	r3, [r2, #16]
		TIM5->DIER |= TIM_UIE;
 8006e0c:	4b25      	ldr	r3, [pc, #148]	; (8006ea4 <TIM_Update_INT_Init+0x154>)
 8006e0e:	68db      	ldr	r3, [r3, #12]
 8006e10:	4a24      	ldr	r2, [pc, #144]	; (8006ea4 <TIM_Update_INT_Init+0x154>)
 8006e12:	f043 0301 	orr.w	r3, r3, #1
 8006e16:	60d3      	str	r3, [r2, #12]
}
 8006e18:	e037      	b.n	8006e8a <TIM_Update_INT_Init+0x13a>
	else if(TIM_Config->TIM_Instance == TIM9)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	4a22      	ldr	r2, [pc, #136]	; (8006ea8 <TIM_Update_INT_Init+0x158>)
 8006e20:	4293      	cmp	r3, r2
 8006e22:	d10d      	bne.n	8006e40 <TIM_Update_INT_Init+0xf0>
		MNVIC_voidEnableIRQ(TIM1_BRK_TIM9_IRQn);
 8006e24:	2018      	movs	r0, #24
 8006e26:	f7ff fbef 	bl	8006608 <MNVIC_voidEnableIRQ>
		TIMx_UP_INT_Callback[TIM9_CALLBACK] = TIM_Config->UP_Callback;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	695b      	ldr	r3, [r3, #20]
 8006e2e:	4a1a      	ldr	r2, [pc, #104]	; (8006e98 <TIM_Update_INT_Init+0x148>)
 8006e30:	6153      	str	r3, [r2, #20]
		TIM9->DIER |= TIM_UIE;
 8006e32:	4b1d      	ldr	r3, [pc, #116]	; (8006ea8 <TIM_Update_INT_Init+0x158>)
 8006e34:	68db      	ldr	r3, [r3, #12]
 8006e36:	4a1c      	ldr	r2, [pc, #112]	; (8006ea8 <TIM_Update_INT_Init+0x158>)
 8006e38:	f043 0301 	orr.w	r3, r3, #1
 8006e3c:	60d3      	str	r3, [r2, #12]
}
 8006e3e:	e024      	b.n	8006e8a <TIM_Update_INT_Init+0x13a>
	else if(TIM_Config->TIM_Instance == TIM10)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	4a19      	ldr	r2, [pc, #100]	; (8006eac <TIM_Update_INT_Init+0x15c>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d10d      	bne.n	8006e66 <TIM_Update_INT_Init+0x116>
		MNVIC_voidEnableIRQ(TIM1_UP_TIM10_IRQn);
 8006e4a:	2019      	movs	r0, #25
 8006e4c:	f7ff fbdc 	bl	8006608 <MNVIC_voidEnableIRQ>
		TIMx_UP_INT_Callback[TIM10_CALLBACK] = TIM_Config->UP_Callback;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	695b      	ldr	r3, [r3, #20]
 8006e54:	4a10      	ldr	r2, [pc, #64]	; (8006e98 <TIM_Update_INT_Init+0x148>)
 8006e56:	6193      	str	r3, [r2, #24]
		TIM10->DIER |= TIM_UIE;
 8006e58:	4b14      	ldr	r3, [pc, #80]	; (8006eac <TIM_Update_INT_Init+0x15c>)
 8006e5a:	68db      	ldr	r3, [r3, #12]
 8006e5c:	4a13      	ldr	r2, [pc, #76]	; (8006eac <TIM_Update_INT_Init+0x15c>)
 8006e5e:	f043 0301 	orr.w	r3, r3, #1
 8006e62:	60d3      	str	r3, [r2, #12]
}
 8006e64:	e011      	b.n	8006e8a <TIM_Update_INT_Init+0x13a>
	else if(TIM_Config->TIM_Instance == TIM11)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	4a11      	ldr	r2, [pc, #68]	; (8006eb0 <TIM_Update_INT_Init+0x160>)
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	d10c      	bne.n	8006e8a <TIM_Update_INT_Init+0x13a>
		MNVIC_voidEnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8006e70:	201a      	movs	r0, #26
 8006e72:	f7ff fbc9 	bl	8006608 <MNVIC_voidEnableIRQ>
		TIMx_UP_INT_Callback[TIM11_CALLBACK] = TIM_Config->UP_Callback;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	695b      	ldr	r3, [r3, #20]
 8006e7a:	4a07      	ldr	r2, [pc, #28]	; (8006e98 <TIM_Update_INT_Init+0x148>)
 8006e7c:	61d3      	str	r3, [r2, #28]
		TIM11->DIER |= TIM_UIE;
 8006e7e:	4b0c      	ldr	r3, [pc, #48]	; (8006eb0 <TIM_Update_INT_Init+0x160>)
 8006e80:	68db      	ldr	r3, [r3, #12]
 8006e82:	4a0b      	ldr	r2, [pc, #44]	; (8006eb0 <TIM_Update_INT_Init+0x160>)
 8006e84:	f043 0301 	orr.w	r3, r3, #1
 8006e88:	60d3      	str	r3, [r2, #12]
}
 8006e8a:	bf00      	nop
 8006e8c:	3708      	adds	r7, #8
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	bd80      	pop	{r7, pc}
 8006e92:	bf00      	nop
 8006e94:	40010000 	.word	0x40010000
 8006e98:	20000184 	.word	0x20000184
 8006e9c:	40000400 	.word	0x40000400
 8006ea0:	40000800 	.word	0x40000800
 8006ea4:	40000c00 	.word	0x40000c00
 8006ea8:	40014000 	.word	0x40014000
 8006eac:	40014400 	.word	0x40014400
 8006eb0:	40014800 	.word	0x40014800

08006eb4 <TIM_Capture_Compare_INT_Init>:
static void TIM_Capture_Compare_INT_Init(const TIM_Config_t* TIM_Config)
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b082      	sub	sp, #8
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
	if(TIM_Config->TIM_Instance == TIM1)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	4a4d      	ldr	r2, [pc, #308]	; (8006ff8 <TIM_Capture_Compare_INT_Init+0x144>)
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d10d      	bne.n	8006ee2 <TIM_Capture_Compare_INT_Init+0x2e>
	{
		MNVIC_voidEnableIRQ(TIM1_CC_IRQn);
 8006ec6:	201b      	movs	r0, #27
 8006ec8:	f7ff fb9e 	bl	8006608 <MNVIC_voidEnableIRQ>
		TIMx_CC_INT_Callback[TIM1_CALLBACK] = TIM_Config->CC_Callback;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	699b      	ldr	r3, [r3, #24]
 8006ed0:	4a4a      	ldr	r2, [pc, #296]	; (8006ffc <TIM_Capture_Compare_INT_Init+0x148>)
 8006ed2:	6013      	str	r3, [r2, #0]
		TIM1->DIER |= TIM_CC1IE;
 8006ed4:	4b48      	ldr	r3, [pc, #288]	; (8006ff8 <TIM_Capture_Compare_INT_Init+0x144>)
 8006ed6:	68db      	ldr	r3, [r3, #12]
 8006ed8:	4a47      	ldr	r2, [pc, #284]	; (8006ff8 <TIM_Capture_Compare_INT_Init+0x144>)
 8006eda:	f043 0302 	orr.w	r3, r3, #2
 8006ede:	60d3      	str	r3, [r2, #12]
	{
		MNVIC_voidEnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
		TIMx_CC_INT_Callback[TIM11_CALLBACK] = TIM_Config->CC_Callback;
		TIM11->DIER |= TIM_CC1IE;
	}
}
 8006ee0:	e085      	b.n	8006fee <TIM_Capture_Compare_INT_Init+0x13a>
	else if(TIM_Config->TIM_Instance == TIM2)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006eea:	d10f      	bne.n	8006f0c <TIM_Capture_Compare_INT_Init+0x58>
		MNVIC_voidEnableIRQ(TIM2_IRQn);
 8006eec:	201c      	movs	r0, #28
 8006eee:	f7ff fb8b 	bl	8006608 <MNVIC_voidEnableIRQ>
		TIMx_CC_INT_Callback[TIM2_CALLBACK] = TIM_Config->CC_Callback;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	699b      	ldr	r3, [r3, #24]
 8006ef6:	4a41      	ldr	r2, [pc, #260]	; (8006ffc <TIM_Capture_Compare_INT_Init+0x148>)
 8006ef8:	6053      	str	r3, [r2, #4]
		TIM2->DIER |= TIM_CC1IE;
 8006efa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006efe:	68db      	ldr	r3, [r3, #12]
 8006f00:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006f04:	f043 0302 	orr.w	r3, r3, #2
 8006f08:	60d3      	str	r3, [r2, #12]
}
 8006f0a:	e070      	b.n	8006fee <TIM_Capture_Compare_INT_Init+0x13a>
	else if(TIM_Config->TIM_Instance == TIM3)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	4a3b      	ldr	r2, [pc, #236]	; (8007000 <TIM_Capture_Compare_INT_Init+0x14c>)
 8006f12:	4293      	cmp	r3, r2
 8006f14:	d10d      	bne.n	8006f32 <TIM_Capture_Compare_INT_Init+0x7e>
		MNVIC_voidEnableIRQ(TIM3_IRQn);
 8006f16:	201d      	movs	r0, #29
 8006f18:	f7ff fb76 	bl	8006608 <MNVIC_voidEnableIRQ>
		TIMx_CC_INT_Callback[TIM3_CALLBACK] = TIM_Config->CC_Callback;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	699b      	ldr	r3, [r3, #24]
 8006f20:	4a36      	ldr	r2, [pc, #216]	; (8006ffc <TIM_Capture_Compare_INT_Init+0x148>)
 8006f22:	6093      	str	r3, [r2, #8]
		TIM3->DIER |= TIM_CC1IE;
 8006f24:	4b36      	ldr	r3, [pc, #216]	; (8007000 <TIM_Capture_Compare_INT_Init+0x14c>)
 8006f26:	68db      	ldr	r3, [r3, #12]
 8006f28:	4a35      	ldr	r2, [pc, #212]	; (8007000 <TIM_Capture_Compare_INT_Init+0x14c>)
 8006f2a:	f043 0302 	orr.w	r3, r3, #2
 8006f2e:	60d3      	str	r3, [r2, #12]
}
 8006f30:	e05d      	b.n	8006fee <TIM_Capture_Compare_INT_Init+0x13a>
	else if(TIM_Config->TIM_Instance == TIM4)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	4a33      	ldr	r2, [pc, #204]	; (8007004 <TIM_Capture_Compare_INT_Init+0x150>)
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d10d      	bne.n	8006f58 <TIM_Capture_Compare_INT_Init+0xa4>
		MNVIC_voidEnableIRQ(TIM4_IRQn);
 8006f3c:	201e      	movs	r0, #30
 8006f3e:	f7ff fb63 	bl	8006608 <MNVIC_voidEnableIRQ>
		TIMx_CC_INT_Callback[TIM4_CALLBACK] = TIM_Config->CC_Callback;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	699b      	ldr	r3, [r3, #24]
 8006f46:	4a2d      	ldr	r2, [pc, #180]	; (8006ffc <TIM_Capture_Compare_INT_Init+0x148>)
 8006f48:	60d3      	str	r3, [r2, #12]
		TIM4->DIER |= TIM_CC1IE;
 8006f4a:	4b2e      	ldr	r3, [pc, #184]	; (8007004 <TIM_Capture_Compare_INT_Init+0x150>)
 8006f4c:	68db      	ldr	r3, [r3, #12]
 8006f4e:	4a2d      	ldr	r2, [pc, #180]	; (8007004 <TIM_Capture_Compare_INT_Init+0x150>)
 8006f50:	f043 0302 	orr.w	r3, r3, #2
 8006f54:	60d3      	str	r3, [r2, #12]
}
 8006f56:	e04a      	b.n	8006fee <TIM_Capture_Compare_INT_Init+0x13a>
	else if(TIM_Config->TIM_Instance == TIM5)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	4a2a      	ldr	r2, [pc, #168]	; (8007008 <TIM_Capture_Compare_INT_Init+0x154>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d10d      	bne.n	8006f7e <TIM_Capture_Compare_INT_Init+0xca>
		MNVIC_voidEnableIRQ(TIM5_IRQn);
 8006f62:	2032      	movs	r0, #50	; 0x32
 8006f64:	f7ff fb50 	bl	8006608 <MNVIC_voidEnableIRQ>
		TIMx_CC_INT_Callback[TIM5_CALLBACK] = TIM_Config->CC_Callback;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	699b      	ldr	r3, [r3, #24]
 8006f6c:	4a23      	ldr	r2, [pc, #140]	; (8006ffc <TIM_Capture_Compare_INT_Init+0x148>)
 8006f6e:	6113      	str	r3, [r2, #16]
		TIM5->DIER |= TIM_CC1IE;
 8006f70:	4b25      	ldr	r3, [pc, #148]	; (8007008 <TIM_Capture_Compare_INT_Init+0x154>)
 8006f72:	68db      	ldr	r3, [r3, #12]
 8006f74:	4a24      	ldr	r2, [pc, #144]	; (8007008 <TIM_Capture_Compare_INT_Init+0x154>)
 8006f76:	f043 0302 	orr.w	r3, r3, #2
 8006f7a:	60d3      	str	r3, [r2, #12]
}
 8006f7c:	e037      	b.n	8006fee <TIM_Capture_Compare_INT_Init+0x13a>
	else if(TIM_Config->TIM_Instance == TIM9)
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	4a22      	ldr	r2, [pc, #136]	; (800700c <TIM_Capture_Compare_INT_Init+0x158>)
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d10d      	bne.n	8006fa4 <TIM_Capture_Compare_INT_Init+0xf0>
		MNVIC_voidEnableIRQ(TIM1_BRK_TIM9_IRQn);
 8006f88:	2018      	movs	r0, #24
 8006f8a:	f7ff fb3d 	bl	8006608 <MNVIC_voidEnableIRQ>
		TIMx_CC_INT_Callback[TIM9_CALLBACK] = TIM_Config->CC_Callback;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	699b      	ldr	r3, [r3, #24]
 8006f92:	4a1a      	ldr	r2, [pc, #104]	; (8006ffc <TIM_Capture_Compare_INT_Init+0x148>)
 8006f94:	6153      	str	r3, [r2, #20]
		TIM9->DIER |= TIM_CC1IE;
 8006f96:	4b1d      	ldr	r3, [pc, #116]	; (800700c <TIM_Capture_Compare_INT_Init+0x158>)
 8006f98:	68db      	ldr	r3, [r3, #12]
 8006f9a:	4a1c      	ldr	r2, [pc, #112]	; (800700c <TIM_Capture_Compare_INT_Init+0x158>)
 8006f9c:	f043 0302 	orr.w	r3, r3, #2
 8006fa0:	60d3      	str	r3, [r2, #12]
}
 8006fa2:	e024      	b.n	8006fee <TIM_Capture_Compare_INT_Init+0x13a>
	else if(TIM_Config->TIM_Instance == TIM10)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	4a19      	ldr	r2, [pc, #100]	; (8007010 <TIM_Capture_Compare_INT_Init+0x15c>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d10d      	bne.n	8006fca <TIM_Capture_Compare_INT_Init+0x116>
		MNVIC_voidEnableIRQ(TIM1_UP_TIM10_IRQn);
 8006fae:	2019      	movs	r0, #25
 8006fb0:	f7ff fb2a 	bl	8006608 <MNVIC_voidEnableIRQ>
		TIMx_CC_INT_Callback[TIM10_CALLBACK] = TIM_Config->CC_Callback;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	699b      	ldr	r3, [r3, #24]
 8006fb8:	4a10      	ldr	r2, [pc, #64]	; (8006ffc <TIM_Capture_Compare_INT_Init+0x148>)
 8006fba:	6193      	str	r3, [r2, #24]
		TIM10->DIER |= TIM_CC1IE;
 8006fbc:	4b14      	ldr	r3, [pc, #80]	; (8007010 <TIM_Capture_Compare_INT_Init+0x15c>)
 8006fbe:	68db      	ldr	r3, [r3, #12]
 8006fc0:	4a13      	ldr	r2, [pc, #76]	; (8007010 <TIM_Capture_Compare_INT_Init+0x15c>)
 8006fc2:	f043 0302 	orr.w	r3, r3, #2
 8006fc6:	60d3      	str	r3, [r2, #12]
}
 8006fc8:	e011      	b.n	8006fee <TIM_Capture_Compare_INT_Init+0x13a>
	else if(TIM_Config->TIM_Instance == TIM11)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	4a11      	ldr	r2, [pc, #68]	; (8007014 <TIM_Capture_Compare_INT_Init+0x160>)
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d10c      	bne.n	8006fee <TIM_Capture_Compare_INT_Init+0x13a>
		MNVIC_voidEnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8006fd4:	201a      	movs	r0, #26
 8006fd6:	f7ff fb17 	bl	8006608 <MNVIC_voidEnableIRQ>
		TIMx_CC_INT_Callback[TIM11_CALLBACK] = TIM_Config->CC_Callback;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	699b      	ldr	r3, [r3, #24]
 8006fde:	4a07      	ldr	r2, [pc, #28]	; (8006ffc <TIM_Capture_Compare_INT_Init+0x148>)
 8006fe0:	61d3      	str	r3, [r2, #28]
		TIM11->DIER |= TIM_CC1IE;
 8006fe2:	4b0c      	ldr	r3, [pc, #48]	; (8007014 <TIM_Capture_Compare_INT_Init+0x160>)
 8006fe4:	68db      	ldr	r3, [r3, #12]
 8006fe6:	4a0b      	ldr	r2, [pc, #44]	; (8007014 <TIM_Capture_Compare_INT_Init+0x160>)
 8006fe8:	f043 0302 	orr.w	r3, r3, #2
 8006fec:	60d3      	str	r3, [r2, #12]
}
 8006fee:	bf00      	nop
 8006ff0:	3708      	adds	r7, #8
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bd80      	pop	{r7, pc}
 8006ff6:	bf00      	nop
 8006ff8:	40010000 	.word	0x40010000
 8006ffc:	200001a4 	.word	0x200001a4
 8007000:	40000400 	.word	0x40000400
 8007004:	40000800 	.word	0x40000800
 8007008:	40000c00 	.word	0x40000c00
 800700c:	40014000 	.word	0x40014000
 8007010:	40014400 	.word	0x40014400
 8007014:	40014800 	.word	0x40014800

08007018 <TIM_PWM_INIT>:
static void TIM_PWM_INIT(const TIM_Config_t* TIM_Config)
{
 8007018:	b5b0      	push	{r4, r5, r7, lr}
 800701a:	b082      	sub	sp, #8
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
	TIM_Config->TIM_Instance->CCMR1 = TIM_PWM_MODE_ENABLE;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	2278      	movs	r2, #120	; 0x78
 8007026:	619a      	str	r2, [r3, #24]
	TIM_Config->TIM_Instance->CCER = TIM_OUTPUT_MODE_ENABLE;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	2203      	movs	r2, #3
 800702e:	621a      	str	r2, [r3, #32]
	if(TIM_Config->TIM_Instance == TIM1)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	4a17      	ldr	r2, [pc, #92]	; (8007094 <TIM_PWM_INIT+0x7c>)
 8007036:	4293      	cmp	r3, r2
 8007038:	d104      	bne.n	8007044 <TIM_PWM_INIT+0x2c>
	{
		TIM_Config->TIM_Instance->BDTR = TIM_OC_PIN_ENABLE;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f44f 420c 	mov.w	r2, #35840	; 0x8c00
 8007042:	645a      	str	r2, [r3, #68]	; 0x44
	}
	TIM_Config->TIM_Instance->CCR1 =(u32)(((TIM_Config->TIM_PWM_DutyCycle)/100.0)*TIM_Config->TIM_Preload);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	7c1b      	ldrb	r3, [r3, #16]
 8007048:	4618      	mov	r0, r3
 800704a:	f7fd fa1b 	bl	8004484 <__aeabi_i2d>
 800704e:	f04f 0200 	mov.w	r2, #0
 8007052:	4b11      	ldr	r3, [pc, #68]	; (8007098 <TIM_PWM_INIT+0x80>)
 8007054:	f7fd fbaa 	bl	80047ac <__aeabi_ddiv>
 8007058:	4602      	mov	r2, r0
 800705a:	460b      	mov	r3, r1
 800705c:	4614      	mov	r4, r2
 800705e:	461d      	mov	r5, r3
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	689b      	ldr	r3, [r3, #8]
 8007064:	4618      	mov	r0, r3
 8007066:	f7fd f9fd 	bl	8004464 <__aeabi_ui2d>
 800706a:	4602      	mov	r2, r0
 800706c:	460b      	mov	r3, r1
 800706e:	4620      	mov	r0, r4
 8007070:	4629      	mov	r1, r5
 8007072:	f7fd fa71 	bl	8004558 <__aeabi_dmul>
 8007076:	4602      	mov	r2, r0
 8007078:	460b      	mov	r3, r1
 800707a:	4610      	mov	r0, r2
 800707c:	4619      	mov	r1, r3
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681c      	ldr	r4, [r3, #0]
 8007082:	f7fd fc7b 	bl	800497c <__aeabi_d2uiz>
 8007086:	4603      	mov	r3, r0
 8007088:	6363      	str	r3, [r4, #52]	; 0x34
}
 800708a:	bf00      	nop
 800708c:	3708      	adds	r7, #8
 800708e:	46bd      	mov	sp, r7
 8007090:	bdb0      	pop	{r4, r5, r7, pc}
 8007092:	bf00      	nop
 8007094:	40010000 	.word	0x40010000
 8007098:	40590000 	.word	0x40590000

0800709c <TIM_IC_INIT>:
static void TIM_IC_INIT(const TIM_Config_t* TIM_Config)
{
 800709c:	b480      	push	{r7}
 800709e:	b083      	sub	sp, #12
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
	TIM_Config->TIM_Instance->CCMR1 = TIM_IC_MODE;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	2201      	movs	r2, #1
 80070aa:	619a      	str	r2, [r3, #24]
	switch(TIM_Config->TIM_IC_Mode)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	7bdb      	ldrb	r3, [r3, #15]
 80070b0:	2b02      	cmp	r3, #2
 80070b2:	d010      	beq.n	80070d6 <TIM_IC_INIT+0x3a>
 80070b4:	2b02      	cmp	r3, #2
 80070b6:	dc13      	bgt.n	80070e0 <TIM_IC_INIT+0x44>
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d002      	beq.n	80070c2 <TIM_IC_INIT+0x26>
 80070bc:	2b01      	cmp	r3, #1
 80070be:	d005      	beq.n	80070cc <TIM_IC_INIT+0x30>
		break;
	case TIM_IC_BOTH_EDGES:
		TIM_Config->TIM_Instance->CCER= TIM_IC_BOTH_EDGES_ENABLE;
		break;
	}
}
 80070c0:	e00e      	b.n	80070e0 <TIM_IC_INIT+0x44>
		TIM_Config->TIM_Instance->CCER= TIM_IC_RISING_EDGE_ENABLE;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	2201      	movs	r2, #1
 80070c8:	621a      	str	r2, [r3, #32]
		break;
 80070ca:	e009      	b.n	80070e0 <TIM_IC_INIT+0x44>
		TIM_Config->TIM_Instance->CCER= TIM_IC_FALLING_EDGE_ENABLE;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	2203      	movs	r2, #3
 80070d2:	621a      	str	r2, [r3, #32]
		break;
 80070d4:	e004      	b.n	80070e0 <TIM_IC_INIT+0x44>
		TIM_Config->TIM_Instance->CCER= TIM_IC_BOTH_EDGES_ENABLE;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	220b      	movs	r2, #11
 80070dc:	621a      	str	r2, [r3, #32]
		break;
 80070de:	bf00      	nop
}
 80070e0:	bf00      	nop
 80070e2:	370c      	adds	r7, #12
 80070e4:	46bd      	mov	sp, r7
 80070e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ea:	4770      	bx	lr

080070ec <TIM_Init>:
/**********************************************************************************************************************
 *  GLOBAL FUNCTIONS
 *********************************************************************************************************************/
void TIM_Init(const TIM_Config_t* TIM_Config)
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b082      	sub	sp, #8
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
	TIM_RCC_ENABLE(TIM_Config->TIM_Instance);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	4618      	mov	r0, r3
 80070fa:	f7ff fd35 	bl	8006b68 <TIM_RCC_ENABLE>
	CLR_BIT(TIM_Config->TIM_Instance->CR1,TIM_CEN_BIT_POS);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	681a      	ldr	r2, [r3, #0]
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f022 0201 	bic.w	r2, r2, #1
 800710c:	601a      	str	r2, [r3, #0]
	if(TIM_Config->TIM_Mode != TIM_NORMAL_MODE)
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	7b9b      	ldrb	r3, [r3, #14]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d004      	beq.n	8007120 <TIM_Init+0x34>
	{
		TIM_GPIO_INIT(TIM_Config->TIM_Instance);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	4618      	mov	r0, r3
 800711c:	f7ff fd82 	bl	8006c24 <TIM_GPIO_INIT>
	}
	if (TIM_Config->CAPTURE_COMPARE_INT_ENABLE == INTERRUPT_ENABLED)
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	7c5b      	ldrb	r3, [r3, #17]
 8007124:	2b01      	cmp	r3, #1
 8007126:	d102      	bne.n	800712e <TIM_Init+0x42>
	{
		TIM_Capture_Compare_INT_Init(TIM_Config);
 8007128:	6878      	ldr	r0, [r7, #4]
 800712a:	f7ff fec3 	bl	8006eb4 <TIM_Capture_Compare_INT_Init>
	}
	TIM_Config->TIM_Instance->ARR = TIM_Config->TIM_Preload;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	687a      	ldr	r2, [r7, #4]
 8007134:	6892      	ldr	r2, [r2, #8]
 8007136:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM_Config->TIM_Instance->PSC = TIM_Config->TIM_Prescaler;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	889a      	ldrh	r2, [r3, #4]
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	629a      	str	r2, [r3, #40]	; 0x28
	TIM_Config->TIM_Instance->RCR = TIM_Config->TIM_RepetitionCounter;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	899a      	ldrh	r2, [r3, #12]
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	631a      	str	r2, [r3, #48]	; 0x30
	if(TIM_Config->TIM_Direction == TIM_UP_COUNTER)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	799b      	ldrb	r3, [r3, #6]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d108      	bne.n	8007166 <TIM_Init+0x7a>
	{
		CLR_BIT(TIM_Config->TIM_Instance->CR1,TIM_DIR_BIT_POS);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	681a      	ldr	r2, [r3, #0]
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f022 0210 	bic.w	r2, r2, #16
 8007162:	601a      	str	r2, [r3, #0]
 8007164:	e007      	b.n	8007176 <TIM_Init+0x8a>
	}
	else
	{
		SET_BIT(TIM_Config->TIM_Instance->CR1,TIM_DIR_BIT_POS);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	681a      	ldr	r2, [r3, #0]
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f042 0210 	orr.w	r2, r2, #16
 8007174:	601a      	str	r2, [r3, #0]
	}
	if(TIM_Config->TIM_Mode == TIM_PWM_MODE)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	7b9b      	ldrb	r3, [r3, #14]
 800717a:	2b02      	cmp	r3, #2
 800717c:	d103      	bne.n	8007186 <TIM_Init+0x9a>
	{
		TIM_PWM_INIT(TIM_Config);
 800717e:	6878      	ldr	r0, [r7, #4]
 8007180:	f7ff ff4a 	bl	8007018 <TIM_PWM_INIT>
 8007184:	e006      	b.n	8007194 <TIM_Init+0xa8>
	}
	else if (TIM_Config->TIM_Mode == TIM_INPUT_CAPTURE_MODE)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	7b9b      	ldrb	r3, [r3, #14]
 800718a:	2b01      	cmp	r3, #1
 800718c:	d102      	bne.n	8007194 <TIM_Init+0xa8>
	{
		TIM_IC_INIT(TIM_Config);
 800718e:	6878      	ldr	r0, [r7, #4]
 8007190:	f7ff ff84 	bl	800709c <TIM_IC_INIT>
	}
	SET_BIT(TIM_Config->TIM_Instance->CR1,TIM_ARPE_BIT_POS);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	681a      	ldr	r2, [r3, #0]
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80071a2:	601a      	str	r2, [r3, #0]
	SET_BIT(TIM_Config->TIM_Instance->CR1,TIM_URS_BIT_POS);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	681a      	ldr	r2, [r3, #0]
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f042 0204 	orr.w	r2, r2, #4
 80071b2:	601a      	str	r2, [r3, #0]
	SET_BIT(TIM_Config->TIM_Instance->EGR,TIM_UG_BIT_POS);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	695a      	ldr	r2, [r3, #20]
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f042 0201 	orr.w	r2, r2, #1
 80071c2:	615a      	str	r2, [r3, #20]
	SET_BIT(TIM_Config->TIM_Instance->CR1,TIM_CEN_BIT_POS);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	681a      	ldr	r2, [r3, #0]
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f042 0201 	orr.w	r2, r2, #1
 80071d2:	601a      	str	r2, [r3, #0]
}
 80071d4:	bf00      	nop
 80071d6:	3708      	adds	r7, #8
 80071d8:	46bd      	mov	sp, r7
 80071da:	bd80      	pop	{r7, pc}

080071dc <TIM_DeInit>:
void TIM_DeInit(const TIM_Config_t* TIM_Config)
{
 80071dc:	b480      	push	{r7}
 80071de:	b083      	sub	sp, #12
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
	SET_BIT(TIM_Config->TIM_Instance->EGR,TIM_UG_BIT_POS);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	695a      	ldr	r2, [r3, #20]
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f042 0201 	orr.w	r2, r2, #1
 80071f2:	615a      	str	r2, [r3, #20]
	CLR_BIT(TIM_Config->TIM_Instance->CR1,TIM_CEN_BIT_POS);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	681a      	ldr	r2, [r3, #0]
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f022 0201 	bic.w	r2, r2, #1
 8007202:	601a      	str	r2, [r3, #0]
	TIM_Config->TIM_Instance->DIER &= ~TIM_UIE;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	68da      	ldr	r2, [r3, #12]
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f022 0201 	bic.w	r2, r2, #1
 8007212:	60da      	str	r2, [r3, #12]
}
 8007214:	bf00      	nop
 8007216:	370c      	adds	r7, #12
 8007218:	46bd      	mov	sp, r7
 800721a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721e:	4770      	bx	lr

08007220 <TIM_GetElapsedTime>:
void TIM_Reset(const TIM_Config_t* TIM_Config)
{
	SET_BIT(TIM_Config->TIM_Instance->EGR,TIM_UG_BIT_POS);
}
u32 TIM_GetElapsedTime(const TIM_Config_t* TIM_Config)
{
 8007220:	b480      	push	{r7}
 8007222:	b085      	sub	sp, #20
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
	u32 ElapsedTime =0;
 8007228:	2300      	movs	r3, #0
 800722a:	60fb      	str	r3, [r7, #12]
	if(TIM_Config->TIM_Direction ==TIM_UP_COUNTER)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	799b      	ldrb	r3, [r3, #6]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d104      	bne.n	800723e <TIM_GetElapsedTime+0x1e>
	{
		ElapsedTime = TIM_Config->TIM_Instance->CNT;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800723a:	60fb      	str	r3, [r7, #12]
 800723c:	e00a      	b.n	8007254 <TIM_GetElapsedTime+0x34>
	}
	else if(TIM_Config->TIM_Direction == TIM_DOWN_COUNTER){
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	799b      	ldrb	r3, [r3, #6]
 8007242:	2b01      	cmp	r3, #1
 8007244:	d106      	bne.n	8007254 <TIM_GetElapsedTime+0x34>
		ElapsedTime = TIM_Config->TIM_Preload - TIM_Config->TIM_Instance->CNT;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	689a      	ldr	r2, [r3, #8]
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007250:	1ad3      	subs	r3, r2, r3
 8007252:	60fb      	str	r3, [r7, #12]
	}
	return ElapsedTime;
 8007254:	68fb      	ldr	r3, [r7, #12]
}
 8007256:	4618      	mov	r0, r3
 8007258:	3714      	adds	r7, #20
 800725a:	46bd      	mov	sp, r7
 800725c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007260:	4770      	bx	lr
	...

08007264 <TIM_SingleInterval>:
void TIM_SingleInterval(TIM_Config_t* TIM_Config , u32 preload , pCallBackNotification callback)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b084      	sub	sp, #16
 8007268:	af00      	add	r7, sp, #0
 800726a:	60f8      	str	r0, [r7, #12]
 800726c:	60b9      	str	r1, [r7, #8]
 800726e:	607a      	str	r2, [r7, #4]
	CLR_BIT(TIM_Config->TIM_Instance->CR1,TIM_CEN_BIT_POS);
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	681a      	ldr	r2, [r3, #0]
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f022 0201 	bic.w	r2, r2, #1
 800727e:	601a      	str	r2, [r3, #0]
	TIM_Config->TIM_Instance->ARR = preload;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	68ba      	ldr	r2, [r7, #8]
 8007286:	62da      	str	r2, [r3, #44]	; 0x2c
	SET_BIT(TIM_Config->TIM_Instance->EGR,TIM_UG_BIT_POS);
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	695a      	ldr	r2, [r3, #20]
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f042 0201 	orr.w	r2, r2, #1
 8007296:	615a      	str	r2, [r3, #20]
	TIM_Config->UP_Callback = callback;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	687a      	ldr	r2, [r7, #4]
 800729c:	615a      	str	r2, [r3, #20]
	TIM_Update_INT_Init(TIM_Config);
 800729e:	68f8      	ldr	r0, [r7, #12]
 80072a0:	f7ff fd56 	bl	8006d50 <TIM_Update_INT_Init>
	SET_BIT(TIM_Config->TIM_Instance->CR1,TIM_CEN_BIT_POS);
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	681a      	ldr	r2, [r3, #0]
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f042 0201 	orr.w	r2, r2, #1
 80072b2:	601a      	str	r2, [r3, #0]
	if(TIM_Config->TIM_Instance == TIM1){
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	4a24      	ldr	r2, [pc, #144]	; (800734c <TIM_SingleInterval+0xe8>)
 80072ba:	4293      	cmp	r3, r2
 80072bc:	d103      	bne.n	80072c6 <TIM_SingleInterval+0x62>
		TIM_SingleInterval_FLAG[TIM1_CALLBACK] = TIM_SINGLE_INTERVAL_MODE;
 80072be:	4b24      	ldr	r3, [pc, #144]	; (8007350 <TIM_SingleInterval+0xec>)
 80072c0:	2201      	movs	r2, #1
 80072c2:	701a      	strb	r2, [r3, #0]
		TIM_SingleInterval_FLAG[TIM10_CALLBACK] = TIM_SINGLE_INTERVAL_MODE;
	}
	else if(TIM_Config->TIM_Instance == TIM11){
		TIM_SingleInterval_FLAG[TIM11_CALLBACK] = TIM_SINGLE_INTERVAL_MODE;
	}
}
 80072c4:	e03d      	b.n	8007342 <TIM_SingleInterval+0xde>
	else if(TIM_Config->TIM_Instance == TIM2)
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072ce:	d103      	bne.n	80072d8 <TIM_SingleInterval+0x74>
		TIM_SingleInterval_FLAG[TIM2_CALLBACK] = TIM_SINGLE_INTERVAL_MODE;
 80072d0:	4b1f      	ldr	r3, [pc, #124]	; (8007350 <TIM_SingleInterval+0xec>)
 80072d2:	2201      	movs	r2, #1
 80072d4:	705a      	strb	r2, [r3, #1]
}
 80072d6:	e034      	b.n	8007342 <TIM_SingleInterval+0xde>
	else if(TIM_Config->TIM_Instance == TIM3){
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	4a1d      	ldr	r2, [pc, #116]	; (8007354 <TIM_SingleInterval+0xf0>)
 80072de:	4293      	cmp	r3, r2
 80072e0:	d103      	bne.n	80072ea <TIM_SingleInterval+0x86>
		TIM_SingleInterval_FLAG[TIM3_CALLBACK] = TIM_SINGLE_INTERVAL_MODE;
 80072e2:	4b1b      	ldr	r3, [pc, #108]	; (8007350 <TIM_SingleInterval+0xec>)
 80072e4:	2201      	movs	r2, #1
 80072e6:	709a      	strb	r2, [r3, #2]
}
 80072e8:	e02b      	b.n	8007342 <TIM_SingleInterval+0xde>
	else if(TIM_Config->TIM_Instance == TIM4){
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	4a1a      	ldr	r2, [pc, #104]	; (8007358 <TIM_SingleInterval+0xf4>)
 80072f0:	4293      	cmp	r3, r2
 80072f2:	d103      	bne.n	80072fc <TIM_SingleInterval+0x98>
		TIM_SingleInterval_FLAG[TIM4_CALLBACK] = TIM_SINGLE_INTERVAL_MODE;
 80072f4:	4b16      	ldr	r3, [pc, #88]	; (8007350 <TIM_SingleInterval+0xec>)
 80072f6:	2201      	movs	r2, #1
 80072f8:	70da      	strb	r2, [r3, #3]
}
 80072fa:	e022      	b.n	8007342 <TIM_SingleInterval+0xde>
	else if(TIM_Config->TIM_Instance == TIM5){
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	4a16      	ldr	r2, [pc, #88]	; (800735c <TIM_SingleInterval+0xf8>)
 8007302:	4293      	cmp	r3, r2
 8007304:	d103      	bne.n	800730e <TIM_SingleInterval+0xaa>
		TIM_SingleInterval_FLAG[TIM5_CALLBACK] = TIM_SINGLE_INTERVAL_MODE;
 8007306:	4b12      	ldr	r3, [pc, #72]	; (8007350 <TIM_SingleInterval+0xec>)
 8007308:	2201      	movs	r2, #1
 800730a:	711a      	strb	r2, [r3, #4]
}
 800730c:	e019      	b.n	8007342 <TIM_SingleInterval+0xde>
	else if(TIM_Config->TIM_Instance == TIM9){
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	4a13      	ldr	r2, [pc, #76]	; (8007360 <TIM_SingleInterval+0xfc>)
 8007314:	4293      	cmp	r3, r2
 8007316:	d103      	bne.n	8007320 <TIM_SingleInterval+0xbc>
		TIM_SingleInterval_FLAG[TIM9_CALLBACK] = TIM_SINGLE_INTERVAL_MODE;
 8007318:	4b0d      	ldr	r3, [pc, #52]	; (8007350 <TIM_SingleInterval+0xec>)
 800731a:	2201      	movs	r2, #1
 800731c:	715a      	strb	r2, [r3, #5]
}
 800731e:	e010      	b.n	8007342 <TIM_SingleInterval+0xde>
	else if(TIM_Config->TIM_Instance == TIM10){
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	4a0f      	ldr	r2, [pc, #60]	; (8007364 <TIM_SingleInterval+0x100>)
 8007326:	4293      	cmp	r3, r2
 8007328:	d103      	bne.n	8007332 <TIM_SingleInterval+0xce>
		TIM_SingleInterval_FLAG[TIM10_CALLBACK] = TIM_SINGLE_INTERVAL_MODE;
 800732a:	4b09      	ldr	r3, [pc, #36]	; (8007350 <TIM_SingleInterval+0xec>)
 800732c:	2201      	movs	r2, #1
 800732e:	719a      	strb	r2, [r3, #6]
}
 8007330:	e007      	b.n	8007342 <TIM_SingleInterval+0xde>
	else if(TIM_Config->TIM_Instance == TIM11){
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	4a0c      	ldr	r2, [pc, #48]	; (8007368 <TIM_SingleInterval+0x104>)
 8007338:	4293      	cmp	r3, r2
 800733a:	d102      	bne.n	8007342 <TIM_SingleInterval+0xde>
		TIM_SingleInterval_FLAG[TIM11_CALLBACK] = TIM_SINGLE_INTERVAL_MODE;
 800733c:	4b04      	ldr	r3, [pc, #16]	; (8007350 <TIM_SingleInterval+0xec>)
 800733e:	2201      	movs	r2, #1
 8007340:	71da      	strb	r2, [r3, #7]
}
 8007342:	bf00      	nop
 8007344:	3710      	adds	r7, #16
 8007346:	46bd      	mov	sp, r7
 8007348:	bd80      	pop	{r7, pc}
 800734a:	bf00      	nop
 800734c:	40010000 	.word	0x40010000
 8007350:	200001c4 	.word	0x200001c4
 8007354:	40000400 	.word	0x40000400
 8007358:	40000800 	.word	0x40000800
 800735c:	40000c00 	.word	0x40000c00
 8007360:	40014000 	.word	0x40014000
 8007364:	40014400 	.word	0x40014400
 8007368:	40014800 	.word	0x40014800

0800736c <TIM_SetPreload>:
	TIM_IC_INIT(TIM_Config);
	SET_BIT(TIM_Config->TIM_Instance->EGR,TIM_UG_BIT_POS);
	SET_BIT(TIM_Config->TIM_Instance->CR1,TIM_CEN_BIT_POS);
}
void TIM_SetPreload(TIM_Config_t* TIM_Config , u32 preload)
{
 800736c:	b480      	push	{r7}
 800736e:	b083      	sub	sp, #12
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
 8007374:	6039      	str	r1, [r7, #0]
	CLR_BIT(TIM_Config->TIM_Instance->CR1,TIM_CEN_BIT_POS);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	681a      	ldr	r2, [r3, #0]
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f022 0201 	bic.w	r2, r2, #1
 8007384:	601a      	str	r2, [r3, #0]
	TIM_Config->TIM_Preload = preload;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	683a      	ldr	r2, [r7, #0]
 800738a:	609a      	str	r2, [r3, #8]
	TIM_Config->TIM_Instance->ARR = preload;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	683a      	ldr	r2, [r7, #0]
 8007392:	62da      	str	r2, [r3, #44]	; 0x2c
	SET_BIT(TIM_Config->TIM_Instance->EGR,TIM_UG_BIT_POS);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	695a      	ldr	r2, [r3, #20]
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f042 0201 	orr.w	r2, r2, #1
 80073a2:	615a      	str	r2, [r3, #20]
	SET_BIT(TIM_Config->TIM_Instance->CR1,TIM_CEN_BIT_POS);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	681a      	ldr	r2, [r3, #0]
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f042 0201 	orr.w	r2, r2, #1
 80073b2:	601a      	str	r2, [r3, #0]
}
 80073b4:	bf00      	nop
 80073b6:	370c      	adds	r7, #12
 80073b8:	46bd      	mov	sp, r7
 80073ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073be:	4770      	bx	lr

080073c0 <TIM1_UP_TIM10_IRQHandler>:
	return TIM_Config->TIM_Instance->CCR1;
}
/*************************ISRs*********************************************/

void TIM1_UP_TIM10_IRQHandler(void)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	af00      	add	r7, sp, #0
	/* TIM1 Update interrupt and TIM10 global interrupt  */
	if(GET_BIT(TIM1->SR,TIM_UIF_BIT_POS) == INTERRUPT_ACTIVE)
 80073c4:	4b33      	ldr	r3, [pc, #204]	; (8007494 <TIM1_UP_TIM10_IRQHandler+0xd4>)
 80073c6:	691b      	ldr	r3, [r3, #16]
 80073c8:	f003 0301 	and.w	r3, r3, #1
 80073cc:	2b01      	cmp	r3, #1
 80073ce:	d122      	bne.n	8007416 <TIM1_UP_TIM10_IRQHandler+0x56>
	{
		CLR_BIT(TIM1->SR,TIM_UIF_BIT_POS);
 80073d0:	4b30      	ldr	r3, [pc, #192]	; (8007494 <TIM1_UP_TIM10_IRQHandler+0xd4>)
 80073d2:	691b      	ldr	r3, [r3, #16]
 80073d4:	4a2f      	ldr	r2, [pc, #188]	; (8007494 <TIM1_UP_TIM10_IRQHandler+0xd4>)
 80073d6:	f023 0301 	bic.w	r3, r3, #1
 80073da:	6113      	str	r3, [r2, #16]
		if(TIM_SingleInterval_FLAG[TIM1_CALLBACK] == TIM_SINGLE_INTERVAL_MODE)
 80073dc:	4b2e      	ldr	r3, [pc, #184]	; (8007498 <TIM1_UP_TIM10_IRQHandler+0xd8>)
 80073de:	781b      	ldrb	r3, [r3, #0]
 80073e0:	2b01      	cmp	r3, #1
 80073e2:	d111      	bne.n	8007408 <TIM1_UP_TIM10_IRQHandler+0x48>
		{
			CLR_BIT(TIM1->CR1,TIM_CEN_BIT_POS);
 80073e4:	4b2b      	ldr	r3, [pc, #172]	; (8007494 <TIM1_UP_TIM10_IRQHandler+0xd4>)
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	4a2a      	ldr	r2, [pc, #168]	; (8007494 <TIM1_UP_TIM10_IRQHandler+0xd4>)
 80073ea:	f023 0301 	bic.w	r3, r3, #1
 80073ee:	6013      	str	r3, [r2, #0]
			SET_BIT(TIM1->EGR,TIM_UG_BIT_POS);
 80073f0:	4b28      	ldr	r3, [pc, #160]	; (8007494 <TIM1_UP_TIM10_IRQHandler+0xd4>)
 80073f2:	695b      	ldr	r3, [r3, #20]
 80073f4:	4a27      	ldr	r2, [pc, #156]	; (8007494 <TIM1_UP_TIM10_IRQHandler+0xd4>)
 80073f6:	f043 0301 	orr.w	r3, r3, #1
 80073fa:	6153      	str	r3, [r2, #20]
			CLR_BIT(TIM1->DIER,TIM_UIE_BIT_POS);
 80073fc:	4b25      	ldr	r3, [pc, #148]	; (8007494 <TIM1_UP_TIM10_IRQHandler+0xd4>)
 80073fe:	68db      	ldr	r3, [r3, #12]
 8007400:	4a24      	ldr	r2, [pc, #144]	; (8007494 <TIM1_UP_TIM10_IRQHandler+0xd4>)
 8007402:	f023 0301 	bic.w	r3, r3, #1
 8007406:	60d3      	str	r3, [r2, #12]
		}
		if(TIMx_UP_INT_Callback[TIM1_CALLBACK] != NULL)
 8007408:	4b24      	ldr	r3, [pc, #144]	; (800749c <TIM1_UP_TIM10_IRQHandler+0xdc>)
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d002      	beq.n	8007416 <TIM1_UP_TIM10_IRQHandler+0x56>
		{
			TIMx_UP_INT_Callback[TIM1_CALLBACK]();
 8007410:	4b22      	ldr	r3, [pc, #136]	; (800749c <TIM1_UP_TIM10_IRQHandler+0xdc>)
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	4798      	blx	r3
		}
	}
	if(GET_BIT(TIM10->SR,TIM_UIF_BIT_POS) == INTERRUPT_ACTIVE)
 8007416:	4b22      	ldr	r3, [pc, #136]	; (80074a0 <TIM1_UP_TIM10_IRQHandler+0xe0>)
 8007418:	691b      	ldr	r3, [r3, #16]
 800741a:	f003 0301 	and.w	r3, r3, #1
 800741e:	2b01      	cmp	r3, #1
 8007420:	d122      	bne.n	8007468 <TIM1_UP_TIM10_IRQHandler+0xa8>
	{
		CLR_BIT(TIM10->SR,TIM_UIF_BIT_POS);
 8007422:	4b1f      	ldr	r3, [pc, #124]	; (80074a0 <TIM1_UP_TIM10_IRQHandler+0xe0>)
 8007424:	691b      	ldr	r3, [r3, #16]
 8007426:	4a1e      	ldr	r2, [pc, #120]	; (80074a0 <TIM1_UP_TIM10_IRQHandler+0xe0>)
 8007428:	f023 0301 	bic.w	r3, r3, #1
 800742c:	6113      	str	r3, [r2, #16]
		if(TIM_SingleInterval_FLAG[TIM10_CALLBACK] == TIM_SINGLE_INTERVAL_MODE)
 800742e:	4b1a      	ldr	r3, [pc, #104]	; (8007498 <TIM1_UP_TIM10_IRQHandler+0xd8>)
 8007430:	799b      	ldrb	r3, [r3, #6]
 8007432:	2b01      	cmp	r3, #1
 8007434:	d111      	bne.n	800745a <TIM1_UP_TIM10_IRQHandler+0x9a>
		{
			CLR_BIT(TIM10->CR1,TIM_CEN_BIT_POS);
 8007436:	4b1a      	ldr	r3, [pc, #104]	; (80074a0 <TIM1_UP_TIM10_IRQHandler+0xe0>)
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	4a19      	ldr	r2, [pc, #100]	; (80074a0 <TIM1_UP_TIM10_IRQHandler+0xe0>)
 800743c:	f023 0301 	bic.w	r3, r3, #1
 8007440:	6013      	str	r3, [r2, #0]
			SET_BIT(TIM10->EGR,TIM_UG_BIT_POS);
 8007442:	4b17      	ldr	r3, [pc, #92]	; (80074a0 <TIM1_UP_TIM10_IRQHandler+0xe0>)
 8007444:	695b      	ldr	r3, [r3, #20]
 8007446:	4a16      	ldr	r2, [pc, #88]	; (80074a0 <TIM1_UP_TIM10_IRQHandler+0xe0>)
 8007448:	f043 0301 	orr.w	r3, r3, #1
 800744c:	6153      	str	r3, [r2, #20]
			CLR_BIT(TIM10->DIER,TIM_UIE_BIT_POS);
 800744e:	4b14      	ldr	r3, [pc, #80]	; (80074a0 <TIM1_UP_TIM10_IRQHandler+0xe0>)
 8007450:	68db      	ldr	r3, [r3, #12]
 8007452:	4a13      	ldr	r2, [pc, #76]	; (80074a0 <TIM1_UP_TIM10_IRQHandler+0xe0>)
 8007454:	f023 0301 	bic.w	r3, r3, #1
 8007458:	60d3      	str	r3, [r2, #12]
		}
		if(TIMx_UP_INT_Callback[TIM10_CALLBACK] != NULL)
 800745a:	4b10      	ldr	r3, [pc, #64]	; (800749c <TIM1_UP_TIM10_IRQHandler+0xdc>)
 800745c:	699b      	ldr	r3, [r3, #24]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d002      	beq.n	8007468 <TIM1_UP_TIM10_IRQHandler+0xa8>
		{
			TIMx_UP_INT_Callback[TIM10_CALLBACK]();
 8007462:	4b0e      	ldr	r3, [pc, #56]	; (800749c <TIM1_UP_TIM10_IRQHandler+0xdc>)
 8007464:	699b      	ldr	r3, [r3, #24]
 8007466:	4798      	blx	r3
		}
	}
	if(GET_BIT(TIM10->SR,TIM_CC1IF_BIT_POS) == INTERRUPT_ACTIVE)
 8007468:	4b0d      	ldr	r3, [pc, #52]	; (80074a0 <TIM1_UP_TIM10_IRQHandler+0xe0>)
 800746a:	691b      	ldr	r3, [r3, #16]
 800746c:	085b      	lsrs	r3, r3, #1
 800746e:	f003 0301 	and.w	r3, r3, #1
 8007472:	2b01      	cmp	r3, #1
 8007474:	d10c      	bne.n	8007490 <TIM1_UP_TIM10_IRQHandler+0xd0>
	{
		CLR_BIT(TIM10->SR,TIM_CC1IF_BIT_POS);
 8007476:	4b0a      	ldr	r3, [pc, #40]	; (80074a0 <TIM1_UP_TIM10_IRQHandler+0xe0>)
 8007478:	691b      	ldr	r3, [r3, #16]
 800747a:	4a09      	ldr	r2, [pc, #36]	; (80074a0 <TIM1_UP_TIM10_IRQHandler+0xe0>)
 800747c:	f023 0302 	bic.w	r3, r3, #2
 8007480:	6113      	str	r3, [r2, #16]
		if(TIMx_CC_INT_Callback[TIM10_CALLBACK] != NULL)
 8007482:	4b08      	ldr	r3, [pc, #32]	; (80074a4 <TIM1_UP_TIM10_IRQHandler+0xe4>)
 8007484:	699b      	ldr	r3, [r3, #24]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d002      	beq.n	8007490 <TIM1_UP_TIM10_IRQHandler+0xd0>
		{
			TIMx_CC_INT_Callback[TIM10_CALLBACK]();
 800748a:	4b06      	ldr	r3, [pc, #24]	; (80074a4 <TIM1_UP_TIM10_IRQHandler+0xe4>)
 800748c:	699b      	ldr	r3, [r3, #24]
 800748e:	4798      	blx	r3
		}
	}
}
 8007490:	bf00      	nop
 8007492:	bd80      	pop	{r7, pc}
 8007494:	40010000 	.word	0x40010000
 8007498:	200001c4 	.word	0x200001c4
 800749c:	20000184 	.word	0x20000184
 80074a0:	40014400 	.word	0x40014400
 80074a4:	200001a4 	.word	0x200001a4

080074a8 <TIM1_TRG_COM_TIM11_IRQHandler>:
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	af00      	add	r7, sp, #0
	/* TIM1 Trigger and Commutation interrupts and TIM11 global interrupt              */
	if(GET_BIT(TIM11->SR,TIM_UIF_BIT_POS) == INTERRUPT_ACTIVE)
 80074ac:	4b1f      	ldr	r3, [pc, #124]	; (800752c <TIM1_TRG_COM_TIM11_IRQHandler+0x84>)
 80074ae:	691b      	ldr	r3, [r3, #16]
 80074b0:	f003 0301 	and.w	r3, r3, #1
 80074b4:	2b01      	cmp	r3, #1
 80074b6:	d122      	bne.n	80074fe <TIM1_TRG_COM_TIM11_IRQHandler+0x56>
	{
		CLR_BIT(TIM11->SR,TIM_UIF_BIT_POS);
 80074b8:	4b1c      	ldr	r3, [pc, #112]	; (800752c <TIM1_TRG_COM_TIM11_IRQHandler+0x84>)
 80074ba:	691b      	ldr	r3, [r3, #16]
 80074bc:	4a1b      	ldr	r2, [pc, #108]	; (800752c <TIM1_TRG_COM_TIM11_IRQHandler+0x84>)
 80074be:	f023 0301 	bic.w	r3, r3, #1
 80074c2:	6113      	str	r3, [r2, #16]
		if(TIM_SingleInterval_FLAG[TIM11_CALLBACK] == TIM_SINGLE_INTERVAL_MODE)
 80074c4:	4b1a      	ldr	r3, [pc, #104]	; (8007530 <TIM1_TRG_COM_TIM11_IRQHandler+0x88>)
 80074c6:	79db      	ldrb	r3, [r3, #7]
 80074c8:	2b01      	cmp	r3, #1
 80074ca:	d111      	bne.n	80074f0 <TIM1_TRG_COM_TIM11_IRQHandler+0x48>
		{
			CLR_BIT(TIM11->CR1,TIM_CEN_BIT_POS);
 80074cc:	4b17      	ldr	r3, [pc, #92]	; (800752c <TIM1_TRG_COM_TIM11_IRQHandler+0x84>)
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	4a16      	ldr	r2, [pc, #88]	; (800752c <TIM1_TRG_COM_TIM11_IRQHandler+0x84>)
 80074d2:	f023 0301 	bic.w	r3, r3, #1
 80074d6:	6013      	str	r3, [r2, #0]
			SET_BIT(TIM11->EGR,TIM_UG_BIT_POS);
 80074d8:	4b14      	ldr	r3, [pc, #80]	; (800752c <TIM1_TRG_COM_TIM11_IRQHandler+0x84>)
 80074da:	695b      	ldr	r3, [r3, #20]
 80074dc:	4a13      	ldr	r2, [pc, #76]	; (800752c <TIM1_TRG_COM_TIM11_IRQHandler+0x84>)
 80074de:	f043 0301 	orr.w	r3, r3, #1
 80074e2:	6153      	str	r3, [r2, #20]
			CLR_BIT(TIM11->DIER,TIM_UIE_BIT_POS);
 80074e4:	4b11      	ldr	r3, [pc, #68]	; (800752c <TIM1_TRG_COM_TIM11_IRQHandler+0x84>)
 80074e6:	68db      	ldr	r3, [r3, #12]
 80074e8:	4a10      	ldr	r2, [pc, #64]	; (800752c <TIM1_TRG_COM_TIM11_IRQHandler+0x84>)
 80074ea:	f023 0301 	bic.w	r3, r3, #1
 80074ee:	60d3      	str	r3, [r2, #12]
		}
		if(TIMx_UP_INT_Callback[TIM11_CALLBACK] != NULL)
 80074f0:	4b10      	ldr	r3, [pc, #64]	; (8007534 <TIM1_TRG_COM_TIM11_IRQHandler+0x8c>)
 80074f2:	69db      	ldr	r3, [r3, #28]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d002      	beq.n	80074fe <TIM1_TRG_COM_TIM11_IRQHandler+0x56>
		{
			TIMx_UP_INT_Callback[TIM11_CALLBACK]();
 80074f8:	4b0e      	ldr	r3, [pc, #56]	; (8007534 <TIM1_TRG_COM_TIM11_IRQHandler+0x8c>)
 80074fa:	69db      	ldr	r3, [r3, #28]
 80074fc:	4798      	blx	r3
		}
	}
	if(GET_BIT(TIM11->SR,TIM_CC1IF_BIT_POS) == INTERRUPT_ACTIVE)
 80074fe:	4b0b      	ldr	r3, [pc, #44]	; (800752c <TIM1_TRG_COM_TIM11_IRQHandler+0x84>)
 8007500:	691b      	ldr	r3, [r3, #16]
 8007502:	085b      	lsrs	r3, r3, #1
 8007504:	f003 0301 	and.w	r3, r3, #1
 8007508:	2b01      	cmp	r3, #1
 800750a:	d10c      	bne.n	8007526 <TIM1_TRG_COM_TIM11_IRQHandler+0x7e>
	{
		CLR_BIT(TIM11->SR,TIM_CC1IF_BIT_POS);
 800750c:	4b07      	ldr	r3, [pc, #28]	; (800752c <TIM1_TRG_COM_TIM11_IRQHandler+0x84>)
 800750e:	691b      	ldr	r3, [r3, #16]
 8007510:	4a06      	ldr	r2, [pc, #24]	; (800752c <TIM1_TRG_COM_TIM11_IRQHandler+0x84>)
 8007512:	f023 0302 	bic.w	r3, r3, #2
 8007516:	6113      	str	r3, [r2, #16]
		if(TIMx_CC_INT_Callback[TIM11_CALLBACK] != NULL)
 8007518:	4b07      	ldr	r3, [pc, #28]	; (8007538 <TIM1_TRG_COM_TIM11_IRQHandler+0x90>)
 800751a:	69db      	ldr	r3, [r3, #28]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d002      	beq.n	8007526 <TIM1_TRG_COM_TIM11_IRQHandler+0x7e>
		{
			TIMx_CC_INT_Callback[TIM11_CALLBACK]();
 8007520:	4b05      	ldr	r3, [pc, #20]	; (8007538 <TIM1_TRG_COM_TIM11_IRQHandler+0x90>)
 8007522:	69db      	ldr	r3, [r3, #28]
 8007524:	4798      	blx	r3
		}
	}
}
 8007526:	bf00      	nop
 8007528:	bd80      	pop	{r7, pc}
 800752a:	bf00      	nop
 800752c:	40014800 	.word	0x40014800
 8007530:	200001c4 	.word	0x200001c4
 8007534:	20000184 	.word	0x20000184
 8007538:	200001a4 	.word	0x200001a4

0800753c <TIM1_BRK_TIM9_IRQHandler>:
void TIM1_BRK_TIM9_IRQHandler(void){
 800753c:	b580      	push	{r7, lr}
 800753e:	af00      	add	r7, sp, #0
	if(GET_BIT(TIM9->SR,TIM_UIF_BIT_POS) == INTERRUPT_ACTIVE){
 8007540:	4b1f      	ldr	r3, [pc, #124]	; (80075c0 <TIM1_BRK_TIM9_IRQHandler+0x84>)
 8007542:	691b      	ldr	r3, [r3, #16]
 8007544:	f003 0301 	and.w	r3, r3, #1
 8007548:	2b01      	cmp	r3, #1
 800754a:	d122      	bne.n	8007592 <TIM1_BRK_TIM9_IRQHandler+0x56>
		CLR_BIT(TIM9->SR,TIM_UIF_BIT_POS);
 800754c:	4b1c      	ldr	r3, [pc, #112]	; (80075c0 <TIM1_BRK_TIM9_IRQHandler+0x84>)
 800754e:	691b      	ldr	r3, [r3, #16]
 8007550:	4a1b      	ldr	r2, [pc, #108]	; (80075c0 <TIM1_BRK_TIM9_IRQHandler+0x84>)
 8007552:	f023 0301 	bic.w	r3, r3, #1
 8007556:	6113      	str	r3, [r2, #16]
		if(TIM_SingleInterval_FLAG[TIM9_CALLBACK] == TIM_SINGLE_INTERVAL_MODE)
 8007558:	4b1a      	ldr	r3, [pc, #104]	; (80075c4 <TIM1_BRK_TIM9_IRQHandler+0x88>)
 800755a:	795b      	ldrb	r3, [r3, #5]
 800755c:	2b01      	cmp	r3, #1
 800755e:	d111      	bne.n	8007584 <TIM1_BRK_TIM9_IRQHandler+0x48>
		{
			CLR_BIT(TIM9->CR1,TIM_CEN_BIT_POS);
 8007560:	4b17      	ldr	r3, [pc, #92]	; (80075c0 <TIM1_BRK_TIM9_IRQHandler+0x84>)
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	4a16      	ldr	r2, [pc, #88]	; (80075c0 <TIM1_BRK_TIM9_IRQHandler+0x84>)
 8007566:	f023 0301 	bic.w	r3, r3, #1
 800756a:	6013      	str	r3, [r2, #0]
			SET_BIT(TIM9->EGR,TIM_UG_BIT_POS);
 800756c:	4b14      	ldr	r3, [pc, #80]	; (80075c0 <TIM1_BRK_TIM9_IRQHandler+0x84>)
 800756e:	695b      	ldr	r3, [r3, #20]
 8007570:	4a13      	ldr	r2, [pc, #76]	; (80075c0 <TIM1_BRK_TIM9_IRQHandler+0x84>)
 8007572:	f043 0301 	orr.w	r3, r3, #1
 8007576:	6153      	str	r3, [r2, #20]
			CLR_BIT(TIM9->DIER,TIM_UIE_BIT_POS);
 8007578:	4b11      	ldr	r3, [pc, #68]	; (80075c0 <TIM1_BRK_TIM9_IRQHandler+0x84>)
 800757a:	68db      	ldr	r3, [r3, #12]
 800757c:	4a10      	ldr	r2, [pc, #64]	; (80075c0 <TIM1_BRK_TIM9_IRQHandler+0x84>)
 800757e:	f023 0301 	bic.w	r3, r3, #1
 8007582:	60d3      	str	r3, [r2, #12]
		}
		if(TIMx_UP_INT_Callback[TIM9_CALLBACK] != NULL){
 8007584:	4b10      	ldr	r3, [pc, #64]	; (80075c8 <TIM1_BRK_TIM9_IRQHandler+0x8c>)
 8007586:	695b      	ldr	r3, [r3, #20]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d002      	beq.n	8007592 <TIM1_BRK_TIM9_IRQHandler+0x56>
			TIMx_UP_INT_Callback[TIM9_CALLBACK]();
 800758c:	4b0e      	ldr	r3, [pc, #56]	; (80075c8 <TIM1_BRK_TIM9_IRQHandler+0x8c>)
 800758e:	695b      	ldr	r3, [r3, #20]
 8007590:	4798      	blx	r3
		}
	}
	if(GET_BIT(TIM9->SR,TIM_CC1IF_BIT_POS) == INTERRUPT_ACTIVE){
 8007592:	4b0b      	ldr	r3, [pc, #44]	; (80075c0 <TIM1_BRK_TIM9_IRQHandler+0x84>)
 8007594:	691b      	ldr	r3, [r3, #16]
 8007596:	085b      	lsrs	r3, r3, #1
 8007598:	f003 0301 	and.w	r3, r3, #1
 800759c:	2b01      	cmp	r3, #1
 800759e:	d10c      	bne.n	80075ba <TIM1_BRK_TIM9_IRQHandler+0x7e>
		CLR_BIT(TIM9->SR,TIM_CC1IF_BIT_POS);
 80075a0:	4b07      	ldr	r3, [pc, #28]	; (80075c0 <TIM1_BRK_TIM9_IRQHandler+0x84>)
 80075a2:	691b      	ldr	r3, [r3, #16]
 80075a4:	4a06      	ldr	r2, [pc, #24]	; (80075c0 <TIM1_BRK_TIM9_IRQHandler+0x84>)
 80075a6:	f023 0302 	bic.w	r3, r3, #2
 80075aa:	6113      	str	r3, [r2, #16]
		if(TIMx_CC_INT_Callback[TIM9_CALLBACK] != NULL){
 80075ac:	4b07      	ldr	r3, [pc, #28]	; (80075cc <TIM1_BRK_TIM9_IRQHandler+0x90>)
 80075ae:	695b      	ldr	r3, [r3, #20]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d002      	beq.n	80075ba <TIM1_BRK_TIM9_IRQHandler+0x7e>
			TIMx_CC_INT_Callback[TIM9_CALLBACK]();
 80075b4:	4b05      	ldr	r3, [pc, #20]	; (80075cc <TIM1_BRK_TIM9_IRQHandler+0x90>)
 80075b6:	695b      	ldr	r3, [r3, #20]
 80075b8:	4798      	blx	r3
		}
	}
}
 80075ba:	bf00      	nop
 80075bc:	bd80      	pop	{r7, pc}
 80075be:	bf00      	nop
 80075c0:	40014000 	.word	0x40014000
 80075c4:	200001c4 	.word	0x200001c4
 80075c8:	20000184 	.word	0x20000184
 80075cc:	200001a4 	.word	0x200001a4

080075d0 <TIM1_CC_IRQHandler>:
void TIM1_CC_IRQHandler(void)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	af00      	add	r7, sp, #0
	CLR_BIT(TIM1->SR,TIM_CC1IF_BIT_POS);
 80075d4:	4b07      	ldr	r3, [pc, #28]	; (80075f4 <TIM1_CC_IRQHandler+0x24>)
 80075d6:	691b      	ldr	r3, [r3, #16]
 80075d8:	4a06      	ldr	r2, [pc, #24]	; (80075f4 <TIM1_CC_IRQHandler+0x24>)
 80075da:	f023 0302 	bic.w	r3, r3, #2
 80075de:	6113      	str	r3, [r2, #16]
	if(TIMx_CC_INT_Callback[TIM1_CALLBACK] != NULL)
 80075e0:	4b05      	ldr	r3, [pc, #20]	; (80075f8 <TIM1_CC_IRQHandler+0x28>)
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d002      	beq.n	80075ee <TIM1_CC_IRQHandler+0x1e>
	{
		TIMx_CC_INT_Callback[TIM1_CALLBACK]();
 80075e8:	4b03      	ldr	r3, [pc, #12]	; (80075f8 <TIM1_CC_IRQHandler+0x28>)
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	4798      	blx	r3
	}
}
 80075ee:	bf00      	nop
 80075f0:	bd80      	pop	{r7, pc}
 80075f2:	bf00      	nop
 80075f4:	40010000 	.word	0x40010000
 80075f8:	200001a4 	.word	0x200001a4

080075fc <TIM2_IRQHandler>:

void TIM2_IRQHandler(void){
 80075fc:	b580      	push	{r7, lr}
 80075fe:	af00      	add	r7, sp, #0
	if(GET_BIT(TIM2->SR,TIM_UIF_BIT_POS) == INTERRUPT_ACTIVE){
 8007600:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007604:	691b      	ldr	r3, [r3, #16]
 8007606:	f003 0301 	and.w	r3, r3, #1
 800760a:	2b01      	cmp	r3, #1
 800760c:	d12a      	bne.n	8007664 <TIM2_IRQHandler+0x68>
		CLR_BIT(TIM2->SR,TIM_UIF_BIT_POS);
 800760e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007612:	691b      	ldr	r3, [r3, #16]
 8007614:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8007618:	f023 0301 	bic.w	r3, r3, #1
 800761c:	6113      	str	r3, [r2, #16]
		if(TIM_SingleInterval_FLAG[TIM2_CALLBACK] == TIM_SINGLE_INTERVAL_MODE)
 800761e:	4b1e      	ldr	r3, [pc, #120]	; (8007698 <TIM2_IRQHandler+0x9c>)
 8007620:	785b      	ldrb	r3, [r3, #1]
 8007622:	2b01      	cmp	r3, #1
 8007624:	d117      	bne.n	8007656 <TIM2_IRQHandler+0x5a>
		{
			CLR_BIT(TIM2->CR1,TIM_CEN_BIT_POS);
 8007626:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8007630:	f023 0301 	bic.w	r3, r3, #1
 8007634:	6013      	str	r3, [r2, #0]
			SET_BIT(TIM2->EGR,TIM_UG_BIT_POS);
 8007636:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800763a:	695b      	ldr	r3, [r3, #20]
 800763c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8007640:	f043 0301 	orr.w	r3, r3, #1
 8007644:	6153      	str	r3, [r2, #20]
			CLR_BIT(TIM2->DIER,TIM_UIE_BIT_POS);
 8007646:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800764a:	68db      	ldr	r3, [r3, #12]
 800764c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8007650:	f023 0301 	bic.w	r3, r3, #1
 8007654:	60d3      	str	r3, [r2, #12]
		}
		if(TIMx_UP_INT_Callback[TIM2_CALLBACK] != NULL){
 8007656:	4b11      	ldr	r3, [pc, #68]	; (800769c <TIM2_IRQHandler+0xa0>)
 8007658:	685b      	ldr	r3, [r3, #4]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d002      	beq.n	8007664 <TIM2_IRQHandler+0x68>
			TIMx_UP_INT_Callback[TIM2_CALLBACK]();
 800765e:	4b0f      	ldr	r3, [pc, #60]	; (800769c <TIM2_IRQHandler+0xa0>)
 8007660:	685b      	ldr	r3, [r3, #4]
 8007662:	4798      	blx	r3
		}
	}
	if(GET_BIT(TIM2->SR,TIM_CC1IF_BIT_POS) == INTERRUPT_ACTIVE){
 8007664:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007668:	691b      	ldr	r3, [r3, #16]
 800766a:	085b      	lsrs	r3, r3, #1
 800766c:	f003 0301 	and.w	r3, r3, #1
 8007670:	2b01      	cmp	r3, #1
 8007672:	d10e      	bne.n	8007692 <TIM2_IRQHandler+0x96>
		CLR_BIT(TIM2->SR,TIM_CC1IF_BIT_POS);
 8007674:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007678:	691b      	ldr	r3, [r3, #16]
 800767a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800767e:	f023 0302 	bic.w	r3, r3, #2
 8007682:	6113      	str	r3, [r2, #16]
		if(TIMx_CC_INT_Callback[TIM2_CALLBACK] != NULL){
 8007684:	4b06      	ldr	r3, [pc, #24]	; (80076a0 <TIM2_IRQHandler+0xa4>)
 8007686:	685b      	ldr	r3, [r3, #4]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d002      	beq.n	8007692 <TIM2_IRQHandler+0x96>
			TIMx_CC_INT_Callback[TIM2_CALLBACK]();
 800768c:	4b04      	ldr	r3, [pc, #16]	; (80076a0 <TIM2_IRQHandler+0xa4>)
 800768e:	685b      	ldr	r3, [r3, #4]
 8007690:	4798      	blx	r3
		}
	}
}
 8007692:	bf00      	nop
 8007694:	bd80      	pop	{r7, pc}
 8007696:	bf00      	nop
 8007698:	200001c4 	.word	0x200001c4
 800769c:	20000184 	.word	0x20000184
 80076a0:	200001a4 	.word	0x200001a4

080076a4 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	af00      	add	r7, sp, #0
	if(GET_BIT(TIM3->SR,TIM_UIF_BIT_POS) == INTERRUPT_ACTIVE)
 80076a8:	4b1f      	ldr	r3, [pc, #124]	; (8007728 <TIM3_IRQHandler+0x84>)
 80076aa:	691b      	ldr	r3, [r3, #16]
 80076ac:	f003 0301 	and.w	r3, r3, #1
 80076b0:	2b01      	cmp	r3, #1
 80076b2:	d122      	bne.n	80076fa <TIM3_IRQHandler+0x56>
	{
		CLR_BIT(TIM3->SR,TIM_UIF_BIT_POS);
 80076b4:	4b1c      	ldr	r3, [pc, #112]	; (8007728 <TIM3_IRQHandler+0x84>)
 80076b6:	691b      	ldr	r3, [r3, #16]
 80076b8:	4a1b      	ldr	r2, [pc, #108]	; (8007728 <TIM3_IRQHandler+0x84>)
 80076ba:	f023 0301 	bic.w	r3, r3, #1
 80076be:	6113      	str	r3, [r2, #16]
		if(TIM_SingleInterval_FLAG[TIM3_CALLBACK] == TIM_SINGLE_INTERVAL_MODE)
 80076c0:	4b1a      	ldr	r3, [pc, #104]	; (800772c <TIM3_IRQHandler+0x88>)
 80076c2:	789b      	ldrb	r3, [r3, #2]
 80076c4:	2b01      	cmp	r3, #1
 80076c6:	d111      	bne.n	80076ec <TIM3_IRQHandler+0x48>
		{
			CLR_BIT(TIM3->CR1,TIM_CEN_BIT_POS);
 80076c8:	4b17      	ldr	r3, [pc, #92]	; (8007728 <TIM3_IRQHandler+0x84>)
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	4a16      	ldr	r2, [pc, #88]	; (8007728 <TIM3_IRQHandler+0x84>)
 80076ce:	f023 0301 	bic.w	r3, r3, #1
 80076d2:	6013      	str	r3, [r2, #0]
			SET_BIT(TIM3->EGR,TIM_UG_BIT_POS);
 80076d4:	4b14      	ldr	r3, [pc, #80]	; (8007728 <TIM3_IRQHandler+0x84>)
 80076d6:	695b      	ldr	r3, [r3, #20]
 80076d8:	4a13      	ldr	r2, [pc, #76]	; (8007728 <TIM3_IRQHandler+0x84>)
 80076da:	f043 0301 	orr.w	r3, r3, #1
 80076de:	6153      	str	r3, [r2, #20]
			CLR_BIT(TIM3->DIER,TIM_UIE_BIT_POS);
 80076e0:	4b11      	ldr	r3, [pc, #68]	; (8007728 <TIM3_IRQHandler+0x84>)
 80076e2:	68db      	ldr	r3, [r3, #12]
 80076e4:	4a10      	ldr	r2, [pc, #64]	; (8007728 <TIM3_IRQHandler+0x84>)
 80076e6:	f023 0301 	bic.w	r3, r3, #1
 80076ea:	60d3      	str	r3, [r2, #12]
		}
		if(TIMx_UP_INT_Callback[TIM3_CALLBACK] != NULL)
 80076ec:	4b10      	ldr	r3, [pc, #64]	; (8007730 <TIM3_IRQHandler+0x8c>)
 80076ee:	689b      	ldr	r3, [r3, #8]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d002      	beq.n	80076fa <TIM3_IRQHandler+0x56>
		{
			TIMx_UP_INT_Callback[TIM3_CALLBACK]();
 80076f4:	4b0e      	ldr	r3, [pc, #56]	; (8007730 <TIM3_IRQHandler+0x8c>)
 80076f6:	689b      	ldr	r3, [r3, #8]
 80076f8:	4798      	blx	r3
		}
	}
	if(GET_BIT(TIM3->SR,TIM_CC1IF_BIT_POS) == INTERRUPT_ACTIVE)
 80076fa:	4b0b      	ldr	r3, [pc, #44]	; (8007728 <TIM3_IRQHandler+0x84>)
 80076fc:	691b      	ldr	r3, [r3, #16]
 80076fe:	085b      	lsrs	r3, r3, #1
 8007700:	f003 0301 	and.w	r3, r3, #1
 8007704:	2b01      	cmp	r3, #1
 8007706:	d10c      	bne.n	8007722 <TIM3_IRQHandler+0x7e>
	{
		CLR_BIT(TIM3->SR,TIM_CC1IF_BIT_POS);
 8007708:	4b07      	ldr	r3, [pc, #28]	; (8007728 <TIM3_IRQHandler+0x84>)
 800770a:	691b      	ldr	r3, [r3, #16]
 800770c:	4a06      	ldr	r2, [pc, #24]	; (8007728 <TIM3_IRQHandler+0x84>)
 800770e:	f023 0302 	bic.w	r3, r3, #2
 8007712:	6113      	str	r3, [r2, #16]
		if(TIMx_CC_INT_Callback[TIM3_CALLBACK] != NULL)
 8007714:	4b07      	ldr	r3, [pc, #28]	; (8007734 <TIM3_IRQHandler+0x90>)
 8007716:	689b      	ldr	r3, [r3, #8]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d002      	beq.n	8007722 <TIM3_IRQHandler+0x7e>
		{
			TIMx_CC_INT_Callback[TIM3_CALLBACK]();
 800771c:	4b05      	ldr	r3, [pc, #20]	; (8007734 <TIM3_IRQHandler+0x90>)
 800771e:	689b      	ldr	r3, [r3, #8]
 8007720:	4798      	blx	r3
		}
	}
}
 8007722:	bf00      	nop
 8007724:	bd80      	pop	{r7, pc}
 8007726:	bf00      	nop
 8007728:	40000400 	.word	0x40000400
 800772c:	200001c4 	.word	0x200001c4
 8007730:	20000184 	.word	0x20000184
 8007734:	200001a4 	.word	0x200001a4

08007738 <TIM4_IRQHandler>:
void TIM4_IRQHandler(void)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	af00      	add	r7, sp, #0
	if(GET_BIT(TIM4->SR,TIM_UIF_BIT_POS) == INTERRUPT_ACTIVE){
 800773c:	4b1f      	ldr	r3, [pc, #124]	; (80077bc <TIM4_IRQHandler+0x84>)
 800773e:	691b      	ldr	r3, [r3, #16]
 8007740:	f003 0301 	and.w	r3, r3, #1
 8007744:	2b01      	cmp	r3, #1
 8007746:	d122      	bne.n	800778e <TIM4_IRQHandler+0x56>
		CLR_BIT(TIM4->SR,TIM_UIF_BIT_POS);
 8007748:	4b1c      	ldr	r3, [pc, #112]	; (80077bc <TIM4_IRQHandler+0x84>)
 800774a:	691b      	ldr	r3, [r3, #16]
 800774c:	4a1b      	ldr	r2, [pc, #108]	; (80077bc <TIM4_IRQHandler+0x84>)
 800774e:	f023 0301 	bic.w	r3, r3, #1
 8007752:	6113      	str	r3, [r2, #16]
		if(TIM_SingleInterval_FLAG[TIM4_CALLBACK] == TIM_SINGLE_INTERVAL_MODE)
 8007754:	4b1a      	ldr	r3, [pc, #104]	; (80077c0 <TIM4_IRQHandler+0x88>)
 8007756:	78db      	ldrb	r3, [r3, #3]
 8007758:	2b01      	cmp	r3, #1
 800775a:	d111      	bne.n	8007780 <TIM4_IRQHandler+0x48>
		{
			CLR_BIT(TIM4->CR1,TIM_CEN_BIT_POS);
 800775c:	4b17      	ldr	r3, [pc, #92]	; (80077bc <TIM4_IRQHandler+0x84>)
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	4a16      	ldr	r2, [pc, #88]	; (80077bc <TIM4_IRQHandler+0x84>)
 8007762:	f023 0301 	bic.w	r3, r3, #1
 8007766:	6013      	str	r3, [r2, #0]
			SET_BIT(TIM4->EGR,TIM_UG_BIT_POS);
 8007768:	4b14      	ldr	r3, [pc, #80]	; (80077bc <TIM4_IRQHandler+0x84>)
 800776a:	695b      	ldr	r3, [r3, #20]
 800776c:	4a13      	ldr	r2, [pc, #76]	; (80077bc <TIM4_IRQHandler+0x84>)
 800776e:	f043 0301 	orr.w	r3, r3, #1
 8007772:	6153      	str	r3, [r2, #20]
			CLR_BIT(TIM4->DIER,TIM_UIE_BIT_POS);
 8007774:	4b11      	ldr	r3, [pc, #68]	; (80077bc <TIM4_IRQHandler+0x84>)
 8007776:	68db      	ldr	r3, [r3, #12]
 8007778:	4a10      	ldr	r2, [pc, #64]	; (80077bc <TIM4_IRQHandler+0x84>)
 800777a:	f023 0301 	bic.w	r3, r3, #1
 800777e:	60d3      	str	r3, [r2, #12]
		}
		if(TIMx_UP_INT_Callback[TIM4_CALLBACK] != NULL){
 8007780:	4b10      	ldr	r3, [pc, #64]	; (80077c4 <TIM4_IRQHandler+0x8c>)
 8007782:	68db      	ldr	r3, [r3, #12]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d002      	beq.n	800778e <TIM4_IRQHandler+0x56>
			TIMx_UP_INT_Callback[TIM4_CALLBACK]();
 8007788:	4b0e      	ldr	r3, [pc, #56]	; (80077c4 <TIM4_IRQHandler+0x8c>)
 800778a:	68db      	ldr	r3, [r3, #12]
 800778c:	4798      	blx	r3
		}
	}
	if(GET_BIT(TIM4->SR,TIM_CC1IF_BIT_POS) == INTERRUPT_ACTIVE){
 800778e:	4b0b      	ldr	r3, [pc, #44]	; (80077bc <TIM4_IRQHandler+0x84>)
 8007790:	691b      	ldr	r3, [r3, #16]
 8007792:	085b      	lsrs	r3, r3, #1
 8007794:	f003 0301 	and.w	r3, r3, #1
 8007798:	2b01      	cmp	r3, #1
 800779a:	d10c      	bne.n	80077b6 <TIM4_IRQHandler+0x7e>
		CLR_BIT(TIM4->SR,TIM_CC1IF_BIT_POS);
 800779c:	4b07      	ldr	r3, [pc, #28]	; (80077bc <TIM4_IRQHandler+0x84>)
 800779e:	691b      	ldr	r3, [r3, #16]
 80077a0:	4a06      	ldr	r2, [pc, #24]	; (80077bc <TIM4_IRQHandler+0x84>)
 80077a2:	f023 0302 	bic.w	r3, r3, #2
 80077a6:	6113      	str	r3, [r2, #16]
		if(TIMx_CC_INT_Callback[TIM4_CALLBACK] != NULL){
 80077a8:	4b07      	ldr	r3, [pc, #28]	; (80077c8 <TIM4_IRQHandler+0x90>)
 80077aa:	68db      	ldr	r3, [r3, #12]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d002      	beq.n	80077b6 <TIM4_IRQHandler+0x7e>
			TIMx_CC_INT_Callback[TIM4_CALLBACK]();
 80077b0:	4b05      	ldr	r3, [pc, #20]	; (80077c8 <TIM4_IRQHandler+0x90>)
 80077b2:	68db      	ldr	r3, [r3, #12]
 80077b4:	4798      	blx	r3
		}
	}
}
 80077b6:	bf00      	nop
 80077b8:	bd80      	pop	{r7, pc}
 80077ba:	bf00      	nop
 80077bc:	40000800 	.word	0x40000800
 80077c0:	200001c4 	.word	0x200001c4
 80077c4:	20000184 	.word	0x20000184
 80077c8:	200001a4 	.word	0x200001a4

080077cc <TIM5_IRQHandler>:
void TIM5_IRQHandler(void)
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	af00      	add	r7, sp, #0
	if(GET_BIT(TIM5->SR,TIM_UIF_BIT_POS) == INTERRUPT_ACTIVE){
 80077d0:	4b1f      	ldr	r3, [pc, #124]	; (8007850 <TIM5_IRQHandler+0x84>)
 80077d2:	691b      	ldr	r3, [r3, #16]
 80077d4:	f003 0301 	and.w	r3, r3, #1
 80077d8:	2b01      	cmp	r3, #1
 80077da:	d122      	bne.n	8007822 <TIM5_IRQHandler+0x56>
		CLR_BIT(TIM5->SR,TIM_UIF_BIT_POS);
 80077dc:	4b1c      	ldr	r3, [pc, #112]	; (8007850 <TIM5_IRQHandler+0x84>)
 80077de:	691b      	ldr	r3, [r3, #16]
 80077e0:	4a1b      	ldr	r2, [pc, #108]	; (8007850 <TIM5_IRQHandler+0x84>)
 80077e2:	f023 0301 	bic.w	r3, r3, #1
 80077e6:	6113      	str	r3, [r2, #16]
		if(TIM_SingleInterval_FLAG[TIM5_CALLBACK] == TIM_SINGLE_INTERVAL_MODE)
 80077e8:	4b1a      	ldr	r3, [pc, #104]	; (8007854 <TIM5_IRQHandler+0x88>)
 80077ea:	791b      	ldrb	r3, [r3, #4]
 80077ec:	2b01      	cmp	r3, #1
 80077ee:	d111      	bne.n	8007814 <TIM5_IRQHandler+0x48>
		{
			CLR_BIT(TIM5->CR1,TIM_CEN_BIT_POS);
 80077f0:	4b17      	ldr	r3, [pc, #92]	; (8007850 <TIM5_IRQHandler+0x84>)
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	4a16      	ldr	r2, [pc, #88]	; (8007850 <TIM5_IRQHandler+0x84>)
 80077f6:	f023 0301 	bic.w	r3, r3, #1
 80077fa:	6013      	str	r3, [r2, #0]
			SET_BIT(TIM5->EGR,TIM_UG_BIT_POS);
 80077fc:	4b14      	ldr	r3, [pc, #80]	; (8007850 <TIM5_IRQHandler+0x84>)
 80077fe:	695b      	ldr	r3, [r3, #20]
 8007800:	4a13      	ldr	r2, [pc, #76]	; (8007850 <TIM5_IRQHandler+0x84>)
 8007802:	f043 0301 	orr.w	r3, r3, #1
 8007806:	6153      	str	r3, [r2, #20]
			CLR_BIT(TIM5->DIER,TIM_UIE_BIT_POS);
 8007808:	4b11      	ldr	r3, [pc, #68]	; (8007850 <TIM5_IRQHandler+0x84>)
 800780a:	68db      	ldr	r3, [r3, #12]
 800780c:	4a10      	ldr	r2, [pc, #64]	; (8007850 <TIM5_IRQHandler+0x84>)
 800780e:	f023 0301 	bic.w	r3, r3, #1
 8007812:	60d3      	str	r3, [r2, #12]
		}
		if(TIMx_UP_INT_Callback[TIM5_CALLBACK] != NULL){
 8007814:	4b10      	ldr	r3, [pc, #64]	; (8007858 <TIM5_IRQHandler+0x8c>)
 8007816:	691b      	ldr	r3, [r3, #16]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d002      	beq.n	8007822 <TIM5_IRQHandler+0x56>
			TIMx_UP_INT_Callback[TIM5_CALLBACK]();
 800781c:	4b0e      	ldr	r3, [pc, #56]	; (8007858 <TIM5_IRQHandler+0x8c>)
 800781e:	691b      	ldr	r3, [r3, #16]
 8007820:	4798      	blx	r3
		}
	}
	if(GET_BIT(TIM5->SR,TIM_CC1IF_BIT_POS) == INTERRUPT_ACTIVE){
 8007822:	4b0b      	ldr	r3, [pc, #44]	; (8007850 <TIM5_IRQHandler+0x84>)
 8007824:	691b      	ldr	r3, [r3, #16]
 8007826:	085b      	lsrs	r3, r3, #1
 8007828:	f003 0301 	and.w	r3, r3, #1
 800782c:	2b01      	cmp	r3, #1
 800782e:	d10c      	bne.n	800784a <TIM5_IRQHandler+0x7e>
		CLR_BIT(TIM5->SR,TIM_CC1IF_BIT_POS);
 8007830:	4b07      	ldr	r3, [pc, #28]	; (8007850 <TIM5_IRQHandler+0x84>)
 8007832:	691b      	ldr	r3, [r3, #16]
 8007834:	4a06      	ldr	r2, [pc, #24]	; (8007850 <TIM5_IRQHandler+0x84>)
 8007836:	f023 0302 	bic.w	r3, r3, #2
 800783a:	6113      	str	r3, [r2, #16]
		if(TIMx_CC_INT_Callback[TIM5_CALLBACK] != NULL){
 800783c:	4b07      	ldr	r3, [pc, #28]	; (800785c <TIM5_IRQHandler+0x90>)
 800783e:	691b      	ldr	r3, [r3, #16]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d002      	beq.n	800784a <TIM5_IRQHandler+0x7e>
			TIMx_CC_INT_Callback[TIM5_CALLBACK]();
 8007844:	4b05      	ldr	r3, [pc, #20]	; (800785c <TIM5_IRQHandler+0x90>)
 8007846:	691b      	ldr	r3, [r3, #16]
 8007848:	4798      	blx	r3
		}
	}
}
 800784a:	bf00      	nop
 800784c:	bd80      	pop	{r7, pc}
 800784e:	bf00      	nop
 8007850:	40000c00 	.word	0x40000c00
 8007854:	200001c4 	.word	0x200001c4
 8007858:	20000184 	.word	0x20000184
 800785c:	200001a4 	.word	0x200001a4

08007860 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007860:	b480      	push	{r7}
 8007862:	b083      	sub	sp, #12
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	f103 0208 	add.w	r2, r3, #8
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	f04f 32ff 	mov.w	r2, #4294967295
 8007878:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	f103 0208 	add.w	r2, r3, #8
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	f103 0208 	add.w	r2, r3, #8
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2200      	movs	r2, #0
 8007892:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007894:	bf00      	nop
 8007896:	370c      	adds	r7, #12
 8007898:	46bd      	mov	sp, r7
 800789a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789e:	4770      	bx	lr

080078a0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80078a0:	b480      	push	{r7}
 80078a2:	b083      	sub	sp, #12
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2200      	movs	r2, #0
 80078ac:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80078ae:	bf00      	nop
 80078b0:	370c      	adds	r7, #12
 80078b2:	46bd      	mov	sp, r7
 80078b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b8:	4770      	bx	lr

080078ba <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80078ba:	b480      	push	{r7}
 80078bc:	b085      	sub	sp, #20
 80078be:	af00      	add	r7, sp, #0
 80078c0:	6078      	str	r0, [r7, #4]
 80078c2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	685b      	ldr	r3, [r3, #4]
 80078c8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	68fa      	ldr	r2, [r7, #12]
 80078ce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	689a      	ldr	r2, [r3, #8]
 80078d4:	683b      	ldr	r3, [r7, #0]
 80078d6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	689b      	ldr	r3, [r3, #8]
 80078dc:	683a      	ldr	r2, [r7, #0]
 80078de:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	683a      	ldr	r2, [r7, #0]
 80078e4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	687a      	ldr	r2, [r7, #4]
 80078ea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	1c5a      	adds	r2, r3, #1
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	601a      	str	r2, [r3, #0]
}
 80078f6:	bf00      	nop
 80078f8:	3714      	adds	r7, #20
 80078fa:	46bd      	mov	sp, r7
 80078fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007900:	4770      	bx	lr

08007902 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007902:	b480      	push	{r7}
 8007904:	b085      	sub	sp, #20
 8007906:	af00      	add	r7, sp, #0
 8007908:	6078      	str	r0, [r7, #4]
 800790a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800790c:	683b      	ldr	r3, [r7, #0]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007912:	68bb      	ldr	r3, [r7, #8]
 8007914:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007918:	d103      	bne.n	8007922 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	691b      	ldr	r3, [r3, #16]
 800791e:	60fb      	str	r3, [r7, #12]
 8007920:	e00c      	b.n	800793c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	3308      	adds	r3, #8
 8007926:	60fb      	str	r3, [r7, #12]
 8007928:	e002      	b.n	8007930 <vListInsert+0x2e>
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	685b      	ldr	r3, [r3, #4]
 800792e:	60fb      	str	r3, [r7, #12]
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	685b      	ldr	r3, [r3, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	68ba      	ldr	r2, [r7, #8]
 8007938:	429a      	cmp	r2, r3
 800793a:	d2f6      	bcs.n	800792a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	685a      	ldr	r2, [r3, #4]
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	685b      	ldr	r3, [r3, #4]
 8007948:	683a      	ldr	r2, [r7, #0]
 800794a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	68fa      	ldr	r2, [r7, #12]
 8007950:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	683a      	ldr	r2, [r7, #0]
 8007956:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	687a      	ldr	r2, [r7, #4]
 800795c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	1c5a      	adds	r2, r3, #1
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	601a      	str	r2, [r3, #0]
}
 8007968:	bf00      	nop
 800796a:	3714      	adds	r7, #20
 800796c:	46bd      	mov	sp, r7
 800796e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007972:	4770      	bx	lr

08007974 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007974:	b480      	push	{r7}
 8007976:	b085      	sub	sp, #20
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	691b      	ldr	r3, [r3, #16]
 8007980:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	685b      	ldr	r3, [r3, #4]
 8007986:	687a      	ldr	r2, [r7, #4]
 8007988:	6892      	ldr	r2, [r2, #8]
 800798a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	689b      	ldr	r3, [r3, #8]
 8007990:	687a      	ldr	r2, [r7, #4]
 8007992:	6852      	ldr	r2, [r2, #4]
 8007994:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	685b      	ldr	r3, [r3, #4]
 800799a:	687a      	ldr	r2, [r7, #4]
 800799c:	429a      	cmp	r2, r3
 800799e:	d103      	bne.n	80079a8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	689a      	ldr	r2, [r3, #8]
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2200      	movs	r2, #0
 80079ac:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	1e5a      	subs	r2, r3, #1
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	681b      	ldr	r3, [r3, #0]
}
 80079bc:	4618      	mov	r0, r3
 80079be:	3714      	adds	r7, #20
 80079c0:	46bd      	mov	sp, r7
 80079c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c6:	4770      	bx	lr

080079c8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b084      	sub	sp, #16
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
 80079d0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d10a      	bne.n	80079f2 <xQueueGenericReset+0x2a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80079dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079e0:	f383 8811 	msr	BASEPRI, r3
 80079e4:	f3bf 8f6f 	isb	sy
 80079e8:	f3bf 8f4f 	dsb	sy
 80079ec:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80079ee:	bf00      	nop
 80079f0:	e7fe      	b.n	80079f0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80079f2:	f002 fa71 	bl	8009ed8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	681a      	ldr	r2, [r3, #0]
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079fe:	68f9      	ldr	r1, [r7, #12]
 8007a00:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007a02:	fb01 f303 	mul.w	r3, r1, r3
 8007a06:	441a      	add	r2, r3
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	2200      	movs	r2, #0
 8007a10:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	681a      	ldr	r2, [r3, #0]
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	681a      	ldr	r2, [r3, #0]
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a22:	3b01      	subs	r3, #1
 8007a24:	68f9      	ldr	r1, [r7, #12]
 8007a26:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007a28:	fb01 f303 	mul.w	r3, r1, r3
 8007a2c:	441a      	add	r2, r3
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	22ff      	movs	r2, #255	; 0xff
 8007a36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	22ff      	movs	r2, #255	; 0xff
 8007a3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007a42:	683b      	ldr	r3, [r7, #0]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d114      	bne.n	8007a72 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	691b      	ldr	r3, [r3, #16]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d01a      	beq.n	8007a86 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	3310      	adds	r3, #16
 8007a54:	4618      	mov	r0, r3
 8007a56:	f001 fa25 	bl	8008ea4 <xTaskRemoveFromEventList>
 8007a5a:	4603      	mov	r3, r0
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d012      	beq.n	8007a86 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007a60:	4b0c      	ldr	r3, [pc, #48]	; (8007a94 <xQueueGenericReset+0xcc>)
 8007a62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a66:	601a      	str	r2, [r3, #0]
 8007a68:	f3bf 8f4f 	dsb	sy
 8007a6c:	f3bf 8f6f 	isb	sy
 8007a70:	e009      	b.n	8007a86 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	3310      	adds	r3, #16
 8007a76:	4618      	mov	r0, r3
 8007a78:	f7ff fef2 	bl	8007860 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	3324      	adds	r3, #36	; 0x24
 8007a80:	4618      	mov	r0, r3
 8007a82:	f7ff feed 	bl	8007860 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007a86:	f002 fa57 	bl	8009f38 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007a8a:	2301      	movs	r3, #1
}
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	3710      	adds	r7, #16
 8007a90:	46bd      	mov	sp, r7
 8007a92:	bd80      	pop	{r7, pc}
 8007a94:	e000ed04 	.word	0xe000ed04

08007a98 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b08a      	sub	sp, #40	; 0x28
 8007a9c:	af02      	add	r7, sp, #8
 8007a9e:	60f8      	str	r0, [r7, #12]
 8007aa0:	60b9      	str	r1, [r7, #8]
 8007aa2:	4613      	mov	r3, r2
 8007aa4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d10a      	bne.n	8007ac2 <xQueueGenericCreate+0x2a>
        __asm volatile
 8007aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ab0:	f383 8811 	msr	BASEPRI, r3
 8007ab4:	f3bf 8f6f 	isb	sy
 8007ab8:	f3bf 8f4f 	dsb	sy
 8007abc:	613b      	str	r3, [r7, #16]
    }
 8007abe:	bf00      	nop
 8007ac0:	e7fe      	b.n	8007ac0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	68ba      	ldr	r2, [r7, #8]
 8007ac6:	fb02 f303 	mul.w	r3, r2, r3
 8007aca:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007acc:	69fb      	ldr	r3, [r7, #28]
 8007ace:	3350      	adds	r3, #80	; 0x50
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	f002 fb19 	bl	800a108 <pvPortMalloc>
 8007ad6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007ad8:	69bb      	ldr	r3, [r7, #24]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d00d      	beq.n	8007afa <xQueueGenericCreate+0x62>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007ade:	69bb      	ldr	r3, [r7, #24]
 8007ae0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007ae2:	697b      	ldr	r3, [r7, #20]
 8007ae4:	3350      	adds	r3, #80	; 0x50
 8007ae6:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007ae8:	79fa      	ldrb	r2, [r7, #7]
 8007aea:	69bb      	ldr	r3, [r7, #24]
 8007aec:	9300      	str	r3, [sp, #0]
 8007aee:	4613      	mov	r3, r2
 8007af0:	697a      	ldr	r2, [r7, #20]
 8007af2:	68b9      	ldr	r1, [r7, #8]
 8007af4:	68f8      	ldr	r0, [r7, #12]
 8007af6:	f000 f805 	bl	8007b04 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007afa:	69bb      	ldr	r3, [r7, #24]
	}
 8007afc:	4618      	mov	r0, r3
 8007afe:	3720      	adds	r7, #32
 8007b00:	46bd      	mov	sp, r7
 8007b02:	bd80      	pop	{r7, pc}

08007b04 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b084      	sub	sp, #16
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	60f8      	str	r0, [r7, #12]
 8007b0c:	60b9      	str	r1, [r7, #8]
 8007b0e:	607a      	str	r2, [r7, #4]
 8007b10:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007b12:	68bb      	ldr	r3, [r7, #8]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d103      	bne.n	8007b20 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007b18:	69bb      	ldr	r3, [r7, #24]
 8007b1a:	69ba      	ldr	r2, [r7, #24]
 8007b1c:	601a      	str	r2, [r3, #0]
 8007b1e:	e002      	b.n	8007b26 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007b20:	69bb      	ldr	r3, [r7, #24]
 8007b22:	687a      	ldr	r2, [r7, #4]
 8007b24:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007b26:	69bb      	ldr	r3, [r7, #24]
 8007b28:	68fa      	ldr	r2, [r7, #12]
 8007b2a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007b2c:	69bb      	ldr	r3, [r7, #24]
 8007b2e:	68ba      	ldr	r2, [r7, #8]
 8007b30:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007b32:	2101      	movs	r1, #1
 8007b34:	69b8      	ldr	r0, [r7, #24]
 8007b36:	f7ff ff47 	bl	80079c8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007b3a:	69bb      	ldr	r3, [r7, #24]
 8007b3c:	78fa      	ldrb	r2, [r7, #3]
 8007b3e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007b42:	bf00      	nop
 8007b44:	3710      	adds	r7, #16
 8007b46:	46bd      	mov	sp, r7
 8007b48:	bd80      	pop	{r7, pc}

08007b4a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8007b4a:	b580      	push	{r7, lr}
 8007b4c:	b082      	sub	sp, #8
 8007b4e:	af00      	add	r7, sp, #0
 8007b50:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d00e      	beq.n	8007b76 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	2200      	movs	r2, #0
 8007b62:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2200      	movs	r2, #0
 8007b68:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	2100      	movs	r1, #0
 8007b70:	6878      	ldr	r0, [r7, #4]
 8007b72:	f000 f81d 	bl	8007bb0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8007b76:	bf00      	nop
 8007b78:	3708      	adds	r7, #8
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	bd80      	pop	{r7, pc}

08007b7e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8007b7e:	b580      	push	{r7, lr}
 8007b80:	b086      	sub	sp, #24
 8007b82:	af00      	add	r7, sp, #0
 8007b84:	4603      	mov	r3, r0
 8007b86:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007b88:	2301      	movs	r3, #1
 8007b8a:	617b      	str	r3, [r7, #20]
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8007b90:	79fb      	ldrb	r3, [r7, #7]
 8007b92:	461a      	mov	r2, r3
 8007b94:	6939      	ldr	r1, [r7, #16]
 8007b96:	6978      	ldr	r0, [r7, #20]
 8007b98:	f7ff ff7e 	bl	8007a98 <xQueueGenericCreate>
 8007b9c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007b9e:	68f8      	ldr	r0, [r7, #12]
 8007ba0:	f7ff ffd3 	bl	8007b4a <prvInitialiseMutex>

		return xNewQueue;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
	}
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	3718      	adds	r7, #24
 8007baa:	46bd      	mov	sp, r7
 8007bac:	bd80      	pop	{r7, pc}
	...

08007bb0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b08e      	sub	sp, #56	; 0x38
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	60f8      	str	r0, [r7, #12]
 8007bb8:	60b9      	str	r1, [r7, #8]
 8007bba:	607a      	str	r2, [r7, #4]
 8007bbc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d10a      	bne.n	8007be2 <xQueueGenericSend+0x32>
        __asm volatile
 8007bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bd0:	f383 8811 	msr	BASEPRI, r3
 8007bd4:	f3bf 8f6f 	isb	sy
 8007bd8:	f3bf 8f4f 	dsb	sy
 8007bdc:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8007bde:	bf00      	nop
 8007be0:	e7fe      	b.n	8007be0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007be2:	68bb      	ldr	r3, [r7, #8]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d103      	bne.n	8007bf0 <xQueueGenericSend+0x40>
 8007be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d101      	bne.n	8007bf4 <xQueueGenericSend+0x44>
 8007bf0:	2301      	movs	r3, #1
 8007bf2:	e000      	b.n	8007bf6 <xQueueGenericSend+0x46>
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d10a      	bne.n	8007c10 <xQueueGenericSend+0x60>
        __asm volatile
 8007bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bfe:	f383 8811 	msr	BASEPRI, r3
 8007c02:	f3bf 8f6f 	isb	sy
 8007c06:	f3bf 8f4f 	dsb	sy
 8007c0a:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8007c0c:	bf00      	nop
 8007c0e:	e7fe      	b.n	8007c0e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	2b02      	cmp	r3, #2
 8007c14:	d103      	bne.n	8007c1e <xQueueGenericSend+0x6e>
 8007c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c1a:	2b01      	cmp	r3, #1
 8007c1c:	d101      	bne.n	8007c22 <xQueueGenericSend+0x72>
 8007c1e:	2301      	movs	r3, #1
 8007c20:	e000      	b.n	8007c24 <xQueueGenericSend+0x74>
 8007c22:	2300      	movs	r3, #0
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d10a      	bne.n	8007c3e <xQueueGenericSend+0x8e>
        __asm volatile
 8007c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c2c:	f383 8811 	msr	BASEPRI, r3
 8007c30:	f3bf 8f6f 	isb	sy
 8007c34:	f3bf 8f4f 	dsb	sy
 8007c38:	623b      	str	r3, [r7, #32]
    }
 8007c3a:	bf00      	nop
 8007c3c:	e7fe      	b.n	8007c3c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007c3e:	f001 facf 	bl	80091e0 <xTaskGetSchedulerState>
 8007c42:	4603      	mov	r3, r0
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d102      	bne.n	8007c4e <xQueueGenericSend+0x9e>
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d101      	bne.n	8007c52 <xQueueGenericSend+0xa2>
 8007c4e:	2301      	movs	r3, #1
 8007c50:	e000      	b.n	8007c54 <xQueueGenericSend+0xa4>
 8007c52:	2300      	movs	r3, #0
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d10a      	bne.n	8007c6e <xQueueGenericSend+0xbe>
        __asm volatile
 8007c58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c5c:	f383 8811 	msr	BASEPRI, r3
 8007c60:	f3bf 8f6f 	isb	sy
 8007c64:	f3bf 8f4f 	dsb	sy
 8007c68:	61fb      	str	r3, [r7, #28]
    }
 8007c6a:	bf00      	nop
 8007c6c:	e7fe      	b.n	8007c6c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007c6e:	f002 f933 	bl	8009ed8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c7a:	429a      	cmp	r2, r3
 8007c7c:	d302      	bcc.n	8007c84 <xQueueGenericSend+0xd4>
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	2b02      	cmp	r3, #2
 8007c82:	d129      	bne.n	8007cd8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007c84:	683a      	ldr	r2, [r7, #0]
 8007c86:	68b9      	ldr	r1, [r7, #8]
 8007c88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007c8a:	f000 fb2f 	bl	80082ec <prvCopyDataToQueue>
 8007c8e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d010      	beq.n	8007cba <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c9a:	3324      	adds	r3, #36	; 0x24
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	f001 f901 	bl	8008ea4 <xTaskRemoveFromEventList>
 8007ca2:	4603      	mov	r3, r0
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d013      	beq.n	8007cd0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007ca8:	4b3f      	ldr	r3, [pc, #252]	; (8007da8 <xQueueGenericSend+0x1f8>)
 8007caa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007cae:	601a      	str	r2, [r3, #0]
 8007cb0:	f3bf 8f4f 	dsb	sy
 8007cb4:	f3bf 8f6f 	isb	sy
 8007cb8:	e00a      	b.n	8007cd0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007cba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d007      	beq.n	8007cd0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007cc0:	4b39      	ldr	r3, [pc, #228]	; (8007da8 <xQueueGenericSend+0x1f8>)
 8007cc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007cc6:	601a      	str	r2, [r3, #0]
 8007cc8:	f3bf 8f4f 	dsb	sy
 8007ccc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007cd0:	f002 f932 	bl	8009f38 <vPortExitCritical>
				return pdPASS;
 8007cd4:	2301      	movs	r3, #1
 8007cd6:	e063      	b.n	8007da0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d103      	bne.n	8007ce6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007cde:	f002 f92b 	bl	8009f38 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	e05c      	b.n	8007da0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007ce6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d106      	bne.n	8007cfa <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007cec:	f107 0314 	add.w	r3, r7, #20
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	f001 f93b 	bl	8008f6c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007cf6:	2301      	movs	r3, #1
 8007cf8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007cfa:	f002 f91d 	bl	8009f38 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007cfe:	f000 fe9b 	bl	8008a38 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007d02:	f002 f8e9 	bl	8009ed8 <vPortEnterCritical>
 8007d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d08:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007d0c:	b25b      	sxtb	r3, r3
 8007d0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d12:	d103      	bne.n	8007d1c <xQueueGenericSend+0x16c>
 8007d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d16:	2200      	movs	r2, #0
 8007d18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d1e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007d22:	b25b      	sxtb	r3, r3
 8007d24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d28:	d103      	bne.n	8007d32 <xQueueGenericSend+0x182>
 8007d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007d32:	f002 f901 	bl	8009f38 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007d36:	1d3a      	adds	r2, r7, #4
 8007d38:	f107 0314 	add.w	r3, r7, #20
 8007d3c:	4611      	mov	r1, r2
 8007d3e:	4618      	mov	r0, r3
 8007d40:	f001 f92a 	bl	8008f98 <xTaskCheckForTimeOut>
 8007d44:	4603      	mov	r3, r0
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d124      	bne.n	8007d94 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007d4a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007d4c:	f000 fbc6 	bl	80084dc <prvIsQueueFull>
 8007d50:	4603      	mov	r3, r0
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d018      	beq.n	8007d88 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d58:	3310      	adds	r3, #16
 8007d5a:	687a      	ldr	r2, [r7, #4]
 8007d5c:	4611      	mov	r1, r2
 8007d5e:	4618      	mov	r0, r3
 8007d60:	f001 f850 	bl	8008e04 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007d64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007d66:	f000 fb51 	bl	800840c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007d6a:	f000 fe73 	bl	8008a54 <xTaskResumeAll>
 8007d6e:	4603      	mov	r3, r0
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	f47f af7c 	bne.w	8007c6e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007d76:	4b0c      	ldr	r3, [pc, #48]	; (8007da8 <xQueueGenericSend+0x1f8>)
 8007d78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d7c:	601a      	str	r2, [r3, #0]
 8007d7e:	f3bf 8f4f 	dsb	sy
 8007d82:	f3bf 8f6f 	isb	sy
 8007d86:	e772      	b.n	8007c6e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007d88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007d8a:	f000 fb3f 	bl	800840c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007d8e:	f000 fe61 	bl	8008a54 <xTaskResumeAll>
 8007d92:	e76c      	b.n	8007c6e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007d94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007d96:	f000 fb39 	bl	800840c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007d9a:	f000 fe5b 	bl	8008a54 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007d9e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007da0:	4618      	mov	r0, r3
 8007da2:	3738      	adds	r7, #56	; 0x38
 8007da4:	46bd      	mov	sp, r7
 8007da6:	bd80      	pop	{r7, pc}
 8007da8:	e000ed04 	.word	0xe000ed04

08007dac <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b090      	sub	sp, #64	; 0x40
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	60f8      	str	r0, [r7, #12]
 8007db4:	60b9      	str	r1, [r7, #8]
 8007db6:	607a      	str	r2, [r7, #4]
 8007db8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8007dbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d10a      	bne.n	8007dda <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8007dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dc8:	f383 8811 	msr	BASEPRI, r3
 8007dcc:	f3bf 8f6f 	isb	sy
 8007dd0:	f3bf 8f4f 	dsb	sy
 8007dd4:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8007dd6:	bf00      	nop
 8007dd8:	e7fe      	b.n	8007dd8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007dda:	68bb      	ldr	r3, [r7, #8]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d103      	bne.n	8007de8 <xQueueGenericSendFromISR+0x3c>
 8007de0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d101      	bne.n	8007dec <xQueueGenericSendFromISR+0x40>
 8007de8:	2301      	movs	r3, #1
 8007dea:	e000      	b.n	8007dee <xQueueGenericSendFromISR+0x42>
 8007dec:	2300      	movs	r3, #0
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d10a      	bne.n	8007e08 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8007df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007df6:	f383 8811 	msr	BASEPRI, r3
 8007dfa:	f3bf 8f6f 	isb	sy
 8007dfe:	f3bf 8f4f 	dsb	sy
 8007e02:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8007e04:	bf00      	nop
 8007e06:	e7fe      	b.n	8007e06 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	2b02      	cmp	r3, #2
 8007e0c:	d103      	bne.n	8007e16 <xQueueGenericSendFromISR+0x6a>
 8007e0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e12:	2b01      	cmp	r3, #1
 8007e14:	d101      	bne.n	8007e1a <xQueueGenericSendFromISR+0x6e>
 8007e16:	2301      	movs	r3, #1
 8007e18:	e000      	b.n	8007e1c <xQueueGenericSendFromISR+0x70>
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d10a      	bne.n	8007e36 <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8007e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e24:	f383 8811 	msr	BASEPRI, r3
 8007e28:	f3bf 8f6f 	isb	sy
 8007e2c:	f3bf 8f4f 	dsb	sy
 8007e30:	623b      	str	r3, [r7, #32]
    }
 8007e32:	bf00      	nop
 8007e34:	e7fe      	b.n	8007e34 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007e36:	f002 f927 	bl	800a088 <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8007e3a:	f3ef 8211 	mrs	r2, BASEPRI
 8007e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e42:	f383 8811 	msr	BASEPRI, r3
 8007e46:	f3bf 8f6f 	isb	sy
 8007e4a:	f3bf 8f4f 	dsb	sy
 8007e4e:	61fa      	str	r2, [r7, #28]
 8007e50:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8007e52:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007e54:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e5e:	429a      	cmp	r2, r3
 8007e60:	d302      	bcc.n	8007e68 <xQueueGenericSendFromISR+0xbc>
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	2b02      	cmp	r3, #2
 8007e66:	d12f      	bne.n	8007ec8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007e68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e6a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007e6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007e72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e76:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007e78:	683a      	ldr	r2, [r7, #0]
 8007e7a:	68b9      	ldr	r1, [r7, #8]
 8007e7c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007e7e:	f000 fa35 	bl	80082ec <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007e82:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8007e86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e8a:	d112      	bne.n	8007eb2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007e8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d016      	beq.n	8007ec2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007e94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e96:	3324      	adds	r3, #36	; 0x24
 8007e98:	4618      	mov	r0, r3
 8007e9a:	f001 f803 	bl	8008ea4 <xTaskRemoveFromEventList>
 8007e9e:	4603      	mov	r3, r0
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d00e      	beq.n	8007ec2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d00b      	beq.n	8007ec2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	2201      	movs	r2, #1
 8007eae:	601a      	str	r2, [r3, #0]
 8007eb0:	e007      	b.n	8007ec2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007eb2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007eb6:	3301      	adds	r3, #1
 8007eb8:	b2db      	uxtb	r3, r3
 8007eba:	b25a      	sxtb	r2, r3
 8007ebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ebe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007ec2:	2301      	movs	r3, #1
 8007ec4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8007ec6:	e001      	b.n	8007ecc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007ec8:	2300      	movs	r3, #0
 8007eca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ecc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ece:	617b      	str	r3, [r7, #20]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8007ed0:	697b      	ldr	r3, [r7, #20]
 8007ed2:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8007ed6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007ed8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007eda:	4618      	mov	r0, r3
 8007edc:	3740      	adds	r7, #64	; 0x40
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	bd80      	pop	{r7, pc}
	...

08007ee4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b08c      	sub	sp, #48	; 0x30
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	60f8      	str	r0, [r7, #12]
 8007eec:	60b9      	str	r1, [r7, #8]
 8007eee:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d10a      	bne.n	8007f14 <xQueueReceive+0x30>
        __asm volatile
 8007efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f02:	f383 8811 	msr	BASEPRI, r3
 8007f06:	f3bf 8f6f 	isb	sy
 8007f0a:	f3bf 8f4f 	dsb	sy
 8007f0e:	623b      	str	r3, [r7, #32]
    }
 8007f10:	bf00      	nop
 8007f12:	e7fe      	b.n	8007f12 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007f14:	68bb      	ldr	r3, [r7, #8]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d103      	bne.n	8007f22 <xQueueReceive+0x3e>
 8007f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d101      	bne.n	8007f26 <xQueueReceive+0x42>
 8007f22:	2301      	movs	r3, #1
 8007f24:	e000      	b.n	8007f28 <xQueueReceive+0x44>
 8007f26:	2300      	movs	r3, #0
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d10a      	bne.n	8007f42 <xQueueReceive+0x5e>
        __asm volatile
 8007f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f30:	f383 8811 	msr	BASEPRI, r3
 8007f34:	f3bf 8f6f 	isb	sy
 8007f38:	f3bf 8f4f 	dsb	sy
 8007f3c:	61fb      	str	r3, [r7, #28]
    }
 8007f3e:	bf00      	nop
 8007f40:	e7fe      	b.n	8007f40 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007f42:	f001 f94d 	bl	80091e0 <xTaskGetSchedulerState>
 8007f46:	4603      	mov	r3, r0
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d102      	bne.n	8007f52 <xQueueReceive+0x6e>
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d101      	bne.n	8007f56 <xQueueReceive+0x72>
 8007f52:	2301      	movs	r3, #1
 8007f54:	e000      	b.n	8007f58 <xQueueReceive+0x74>
 8007f56:	2300      	movs	r3, #0
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d10a      	bne.n	8007f72 <xQueueReceive+0x8e>
        __asm volatile
 8007f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f60:	f383 8811 	msr	BASEPRI, r3
 8007f64:	f3bf 8f6f 	isb	sy
 8007f68:	f3bf 8f4f 	dsb	sy
 8007f6c:	61bb      	str	r3, [r7, #24]
    }
 8007f6e:	bf00      	nop
 8007f70:	e7fe      	b.n	8007f70 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007f72:	f001 ffb1 	bl	8009ed8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f7a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d01f      	beq.n	8007fc2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007f82:	68b9      	ldr	r1, [r7, #8]
 8007f84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f86:	f000 fa1b 	bl	80083c0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f8c:	1e5a      	subs	r2, r3, #1
 8007f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f90:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f94:	691b      	ldr	r3, [r3, #16]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d00f      	beq.n	8007fba <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f9c:	3310      	adds	r3, #16
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	f000 ff80 	bl	8008ea4 <xTaskRemoveFromEventList>
 8007fa4:	4603      	mov	r3, r0
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d007      	beq.n	8007fba <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007faa:	4b3d      	ldr	r3, [pc, #244]	; (80080a0 <xQueueReceive+0x1bc>)
 8007fac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007fb0:	601a      	str	r2, [r3, #0]
 8007fb2:	f3bf 8f4f 	dsb	sy
 8007fb6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007fba:	f001 ffbd 	bl	8009f38 <vPortExitCritical>
				return pdPASS;
 8007fbe:	2301      	movs	r3, #1
 8007fc0:	e069      	b.n	8008096 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d103      	bne.n	8007fd0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007fc8:	f001 ffb6 	bl	8009f38 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007fcc:	2300      	movs	r3, #0
 8007fce:	e062      	b.n	8008096 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007fd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d106      	bne.n	8007fe4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007fd6:	f107 0310 	add.w	r3, r7, #16
 8007fda:	4618      	mov	r0, r3
 8007fdc:	f000 ffc6 	bl	8008f6c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007fe0:	2301      	movs	r3, #1
 8007fe2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007fe4:	f001 ffa8 	bl	8009f38 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007fe8:	f000 fd26 	bl	8008a38 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007fec:	f001 ff74 	bl	8009ed8 <vPortEnterCritical>
 8007ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ff2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007ff6:	b25b      	sxtb	r3, r3
 8007ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ffc:	d103      	bne.n	8008006 <xQueueReceive+0x122>
 8007ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008000:	2200      	movs	r2, #0
 8008002:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008008:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800800c:	b25b      	sxtb	r3, r3
 800800e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008012:	d103      	bne.n	800801c <xQueueReceive+0x138>
 8008014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008016:	2200      	movs	r2, #0
 8008018:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800801c:	f001 ff8c 	bl	8009f38 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008020:	1d3a      	adds	r2, r7, #4
 8008022:	f107 0310 	add.w	r3, r7, #16
 8008026:	4611      	mov	r1, r2
 8008028:	4618      	mov	r0, r3
 800802a:	f000 ffb5 	bl	8008f98 <xTaskCheckForTimeOut>
 800802e:	4603      	mov	r3, r0
 8008030:	2b00      	cmp	r3, #0
 8008032:	d123      	bne.n	800807c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008034:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008036:	f000 fa3b 	bl	80084b0 <prvIsQueueEmpty>
 800803a:	4603      	mov	r3, r0
 800803c:	2b00      	cmp	r3, #0
 800803e:	d017      	beq.n	8008070 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008042:	3324      	adds	r3, #36	; 0x24
 8008044:	687a      	ldr	r2, [r7, #4]
 8008046:	4611      	mov	r1, r2
 8008048:	4618      	mov	r0, r3
 800804a:	f000 fedb 	bl	8008e04 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800804e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008050:	f000 f9dc 	bl	800840c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008054:	f000 fcfe 	bl	8008a54 <xTaskResumeAll>
 8008058:	4603      	mov	r3, r0
 800805a:	2b00      	cmp	r3, #0
 800805c:	d189      	bne.n	8007f72 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800805e:	4b10      	ldr	r3, [pc, #64]	; (80080a0 <xQueueReceive+0x1bc>)
 8008060:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008064:	601a      	str	r2, [r3, #0]
 8008066:	f3bf 8f4f 	dsb	sy
 800806a:	f3bf 8f6f 	isb	sy
 800806e:	e780      	b.n	8007f72 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008070:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008072:	f000 f9cb 	bl	800840c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008076:	f000 fced 	bl	8008a54 <xTaskResumeAll>
 800807a:	e77a      	b.n	8007f72 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800807c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800807e:	f000 f9c5 	bl	800840c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008082:	f000 fce7 	bl	8008a54 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008086:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008088:	f000 fa12 	bl	80084b0 <prvIsQueueEmpty>
 800808c:	4603      	mov	r3, r0
 800808e:	2b00      	cmp	r3, #0
 8008090:	f43f af6f 	beq.w	8007f72 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008094:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008096:	4618      	mov	r0, r3
 8008098:	3730      	adds	r7, #48	; 0x30
 800809a:	46bd      	mov	sp, r7
 800809c:	bd80      	pop	{r7, pc}
 800809e:	bf00      	nop
 80080a0:	e000ed04 	.word	0xe000ed04

080080a4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b08e      	sub	sp, #56	; 0x38
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
 80080ac:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80080ae:	2300      	movs	r3, #0
 80080b0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80080b6:	2300      	movs	r3, #0
 80080b8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80080ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d10a      	bne.n	80080d6 <xQueueSemaphoreTake+0x32>
        __asm volatile
 80080c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080c4:	f383 8811 	msr	BASEPRI, r3
 80080c8:	f3bf 8f6f 	isb	sy
 80080cc:	f3bf 8f4f 	dsb	sy
 80080d0:	623b      	str	r3, [r7, #32]
    }
 80080d2:	bf00      	nop
 80080d4:	e7fe      	b.n	80080d4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80080d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d00a      	beq.n	80080f4 <xQueueSemaphoreTake+0x50>
        __asm volatile
 80080de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080e2:	f383 8811 	msr	BASEPRI, r3
 80080e6:	f3bf 8f6f 	isb	sy
 80080ea:	f3bf 8f4f 	dsb	sy
 80080ee:	61fb      	str	r3, [r7, #28]
    }
 80080f0:	bf00      	nop
 80080f2:	e7fe      	b.n	80080f2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80080f4:	f001 f874 	bl	80091e0 <xTaskGetSchedulerState>
 80080f8:	4603      	mov	r3, r0
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d102      	bne.n	8008104 <xQueueSemaphoreTake+0x60>
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d101      	bne.n	8008108 <xQueueSemaphoreTake+0x64>
 8008104:	2301      	movs	r3, #1
 8008106:	e000      	b.n	800810a <xQueueSemaphoreTake+0x66>
 8008108:	2300      	movs	r3, #0
 800810a:	2b00      	cmp	r3, #0
 800810c:	d10a      	bne.n	8008124 <xQueueSemaphoreTake+0x80>
        __asm volatile
 800810e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008112:	f383 8811 	msr	BASEPRI, r3
 8008116:	f3bf 8f6f 	isb	sy
 800811a:	f3bf 8f4f 	dsb	sy
 800811e:	61bb      	str	r3, [r7, #24]
    }
 8008120:	bf00      	nop
 8008122:	e7fe      	b.n	8008122 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008124:	f001 fed8 	bl	8009ed8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800812a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800812c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800812e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008130:	2b00      	cmp	r3, #0
 8008132:	d024      	beq.n	800817e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008136:	1e5a      	subs	r2, r3, #1
 8008138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800813a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800813c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d104      	bne.n	800814e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008144:	f001 f9c2 	bl	80094cc <pvTaskIncrementMutexHeldCount>
 8008148:	4602      	mov	r2, r0
 800814a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800814c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800814e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008150:	691b      	ldr	r3, [r3, #16]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d00f      	beq.n	8008176 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008158:	3310      	adds	r3, #16
 800815a:	4618      	mov	r0, r3
 800815c:	f000 fea2 	bl	8008ea4 <xTaskRemoveFromEventList>
 8008160:	4603      	mov	r3, r0
 8008162:	2b00      	cmp	r3, #0
 8008164:	d007      	beq.n	8008176 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008166:	4b54      	ldr	r3, [pc, #336]	; (80082b8 <xQueueSemaphoreTake+0x214>)
 8008168:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800816c:	601a      	str	r2, [r3, #0]
 800816e:	f3bf 8f4f 	dsb	sy
 8008172:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008176:	f001 fedf 	bl	8009f38 <vPortExitCritical>
				return pdPASS;
 800817a:	2301      	movs	r3, #1
 800817c:	e097      	b.n	80082ae <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800817e:	683b      	ldr	r3, [r7, #0]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d111      	bne.n	80081a8 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008186:	2b00      	cmp	r3, #0
 8008188:	d00a      	beq.n	80081a0 <xQueueSemaphoreTake+0xfc>
        __asm volatile
 800818a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800818e:	f383 8811 	msr	BASEPRI, r3
 8008192:	f3bf 8f6f 	isb	sy
 8008196:	f3bf 8f4f 	dsb	sy
 800819a:	617b      	str	r3, [r7, #20]
    }
 800819c:	bf00      	nop
 800819e:	e7fe      	b.n	800819e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80081a0:	f001 feca 	bl	8009f38 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80081a4:	2300      	movs	r3, #0
 80081a6:	e082      	b.n	80082ae <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80081a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d106      	bne.n	80081bc <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80081ae:	f107 030c 	add.w	r3, r7, #12
 80081b2:	4618      	mov	r0, r3
 80081b4:	f000 feda 	bl	8008f6c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80081b8:	2301      	movs	r3, #1
 80081ba:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80081bc:	f001 febc 	bl	8009f38 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80081c0:	f000 fc3a 	bl	8008a38 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80081c4:	f001 fe88 	bl	8009ed8 <vPortEnterCritical>
 80081c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80081ce:	b25b      	sxtb	r3, r3
 80081d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081d4:	d103      	bne.n	80081de <xQueueSemaphoreTake+0x13a>
 80081d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081d8:	2200      	movs	r2, #0
 80081da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80081de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80081e4:	b25b      	sxtb	r3, r3
 80081e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081ea:	d103      	bne.n	80081f4 <xQueueSemaphoreTake+0x150>
 80081ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081ee:	2200      	movs	r2, #0
 80081f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80081f4:	f001 fea0 	bl	8009f38 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80081f8:	463a      	mov	r2, r7
 80081fa:	f107 030c 	add.w	r3, r7, #12
 80081fe:	4611      	mov	r1, r2
 8008200:	4618      	mov	r0, r3
 8008202:	f000 fec9 	bl	8008f98 <xTaskCheckForTimeOut>
 8008206:	4603      	mov	r3, r0
 8008208:	2b00      	cmp	r3, #0
 800820a:	d132      	bne.n	8008272 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800820c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800820e:	f000 f94f 	bl	80084b0 <prvIsQueueEmpty>
 8008212:	4603      	mov	r3, r0
 8008214:	2b00      	cmp	r3, #0
 8008216:	d026      	beq.n	8008266 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d109      	bne.n	8008234 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8008220:	f001 fe5a 	bl	8009ed8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008226:	689b      	ldr	r3, [r3, #8]
 8008228:	4618      	mov	r0, r3
 800822a:	f000 fff7 	bl	800921c <xTaskPriorityInherit>
 800822e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8008230:	f001 fe82 	bl	8009f38 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008236:	3324      	adds	r3, #36	; 0x24
 8008238:	683a      	ldr	r2, [r7, #0]
 800823a:	4611      	mov	r1, r2
 800823c:	4618      	mov	r0, r3
 800823e:	f000 fde1 	bl	8008e04 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008242:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008244:	f000 f8e2 	bl	800840c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008248:	f000 fc04 	bl	8008a54 <xTaskResumeAll>
 800824c:	4603      	mov	r3, r0
 800824e:	2b00      	cmp	r3, #0
 8008250:	f47f af68 	bne.w	8008124 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8008254:	4b18      	ldr	r3, [pc, #96]	; (80082b8 <xQueueSemaphoreTake+0x214>)
 8008256:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800825a:	601a      	str	r2, [r3, #0]
 800825c:	f3bf 8f4f 	dsb	sy
 8008260:	f3bf 8f6f 	isb	sy
 8008264:	e75e      	b.n	8008124 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8008266:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008268:	f000 f8d0 	bl	800840c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800826c:	f000 fbf2 	bl	8008a54 <xTaskResumeAll>
 8008270:	e758      	b.n	8008124 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8008272:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008274:	f000 f8ca 	bl	800840c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008278:	f000 fbec 	bl	8008a54 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800827c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800827e:	f000 f917 	bl	80084b0 <prvIsQueueEmpty>
 8008282:	4603      	mov	r3, r0
 8008284:	2b00      	cmp	r3, #0
 8008286:	f43f af4d 	beq.w	8008124 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800828a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800828c:	2b00      	cmp	r3, #0
 800828e:	d00d      	beq.n	80082ac <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8008290:	f001 fe22 	bl	8009ed8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008294:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008296:	f000 f811 	bl	80082bc <prvGetDisinheritPriorityAfterTimeout>
 800829a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800829c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800829e:	689b      	ldr	r3, [r3, #8]
 80082a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80082a2:	4618      	mov	r0, r3
 80082a4:	f001 f890 	bl	80093c8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80082a8:	f001 fe46 	bl	8009f38 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80082ac:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80082ae:	4618      	mov	r0, r3
 80082b0:	3738      	adds	r7, #56	; 0x38
 80082b2:	46bd      	mov	sp, r7
 80082b4:	bd80      	pop	{r7, pc}
 80082b6:	bf00      	nop
 80082b8:	e000ed04 	.word	0xe000ed04

080082bc <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80082bc:	b480      	push	{r7}
 80082be:	b085      	sub	sp, #20
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d006      	beq.n	80082da <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80082d6:	60fb      	str	r3, [r7, #12]
 80082d8:	e001      	b.n	80082de <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80082da:	2300      	movs	r3, #0
 80082dc:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80082de:	68fb      	ldr	r3, [r7, #12]
	}
 80082e0:	4618      	mov	r0, r3
 80082e2:	3714      	adds	r7, #20
 80082e4:	46bd      	mov	sp, r7
 80082e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ea:	4770      	bx	lr

080082ec <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b086      	sub	sp, #24
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	60f8      	str	r0, [r7, #12]
 80082f4:	60b9      	str	r1, [r7, #8]
 80082f6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80082f8:	2300      	movs	r3, #0
 80082fa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008300:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008306:	2b00      	cmp	r3, #0
 8008308:	d10d      	bne.n	8008326 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d14d      	bne.n	80083ae <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	689b      	ldr	r3, [r3, #8]
 8008316:	4618      	mov	r0, r3
 8008318:	f000 ffe8 	bl	80092ec <xTaskPriorityDisinherit>
 800831c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	2200      	movs	r2, #0
 8008322:	609a      	str	r2, [r3, #8]
 8008324:	e043      	b.n	80083ae <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d119      	bne.n	8008360 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	6858      	ldr	r0, [r3, #4]
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008334:	461a      	mov	r2, r3
 8008336:	68b9      	ldr	r1, [r7, #8]
 8008338:	f002 f91a 	bl	800a570 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	685a      	ldr	r2, [r3, #4]
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008344:	441a      	add	r2, r3
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	685a      	ldr	r2, [r3, #4]
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	689b      	ldr	r3, [r3, #8]
 8008352:	429a      	cmp	r2, r3
 8008354:	d32b      	bcc.n	80083ae <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	681a      	ldr	r2, [r3, #0]
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	605a      	str	r2, [r3, #4]
 800835e:	e026      	b.n	80083ae <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	68d8      	ldr	r0, [r3, #12]
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008368:	461a      	mov	r2, r3
 800836a:	68b9      	ldr	r1, [r7, #8]
 800836c:	f002 f900 	bl	800a570 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	68da      	ldr	r2, [r3, #12]
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008378:	425b      	negs	r3, r3
 800837a:	441a      	add	r2, r3
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	68da      	ldr	r2, [r3, #12]
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	429a      	cmp	r2, r3
 800838a:	d207      	bcs.n	800839c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	689a      	ldr	r2, [r3, #8]
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008394:	425b      	negs	r3, r3
 8008396:	441a      	add	r2, r3
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2b02      	cmp	r3, #2
 80083a0:	d105      	bne.n	80083ae <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80083a2:	693b      	ldr	r3, [r7, #16]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d002      	beq.n	80083ae <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80083a8:	693b      	ldr	r3, [r7, #16]
 80083aa:	3b01      	subs	r3, #1
 80083ac:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80083ae:	693b      	ldr	r3, [r7, #16]
 80083b0:	1c5a      	adds	r2, r3, #1
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80083b6:	697b      	ldr	r3, [r7, #20]
}
 80083b8:	4618      	mov	r0, r3
 80083ba:	3718      	adds	r7, #24
 80083bc:	46bd      	mov	sp, r7
 80083be:	bd80      	pop	{r7, pc}

080083c0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b082      	sub	sp, #8
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
 80083c8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d018      	beq.n	8008404 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	68da      	ldr	r2, [r3, #12]
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083da:	441a      	add	r2, r3
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	68da      	ldr	r2, [r3, #12]
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	689b      	ldr	r3, [r3, #8]
 80083e8:	429a      	cmp	r2, r3
 80083ea:	d303      	bcc.n	80083f4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681a      	ldr	r2, [r3, #0]
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	68d9      	ldr	r1, [r3, #12]
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083fc:	461a      	mov	r2, r3
 80083fe:	6838      	ldr	r0, [r7, #0]
 8008400:	f002 f8b6 	bl	800a570 <memcpy>
	}
}
 8008404:	bf00      	nop
 8008406:	3708      	adds	r7, #8
 8008408:	46bd      	mov	sp, r7
 800840a:	bd80      	pop	{r7, pc}

0800840c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800840c:	b580      	push	{r7, lr}
 800840e:	b084      	sub	sp, #16
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008414:	f001 fd60 	bl	8009ed8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800841e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008420:	e011      	b.n	8008446 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008426:	2b00      	cmp	r3, #0
 8008428:	d012      	beq.n	8008450 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	3324      	adds	r3, #36	; 0x24
 800842e:	4618      	mov	r0, r3
 8008430:	f000 fd38 	bl	8008ea4 <xTaskRemoveFromEventList>
 8008434:	4603      	mov	r3, r0
 8008436:	2b00      	cmp	r3, #0
 8008438:	d001      	beq.n	800843e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800843a:	f000 fe0f 	bl	800905c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800843e:	7bfb      	ldrb	r3, [r7, #15]
 8008440:	3b01      	subs	r3, #1
 8008442:	b2db      	uxtb	r3, r3
 8008444:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008446:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800844a:	2b00      	cmp	r3, #0
 800844c:	dce9      	bgt.n	8008422 <prvUnlockQueue+0x16>
 800844e:	e000      	b.n	8008452 <prvUnlockQueue+0x46>
					break;
 8008450:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	22ff      	movs	r2, #255	; 0xff
 8008456:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800845a:	f001 fd6d 	bl	8009f38 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800845e:	f001 fd3b 	bl	8009ed8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008468:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800846a:	e011      	b.n	8008490 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	691b      	ldr	r3, [r3, #16]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d012      	beq.n	800849a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	3310      	adds	r3, #16
 8008478:	4618      	mov	r0, r3
 800847a:	f000 fd13 	bl	8008ea4 <xTaskRemoveFromEventList>
 800847e:	4603      	mov	r3, r0
 8008480:	2b00      	cmp	r3, #0
 8008482:	d001      	beq.n	8008488 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008484:	f000 fdea 	bl	800905c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008488:	7bbb      	ldrb	r3, [r7, #14]
 800848a:	3b01      	subs	r3, #1
 800848c:	b2db      	uxtb	r3, r3
 800848e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008490:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008494:	2b00      	cmp	r3, #0
 8008496:	dce9      	bgt.n	800846c <prvUnlockQueue+0x60>
 8008498:	e000      	b.n	800849c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800849a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	22ff      	movs	r2, #255	; 0xff
 80084a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80084a4:	f001 fd48 	bl	8009f38 <vPortExitCritical>
}
 80084a8:	bf00      	nop
 80084aa:	3710      	adds	r7, #16
 80084ac:	46bd      	mov	sp, r7
 80084ae:	bd80      	pop	{r7, pc}

080084b0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b084      	sub	sp, #16
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80084b8:	f001 fd0e 	bl	8009ed8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d102      	bne.n	80084ca <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80084c4:	2301      	movs	r3, #1
 80084c6:	60fb      	str	r3, [r7, #12]
 80084c8:	e001      	b.n	80084ce <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80084ca:	2300      	movs	r3, #0
 80084cc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80084ce:	f001 fd33 	bl	8009f38 <vPortExitCritical>

	return xReturn;
 80084d2:	68fb      	ldr	r3, [r7, #12]
}
 80084d4:	4618      	mov	r0, r3
 80084d6:	3710      	adds	r7, #16
 80084d8:	46bd      	mov	sp, r7
 80084da:	bd80      	pop	{r7, pc}

080084dc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80084dc:	b580      	push	{r7, lr}
 80084de:	b084      	sub	sp, #16
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80084e4:	f001 fcf8 	bl	8009ed8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084f0:	429a      	cmp	r2, r3
 80084f2:	d102      	bne.n	80084fa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80084f4:	2301      	movs	r3, #1
 80084f6:	60fb      	str	r3, [r7, #12]
 80084f8:	e001      	b.n	80084fe <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80084fa:	2300      	movs	r3, #0
 80084fc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80084fe:	f001 fd1b 	bl	8009f38 <vPortExitCritical>

	return xReturn;
 8008502:	68fb      	ldr	r3, [r7, #12]
}
 8008504:	4618      	mov	r0, r3
 8008506:	3710      	adds	r7, #16
 8008508:	46bd      	mov	sp, r7
 800850a:	bd80      	pop	{r7, pc}

0800850c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800850c:	b480      	push	{r7}
 800850e:	b085      	sub	sp, #20
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
 8008514:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008516:	2300      	movs	r3, #0
 8008518:	60fb      	str	r3, [r7, #12]
 800851a:	e014      	b.n	8008546 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800851c:	4a0f      	ldr	r2, [pc, #60]	; (800855c <vQueueAddToRegistry+0x50>)
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008524:	2b00      	cmp	r3, #0
 8008526:	d10b      	bne.n	8008540 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008528:	490c      	ldr	r1, [pc, #48]	; (800855c <vQueueAddToRegistry+0x50>)
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	683a      	ldr	r2, [r7, #0]
 800852e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008532:	4a0a      	ldr	r2, [pc, #40]	; (800855c <vQueueAddToRegistry+0x50>)
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	00db      	lsls	r3, r3, #3
 8008538:	4413      	add	r3, r2
 800853a:	687a      	ldr	r2, [r7, #4]
 800853c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800853e:	e006      	b.n	800854e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	3301      	adds	r3, #1
 8008544:	60fb      	str	r3, [r7, #12]
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	2b07      	cmp	r3, #7
 800854a:	d9e7      	bls.n	800851c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800854c:	bf00      	nop
 800854e:	bf00      	nop
 8008550:	3714      	adds	r7, #20
 8008552:	46bd      	mov	sp, r7
 8008554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008558:	4770      	bx	lr
 800855a:	bf00      	nop
 800855c:	200001cc 	.word	0x200001cc

08008560 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008560:	b580      	push	{r7, lr}
 8008562:	b086      	sub	sp, #24
 8008564:	af00      	add	r7, sp, #0
 8008566:	60f8      	str	r0, [r7, #12]
 8008568:	60b9      	str	r1, [r7, #8]
 800856a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008570:	f001 fcb2 	bl	8009ed8 <vPortEnterCritical>
 8008574:	697b      	ldr	r3, [r7, #20]
 8008576:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800857a:	b25b      	sxtb	r3, r3
 800857c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008580:	d103      	bne.n	800858a <vQueueWaitForMessageRestricted+0x2a>
 8008582:	697b      	ldr	r3, [r7, #20]
 8008584:	2200      	movs	r2, #0
 8008586:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800858a:	697b      	ldr	r3, [r7, #20]
 800858c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008590:	b25b      	sxtb	r3, r3
 8008592:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008596:	d103      	bne.n	80085a0 <vQueueWaitForMessageRestricted+0x40>
 8008598:	697b      	ldr	r3, [r7, #20]
 800859a:	2200      	movs	r2, #0
 800859c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80085a0:	f001 fcca 	bl	8009f38 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80085a4:	697b      	ldr	r3, [r7, #20]
 80085a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d106      	bne.n	80085ba <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80085ac:	697b      	ldr	r3, [r7, #20]
 80085ae:	3324      	adds	r3, #36	; 0x24
 80085b0:	687a      	ldr	r2, [r7, #4]
 80085b2:	68b9      	ldr	r1, [r7, #8]
 80085b4:	4618      	mov	r0, r3
 80085b6:	f000 fc49 	bl	8008e4c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80085ba:	6978      	ldr	r0, [r7, #20]
 80085bc:	f7ff ff26 	bl	800840c <prvUnlockQueue>
	}
 80085c0:	bf00      	nop
 80085c2:	3718      	adds	r7, #24
 80085c4:	46bd      	mov	sp, r7
 80085c6:	bd80      	pop	{r7, pc}

080085c8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b08c      	sub	sp, #48	; 0x30
 80085cc:	af04      	add	r7, sp, #16
 80085ce:	60f8      	str	r0, [r7, #12]
 80085d0:	60b9      	str	r1, [r7, #8]
 80085d2:	603b      	str	r3, [r7, #0]
 80085d4:	4613      	mov	r3, r2
 80085d6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80085d8:	88fb      	ldrh	r3, [r7, #6]
 80085da:	009b      	lsls	r3, r3, #2
 80085dc:	4618      	mov	r0, r3
 80085de:	f001 fd93 	bl	800a108 <pvPortMalloc>
 80085e2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80085e4:	697b      	ldr	r3, [r7, #20]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d00e      	beq.n	8008608 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80085ea:	2060      	movs	r0, #96	; 0x60
 80085ec:	f001 fd8c 	bl	800a108 <pvPortMalloc>
 80085f0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80085f2:	69fb      	ldr	r3, [r7, #28]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d003      	beq.n	8008600 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80085f8:	69fb      	ldr	r3, [r7, #28]
 80085fa:	697a      	ldr	r2, [r7, #20]
 80085fc:	631a      	str	r2, [r3, #48]	; 0x30
 80085fe:	e005      	b.n	800860c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008600:	6978      	ldr	r0, [r7, #20]
 8008602:	f001 fe3b 	bl	800a27c <vPortFree>
 8008606:	e001      	b.n	800860c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008608:	2300      	movs	r3, #0
 800860a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800860c:	69fb      	ldr	r3, [r7, #28]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d013      	beq.n	800863a <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008612:	88fa      	ldrh	r2, [r7, #6]
 8008614:	2300      	movs	r3, #0
 8008616:	9303      	str	r3, [sp, #12]
 8008618:	69fb      	ldr	r3, [r7, #28]
 800861a:	9302      	str	r3, [sp, #8]
 800861c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800861e:	9301      	str	r3, [sp, #4]
 8008620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008622:	9300      	str	r3, [sp, #0]
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	68b9      	ldr	r1, [r7, #8]
 8008628:	68f8      	ldr	r0, [r7, #12]
 800862a:	f000 f80e 	bl	800864a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800862e:	69f8      	ldr	r0, [r7, #28]
 8008630:	f000 f89e 	bl	8008770 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008634:	2301      	movs	r3, #1
 8008636:	61bb      	str	r3, [r7, #24]
 8008638:	e002      	b.n	8008640 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800863a:	f04f 33ff 	mov.w	r3, #4294967295
 800863e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008640:	69bb      	ldr	r3, [r7, #24]
	}
 8008642:	4618      	mov	r0, r3
 8008644:	3720      	adds	r7, #32
 8008646:	46bd      	mov	sp, r7
 8008648:	bd80      	pop	{r7, pc}

0800864a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800864a:	b580      	push	{r7, lr}
 800864c:	b088      	sub	sp, #32
 800864e:	af00      	add	r7, sp, #0
 8008650:	60f8      	str	r0, [r7, #12]
 8008652:	60b9      	str	r1, [r7, #8]
 8008654:	607a      	str	r2, [r7, #4]
 8008656:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800865a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	009b      	lsls	r3, r3, #2
 8008660:	461a      	mov	r2, r3
 8008662:	21a5      	movs	r1, #165	; 0xa5
 8008664:	f001 ff57 	bl	800a516 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800866a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008672:	3b01      	subs	r3, #1
 8008674:	009b      	lsls	r3, r3, #2
 8008676:	4413      	add	r3, r2
 8008678:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800867a:	69bb      	ldr	r3, [r7, #24]
 800867c:	f023 0307 	bic.w	r3, r3, #7
 8008680:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008682:	69bb      	ldr	r3, [r7, #24]
 8008684:	f003 0307 	and.w	r3, r3, #7
 8008688:	2b00      	cmp	r3, #0
 800868a:	d00a      	beq.n	80086a2 <prvInitialiseNewTask+0x58>
        __asm volatile
 800868c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008690:	f383 8811 	msr	BASEPRI, r3
 8008694:	f3bf 8f6f 	isb	sy
 8008698:	f3bf 8f4f 	dsb	sy
 800869c:	617b      	str	r3, [r7, #20]
    }
 800869e:	bf00      	nop
 80086a0:	e7fe      	b.n	80086a0 <prvInitialiseNewTask+0x56>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 80086a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086a4:	69ba      	ldr	r2, [r7, #24]
 80086a6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80086a8:	68bb      	ldr	r3, [r7, #8]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d01f      	beq.n	80086ee <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80086ae:	2300      	movs	r3, #0
 80086b0:	61fb      	str	r3, [r7, #28]
 80086b2:	e012      	b.n	80086da <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80086b4:	68ba      	ldr	r2, [r7, #8]
 80086b6:	69fb      	ldr	r3, [r7, #28]
 80086b8:	4413      	add	r3, r2
 80086ba:	7819      	ldrb	r1, [r3, #0]
 80086bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80086be:	69fb      	ldr	r3, [r7, #28]
 80086c0:	4413      	add	r3, r2
 80086c2:	3334      	adds	r3, #52	; 0x34
 80086c4:	460a      	mov	r2, r1
 80086c6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80086c8:	68ba      	ldr	r2, [r7, #8]
 80086ca:	69fb      	ldr	r3, [r7, #28]
 80086cc:	4413      	add	r3, r2
 80086ce:	781b      	ldrb	r3, [r3, #0]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d006      	beq.n	80086e2 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80086d4:	69fb      	ldr	r3, [r7, #28]
 80086d6:	3301      	adds	r3, #1
 80086d8:	61fb      	str	r3, [r7, #28]
 80086da:	69fb      	ldr	r3, [r7, #28]
 80086dc:	2b0f      	cmp	r3, #15
 80086de:	d9e9      	bls.n	80086b4 <prvInitialiseNewTask+0x6a>
 80086e0:	e000      	b.n	80086e4 <prvInitialiseNewTask+0x9a>
			{
				break;
 80086e2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80086e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086e6:	2200      	movs	r2, #0
 80086e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80086ec:	e003      	b.n	80086f6 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80086ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086f0:	2200      	movs	r2, #0
 80086f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80086f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086f8:	2b37      	cmp	r3, #55	; 0x37
 80086fa:	d901      	bls.n	8008700 <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80086fc:	2337      	movs	r3, #55	; 0x37
 80086fe:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008702:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008704:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008708:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800870a:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
 800870c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800870e:	2200      	movs	r2, #0
 8008710:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008714:	3304      	adds	r3, #4
 8008716:	4618      	mov	r0, r3
 8008718:	f7ff f8c2 	bl	80078a0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800871c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800871e:	3318      	adds	r3, #24
 8008720:	4618      	mov	r0, r3
 8008722:	f7ff f8bd 	bl	80078a0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008728:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800872a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800872c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800872e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008734:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008738:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800873a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800873c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800873e:	2200      	movs	r2, #0
 8008740:	659a      	str	r2, [r3, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008744:	2200      	movs	r2, #0
 8008746:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800874a:	683a      	ldr	r2, [r7, #0]
 800874c:	68f9      	ldr	r1, [r7, #12]
 800874e:	69b8      	ldr	r0, [r7, #24]
 8008750:	f001 fa92 	bl	8009c78 <pxPortInitialiseStack>
 8008754:	4602      	mov	r2, r0
 8008756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008758:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800875a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800875c:	2b00      	cmp	r3, #0
 800875e:	d002      	beq.n	8008766 <prvInitialiseNewTask+0x11c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008762:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008764:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008766:	bf00      	nop
 8008768:	3720      	adds	r7, #32
 800876a:	46bd      	mov	sp, r7
 800876c:	bd80      	pop	{r7, pc}
	...

08008770 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008770:	b580      	push	{r7, lr}
 8008772:	b082      	sub	sp, #8
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008778:	f001 fbae 	bl	8009ed8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800877c:	4b2d      	ldr	r3, [pc, #180]	; (8008834 <prvAddNewTaskToReadyList+0xc4>)
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	3301      	adds	r3, #1
 8008782:	4a2c      	ldr	r2, [pc, #176]	; (8008834 <prvAddNewTaskToReadyList+0xc4>)
 8008784:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008786:	4b2c      	ldr	r3, [pc, #176]	; (8008838 <prvAddNewTaskToReadyList+0xc8>)
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d109      	bne.n	80087a2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800878e:	4a2a      	ldr	r2, [pc, #168]	; (8008838 <prvAddNewTaskToReadyList+0xc8>)
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008794:	4b27      	ldr	r3, [pc, #156]	; (8008834 <prvAddNewTaskToReadyList+0xc4>)
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	2b01      	cmp	r3, #1
 800879a:	d110      	bne.n	80087be <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800879c:	f000 fc82 	bl	80090a4 <prvInitialiseTaskLists>
 80087a0:	e00d      	b.n	80087be <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80087a2:	4b26      	ldr	r3, [pc, #152]	; (800883c <prvAddNewTaskToReadyList+0xcc>)
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d109      	bne.n	80087be <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80087aa:	4b23      	ldr	r3, [pc, #140]	; (8008838 <prvAddNewTaskToReadyList+0xc8>)
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087b4:	429a      	cmp	r2, r3
 80087b6:	d802      	bhi.n	80087be <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80087b8:	4a1f      	ldr	r2, [pc, #124]	; (8008838 <prvAddNewTaskToReadyList+0xc8>)
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80087be:	4b20      	ldr	r3, [pc, #128]	; (8008840 <prvAddNewTaskToReadyList+0xd0>)
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	3301      	adds	r3, #1
 80087c4:	4a1e      	ldr	r2, [pc, #120]	; (8008840 <prvAddNewTaskToReadyList+0xd0>)
 80087c6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80087c8:	4b1d      	ldr	r3, [pc, #116]	; (8008840 <prvAddNewTaskToReadyList+0xd0>)
 80087ca:	681a      	ldr	r2, [r3, #0]
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	649a      	str	r2, [r3, #72]	; 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087d4:	4b1b      	ldr	r3, [pc, #108]	; (8008844 <prvAddNewTaskToReadyList+0xd4>)
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	429a      	cmp	r2, r3
 80087da:	d903      	bls.n	80087e4 <prvAddNewTaskToReadyList+0x74>
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087e0:	4a18      	ldr	r2, [pc, #96]	; (8008844 <prvAddNewTaskToReadyList+0xd4>)
 80087e2:	6013      	str	r3, [r2, #0]
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087e8:	4613      	mov	r3, r2
 80087ea:	009b      	lsls	r3, r3, #2
 80087ec:	4413      	add	r3, r2
 80087ee:	009b      	lsls	r3, r3, #2
 80087f0:	4a15      	ldr	r2, [pc, #84]	; (8008848 <prvAddNewTaskToReadyList+0xd8>)
 80087f2:	441a      	add	r2, r3
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	3304      	adds	r3, #4
 80087f8:	4619      	mov	r1, r3
 80087fa:	4610      	mov	r0, r2
 80087fc:	f7ff f85d 	bl	80078ba <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008800:	f001 fb9a 	bl	8009f38 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008804:	4b0d      	ldr	r3, [pc, #52]	; (800883c <prvAddNewTaskToReadyList+0xcc>)
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d00e      	beq.n	800882a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800880c:	4b0a      	ldr	r3, [pc, #40]	; (8008838 <prvAddNewTaskToReadyList+0xc8>)
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008816:	429a      	cmp	r2, r3
 8008818:	d207      	bcs.n	800882a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800881a:	4b0c      	ldr	r3, [pc, #48]	; (800884c <prvAddNewTaskToReadyList+0xdc>)
 800881c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008820:	601a      	str	r2, [r3, #0]
 8008822:	f3bf 8f4f 	dsb	sy
 8008826:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800882a:	bf00      	nop
 800882c:	3708      	adds	r7, #8
 800882e:	46bd      	mov	sp, r7
 8008830:	bd80      	pop	{r7, pc}
 8008832:	bf00      	nop
 8008834:	200006e0 	.word	0x200006e0
 8008838:	2000020c 	.word	0x2000020c
 800883c:	200006ec 	.word	0x200006ec
 8008840:	200006fc 	.word	0x200006fc
 8008844:	200006e8 	.word	0x200006e8
 8008848:	20000210 	.word	0x20000210
 800884c:	e000ed04 	.word	0xe000ed04

08008850 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8008850:	b580      	push	{r7, lr}
 8008852:	b084      	sub	sp, #16
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8008858:	f001 fb3e 	bl	8009ed8 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d102      	bne.n	8008868 <vTaskDelete+0x18>
 8008862:	4b2c      	ldr	r3, [pc, #176]	; (8008914 <vTaskDelete+0xc4>)
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	e000      	b.n	800886a <vTaskDelete+0x1a>
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	3304      	adds	r3, #4
 8008870:	4618      	mov	r0, r3
 8008872:	f7ff f87f 	bl	8007974 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800887a:	2b00      	cmp	r3, #0
 800887c:	d004      	beq.n	8008888 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	3318      	adds	r3, #24
 8008882:	4618      	mov	r0, r3
 8008884:	f7ff f876 	bl	8007974 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8008888:	4b23      	ldr	r3, [pc, #140]	; (8008918 <vTaskDelete+0xc8>)
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	3301      	adds	r3, #1
 800888e:	4a22      	ldr	r2, [pc, #136]	; (8008918 <vTaskDelete+0xc8>)
 8008890:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8008892:	4b20      	ldr	r3, [pc, #128]	; (8008914 <vTaskDelete+0xc4>)
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	68fa      	ldr	r2, [r7, #12]
 8008898:	429a      	cmp	r2, r3
 800889a:	d10b      	bne.n	80088b4 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	3304      	adds	r3, #4
 80088a0:	4619      	mov	r1, r3
 80088a2:	481e      	ldr	r0, [pc, #120]	; (800891c <vTaskDelete+0xcc>)
 80088a4:	f7ff f809 	bl	80078ba <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 80088a8:	4b1d      	ldr	r3, [pc, #116]	; (8008920 <vTaskDelete+0xd0>)
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	3301      	adds	r3, #1
 80088ae:	4a1c      	ldr	r2, [pc, #112]	; (8008920 <vTaskDelete+0xd0>)
 80088b0:	6013      	str	r3, [r2, #0]
 80088b2:	e009      	b.n	80088c8 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 80088b4:	4b1b      	ldr	r3, [pc, #108]	; (8008924 <vTaskDelete+0xd4>)
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	3b01      	subs	r3, #1
 80088ba:	4a1a      	ldr	r2, [pc, #104]	; (8008924 <vTaskDelete+0xd4>)
 80088bc:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 80088be:	68f8      	ldr	r0, [r7, #12]
 80088c0:	f000 fc5e 	bl	8009180 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 80088c4:	f000 fc6c 	bl	80091a0 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 80088c8:	f001 fb36 	bl	8009f38 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 80088cc:	4b16      	ldr	r3, [pc, #88]	; (8008928 <vTaskDelete+0xd8>)
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d01b      	beq.n	800890c <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 80088d4:	4b0f      	ldr	r3, [pc, #60]	; (8008914 <vTaskDelete+0xc4>)
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	68fa      	ldr	r2, [r7, #12]
 80088da:	429a      	cmp	r2, r3
 80088dc:	d116      	bne.n	800890c <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 80088de:	4b13      	ldr	r3, [pc, #76]	; (800892c <vTaskDelete+0xdc>)
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d00a      	beq.n	80088fc <vTaskDelete+0xac>
        __asm volatile
 80088e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088ea:	f383 8811 	msr	BASEPRI, r3
 80088ee:	f3bf 8f6f 	isb	sy
 80088f2:	f3bf 8f4f 	dsb	sy
 80088f6:	60bb      	str	r3, [r7, #8]
    }
 80088f8:	bf00      	nop
 80088fa:	e7fe      	b.n	80088fa <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 80088fc:	4b0c      	ldr	r3, [pc, #48]	; (8008930 <vTaskDelete+0xe0>)
 80088fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008902:	601a      	str	r2, [r3, #0]
 8008904:	f3bf 8f4f 	dsb	sy
 8008908:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800890c:	bf00      	nop
 800890e:	3710      	adds	r7, #16
 8008910:	46bd      	mov	sp, r7
 8008912:	bd80      	pop	{r7, pc}
 8008914:	2000020c 	.word	0x2000020c
 8008918:	200006fc 	.word	0x200006fc
 800891c:	200006b4 	.word	0x200006b4
 8008920:	200006c8 	.word	0x200006c8
 8008924:	200006e0 	.word	0x200006e0
 8008928:	200006ec 	.word	0x200006ec
 800892c:	20000708 	.word	0x20000708
 8008930:	e000ed04 	.word	0xe000ed04

08008934 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008934:	b580      	push	{r7, lr}
 8008936:	b084      	sub	sp, #16
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800893c:	2300      	movs	r3, #0
 800893e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d017      	beq.n	8008976 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008946:	4b13      	ldr	r3, [pc, #76]	; (8008994 <vTaskDelay+0x60>)
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	2b00      	cmp	r3, #0
 800894c:	d00a      	beq.n	8008964 <vTaskDelay+0x30>
        __asm volatile
 800894e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008952:	f383 8811 	msr	BASEPRI, r3
 8008956:	f3bf 8f6f 	isb	sy
 800895a:	f3bf 8f4f 	dsb	sy
 800895e:	60bb      	str	r3, [r7, #8]
    }
 8008960:	bf00      	nop
 8008962:	e7fe      	b.n	8008962 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008964:	f000 f868 	bl	8008a38 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008968:	2100      	movs	r1, #0
 800896a:	6878      	ldr	r0, [r7, #4]
 800896c:	f000 fdc2 	bl	80094f4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008970:	f000 f870 	bl	8008a54 <xTaskResumeAll>
 8008974:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	2b00      	cmp	r3, #0
 800897a:	d107      	bne.n	800898c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800897c:	4b06      	ldr	r3, [pc, #24]	; (8008998 <vTaskDelay+0x64>)
 800897e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008982:	601a      	str	r2, [r3, #0]
 8008984:	f3bf 8f4f 	dsb	sy
 8008988:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800898c:	bf00      	nop
 800898e:	3710      	adds	r7, #16
 8008990:	46bd      	mov	sp, r7
 8008992:	bd80      	pop	{r7, pc}
 8008994:	20000708 	.word	0x20000708
 8008998:	e000ed04 	.word	0xe000ed04

0800899c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800899c:	b580      	push	{r7, lr}
 800899e:	b086      	sub	sp, #24
 80089a0:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 80089a2:	4b1f      	ldr	r3, [pc, #124]	; (8008a20 <vTaskStartScheduler+0x84>)
 80089a4:	9301      	str	r3, [sp, #4]
 80089a6:	2300      	movs	r3, #0
 80089a8:	9300      	str	r3, [sp, #0]
 80089aa:	2300      	movs	r3, #0
 80089ac:	2280      	movs	r2, #128	; 0x80
 80089ae:	491d      	ldr	r1, [pc, #116]	; (8008a24 <vTaskStartScheduler+0x88>)
 80089b0:	481d      	ldr	r0, [pc, #116]	; (8008a28 <vTaskStartScheduler+0x8c>)
 80089b2:	f7ff fe09 	bl	80085c8 <xTaskCreate>
 80089b6:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	2b01      	cmp	r3, #1
 80089bc:	d102      	bne.n	80089c4 <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 80089be:	f000 fded 	bl	800959c <xTimerCreateTimerTask>
 80089c2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	2b01      	cmp	r3, #1
 80089c8:	d116      	bne.n	80089f8 <vTaskStartScheduler+0x5c>
        __asm volatile
 80089ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089ce:	f383 8811 	msr	BASEPRI, r3
 80089d2:	f3bf 8f6f 	isb	sy
 80089d6:	f3bf 8f4f 	dsb	sy
 80089da:	60bb      	str	r3, [r7, #8]
    }
 80089dc:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80089de:	4b13      	ldr	r3, [pc, #76]	; (8008a2c <vTaskStartScheduler+0x90>)
 80089e0:	f04f 32ff 	mov.w	r2, #4294967295
 80089e4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80089e6:	4b12      	ldr	r3, [pc, #72]	; (8008a30 <vTaskStartScheduler+0x94>)
 80089e8:	2201      	movs	r2, #1
 80089ea:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80089ec:	4b11      	ldr	r3, [pc, #68]	; (8008a34 <vTaskStartScheduler+0x98>)
 80089ee:	2200      	movs	r2, #0
 80089f0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80089f2:	f001 f9cf 	bl	8009d94 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80089f6:	e00e      	b.n	8008a16 <vTaskStartScheduler+0x7a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089fe:	d10a      	bne.n	8008a16 <vTaskStartScheduler+0x7a>
        __asm volatile
 8008a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a04:	f383 8811 	msr	BASEPRI, r3
 8008a08:	f3bf 8f6f 	isb	sy
 8008a0c:	f3bf 8f4f 	dsb	sy
 8008a10:	607b      	str	r3, [r7, #4]
    }
 8008a12:	bf00      	nop
 8008a14:	e7fe      	b.n	8008a14 <vTaskStartScheduler+0x78>
}
 8008a16:	bf00      	nop
 8008a18:	3710      	adds	r7, #16
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	bd80      	pop	{r7, pc}
 8008a1e:	bf00      	nop
 8008a20:	20000704 	.word	0x20000704
 8008a24:	0800a5d0 	.word	0x0800a5d0
 8008a28:	08009075 	.word	0x08009075
 8008a2c:	20000700 	.word	0x20000700
 8008a30:	200006ec 	.word	0x200006ec
 8008a34:	200006e4 	.word	0x200006e4

08008a38 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008a38:	b480      	push	{r7}
 8008a3a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008a3c:	4b04      	ldr	r3, [pc, #16]	; (8008a50 <vTaskSuspendAll+0x18>)
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	3301      	adds	r3, #1
 8008a42:	4a03      	ldr	r2, [pc, #12]	; (8008a50 <vTaskSuspendAll+0x18>)
 8008a44:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008a46:	bf00      	nop
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4e:	4770      	bx	lr
 8008a50:	20000708 	.word	0x20000708

08008a54 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008a54:	b580      	push	{r7, lr}
 8008a56:	b084      	sub	sp, #16
 8008a58:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008a5e:	2300      	movs	r3, #0
 8008a60:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008a62:	4b42      	ldr	r3, [pc, #264]	; (8008b6c <xTaskResumeAll+0x118>)
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d10a      	bne.n	8008a80 <xTaskResumeAll+0x2c>
        __asm volatile
 8008a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a6e:	f383 8811 	msr	BASEPRI, r3
 8008a72:	f3bf 8f6f 	isb	sy
 8008a76:	f3bf 8f4f 	dsb	sy
 8008a7a:	603b      	str	r3, [r7, #0]
    }
 8008a7c:	bf00      	nop
 8008a7e:	e7fe      	b.n	8008a7e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008a80:	f001 fa2a 	bl	8009ed8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008a84:	4b39      	ldr	r3, [pc, #228]	; (8008b6c <xTaskResumeAll+0x118>)
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	3b01      	subs	r3, #1
 8008a8a:	4a38      	ldr	r2, [pc, #224]	; (8008b6c <xTaskResumeAll+0x118>)
 8008a8c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008a8e:	4b37      	ldr	r3, [pc, #220]	; (8008b6c <xTaskResumeAll+0x118>)
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d162      	bne.n	8008b5c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008a96:	4b36      	ldr	r3, [pc, #216]	; (8008b70 <xTaskResumeAll+0x11c>)
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d05e      	beq.n	8008b5c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008a9e:	e02f      	b.n	8008b00 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008aa0:	4b34      	ldr	r3, [pc, #208]	; (8008b74 <xTaskResumeAll+0x120>)
 8008aa2:	68db      	ldr	r3, [r3, #12]
 8008aa4:	68db      	ldr	r3, [r3, #12]
 8008aa6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	3318      	adds	r3, #24
 8008aac:	4618      	mov	r0, r3
 8008aae:	f7fe ff61 	bl	8007974 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	3304      	adds	r3, #4
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	f7fe ff5c 	bl	8007974 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ac0:	4b2d      	ldr	r3, [pc, #180]	; (8008b78 <xTaskResumeAll+0x124>)
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	429a      	cmp	r2, r3
 8008ac6:	d903      	bls.n	8008ad0 <xTaskResumeAll+0x7c>
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008acc:	4a2a      	ldr	r2, [pc, #168]	; (8008b78 <xTaskResumeAll+0x124>)
 8008ace:	6013      	str	r3, [r2, #0]
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ad4:	4613      	mov	r3, r2
 8008ad6:	009b      	lsls	r3, r3, #2
 8008ad8:	4413      	add	r3, r2
 8008ada:	009b      	lsls	r3, r3, #2
 8008adc:	4a27      	ldr	r2, [pc, #156]	; (8008b7c <xTaskResumeAll+0x128>)
 8008ade:	441a      	add	r2, r3
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	3304      	adds	r3, #4
 8008ae4:	4619      	mov	r1, r3
 8008ae6:	4610      	mov	r0, r2
 8008ae8:	f7fe fee7 	bl	80078ba <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008af0:	4b23      	ldr	r3, [pc, #140]	; (8008b80 <xTaskResumeAll+0x12c>)
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008af6:	429a      	cmp	r2, r3
 8008af8:	d302      	bcc.n	8008b00 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008afa:	4b22      	ldr	r3, [pc, #136]	; (8008b84 <xTaskResumeAll+0x130>)
 8008afc:	2201      	movs	r2, #1
 8008afe:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008b00:	4b1c      	ldr	r3, [pc, #112]	; (8008b74 <xTaskResumeAll+0x120>)
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d1cb      	bne.n	8008aa0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d001      	beq.n	8008b12 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008b0e:	f000 fb47 	bl	80091a0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008b12:	4b1d      	ldr	r3, [pc, #116]	; (8008b88 <xTaskResumeAll+0x134>)
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d010      	beq.n	8008b40 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008b1e:	f000 f859 	bl	8008bd4 <xTaskIncrementTick>
 8008b22:	4603      	mov	r3, r0
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d002      	beq.n	8008b2e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008b28:	4b16      	ldr	r3, [pc, #88]	; (8008b84 <xTaskResumeAll+0x130>)
 8008b2a:	2201      	movs	r2, #1
 8008b2c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	3b01      	subs	r3, #1
 8008b32:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d1f1      	bne.n	8008b1e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8008b3a:	4b13      	ldr	r3, [pc, #76]	; (8008b88 <xTaskResumeAll+0x134>)
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008b40:	4b10      	ldr	r3, [pc, #64]	; (8008b84 <xTaskResumeAll+0x130>)
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d009      	beq.n	8008b5c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008b48:	2301      	movs	r3, #1
 8008b4a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008b4c:	4b0f      	ldr	r3, [pc, #60]	; (8008b8c <xTaskResumeAll+0x138>)
 8008b4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b52:	601a      	str	r2, [r3, #0]
 8008b54:	f3bf 8f4f 	dsb	sy
 8008b58:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008b5c:	f001 f9ec 	bl	8009f38 <vPortExitCritical>

	return xAlreadyYielded;
 8008b60:	68bb      	ldr	r3, [r7, #8]
}
 8008b62:	4618      	mov	r0, r3
 8008b64:	3710      	adds	r7, #16
 8008b66:	46bd      	mov	sp, r7
 8008b68:	bd80      	pop	{r7, pc}
 8008b6a:	bf00      	nop
 8008b6c:	20000708 	.word	0x20000708
 8008b70:	200006e0 	.word	0x200006e0
 8008b74:	200006a0 	.word	0x200006a0
 8008b78:	200006e8 	.word	0x200006e8
 8008b7c:	20000210 	.word	0x20000210
 8008b80:	2000020c 	.word	0x2000020c
 8008b84:	200006f4 	.word	0x200006f4
 8008b88:	200006f0 	.word	0x200006f0
 8008b8c:	e000ed04 	.word	0xe000ed04

08008b90 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008b90:	b480      	push	{r7}
 8008b92:	b083      	sub	sp, #12
 8008b94:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008b96:	4b05      	ldr	r3, [pc, #20]	; (8008bac <xTaskGetTickCount+0x1c>)
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008b9c:	687b      	ldr	r3, [r7, #4]
}
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	370c      	adds	r7, #12
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba8:	4770      	bx	lr
 8008baa:	bf00      	nop
 8008bac:	200006e4 	.word	0x200006e4

08008bb0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b082      	sub	sp, #8
 8008bb4:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008bb6:	f001 fa67 	bl	800a088 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8008bba:	2300      	movs	r3, #0
 8008bbc:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8008bbe:	4b04      	ldr	r3, [pc, #16]	; (8008bd0 <xTaskGetTickCountFromISR+0x20>)
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008bc4:	683b      	ldr	r3, [r7, #0]
}
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	3708      	adds	r7, #8
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	bd80      	pop	{r7, pc}
 8008bce:	bf00      	nop
 8008bd0:	200006e4 	.word	0x200006e4

08008bd4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	b086      	sub	sp, #24
 8008bd8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008bda:	2300      	movs	r3, #0
 8008bdc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008bde:	4b4f      	ldr	r3, [pc, #316]	; (8008d1c <xTaskIncrementTick+0x148>)
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	f040 808f 	bne.w	8008d06 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008be8:	4b4d      	ldr	r3, [pc, #308]	; (8008d20 <xTaskIncrementTick+0x14c>)
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	3301      	adds	r3, #1
 8008bee:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008bf0:	4a4b      	ldr	r2, [pc, #300]	; (8008d20 <xTaskIncrementTick+0x14c>)
 8008bf2:	693b      	ldr	r3, [r7, #16]
 8008bf4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008bf6:	693b      	ldr	r3, [r7, #16]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d120      	bne.n	8008c3e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008bfc:	4b49      	ldr	r3, [pc, #292]	; (8008d24 <xTaskIncrementTick+0x150>)
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d00a      	beq.n	8008c1c <xTaskIncrementTick+0x48>
        __asm volatile
 8008c06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c0a:	f383 8811 	msr	BASEPRI, r3
 8008c0e:	f3bf 8f6f 	isb	sy
 8008c12:	f3bf 8f4f 	dsb	sy
 8008c16:	603b      	str	r3, [r7, #0]
    }
 8008c18:	bf00      	nop
 8008c1a:	e7fe      	b.n	8008c1a <xTaskIncrementTick+0x46>
 8008c1c:	4b41      	ldr	r3, [pc, #260]	; (8008d24 <xTaskIncrementTick+0x150>)
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	60fb      	str	r3, [r7, #12]
 8008c22:	4b41      	ldr	r3, [pc, #260]	; (8008d28 <xTaskIncrementTick+0x154>)
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	4a3f      	ldr	r2, [pc, #252]	; (8008d24 <xTaskIncrementTick+0x150>)
 8008c28:	6013      	str	r3, [r2, #0]
 8008c2a:	4a3f      	ldr	r2, [pc, #252]	; (8008d28 <xTaskIncrementTick+0x154>)
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	6013      	str	r3, [r2, #0]
 8008c30:	4b3e      	ldr	r3, [pc, #248]	; (8008d2c <xTaskIncrementTick+0x158>)
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	3301      	adds	r3, #1
 8008c36:	4a3d      	ldr	r2, [pc, #244]	; (8008d2c <xTaskIncrementTick+0x158>)
 8008c38:	6013      	str	r3, [r2, #0]
 8008c3a:	f000 fab1 	bl	80091a0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008c3e:	4b3c      	ldr	r3, [pc, #240]	; (8008d30 <xTaskIncrementTick+0x15c>)
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	693a      	ldr	r2, [r7, #16]
 8008c44:	429a      	cmp	r2, r3
 8008c46:	d349      	bcc.n	8008cdc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008c48:	4b36      	ldr	r3, [pc, #216]	; (8008d24 <xTaskIncrementTick+0x150>)
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d104      	bne.n	8008c5c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c52:	4b37      	ldr	r3, [pc, #220]	; (8008d30 <xTaskIncrementTick+0x15c>)
 8008c54:	f04f 32ff 	mov.w	r2, #4294967295
 8008c58:	601a      	str	r2, [r3, #0]
					break;
 8008c5a:	e03f      	b.n	8008cdc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c5c:	4b31      	ldr	r3, [pc, #196]	; (8008d24 <xTaskIncrementTick+0x150>)
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	68db      	ldr	r3, [r3, #12]
 8008c62:	68db      	ldr	r3, [r3, #12]
 8008c64:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008c66:	68bb      	ldr	r3, [r7, #8]
 8008c68:	685b      	ldr	r3, [r3, #4]
 8008c6a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008c6c:	693a      	ldr	r2, [r7, #16]
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	429a      	cmp	r2, r3
 8008c72:	d203      	bcs.n	8008c7c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008c74:	4a2e      	ldr	r2, [pc, #184]	; (8008d30 <xTaskIncrementTick+0x15c>)
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008c7a:	e02f      	b.n	8008cdc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008c7c:	68bb      	ldr	r3, [r7, #8]
 8008c7e:	3304      	adds	r3, #4
 8008c80:	4618      	mov	r0, r3
 8008c82:	f7fe fe77 	bl	8007974 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008c86:	68bb      	ldr	r3, [r7, #8]
 8008c88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d004      	beq.n	8008c98 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008c8e:	68bb      	ldr	r3, [r7, #8]
 8008c90:	3318      	adds	r3, #24
 8008c92:	4618      	mov	r0, r3
 8008c94:	f7fe fe6e 	bl	8007974 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008c98:	68bb      	ldr	r3, [r7, #8]
 8008c9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c9c:	4b25      	ldr	r3, [pc, #148]	; (8008d34 <xTaskIncrementTick+0x160>)
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	429a      	cmp	r2, r3
 8008ca2:	d903      	bls.n	8008cac <xTaskIncrementTick+0xd8>
 8008ca4:	68bb      	ldr	r3, [r7, #8]
 8008ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ca8:	4a22      	ldr	r2, [pc, #136]	; (8008d34 <xTaskIncrementTick+0x160>)
 8008caa:	6013      	str	r3, [r2, #0]
 8008cac:	68bb      	ldr	r3, [r7, #8]
 8008cae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cb0:	4613      	mov	r3, r2
 8008cb2:	009b      	lsls	r3, r3, #2
 8008cb4:	4413      	add	r3, r2
 8008cb6:	009b      	lsls	r3, r3, #2
 8008cb8:	4a1f      	ldr	r2, [pc, #124]	; (8008d38 <xTaskIncrementTick+0x164>)
 8008cba:	441a      	add	r2, r3
 8008cbc:	68bb      	ldr	r3, [r7, #8]
 8008cbe:	3304      	adds	r3, #4
 8008cc0:	4619      	mov	r1, r3
 8008cc2:	4610      	mov	r0, r2
 8008cc4:	f7fe fdf9 	bl	80078ba <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008cc8:	68bb      	ldr	r3, [r7, #8]
 8008cca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ccc:	4b1b      	ldr	r3, [pc, #108]	; (8008d3c <xTaskIncrementTick+0x168>)
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cd2:	429a      	cmp	r2, r3
 8008cd4:	d3b8      	bcc.n	8008c48 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008cd6:	2301      	movs	r3, #1
 8008cd8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008cda:	e7b5      	b.n	8008c48 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008cdc:	4b17      	ldr	r3, [pc, #92]	; (8008d3c <xTaskIncrementTick+0x168>)
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ce2:	4915      	ldr	r1, [pc, #84]	; (8008d38 <xTaskIncrementTick+0x164>)
 8008ce4:	4613      	mov	r3, r2
 8008ce6:	009b      	lsls	r3, r3, #2
 8008ce8:	4413      	add	r3, r2
 8008cea:	009b      	lsls	r3, r3, #2
 8008cec:	440b      	add	r3, r1
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	2b01      	cmp	r3, #1
 8008cf2:	d901      	bls.n	8008cf8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008cf4:	2301      	movs	r3, #1
 8008cf6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008cf8:	4b11      	ldr	r3, [pc, #68]	; (8008d40 <xTaskIncrementTick+0x16c>)
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d007      	beq.n	8008d10 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008d00:	2301      	movs	r3, #1
 8008d02:	617b      	str	r3, [r7, #20]
 8008d04:	e004      	b.n	8008d10 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008d06:	4b0f      	ldr	r3, [pc, #60]	; (8008d44 <xTaskIncrementTick+0x170>)
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	3301      	adds	r3, #1
 8008d0c:	4a0d      	ldr	r2, [pc, #52]	; (8008d44 <xTaskIncrementTick+0x170>)
 8008d0e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008d10:	697b      	ldr	r3, [r7, #20]
}
 8008d12:	4618      	mov	r0, r3
 8008d14:	3718      	adds	r7, #24
 8008d16:	46bd      	mov	sp, r7
 8008d18:	bd80      	pop	{r7, pc}
 8008d1a:	bf00      	nop
 8008d1c:	20000708 	.word	0x20000708
 8008d20:	200006e4 	.word	0x200006e4
 8008d24:	20000698 	.word	0x20000698
 8008d28:	2000069c 	.word	0x2000069c
 8008d2c:	200006f8 	.word	0x200006f8
 8008d30:	20000700 	.word	0x20000700
 8008d34:	200006e8 	.word	0x200006e8
 8008d38:	20000210 	.word	0x20000210
 8008d3c:	2000020c 	.word	0x2000020c
 8008d40:	200006f4 	.word	0x200006f4
 8008d44:	200006f0 	.word	0x200006f0

08008d48 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008d48:	b480      	push	{r7}
 8008d4a:	b085      	sub	sp, #20
 8008d4c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008d4e:	4b28      	ldr	r3, [pc, #160]	; (8008df0 <vTaskSwitchContext+0xa8>)
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d003      	beq.n	8008d5e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008d56:	4b27      	ldr	r3, [pc, #156]	; (8008df4 <vTaskSwitchContext+0xac>)
 8008d58:	2201      	movs	r2, #1
 8008d5a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008d5c:	e041      	b.n	8008de2 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8008d5e:	4b25      	ldr	r3, [pc, #148]	; (8008df4 <vTaskSwitchContext+0xac>)
 8008d60:	2200      	movs	r2, #0
 8008d62:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d64:	4b24      	ldr	r3, [pc, #144]	; (8008df8 <vTaskSwitchContext+0xb0>)
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	60fb      	str	r3, [r7, #12]
 8008d6a:	e010      	b.n	8008d8e <vTaskSwitchContext+0x46>
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d10a      	bne.n	8008d88 <vTaskSwitchContext+0x40>
        __asm volatile
 8008d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d76:	f383 8811 	msr	BASEPRI, r3
 8008d7a:	f3bf 8f6f 	isb	sy
 8008d7e:	f3bf 8f4f 	dsb	sy
 8008d82:	607b      	str	r3, [r7, #4]
    }
 8008d84:	bf00      	nop
 8008d86:	e7fe      	b.n	8008d86 <vTaskSwitchContext+0x3e>
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	3b01      	subs	r3, #1
 8008d8c:	60fb      	str	r3, [r7, #12]
 8008d8e:	491b      	ldr	r1, [pc, #108]	; (8008dfc <vTaskSwitchContext+0xb4>)
 8008d90:	68fa      	ldr	r2, [r7, #12]
 8008d92:	4613      	mov	r3, r2
 8008d94:	009b      	lsls	r3, r3, #2
 8008d96:	4413      	add	r3, r2
 8008d98:	009b      	lsls	r3, r3, #2
 8008d9a:	440b      	add	r3, r1
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d0e4      	beq.n	8008d6c <vTaskSwitchContext+0x24>
 8008da2:	68fa      	ldr	r2, [r7, #12]
 8008da4:	4613      	mov	r3, r2
 8008da6:	009b      	lsls	r3, r3, #2
 8008da8:	4413      	add	r3, r2
 8008daa:	009b      	lsls	r3, r3, #2
 8008dac:	4a13      	ldr	r2, [pc, #76]	; (8008dfc <vTaskSwitchContext+0xb4>)
 8008dae:	4413      	add	r3, r2
 8008db0:	60bb      	str	r3, [r7, #8]
 8008db2:	68bb      	ldr	r3, [r7, #8]
 8008db4:	685b      	ldr	r3, [r3, #4]
 8008db6:	685a      	ldr	r2, [r3, #4]
 8008db8:	68bb      	ldr	r3, [r7, #8]
 8008dba:	605a      	str	r2, [r3, #4]
 8008dbc:	68bb      	ldr	r3, [r7, #8]
 8008dbe:	685a      	ldr	r2, [r3, #4]
 8008dc0:	68bb      	ldr	r3, [r7, #8]
 8008dc2:	3308      	adds	r3, #8
 8008dc4:	429a      	cmp	r2, r3
 8008dc6:	d104      	bne.n	8008dd2 <vTaskSwitchContext+0x8a>
 8008dc8:	68bb      	ldr	r3, [r7, #8]
 8008dca:	685b      	ldr	r3, [r3, #4]
 8008dcc:	685a      	ldr	r2, [r3, #4]
 8008dce:	68bb      	ldr	r3, [r7, #8]
 8008dd0:	605a      	str	r2, [r3, #4]
 8008dd2:	68bb      	ldr	r3, [r7, #8]
 8008dd4:	685b      	ldr	r3, [r3, #4]
 8008dd6:	68db      	ldr	r3, [r3, #12]
 8008dd8:	4a09      	ldr	r2, [pc, #36]	; (8008e00 <vTaskSwitchContext+0xb8>)
 8008dda:	6013      	str	r3, [r2, #0]
 8008ddc:	4a06      	ldr	r2, [pc, #24]	; (8008df8 <vTaskSwitchContext+0xb0>)
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	6013      	str	r3, [r2, #0]
}
 8008de2:	bf00      	nop
 8008de4:	3714      	adds	r7, #20
 8008de6:	46bd      	mov	sp, r7
 8008de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dec:	4770      	bx	lr
 8008dee:	bf00      	nop
 8008df0:	20000708 	.word	0x20000708
 8008df4:	200006f4 	.word	0x200006f4
 8008df8:	200006e8 	.word	0x200006e8
 8008dfc:	20000210 	.word	0x20000210
 8008e00:	2000020c 	.word	0x2000020c

08008e04 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b084      	sub	sp, #16
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
 8008e0c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d10a      	bne.n	8008e2a <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8008e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e18:	f383 8811 	msr	BASEPRI, r3
 8008e1c:	f3bf 8f6f 	isb	sy
 8008e20:	f3bf 8f4f 	dsb	sy
 8008e24:	60fb      	str	r3, [r7, #12]
    }
 8008e26:	bf00      	nop
 8008e28:	e7fe      	b.n	8008e28 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008e2a:	4b07      	ldr	r3, [pc, #28]	; (8008e48 <vTaskPlaceOnEventList+0x44>)
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	3318      	adds	r3, #24
 8008e30:	4619      	mov	r1, r3
 8008e32:	6878      	ldr	r0, [r7, #4]
 8008e34:	f7fe fd65 	bl	8007902 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008e38:	2101      	movs	r1, #1
 8008e3a:	6838      	ldr	r0, [r7, #0]
 8008e3c:	f000 fb5a 	bl	80094f4 <prvAddCurrentTaskToDelayedList>
}
 8008e40:	bf00      	nop
 8008e42:	3710      	adds	r7, #16
 8008e44:	46bd      	mov	sp, r7
 8008e46:	bd80      	pop	{r7, pc}
 8008e48:	2000020c 	.word	0x2000020c

08008e4c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	b086      	sub	sp, #24
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	60f8      	str	r0, [r7, #12]
 8008e54:	60b9      	str	r1, [r7, #8]
 8008e56:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d10a      	bne.n	8008e74 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8008e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e62:	f383 8811 	msr	BASEPRI, r3
 8008e66:	f3bf 8f6f 	isb	sy
 8008e6a:	f3bf 8f4f 	dsb	sy
 8008e6e:	617b      	str	r3, [r7, #20]
    }
 8008e70:	bf00      	nop
 8008e72:	e7fe      	b.n	8008e72 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008e74:	4b0a      	ldr	r3, [pc, #40]	; (8008ea0 <vTaskPlaceOnEventListRestricted+0x54>)
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	3318      	adds	r3, #24
 8008e7a:	4619      	mov	r1, r3
 8008e7c:	68f8      	ldr	r0, [r7, #12]
 8008e7e:	f7fe fd1c 	bl	80078ba <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d002      	beq.n	8008e8e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008e88:	f04f 33ff 	mov.w	r3, #4294967295
 8008e8c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008e8e:	6879      	ldr	r1, [r7, #4]
 8008e90:	68b8      	ldr	r0, [r7, #8]
 8008e92:	f000 fb2f 	bl	80094f4 <prvAddCurrentTaskToDelayedList>
	}
 8008e96:	bf00      	nop
 8008e98:	3718      	adds	r7, #24
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	bd80      	pop	{r7, pc}
 8008e9e:	bf00      	nop
 8008ea0:	2000020c 	.word	0x2000020c

08008ea4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	b086      	sub	sp, #24
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	68db      	ldr	r3, [r3, #12]
 8008eb0:	68db      	ldr	r3, [r3, #12]
 8008eb2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008eb4:	693b      	ldr	r3, [r7, #16]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d10a      	bne.n	8008ed0 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8008eba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ebe:	f383 8811 	msr	BASEPRI, r3
 8008ec2:	f3bf 8f6f 	isb	sy
 8008ec6:	f3bf 8f4f 	dsb	sy
 8008eca:	60fb      	str	r3, [r7, #12]
    }
 8008ecc:	bf00      	nop
 8008ece:	e7fe      	b.n	8008ece <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008ed0:	693b      	ldr	r3, [r7, #16]
 8008ed2:	3318      	adds	r3, #24
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	f7fe fd4d 	bl	8007974 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008eda:	4b1e      	ldr	r3, [pc, #120]	; (8008f54 <xTaskRemoveFromEventList+0xb0>)
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d11d      	bne.n	8008f1e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008ee2:	693b      	ldr	r3, [r7, #16]
 8008ee4:	3304      	adds	r3, #4
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	f7fe fd44 	bl	8007974 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008eec:	693b      	ldr	r3, [r7, #16]
 8008eee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ef0:	4b19      	ldr	r3, [pc, #100]	; (8008f58 <xTaskRemoveFromEventList+0xb4>)
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	429a      	cmp	r2, r3
 8008ef6:	d903      	bls.n	8008f00 <xTaskRemoveFromEventList+0x5c>
 8008ef8:	693b      	ldr	r3, [r7, #16]
 8008efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008efc:	4a16      	ldr	r2, [pc, #88]	; (8008f58 <xTaskRemoveFromEventList+0xb4>)
 8008efe:	6013      	str	r3, [r2, #0]
 8008f00:	693b      	ldr	r3, [r7, #16]
 8008f02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f04:	4613      	mov	r3, r2
 8008f06:	009b      	lsls	r3, r3, #2
 8008f08:	4413      	add	r3, r2
 8008f0a:	009b      	lsls	r3, r3, #2
 8008f0c:	4a13      	ldr	r2, [pc, #76]	; (8008f5c <xTaskRemoveFromEventList+0xb8>)
 8008f0e:	441a      	add	r2, r3
 8008f10:	693b      	ldr	r3, [r7, #16]
 8008f12:	3304      	adds	r3, #4
 8008f14:	4619      	mov	r1, r3
 8008f16:	4610      	mov	r0, r2
 8008f18:	f7fe fccf 	bl	80078ba <vListInsertEnd>
 8008f1c:	e005      	b.n	8008f2a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008f1e:	693b      	ldr	r3, [r7, #16]
 8008f20:	3318      	adds	r3, #24
 8008f22:	4619      	mov	r1, r3
 8008f24:	480e      	ldr	r0, [pc, #56]	; (8008f60 <xTaskRemoveFromEventList+0xbc>)
 8008f26:	f7fe fcc8 	bl	80078ba <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008f2a:	693b      	ldr	r3, [r7, #16]
 8008f2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f2e:	4b0d      	ldr	r3, [pc, #52]	; (8008f64 <xTaskRemoveFromEventList+0xc0>)
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f34:	429a      	cmp	r2, r3
 8008f36:	d905      	bls.n	8008f44 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008f38:	2301      	movs	r3, #1
 8008f3a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008f3c:	4b0a      	ldr	r3, [pc, #40]	; (8008f68 <xTaskRemoveFromEventList+0xc4>)
 8008f3e:	2201      	movs	r2, #1
 8008f40:	601a      	str	r2, [r3, #0]
 8008f42:	e001      	b.n	8008f48 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008f44:	2300      	movs	r3, #0
 8008f46:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008f48:	697b      	ldr	r3, [r7, #20]
}
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	3718      	adds	r7, #24
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	bd80      	pop	{r7, pc}
 8008f52:	bf00      	nop
 8008f54:	20000708 	.word	0x20000708
 8008f58:	200006e8 	.word	0x200006e8
 8008f5c:	20000210 	.word	0x20000210
 8008f60:	200006a0 	.word	0x200006a0
 8008f64:	2000020c 	.word	0x2000020c
 8008f68:	200006f4 	.word	0x200006f4

08008f6c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008f6c:	b480      	push	{r7}
 8008f6e:	b083      	sub	sp, #12
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008f74:	4b06      	ldr	r3, [pc, #24]	; (8008f90 <vTaskInternalSetTimeOutState+0x24>)
 8008f76:	681a      	ldr	r2, [r3, #0]
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008f7c:	4b05      	ldr	r3, [pc, #20]	; (8008f94 <vTaskInternalSetTimeOutState+0x28>)
 8008f7e:	681a      	ldr	r2, [r3, #0]
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	605a      	str	r2, [r3, #4]
}
 8008f84:	bf00      	nop
 8008f86:	370c      	adds	r7, #12
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8e:	4770      	bx	lr
 8008f90:	200006f8 	.word	0x200006f8
 8008f94:	200006e4 	.word	0x200006e4

08008f98 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008f98:	b580      	push	{r7, lr}
 8008f9a:	b088      	sub	sp, #32
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	6078      	str	r0, [r7, #4]
 8008fa0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d10a      	bne.n	8008fbe <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8008fa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fac:	f383 8811 	msr	BASEPRI, r3
 8008fb0:	f3bf 8f6f 	isb	sy
 8008fb4:	f3bf 8f4f 	dsb	sy
 8008fb8:	613b      	str	r3, [r7, #16]
    }
 8008fba:	bf00      	nop
 8008fbc:	e7fe      	b.n	8008fbc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008fbe:	683b      	ldr	r3, [r7, #0]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d10a      	bne.n	8008fda <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8008fc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fc8:	f383 8811 	msr	BASEPRI, r3
 8008fcc:	f3bf 8f6f 	isb	sy
 8008fd0:	f3bf 8f4f 	dsb	sy
 8008fd4:	60fb      	str	r3, [r7, #12]
    }
 8008fd6:	bf00      	nop
 8008fd8:	e7fe      	b.n	8008fd8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008fda:	f000 ff7d 	bl	8009ed8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008fde:	4b1d      	ldr	r3, [pc, #116]	; (8009054 <xTaskCheckForTimeOut+0xbc>)
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	685b      	ldr	r3, [r3, #4]
 8008fe8:	69ba      	ldr	r2, [r7, #24]
 8008fea:	1ad3      	subs	r3, r2, r3
 8008fec:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008fee:	683b      	ldr	r3, [r7, #0]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ff6:	d102      	bne.n	8008ffe <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	61fb      	str	r3, [r7, #28]
 8008ffc:	e023      	b.n	8009046 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681a      	ldr	r2, [r3, #0]
 8009002:	4b15      	ldr	r3, [pc, #84]	; (8009058 <xTaskCheckForTimeOut+0xc0>)
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	429a      	cmp	r2, r3
 8009008:	d007      	beq.n	800901a <xTaskCheckForTimeOut+0x82>
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	685b      	ldr	r3, [r3, #4]
 800900e:	69ba      	ldr	r2, [r7, #24]
 8009010:	429a      	cmp	r2, r3
 8009012:	d302      	bcc.n	800901a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009014:	2301      	movs	r3, #1
 8009016:	61fb      	str	r3, [r7, #28]
 8009018:	e015      	b.n	8009046 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800901a:	683b      	ldr	r3, [r7, #0]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	697a      	ldr	r2, [r7, #20]
 8009020:	429a      	cmp	r2, r3
 8009022:	d20b      	bcs.n	800903c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009024:	683b      	ldr	r3, [r7, #0]
 8009026:	681a      	ldr	r2, [r3, #0]
 8009028:	697b      	ldr	r3, [r7, #20]
 800902a:	1ad2      	subs	r2, r2, r3
 800902c:	683b      	ldr	r3, [r7, #0]
 800902e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009030:	6878      	ldr	r0, [r7, #4]
 8009032:	f7ff ff9b 	bl	8008f6c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009036:	2300      	movs	r3, #0
 8009038:	61fb      	str	r3, [r7, #28]
 800903a:	e004      	b.n	8009046 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800903c:	683b      	ldr	r3, [r7, #0]
 800903e:	2200      	movs	r2, #0
 8009040:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009042:	2301      	movs	r3, #1
 8009044:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009046:	f000 ff77 	bl	8009f38 <vPortExitCritical>

	return xReturn;
 800904a:	69fb      	ldr	r3, [r7, #28]
}
 800904c:	4618      	mov	r0, r3
 800904e:	3720      	adds	r7, #32
 8009050:	46bd      	mov	sp, r7
 8009052:	bd80      	pop	{r7, pc}
 8009054:	200006e4 	.word	0x200006e4
 8009058:	200006f8 	.word	0x200006f8

0800905c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800905c:	b480      	push	{r7}
 800905e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009060:	4b03      	ldr	r3, [pc, #12]	; (8009070 <vTaskMissedYield+0x14>)
 8009062:	2201      	movs	r2, #1
 8009064:	601a      	str	r2, [r3, #0]
}
 8009066:	bf00      	nop
 8009068:	46bd      	mov	sp, r7
 800906a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906e:	4770      	bx	lr
 8009070:	200006f4 	.word	0x200006f4

08009074 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009074:	b580      	push	{r7, lr}
 8009076:	b082      	sub	sp, #8
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800907c:	f000 f852 	bl	8009124 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009080:	4b06      	ldr	r3, [pc, #24]	; (800909c <prvIdleTask+0x28>)
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	2b01      	cmp	r3, #1
 8009086:	d9f9      	bls.n	800907c <prvIdleTask+0x8>
			{
				taskYIELD();
 8009088:	4b05      	ldr	r3, [pc, #20]	; (80090a0 <prvIdleTask+0x2c>)
 800908a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800908e:	601a      	str	r2, [r3, #0]
 8009090:	f3bf 8f4f 	dsb	sy
 8009094:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009098:	e7f0      	b.n	800907c <prvIdleTask+0x8>
 800909a:	bf00      	nop
 800909c:	20000210 	.word	0x20000210
 80090a0:	e000ed04 	.word	0xe000ed04

080090a4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80090a4:	b580      	push	{r7, lr}
 80090a6:	b082      	sub	sp, #8
 80090a8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80090aa:	2300      	movs	r3, #0
 80090ac:	607b      	str	r3, [r7, #4]
 80090ae:	e00c      	b.n	80090ca <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80090b0:	687a      	ldr	r2, [r7, #4]
 80090b2:	4613      	mov	r3, r2
 80090b4:	009b      	lsls	r3, r3, #2
 80090b6:	4413      	add	r3, r2
 80090b8:	009b      	lsls	r3, r3, #2
 80090ba:	4a12      	ldr	r2, [pc, #72]	; (8009104 <prvInitialiseTaskLists+0x60>)
 80090bc:	4413      	add	r3, r2
 80090be:	4618      	mov	r0, r3
 80090c0:	f7fe fbce 	bl	8007860 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	3301      	adds	r3, #1
 80090c8:	607b      	str	r3, [r7, #4]
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	2b37      	cmp	r3, #55	; 0x37
 80090ce:	d9ef      	bls.n	80090b0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80090d0:	480d      	ldr	r0, [pc, #52]	; (8009108 <prvInitialiseTaskLists+0x64>)
 80090d2:	f7fe fbc5 	bl	8007860 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80090d6:	480d      	ldr	r0, [pc, #52]	; (800910c <prvInitialiseTaskLists+0x68>)
 80090d8:	f7fe fbc2 	bl	8007860 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80090dc:	480c      	ldr	r0, [pc, #48]	; (8009110 <prvInitialiseTaskLists+0x6c>)
 80090de:	f7fe fbbf 	bl	8007860 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80090e2:	480c      	ldr	r0, [pc, #48]	; (8009114 <prvInitialiseTaskLists+0x70>)
 80090e4:	f7fe fbbc 	bl	8007860 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80090e8:	480b      	ldr	r0, [pc, #44]	; (8009118 <prvInitialiseTaskLists+0x74>)
 80090ea:	f7fe fbb9 	bl	8007860 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80090ee:	4b0b      	ldr	r3, [pc, #44]	; (800911c <prvInitialiseTaskLists+0x78>)
 80090f0:	4a05      	ldr	r2, [pc, #20]	; (8009108 <prvInitialiseTaskLists+0x64>)
 80090f2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80090f4:	4b0a      	ldr	r3, [pc, #40]	; (8009120 <prvInitialiseTaskLists+0x7c>)
 80090f6:	4a05      	ldr	r2, [pc, #20]	; (800910c <prvInitialiseTaskLists+0x68>)
 80090f8:	601a      	str	r2, [r3, #0]
}
 80090fa:	bf00      	nop
 80090fc:	3708      	adds	r7, #8
 80090fe:	46bd      	mov	sp, r7
 8009100:	bd80      	pop	{r7, pc}
 8009102:	bf00      	nop
 8009104:	20000210 	.word	0x20000210
 8009108:	20000670 	.word	0x20000670
 800910c:	20000684 	.word	0x20000684
 8009110:	200006a0 	.word	0x200006a0
 8009114:	200006b4 	.word	0x200006b4
 8009118:	200006cc 	.word	0x200006cc
 800911c:	20000698 	.word	0x20000698
 8009120:	2000069c 	.word	0x2000069c

08009124 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009124:	b580      	push	{r7, lr}
 8009126:	b082      	sub	sp, #8
 8009128:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800912a:	e019      	b.n	8009160 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800912c:	f000 fed4 	bl	8009ed8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009130:	4b10      	ldr	r3, [pc, #64]	; (8009174 <prvCheckTasksWaitingTermination+0x50>)
 8009132:	68db      	ldr	r3, [r3, #12]
 8009134:	68db      	ldr	r3, [r3, #12]
 8009136:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	3304      	adds	r3, #4
 800913c:	4618      	mov	r0, r3
 800913e:	f7fe fc19 	bl	8007974 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009142:	4b0d      	ldr	r3, [pc, #52]	; (8009178 <prvCheckTasksWaitingTermination+0x54>)
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	3b01      	subs	r3, #1
 8009148:	4a0b      	ldr	r2, [pc, #44]	; (8009178 <prvCheckTasksWaitingTermination+0x54>)
 800914a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800914c:	4b0b      	ldr	r3, [pc, #44]	; (800917c <prvCheckTasksWaitingTermination+0x58>)
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	3b01      	subs	r3, #1
 8009152:	4a0a      	ldr	r2, [pc, #40]	; (800917c <prvCheckTasksWaitingTermination+0x58>)
 8009154:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009156:	f000 feef 	bl	8009f38 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800915a:	6878      	ldr	r0, [r7, #4]
 800915c:	f000 f810 	bl	8009180 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009160:	4b06      	ldr	r3, [pc, #24]	; (800917c <prvCheckTasksWaitingTermination+0x58>)
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	2b00      	cmp	r3, #0
 8009166:	d1e1      	bne.n	800912c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009168:	bf00      	nop
 800916a:	bf00      	nop
 800916c:	3708      	adds	r7, #8
 800916e:	46bd      	mov	sp, r7
 8009170:	bd80      	pop	{r7, pc}
 8009172:	bf00      	nop
 8009174:	200006b4 	.word	0x200006b4
 8009178:	200006e0 	.word	0x200006e0
 800917c:	200006c8 	.word	0x200006c8

08009180 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009180:	b580      	push	{r7, lr}
 8009182:	b082      	sub	sp, #8
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800918c:	4618      	mov	r0, r3
 800918e:	f001 f875 	bl	800a27c <vPortFree>
			vPortFree( pxTCB );
 8009192:	6878      	ldr	r0, [r7, #4]
 8009194:	f001 f872 	bl	800a27c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009198:	bf00      	nop
 800919a:	3708      	adds	r7, #8
 800919c:	46bd      	mov	sp, r7
 800919e:	bd80      	pop	{r7, pc}

080091a0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80091a0:	b480      	push	{r7}
 80091a2:	b083      	sub	sp, #12
 80091a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80091a6:	4b0c      	ldr	r3, [pc, #48]	; (80091d8 <prvResetNextTaskUnblockTime+0x38>)
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d104      	bne.n	80091ba <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80091b0:	4b0a      	ldr	r3, [pc, #40]	; (80091dc <prvResetNextTaskUnblockTime+0x3c>)
 80091b2:	f04f 32ff 	mov.w	r2, #4294967295
 80091b6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80091b8:	e008      	b.n	80091cc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80091ba:	4b07      	ldr	r3, [pc, #28]	; (80091d8 <prvResetNextTaskUnblockTime+0x38>)
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	68db      	ldr	r3, [r3, #12]
 80091c0:	68db      	ldr	r3, [r3, #12]
 80091c2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	685b      	ldr	r3, [r3, #4]
 80091c8:	4a04      	ldr	r2, [pc, #16]	; (80091dc <prvResetNextTaskUnblockTime+0x3c>)
 80091ca:	6013      	str	r3, [r2, #0]
}
 80091cc:	bf00      	nop
 80091ce:	370c      	adds	r7, #12
 80091d0:	46bd      	mov	sp, r7
 80091d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d6:	4770      	bx	lr
 80091d8:	20000698 	.word	0x20000698
 80091dc:	20000700 	.word	0x20000700

080091e0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80091e0:	b480      	push	{r7}
 80091e2:	b083      	sub	sp, #12
 80091e4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80091e6:	4b0b      	ldr	r3, [pc, #44]	; (8009214 <xTaskGetSchedulerState+0x34>)
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d102      	bne.n	80091f4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80091ee:	2301      	movs	r3, #1
 80091f0:	607b      	str	r3, [r7, #4]
 80091f2:	e008      	b.n	8009206 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80091f4:	4b08      	ldr	r3, [pc, #32]	; (8009218 <xTaskGetSchedulerState+0x38>)
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d102      	bne.n	8009202 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80091fc:	2302      	movs	r3, #2
 80091fe:	607b      	str	r3, [r7, #4]
 8009200:	e001      	b.n	8009206 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009202:	2300      	movs	r3, #0
 8009204:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009206:	687b      	ldr	r3, [r7, #4]
	}
 8009208:	4618      	mov	r0, r3
 800920a:	370c      	adds	r7, #12
 800920c:	46bd      	mov	sp, r7
 800920e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009212:	4770      	bx	lr
 8009214:	200006ec 	.word	0x200006ec
 8009218:	20000708 	.word	0x20000708

0800921c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800921c:	b580      	push	{r7, lr}
 800921e:	b084      	sub	sp, #16
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009228:	2300      	movs	r3, #0
 800922a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	2b00      	cmp	r3, #0
 8009230:	d051      	beq.n	80092d6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009232:	68bb      	ldr	r3, [r7, #8]
 8009234:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009236:	4b2a      	ldr	r3, [pc, #168]	; (80092e0 <xTaskPriorityInherit+0xc4>)
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800923c:	429a      	cmp	r2, r3
 800923e:	d241      	bcs.n	80092c4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009240:	68bb      	ldr	r3, [r7, #8]
 8009242:	699b      	ldr	r3, [r3, #24]
 8009244:	2b00      	cmp	r3, #0
 8009246:	db06      	blt.n	8009256 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009248:	4b25      	ldr	r3, [pc, #148]	; (80092e0 <xTaskPriorityInherit+0xc4>)
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800924e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009252:	68bb      	ldr	r3, [r7, #8]
 8009254:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009256:	68bb      	ldr	r3, [r7, #8]
 8009258:	6959      	ldr	r1, [r3, #20]
 800925a:	68bb      	ldr	r3, [r7, #8]
 800925c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800925e:	4613      	mov	r3, r2
 8009260:	009b      	lsls	r3, r3, #2
 8009262:	4413      	add	r3, r2
 8009264:	009b      	lsls	r3, r3, #2
 8009266:	4a1f      	ldr	r2, [pc, #124]	; (80092e4 <xTaskPriorityInherit+0xc8>)
 8009268:	4413      	add	r3, r2
 800926a:	4299      	cmp	r1, r3
 800926c:	d122      	bne.n	80092b4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800926e:	68bb      	ldr	r3, [r7, #8]
 8009270:	3304      	adds	r3, #4
 8009272:	4618      	mov	r0, r3
 8009274:	f7fe fb7e 	bl	8007974 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009278:	4b19      	ldr	r3, [pc, #100]	; (80092e0 <xTaskPriorityInherit+0xc4>)
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800927e:	68bb      	ldr	r3, [r7, #8]
 8009280:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009282:	68bb      	ldr	r3, [r7, #8]
 8009284:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009286:	4b18      	ldr	r3, [pc, #96]	; (80092e8 <xTaskPriorityInherit+0xcc>)
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	429a      	cmp	r2, r3
 800928c:	d903      	bls.n	8009296 <xTaskPriorityInherit+0x7a>
 800928e:	68bb      	ldr	r3, [r7, #8]
 8009290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009292:	4a15      	ldr	r2, [pc, #84]	; (80092e8 <xTaskPriorityInherit+0xcc>)
 8009294:	6013      	str	r3, [r2, #0]
 8009296:	68bb      	ldr	r3, [r7, #8]
 8009298:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800929a:	4613      	mov	r3, r2
 800929c:	009b      	lsls	r3, r3, #2
 800929e:	4413      	add	r3, r2
 80092a0:	009b      	lsls	r3, r3, #2
 80092a2:	4a10      	ldr	r2, [pc, #64]	; (80092e4 <xTaskPriorityInherit+0xc8>)
 80092a4:	441a      	add	r2, r3
 80092a6:	68bb      	ldr	r3, [r7, #8]
 80092a8:	3304      	adds	r3, #4
 80092aa:	4619      	mov	r1, r3
 80092ac:	4610      	mov	r0, r2
 80092ae:	f7fe fb04 	bl	80078ba <vListInsertEnd>
 80092b2:	e004      	b.n	80092be <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80092b4:	4b0a      	ldr	r3, [pc, #40]	; (80092e0 <xTaskPriorityInherit+0xc4>)
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092ba:	68bb      	ldr	r3, [r7, #8]
 80092bc:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80092be:	2301      	movs	r3, #1
 80092c0:	60fb      	str	r3, [r7, #12]
 80092c2:	e008      	b.n	80092d6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80092c4:	68bb      	ldr	r3, [r7, #8]
 80092c6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80092c8:	4b05      	ldr	r3, [pc, #20]	; (80092e0 <xTaskPriorityInherit+0xc4>)
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092ce:	429a      	cmp	r2, r3
 80092d0:	d201      	bcs.n	80092d6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80092d2:	2301      	movs	r3, #1
 80092d4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80092d6:	68fb      	ldr	r3, [r7, #12]
	}
 80092d8:	4618      	mov	r0, r3
 80092da:	3710      	adds	r7, #16
 80092dc:	46bd      	mov	sp, r7
 80092de:	bd80      	pop	{r7, pc}
 80092e0:	2000020c 	.word	0x2000020c
 80092e4:	20000210 	.word	0x20000210
 80092e8:	200006e8 	.word	0x200006e8

080092ec <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80092ec:	b580      	push	{r7, lr}
 80092ee:	b086      	sub	sp, #24
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80092f8:	2300      	movs	r3, #0
 80092fa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d056      	beq.n	80093b0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009302:	4b2e      	ldr	r3, [pc, #184]	; (80093bc <xTaskPriorityDisinherit+0xd0>)
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	693a      	ldr	r2, [r7, #16]
 8009308:	429a      	cmp	r2, r3
 800930a:	d00a      	beq.n	8009322 <xTaskPriorityDisinherit+0x36>
        __asm volatile
 800930c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009310:	f383 8811 	msr	BASEPRI, r3
 8009314:	f3bf 8f6f 	isb	sy
 8009318:	f3bf 8f4f 	dsb	sy
 800931c:	60fb      	str	r3, [r7, #12]
    }
 800931e:	bf00      	nop
 8009320:	e7fe      	b.n	8009320 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009322:	693b      	ldr	r3, [r7, #16]
 8009324:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009326:	2b00      	cmp	r3, #0
 8009328:	d10a      	bne.n	8009340 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 800932a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800932e:	f383 8811 	msr	BASEPRI, r3
 8009332:	f3bf 8f6f 	isb	sy
 8009336:	f3bf 8f4f 	dsb	sy
 800933a:	60bb      	str	r3, [r7, #8]
    }
 800933c:	bf00      	nop
 800933e:	e7fe      	b.n	800933e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009340:	693b      	ldr	r3, [r7, #16]
 8009342:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009344:	1e5a      	subs	r2, r3, #1
 8009346:	693b      	ldr	r3, [r7, #16]
 8009348:	655a      	str	r2, [r3, #84]	; 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800934a:	693b      	ldr	r3, [r7, #16]
 800934c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800934e:	693b      	ldr	r3, [r7, #16]
 8009350:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009352:	429a      	cmp	r2, r3
 8009354:	d02c      	beq.n	80093b0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009356:	693b      	ldr	r3, [r7, #16]
 8009358:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800935a:	2b00      	cmp	r3, #0
 800935c:	d128      	bne.n	80093b0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800935e:	693b      	ldr	r3, [r7, #16]
 8009360:	3304      	adds	r3, #4
 8009362:	4618      	mov	r0, r3
 8009364:	f7fe fb06 	bl	8007974 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009368:	693b      	ldr	r3, [r7, #16]
 800936a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800936c:	693b      	ldr	r3, [r7, #16]
 800936e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009370:	693b      	ldr	r3, [r7, #16]
 8009372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009374:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009378:	693b      	ldr	r3, [r7, #16]
 800937a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800937c:	693b      	ldr	r3, [r7, #16]
 800937e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009380:	4b0f      	ldr	r3, [pc, #60]	; (80093c0 <xTaskPriorityDisinherit+0xd4>)
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	429a      	cmp	r2, r3
 8009386:	d903      	bls.n	8009390 <xTaskPriorityDisinherit+0xa4>
 8009388:	693b      	ldr	r3, [r7, #16]
 800938a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800938c:	4a0c      	ldr	r2, [pc, #48]	; (80093c0 <xTaskPriorityDisinherit+0xd4>)
 800938e:	6013      	str	r3, [r2, #0]
 8009390:	693b      	ldr	r3, [r7, #16]
 8009392:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009394:	4613      	mov	r3, r2
 8009396:	009b      	lsls	r3, r3, #2
 8009398:	4413      	add	r3, r2
 800939a:	009b      	lsls	r3, r3, #2
 800939c:	4a09      	ldr	r2, [pc, #36]	; (80093c4 <xTaskPriorityDisinherit+0xd8>)
 800939e:	441a      	add	r2, r3
 80093a0:	693b      	ldr	r3, [r7, #16]
 80093a2:	3304      	adds	r3, #4
 80093a4:	4619      	mov	r1, r3
 80093a6:	4610      	mov	r0, r2
 80093a8:	f7fe fa87 	bl	80078ba <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80093ac:	2301      	movs	r3, #1
 80093ae:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80093b0:	697b      	ldr	r3, [r7, #20]
	}
 80093b2:	4618      	mov	r0, r3
 80093b4:	3718      	adds	r7, #24
 80093b6:	46bd      	mov	sp, r7
 80093b8:	bd80      	pop	{r7, pc}
 80093ba:	bf00      	nop
 80093bc:	2000020c 	.word	0x2000020c
 80093c0:	200006e8 	.word	0x200006e8
 80093c4:	20000210 	.word	0x20000210

080093c8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80093c8:	b580      	push	{r7, lr}
 80093ca:	b088      	sub	sp, #32
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	6078      	str	r0, [r7, #4]
 80093d0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80093d6:	2301      	movs	r3, #1
 80093d8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d06a      	beq.n	80094b6 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80093e0:	69bb      	ldr	r3, [r7, #24]
 80093e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d10a      	bne.n	80093fe <vTaskPriorityDisinheritAfterTimeout+0x36>
        __asm volatile
 80093e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093ec:	f383 8811 	msr	BASEPRI, r3
 80093f0:	f3bf 8f6f 	isb	sy
 80093f4:	f3bf 8f4f 	dsb	sy
 80093f8:	60fb      	str	r3, [r7, #12]
    }
 80093fa:	bf00      	nop
 80093fc:	e7fe      	b.n	80093fc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80093fe:	69bb      	ldr	r3, [r7, #24]
 8009400:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009402:	683a      	ldr	r2, [r7, #0]
 8009404:	429a      	cmp	r2, r3
 8009406:	d902      	bls.n	800940e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009408:	683b      	ldr	r3, [r7, #0]
 800940a:	61fb      	str	r3, [r7, #28]
 800940c:	e002      	b.n	8009414 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800940e:	69bb      	ldr	r3, [r7, #24]
 8009410:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009412:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009414:	69bb      	ldr	r3, [r7, #24]
 8009416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009418:	69fa      	ldr	r2, [r7, #28]
 800941a:	429a      	cmp	r2, r3
 800941c:	d04b      	beq.n	80094b6 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800941e:	69bb      	ldr	r3, [r7, #24]
 8009420:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009422:	697a      	ldr	r2, [r7, #20]
 8009424:	429a      	cmp	r2, r3
 8009426:	d146      	bne.n	80094b6 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8009428:	4b25      	ldr	r3, [pc, #148]	; (80094c0 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	69ba      	ldr	r2, [r7, #24]
 800942e:	429a      	cmp	r2, r3
 8009430:	d10a      	bne.n	8009448 <vTaskPriorityDisinheritAfterTimeout+0x80>
        __asm volatile
 8009432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009436:	f383 8811 	msr	BASEPRI, r3
 800943a:	f3bf 8f6f 	isb	sy
 800943e:	f3bf 8f4f 	dsb	sy
 8009442:	60bb      	str	r3, [r7, #8]
    }
 8009444:	bf00      	nop
 8009446:	e7fe      	b.n	8009446 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009448:	69bb      	ldr	r3, [r7, #24]
 800944a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800944c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800944e:	69bb      	ldr	r3, [r7, #24]
 8009450:	69fa      	ldr	r2, [r7, #28]
 8009452:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009454:	69bb      	ldr	r3, [r7, #24]
 8009456:	699b      	ldr	r3, [r3, #24]
 8009458:	2b00      	cmp	r3, #0
 800945a:	db04      	blt.n	8009466 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800945c:	69fb      	ldr	r3, [r7, #28]
 800945e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009462:	69bb      	ldr	r3, [r7, #24]
 8009464:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009466:	69bb      	ldr	r3, [r7, #24]
 8009468:	6959      	ldr	r1, [r3, #20]
 800946a:	693a      	ldr	r2, [r7, #16]
 800946c:	4613      	mov	r3, r2
 800946e:	009b      	lsls	r3, r3, #2
 8009470:	4413      	add	r3, r2
 8009472:	009b      	lsls	r3, r3, #2
 8009474:	4a13      	ldr	r2, [pc, #76]	; (80094c4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8009476:	4413      	add	r3, r2
 8009478:	4299      	cmp	r1, r3
 800947a:	d11c      	bne.n	80094b6 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800947c:	69bb      	ldr	r3, [r7, #24]
 800947e:	3304      	adds	r3, #4
 8009480:	4618      	mov	r0, r3
 8009482:	f7fe fa77 	bl	8007974 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8009486:	69bb      	ldr	r3, [r7, #24]
 8009488:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800948a:	4b0f      	ldr	r3, [pc, #60]	; (80094c8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	429a      	cmp	r2, r3
 8009490:	d903      	bls.n	800949a <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8009492:	69bb      	ldr	r3, [r7, #24]
 8009494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009496:	4a0c      	ldr	r2, [pc, #48]	; (80094c8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009498:	6013      	str	r3, [r2, #0]
 800949a:	69bb      	ldr	r3, [r7, #24]
 800949c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800949e:	4613      	mov	r3, r2
 80094a0:	009b      	lsls	r3, r3, #2
 80094a2:	4413      	add	r3, r2
 80094a4:	009b      	lsls	r3, r3, #2
 80094a6:	4a07      	ldr	r2, [pc, #28]	; (80094c4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80094a8:	441a      	add	r2, r3
 80094aa:	69bb      	ldr	r3, [r7, #24]
 80094ac:	3304      	adds	r3, #4
 80094ae:	4619      	mov	r1, r3
 80094b0:	4610      	mov	r0, r2
 80094b2:	f7fe fa02 	bl	80078ba <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80094b6:	bf00      	nop
 80094b8:	3720      	adds	r7, #32
 80094ba:	46bd      	mov	sp, r7
 80094bc:	bd80      	pop	{r7, pc}
 80094be:	bf00      	nop
 80094c0:	2000020c 	.word	0x2000020c
 80094c4:	20000210 	.word	0x20000210
 80094c8:	200006e8 	.word	0x200006e8

080094cc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80094cc:	b480      	push	{r7}
 80094ce:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80094d0:	4b07      	ldr	r3, [pc, #28]	; (80094f0 <pvTaskIncrementMutexHeldCount+0x24>)
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d004      	beq.n	80094e2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80094d8:	4b05      	ldr	r3, [pc, #20]	; (80094f0 <pvTaskIncrementMutexHeldCount+0x24>)
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80094de:	3201      	adds	r2, #1
 80094e0:	655a      	str	r2, [r3, #84]	; 0x54
		}

		return pxCurrentTCB;
 80094e2:	4b03      	ldr	r3, [pc, #12]	; (80094f0 <pvTaskIncrementMutexHeldCount+0x24>)
 80094e4:	681b      	ldr	r3, [r3, #0]
	}
 80094e6:	4618      	mov	r0, r3
 80094e8:	46bd      	mov	sp, r7
 80094ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ee:	4770      	bx	lr
 80094f0:	2000020c 	.word	0x2000020c

080094f4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80094f4:	b580      	push	{r7, lr}
 80094f6:	b084      	sub	sp, #16
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]
 80094fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80094fe:	4b21      	ldr	r3, [pc, #132]	; (8009584 <prvAddCurrentTaskToDelayedList+0x90>)
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009504:	4b20      	ldr	r3, [pc, #128]	; (8009588 <prvAddCurrentTaskToDelayedList+0x94>)
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	3304      	adds	r3, #4
 800950a:	4618      	mov	r0, r3
 800950c:	f7fe fa32 	bl	8007974 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009516:	d10a      	bne.n	800952e <prvAddCurrentTaskToDelayedList+0x3a>
 8009518:	683b      	ldr	r3, [r7, #0]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d007      	beq.n	800952e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800951e:	4b1a      	ldr	r3, [pc, #104]	; (8009588 <prvAddCurrentTaskToDelayedList+0x94>)
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	3304      	adds	r3, #4
 8009524:	4619      	mov	r1, r3
 8009526:	4819      	ldr	r0, [pc, #100]	; (800958c <prvAddCurrentTaskToDelayedList+0x98>)
 8009528:	f7fe f9c7 	bl	80078ba <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800952c:	e026      	b.n	800957c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800952e:	68fa      	ldr	r2, [r7, #12]
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	4413      	add	r3, r2
 8009534:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009536:	4b14      	ldr	r3, [pc, #80]	; (8009588 <prvAddCurrentTaskToDelayedList+0x94>)
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	68ba      	ldr	r2, [r7, #8]
 800953c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800953e:	68ba      	ldr	r2, [r7, #8]
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	429a      	cmp	r2, r3
 8009544:	d209      	bcs.n	800955a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009546:	4b12      	ldr	r3, [pc, #72]	; (8009590 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009548:	681a      	ldr	r2, [r3, #0]
 800954a:	4b0f      	ldr	r3, [pc, #60]	; (8009588 <prvAddCurrentTaskToDelayedList+0x94>)
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	3304      	adds	r3, #4
 8009550:	4619      	mov	r1, r3
 8009552:	4610      	mov	r0, r2
 8009554:	f7fe f9d5 	bl	8007902 <vListInsert>
}
 8009558:	e010      	b.n	800957c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800955a:	4b0e      	ldr	r3, [pc, #56]	; (8009594 <prvAddCurrentTaskToDelayedList+0xa0>)
 800955c:	681a      	ldr	r2, [r3, #0]
 800955e:	4b0a      	ldr	r3, [pc, #40]	; (8009588 <prvAddCurrentTaskToDelayedList+0x94>)
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	3304      	adds	r3, #4
 8009564:	4619      	mov	r1, r3
 8009566:	4610      	mov	r0, r2
 8009568:	f7fe f9cb 	bl	8007902 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800956c:	4b0a      	ldr	r3, [pc, #40]	; (8009598 <prvAddCurrentTaskToDelayedList+0xa4>)
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	68ba      	ldr	r2, [r7, #8]
 8009572:	429a      	cmp	r2, r3
 8009574:	d202      	bcs.n	800957c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009576:	4a08      	ldr	r2, [pc, #32]	; (8009598 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009578:	68bb      	ldr	r3, [r7, #8]
 800957a:	6013      	str	r3, [r2, #0]
}
 800957c:	bf00      	nop
 800957e:	3710      	adds	r7, #16
 8009580:	46bd      	mov	sp, r7
 8009582:	bd80      	pop	{r7, pc}
 8009584:	200006e4 	.word	0x200006e4
 8009588:	2000020c 	.word	0x2000020c
 800958c:	200006cc 	.word	0x200006cc
 8009590:	2000069c 	.word	0x2000069c
 8009594:	20000698 	.word	0x20000698
 8009598:	20000700 	.word	0x20000700

0800959c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800959c:	b580      	push	{r7, lr}
 800959e:	b084      	sub	sp, #16
 80095a0:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 80095a2:	2300      	movs	r3, #0
 80095a4:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80095a6:	f000 fb31 	bl	8009c0c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80095aa:	4b11      	ldr	r3, [pc, #68]	; (80095f0 <xTimerCreateTimerTask+0x54>)
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d00b      	beq.n	80095ca <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 80095b2:	4b10      	ldr	r3, [pc, #64]	; (80095f4 <xTimerCreateTimerTask+0x58>)
 80095b4:	9301      	str	r3, [sp, #4]
 80095b6:	2305      	movs	r3, #5
 80095b8:	9300      	str	r3, [sp, #0]
 80095ba:	2300      	movs	r3, #0
 80095bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80095c0:	490d      	ldr	r1, [pc, #52]	; (80095f8 <xTimerCreateTimerTask+0x5c>)
 80095c2:	480e      	ldr	r0, [pc, #56]	; (80095fc <xTimerCreateTimerTask+0x60>)
 80095c4:	f7ff f800 	bl	80085c8 <xTaskCreate>
 80095c8:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d10a      	bne.n	80095e6 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 80095d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095d4:	f383 8811 	msr	BASEPRI, r3
 80095d8:	f3bf 8f6f 	isb	sy
 80095dc:	f3bf 8f4f 	dsb	sy
 80095e0:	603b      	str	r3, [r7, #0]
    }
 80095e2:	bf00      	nop
 80095e4:	e7fe      	b.n	80095e4 <xTimerCreateTimerTask+0x48>
	return xReturn;
 80095e6:	687b      	ldr	r3, [r7, #4]
}
 80095e8:	4618      	mov	r0, r3
 80095ea:	3708      	adds	r7, #8
 80095ec:	46bd      	mov	sp, r7
 80095ee:	bd80      	pop	{r7, pc}
 80095f0:	2000073c 	.word	0x2000073c
 80095f4:	20000740 	.word	0x20000740
 80095f8:	0800a5d8 	.word	0x0800a5d8
 80095fc:	080097ed 	.word	0x080097ed

08009600 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8009600:	b580      	push	{r7, lr}
 8009602:	b088      	sub	sp, #32
 8009604:	af02      	add	r7, sp, #8
 8009606:	60f8      	str	r0, [r7, #12]
 8009608:	60b9      	str	r1, [r7, #8]
 800960a:	607a      	str	r2, [r7, #4]
 800960c:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800960e:	202c      	movs	r0, #44	; 0x2c
 8009610:	f000 fd7a 	bl	800a108 <pvPortMalloc>
 8009614:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8009616:	697b      	ldr	r3, [r7, #20]
 8009618:	2b00      	cmp	r3, #0
 800961a:	d00d      	beq.n	8009638 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800961c:	697b      	ldr	r3, [r7, #20]
 800961e:	2200      	movs	r2, #0
 8009620:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8009624:	697b      	ldr	r3, [r7, #20]
 8009626:	9301      	str	r3, [sp, #4]
 8009628:	6a3b      	ldr	r3, [r7, #32]
 800962a:	9300      	str	r3, [sp, #0]
 800962c:	683b      	ldr	r3, [r7, #0]
 800962e:	687a      	ldr	r2, [r7, #4]
 8009630:	68b9      	ldr	r1, [r7, #8]
 8009632:	68f8      	ldr	r0, [r7, #12]
 8009634:	f000 f805 	bl	8009642 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8009638:	697b      	ldr	r3, [r7, #20]
	}
 800963a:	4618      	mov	r0, r3
 800963c:	3718      	adds	r7, #24
 800963e:	46bd      	mov	sp, r7
 8009640:	bd80      	pop	{r7, pc}

08009642 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8009642:	b580      	push	{r7, lr}
 8009644:	b086      	sub	sp, #24
 8009646:	af00      	add	r7, sp, #0
 8009648:	60f8      	str	r0, [r7, #12]
 800964a:	60b9      	str	r1, [r7, #8]
 800964c:	607a      	str	r2, [r7, #4]
 800964e:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8009650:	68bb      	ldr	r3, [r7, #8]
 8009652:	2b00      	cmp	r3, #0
 8009654:	d10a      	bne.n	800966c <prvInitialiseNewTimer+0x2a>
        __asm volatile
 8009656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800965a:	f383 8811 	msr	BASEPRI, r3
 800965e:	f3bf 8f6f 	isb	sy
 8009662:	f3bf 8f4f 	dsb	sy
 8009666:	617b      	str	r3, [r7, #20]
    }
 8009668:	bf00      	nop
 800966a:	e7fe      	b.n	800966a <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800966c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800966e:	2b00      	cmp	r3, #0
 8009670:	d01e      	beq.n	80096b0 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8009672:	f000 facb 	bl	8009c0c <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8009676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009678:	68fa      	ldr	r2, [r7, #12]
 800967a:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800967c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800967e:	68ba      	ldr	r2, [r7, #8]
 8009680:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8009682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009684:	683a      	ldr	r2, [r7, #0]
 8009686:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8009688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800968a:	6a3a      	ldr	r2, [r7, #32]
 800968c:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800968e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009690:	3304      	adds	r3, #4
 8009692:	4618      	mov	r0, r3
 8009694:	f7fe f904 	bl	80078a0 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	2b00      	cmp	r3, #0
 800969c:	d008      	beq.n	80096b0 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800969e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80096a4:	f043 0304 	orr.w	r3, r3, #4
 80096a8:	b2da      	uxtb	r2, r3
 80096aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096ac:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 80096b0:	bf00      	nop
 80096b2:	3718      	adds	r7, #24
 80096b4:	46bd      	mov	sp, r7
 80096b6:	bd80      	pop	{r7, pc}

080096b8 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80096b8:	b580      	push	{r7, lr}
 80096ba:	b08a      	sub	sp, #40	; 0x28
 80096bc:	af00      	add	r7, sp, #0
 80096be:	60f8      	str	r0, [r7, #12]
 80096c0:	60b9      	str	r1, [r7, #8]
 80096c2:	607a      	str	r2, [r7, #4]
 80096c4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80096c6:	2300      	movs	r3, #0
 80096c8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d10a      	bne.n	80096e6 <xTimerGenericCommand+0x2e>
        __asm volatile
 80096d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096d4:	f383 8811 	msr	BASEPRI, r3
 80096d8:	f3bf 8f6f 	isb	sy
 80096dc:	f3bf 8f4f 	dsb	sy
 80096e0:	623b      	str	r3, [r7, #32]
    }
 80096e2:	bf00      	nop
 80096e4:	e7fe      	b.n	80096e4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80096e6:	4b1a      	ldr	r3, [pc, #104]	; (8009750 <xTimerGenericCommand+0x98>)
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d02a      	beq.n	8009744 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80096ee:	68bb      	ldr	r3, [r7, #8]
 80096f0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80096fa:	68bb      	ldr	r3, [r7, #8]
 80096fc:	2b05      	cmp	r3, #5
 80096fe:	dc18      	bgt.n	8009732 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009700:	f7ff fd6e 	bl	80091e0 <xTaskGetSchedulerState>
 8009704:	4603      	mov	r3, r0
 8009706:	2b02      	cmp	r3, #2
 8009708:	d109      	bne.n	800971e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800970a:	4b11      	ldr	r3, [pc, #68]	; (8009750 <xTimerGenericCommand+0x98>)
 800970c:	6818      	ldr	r0, [r3, #0]
 800970e:	f107 0114 	add.w	r1, r7, #20
 8009712:	2300      	movs	r3, #0
 8009714:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009716:	f7fe fa4b 	bl	8007bb0 <xQueueGenericSend>
 800971a:	6278      	str	r0, [r7, #36]	; 0x24
 800971c:	e012      	b.n	8009744 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800971e:	4b0c      	ldr	r3, [pc, #48]	; (8009750 <xTimerGenericCommand+0x98>)
 8009720:	6818      	ldr	r0, [r3, #0]
 8009722:	f107 0114 	add.w	r1, r7, #20
 8009726:	2300      	movs	r3, #0
 8009728:	2200      	movs	r2, #0
 800972a:	f7fe fa41 	bl	8007bb0 <xQueueGenericSend>
 800972e:	6278      	str	r0, [r7, #36]	; 0x24
 8009730:	e008      	b.n	8009744 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009732:	4b07      	ldr	r3, [pc, #28]	; (8009750 <xTimerGenericCommand+0x98>)
 8009734:	6818      	ldr	r0, [r3, #0]
 8009736:	f107 0114 	add.w	r1, r7, #20
 800973a:	2300      	movs	r3, #0
 800973c:	683a      	ldr	r2, [r7, #0]
 800973e:	f7fe fb35 	bl	8007dac <xQueueGenericSendFromISR>
 8009742:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009746:	4618      	mov	r0, r3
 8009748:	3728      	adds	r7, #40	; 0x28
 800974a:	46bd      	mov	sp, r7
 800974c:	bd80      	pop	{r7, pc}
 800974e:	bf00      	nop
 8009750:	2000073c 	.word	0x2000073c

08009754 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009754:	b580      	push	{r7, lr}
 8009756:	b088      	sub	sp, #32
 8009758:	af02      	add	r7, sp, #8
 800975a:	6078      	str	r0, [r7, #4]
 800975c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800975e:	4b22      	ldr	r3, [pc, #136]	; (80097e8 <prvProcessExpiredTimer+0x94>)
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	68db      	ldr	r3, [r3, #12]
 8009764:	68db      	ldr	r3, [r3, #12]
 8009766:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009768:	697b      	ldr	r3, [r7, #20]
 800976a:	3304      	adds	r3, #4
 800976c:	4618      	mov	r0, r3
 800976e:	f7fe f901 	bl	8007974 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009772:	697b      	ldr	r3, [r7, #20]
 8009774:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009778:	f003 0304 	and.w	r3, r3, #4
 800977c:	2b00      	cmp	r3, #0
 800977e:	d022      	beq.n	80097c6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009780:	697b      	ldr	r3, [r7, #20]
 8009782:	699a      	ldr	r2, [r3, #24]
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	18d1      	adds	r1, r2, r3
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	683a      	ldr	r2, [r7, #0]
 800978c:	6978      	ldr	r0, [r7, #20]
 800978e:	f000 f8d1 	bl	8009934 <prvInsertTimerInActiveList>
 8009792:	4603      	mov	r3, r0
 8009794:	2b00      	cmp	r3, #0
 8009796:	d01f      	beq.n	80097d8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009798:	2300      	movs	r3, #0
 800979a:	9300      	str	r3, [sp, #0]
 800979c:	2300      	movs	r3, #0
 800979e:	687a      	ldr	r2, [r7, #4]
 80097a0:	2100      	movs	r1, #0
 80097a2:	6978      	ldr	r0, [r7, #20]
 80097a4:	f7ff ff88 	bl	80096b8 <xTimerGenericCommand>
 80097a8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80097aa:	693b      	ldr	r3, [r7, #16]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d113      	bne.n	80097d8 <prvProcessExpiredTimer+0x84>
        __asm volatile
 80097b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097b4:	f383 8811 	msr	BASEPRI, r3
 80097b8:	f3bf 8f6f 	isb	sy
 80097bc:	f3bf 8f4f 	dsb	sy
 80097c0:	60fb      	str	r3, [r7, #12]
    }
 80097c2:	bf00      	nop
 80097c4:	e7fe      	b.n	80097c4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80097c6:	697b      	ldr	r3, [r7, #20]
 80097c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80097cc:	f023 0301 	bic.w	r3, r3, #1
 80097d0:	b2da      	uxtb	r2, r3
 80097d2:	697b      	ldr	r3, [r7, #20]
 80097d4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80097d8:	697b      	ldr	r3, [r7, #20]
 80097da:	6a1b      	ldr	r3, [r3, #32]
 80097dc:	6978      	ldr	r0, [r7, #20]
 80097de:	4798      	blx	r3
}
 80097e0:	bf00      	nop
 80097e2:	3718      	adds	r7, #24
 80097e4:	46bd      	mov	sp, r7
 80097e6:	bd80      	pop	{r7, pc}
 80097e8:	20000734 	.word	0x20000734

080097ec <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80097ec:	b580      	push	{r7, lr}
 80097ee:	b084      	sub	sp, #16
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80097f4:	f107 0308 	add.w	r3, r7, #8
 80097f8:	4618      	mov	r0, r3
 80097fa:	f000 f857 	bl	80098ac <prvGetNextExpireTime>
 80097fe:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009800:	68bb      	ldr	r3, [r7, #8]
 8009802:	4619      	mov	r1, r3
 8009804:	68f8      	ldr	r0, [r7, #12]
 8009806:	f000 f803 	bl	8009810 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800980a:	f000 f8d5 	bl	80099b8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800980e:	e7f1      	b.n	80097f4 <prvTimerTask+0x8>

08009810 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009810:	b580      	push	{r7, lr}
 8009812:	b084      	sub	sp, #16
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]
 8009818:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800981a:	f7ff f90d 	bl	8008a38 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800981e:	f107 0308 	add.w	r3, r7, #8
 8009822:	4618      	mov	r0, r3
 8009824:	f000 f866 	bl	80098f4 <prvSampleTimeNow>
 8009828:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800982a:	68bb      	ldr	r3, [r7, #8]
 800982c:	2b00      	cmp	r3, #0
 800982e:	d130      	bne.n	8009892 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009830:	683b      	ldr	r3, [r7, #0]
 8009832:	2b00      	cmp	r3, #0
 8009834:	d10a      	bne.n	800984c <prvProcessTimerOrBlockTask+0x3c>
 8009836:	687a      	ldr	r2, [r7, #4]
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	429a      	cmp	r2, r3
 800983c:	d806      	bhi.n	800984c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800983e:	f7ff f909 	bl	8008a54 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009842:	68f9      	ldr	r1, [r7, #12]
 8009844:	6878      	ldr	r0, [r7, #4]
 8009846:	f7ff ff85 	bl	8009754 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800984a:	e024      	b.n	8009896 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800984c:	683b      	ldr	r3, [r7, #0]
 800984e:	2b00      	cmp	r3, #0
 8009850:	d008      	beq.n	8009864 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009852:	4b13      	ldr	r3, [pc, #76]	; (80098a0 <prvProcessTimerOrBlockTask+0x90>)
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	2b00      	cmp	r3, #0
 800985a:	d101      	bne.n	8009860 <prvProcessTimerOrBlockTask+0x50>
 800985c:	2301      	movs	r3, #1
 800985e:	e000      	b.n	8009862 <prvProcessTimerOrBlockTask+0x52>
 8009860:	2300      	movs	r3, #0
 8009862:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009864:	4b0f      	ldr	r3, [pc, #60]	; (80098a4 <prvProcessTimerOrBlockTask+0x94>)
 8009866:	6818      	ldr	r0, [r3, #0]
 8009868:	687a      	ldr	r2, [r7, #4]
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	1ad3      	subs	r3, r2, r3
 800986e:	683a      	ldr	r2, [r7, #0]
 8009870:	4619      	mov	r1, r3
 8009872:	f7fe fe75 	bl	8008560 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009876:	f7ff f8ed 	bl	8008a54 <xTaskResumeAll>
 800987a:	4603      	mov	r3, r0
 800987c:	2b00      	cmp	r3, #0
 800987e:	d10a      	bne.n	8009896 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009880:	4b09      	ldr	r3, [pc, #36]	; (80098a8 <prvProcessTimerOrBlockTask+0x98>)
 8009882:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009886:	601a      	str	r2, [r3, #0]
 8009888:	f3bf 8f4f 	dsb	sy
 800988c:	f3bf 8f6f 	isb	sy
}
 8009890:	e001      	b.n	8009896 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009892:	f7ff f8df 	bl	8008a54 <xTaskResumeAll>
}
 8009896:	bf00      	nop
 8009898:	3710      	adds	r7, #16
 800989a:	46bd      	mov	sp, r7
 800989c:	bd80      	pop	{r7, pc}
 800989e:	bf00      	nop
 80098a0:	20000738 	.word	0x20000738
 80098a4:	2000073c 	.word	0x2000073c
 80098a8:	e000ed04 	.word	0xe000ed04

080098ac <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80098ac:	b480      	push	{r7}
 80098ae:	b085      	sub	sp, #20
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80098b4:	4b0e      	ldr	r3, [pc, #56]	; (80098f0 <prvGetNextExpireTime+0x44>)
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d101      	bne.n	80098c2 <prvGetNextExpireTime+0x16>
 80098be:	2201      	movs	r2, #1
 80098c0:	e000      	b.n	80098c4 <prvGetNextExpireTime+0x18>
 80098c2:	2200      	movs	r2, #0
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d105      	bne.n	80098dc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80098d0:	4b07      	ldr	r3, [pc, #28]	; (80098f0 <prvGetNextExpireTime+0x44>)
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	68db      	ldr	r3, [r3, #12]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	60fb      	str	r3, [r7, #12]
 80098da:	e001      	b.n	80098e0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80098dc:	2300      	movs	r3, #0
 80098de:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80098e0:	68fb      	ldr	r3, [r7, #12]
}
 80098e2:	4618      	mov	r0, r3
 80098e4:	3714      	adds	r7, #20
 80098e6:	46bd      	mov	sp, r7
 80098e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ec:	4770      	bx	lr
 80098ee:	bf00      	nop
 80098f0:	20000734 	.word	0x20000734

080098f4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80098f4:	b580      	push	{r7, lr}
 80098f6:	b084      	sub	sp, #16
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80098fc:	f7ff f948 	bl	8008b90 <xTaskGetTickCount>
 8009900:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009902:	4b0b      	ldr	r3, [pc, #44]	; (8009930 <prvSampleTimeNow+0x3c>)
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	68fa      	ldr	r2, [r7, #12]
 8009908:	429a      	cmp	r2, r3
 800990a:	d205      	bcs.n	8009918 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800990c:	f000 f91a 	bl	8009b44 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	2201      	movs	r2, #1
 8009914:	601a      	str	r2, [r3, #0]
 8009916:	e002      	b.n	800991e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	2200      	movs	r2, #0
 800991c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800991e:	4a04      	ldr	r2, [pc, #16]	; (8009930 <prvSampleTimeNow+0x3c>)
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009924:	68fb      	ldr	r3, [r7, #12]
}
 8009926:	4618      	mov	r0, r3
 8009928:	3710      	adds	r7, #16
 800992a:	46bd      	mov	sp, r7
 800992c:	bd80      	pop	{r7, pc}
 800992e:	bf00      	nop
 8009930:	20000744 	.word	0x20000744

08009934 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009934:	b580      	push	{r7, lr}
 8009936:	b086      	sub	sp, #24
 8009938:	af00      	add	r7, sp, #0
 800993a:	60f8      	str	r0, [r7, #12]
 800993c:	60b9      	str	r1, [r7, #8]
 800993e:	607a      	str	r2, [r7, #4]
 8009940:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009942:	2300      	movs	r3, #0
 8009944:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	68ba      	ldr	r2, [r7, #8]
 800994a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	68fa      	ldr	r2, [r7, #12]
 8009950:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009952:	68ba      	ldr	r2, [r7, #8]
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	429a      	cmp	r2, r3
 8009958:	d812      	bhi.n	8009980 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800995a:	687a      	ldr	r2, [r7, #4]
 800995c:	683b      	ldr	r3, [r7, #0]
 800995e:	1ad2      	subs	r2, r2, r3
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	699b      	ldr	r3, [r3, #24]
 8009964:	429a      	cmp	r2, r3
 8009966:	d302      	bcc.n	800996e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009968:	2301      	movs	r3, #1
 800996a:	617b      	str	r3, [r7, #20]
 800996c:	e01b      	b.n	80099a6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800996e:	4b10      	ldr	r3, [pc, #64]	; (80099b0 <prvInsertTimerInActiveList+0x7c>)
 8009970:	681a      	ldr	r2, [r3, #0]
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	3304      	adds	r3, #4
 8009976:	4619      	mov	r1, r3
 8009978:	4610      	mov	r0, r2
 800997a:	f7fd ffc2 	bl	8007902 <vListInsert>
 800997e:	e012      	b.n	80099a6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009980:	687a      	ldr	r2, [r7, #4]
 8009982:	683b      	ldr	r3, [r7, #0]
 8009984:	429a      	cmp	r2, r3
 8009986:	d206      	bcs.n	8009996 <prvInsertTimerInActiveList+0x62>
 8009988:	68ba      	ldr	r2, [r7, #8]
 800998a:	683b      	ldr	r3, [r7, #0]
 800998c:	429a      	cmp	r2, r3
 800998e:	d302      	bcc.n	8009996 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009990:	2301      	movs	r3, #1
 8009992:	617b      	str	r3, [r7, #20]
 8009994:	e007      	b.n	80099a6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009996:	4b07      	ldr	r3, [pc, #28]	; (80099b4 <prvInsertTimerInActiveList+0x80>)
 8009998:	681a      	ldr	r2, [r3, #0]
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	3304      	adds	r3, #4
 800999e:	4619      	mov	r1, r3
 80099a0:	4610      	mov	r0, r2
 80099a2:	f7fd ffae 	bl	8007902 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80099a6:	697b      	ldr	r3, [r7, #20]
}
 80099a8:	4618      	mov	r0, r3
 80099aa:	3718      	adds	r7, #24
 80099ac:	46bd      	mov	sp, r7
 80099ae:	bd80      	pop	{r7, pc}
 80099b0:	20000738 	.word	0x20000738
 80099b4:	20000734 	.word	0x20000734

080099b8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80099b8:	b580      	push	{r7, lr}
 80099ba:	b08c      	sub	sp, #48	; 0x30
 80099bc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80099be:	e0ae      	b.n	8009b1e <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80099c0:	68bb      	ldr	r3, [r7, #8]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	f2c0 80ab 	blt.w	8009b1e <prvProcessReceivedCommands+0x166>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80099c8:	693b      	ldr	r3, [r7, #16]
 80099ca:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80099cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099ce:	695b      	ldr	r3, [r3, #20]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d004      	beq.n	80099de <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80099d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099d6:	3304      	adds	r3, #4
 80099d8:	4618      	mov	r0, r3
 80099da:	f7fd ffcb 	bl	8007974 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80099de:	1d3b      	adds	r3, r7, #4
 80099e0:	4618      	mov	r0, r3
 80099e2:	f7ff ff87 	bl	80098f4 <prvSampleTimeNow>
 80099e6:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 80099e8:	68bb      	ldr	r3, [r7, #8]
 80099ea:	2b09      	cmp	r3, #9
 80099ec:	f200 8096 	bhi.w	8009b1c <prvProcessReceivedCommands+0x164>
 80099f0:	a201      	add	r2, pc, #4	; (adr r2, 80099f8 <prvProcessReceivedCommands+0x40>)
 80099f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099f6:	bf00      	nop
 80099f8:	08009a21 	.word	0x08009a21
 80099fc:	08009a21 	.word	0x08009a21
 8009a00:	08009a21 	.word	0x08009a21
 8009a04:	08009a95 	.word	0x08009a95
 8009a08:	08009aa9 	.word	0x08009aa9
 8009a0c:	08009af3 	.word	0x08009af3
 8009a10:	08009a21 	.word	0x08009a21
 8009a14:	08009a21 	.word	0x08009a21
 8009a18:	08009a95 	.word	0x08009a95
 8009a1c:	08009aa9 	.word	0x08009aa9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a22:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009a26:	f043 0301 	orr.w	r3, r3, #1
 8009a2a:	b2da      	uxtb	r2, r3
 8009a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a2e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009a32:	68fa      	ldr	r2, [r7, #12]
 8009a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a36:	699b      	ldr	r3, [r3, #24]
 8009a38:	18d1      	adds	r1, r2, r3
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	6a3a      	ldr	r2, [r7, #32]
 8009a3e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009a40:	f7ff ff78 	bl	8009934 <prvInsertTimerInActiveList>
 8009a44:	4603      	mov	r3, r0
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d069      	beq.n	8009b1e <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a4c:	6a1b      	ldr	r3, [r3, #32]
 8009a4e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009a50:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a54:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009a58:	f003 0304 	and.w	r3, r3, #4
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d05e      	beq.n	8009b1e <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009a60:	68fa      	ldr	r2, [r7, #12]
 8009a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a64:	699b      	ldr	r3, [r3, #24]
 8009a66:	441a      	add	r2, r3
 8009a68:	2300      	movs	r3, #0
 8009a6a:	9300      	str	r3, [sp, #0]
 8009a6c:	2300      	movs	r3, #0
 8009a6e:	2100      	movs	r1, #0
 8009a70:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009a72:	f7ff fe21 	bl	80096b8 <xTimerGenericCommand>
 8009a76:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8009a78:	69fb      	ldr	r3, [r7, #28]
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d14f      	bne.n	8009b1e <prvProcessReceivedCommands+0x166>
        __asm volatile
 8009a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a82:	f383 8811 	msr	BASEPRI, r3
 8009a86:	f3bf 8f6f 	isb	sy
 8009a8a:	f3bf 8f4f 	dsb	sy
 8009a8e:	61bb      	str	r3, [r7, #24]
    }
 8009a90:	bf00      	nop
 8009a92:	e7fe      	b.n	8009a92 <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a96:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009a9a:	f023 0301 	bic.w	r3, r3, #1
 8009a9e:	b2da      	uxtb	r2, r3
 8009aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aa2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009aa6:	e03a      	b.n	8009b1e <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aaa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009aae:	f043 0301 	orr.w	r3, r3, #1
 8009ab2:	b2da      	uxtb	r2, r3
 8009ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ab6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009aba:	68fa      	ldr	r2, [r7, #12]
 8009abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009abe:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ac2:	699b      	ldr	r3, [r3, #24]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d10a      	bne.n	8009ade <prvProcessReceivedCommands+0x126>
        __asm volatile
 8009ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009acc:	f383 8811 	msr	BASEPRI, r3
 8009ad0:	f3bf 8f6f 	isb	sy
 8009ad4:	f3bf 8f4f 	dsb	sy
 8009ad8:	617b      	str	r3, [r7, #20]
    }
 8009ada:	bf00      	nop
 8009adc:	e7fe      	b.n	8009adc <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ae0:	699a      	ldr	r2, [r3, #24]
 8009ae2:	6a3b      	ldr	r3, [r7, #32]
 8009ae4:	18d1      	adds	r1, r2, r3
 8009ae6:	6a3b      	ldr	r3, [r7, #32]
 8009ae8:	6a3a      	ldr	r2, [r7, #32]
 8009aea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009aec:	f7ff ff22 	bl	8009934 <prvInsertTimerInActiveList>
					break;
 8009af0:	e015      	b.n	8009b1e <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009af4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009af8:	f003 0302 	and.w	r3, r3, #2
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d103      	bne.n	8009b08 <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 8009b00:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009b02:	f000 fbbb 	bl	800a27c <vPortFree>
 8009b06:	e00a      	b.n	8009b1e <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b0a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009b0e:	f023 0301 	bic.w	r3, r3, #1
 8009b12:	b2da      	uxtb	r2, r3
 8009b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b16:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009b1a:	e000      	b.n	8009b1e <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
 8009b1c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009b1e:	4b08      	ldr	r3, [pc, #32]	; (8009b40 <prvProcessReceivedCommands+0x188>)
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	f107 0108 	add.w	r1, r7, #8
 8009b26:	2200      	movs	r2, #0
 8009b28:	4618      	mov	r0, r3
 8009b2a:	f7fe f9db 	bl	8007ee4 <xQueueReceive>
 8009b2e:	4603      	mov	r3, r0
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	f47f af45 	bne.w	80099c0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009b36:	bf00      	nop
 8009b38:	bf00      	nop
 8009b3a:	3728      	adds	r7, #40	; 0x28
 8009b3c:	46bd      	mov	sp, r7
 8009b3e:	bd80      	pop	{r7, pc}
 8009b40:	2000073c 	.word	0x2000073c

08009b44 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009b44:	b580      	push	{r7, lr}
 8009b46:	b088      	sub	sp, #32
 8009b48:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009b4a:	e048      	b.n	8009bde <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009b4c:	4b2d      	ldr	r3, [pc, #180]	; (8009c04 <prvSwitchTimerLists+0xc0>)
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	68db      	ldr	r3, [r3, #12]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b56:	4b2b      	ldr	r3, [pc, #172]	; (8009c04 <prvSwitchTimerLists+0xc0>)
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	68db      	ldr	r3, [r3, #12]
 8009b5c:	68db      	ldr	r3, [r3, #12]
 8009b5e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	3304      	adds	r3, #4
 8009b64:	4618      	mov	r0, r3
 8009b66:	f7fd ff05 	bl	8007974 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	6a1b      	ldr	r3, [r3, #32]
 8009b6e:	68f8      	ldr	r0, [r7, #12]
 8009b70:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009b78:	f003 0304 	and.w	r3, r3, #4
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d02e      	beq.n	8009bde <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	699b      	ldr	r3, [r3, #24]
 8009b84:	693a      	ldr	r2, [r7, #16]
 8009b86:	4413      	add	r3, r2
 8009b88:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009b8a:	68ba      	ldr	r2, [r7, #8]
 8009b8c:	693b      	ldr	r3, [r7, #16]
 8009b8e:	429a      	cmp	r2, r3
 8009b90:	d90e      	bls.n	8009bb0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	68ba      	ldr	r2, [r7, #8]
 8009b96:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	68fa      	ldr	r2, [r7, #12]
 8009b9c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009b9e:	4b19      	ldr	r3, [pc, #100]	; (8009c04 <prvSwitchTimerLists+0xc0>)
 8009ba0:	681a      	ldr	r2, [r3, #0]
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	3304      	adds	r3, #4
 8009ba6:	4619      	mov	r1, r3
 8009ba8:	4610      	mov	r0, r2
 8009baa:	f7fd feaa 	bl	8007902 <vListInsert>
 8009bae:	e016      	b.n	8009bde <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009bb0:	2300      	movs	r3, #0
 8009bb2:	9300      	str	r3, [sp, #0]
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	693a      	ldr	r2, [r7, #16]
 8009bb8:	2100      	movs	r1, #0
 8009bba:	68f8      	ldr	r0, [r7, #12]
 8009bbc:	f7ff fd7c 	bl	80096b8 <xTimerGenericCommand>
 8009bc0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d10a      	bne.n	8009bde <prvSwitchTimerLists+0x9a>
        __asm volatile
 8009bc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bcc:	f383 8811 	msr	BASEPRI, r3
 8009bd0:	f3bf 8f6f 	isb	sy
 8009bd4:	f3bf 8f4f 	dsb	sy
 8009bd8:	603b      	str	r3, [r7, #0]
    }
 8009bda:	bf00      	nop
 8009bdc:	e7fe      	b.n	8009bdc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009bde:	4b09      	ldr	r3, [pc, #36]	; (8009c04 <prvSwitchTimerLists+0xc0>)
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d1b1      	bne.n	8009b4c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009be8:	4b06      	ldr	r3, [pc, #24]	; (8009c04 <prvSwitchTimerLists+0xc0>)
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009bee:	4b06      	ldr	r3, [pc, #24]	; (8009c08 <prvSwitchTimerLists+0xc4>)
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	4a04      	ldr	r2, [pc, #16]	; (8009c04 <prvSwitchTimerLists+0xc0>)
 8009bf4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009bf6:	4a04      	ldr	r2, [pc, #16]	; (8009c08 <prvSwitchTimerLists+0xc4>)
 8009bf8:	697b      	ldr	r3, [r7, #20]
 8009bfa:	6013      	str	r3, [r2, #0]
}
 8009bfc:	bf00      	nop
 8009bfe:	3718      	adds	r7, #24
 8009c00:	46bd      	mov	sp, r7
 8009c02:	bd80      	pop	{r7, pc}
 8009c04:	20000734 	.word	0x20000734
 8009c08:	20000738 	.word	0x20000738

08009c0c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009c0c:	b580      	push	{r7, lr}
 8009c0e:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009c10:	f000 f962 	bl	8009ed8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009c14:	4b12      	ldr	r3, [pc, #72]	; (8009c60 <prvCheckForValidListAndQueue+0x54>)
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d11d      	bne.n	8009c58 <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 8009c1c:	4811      	ldr	r0, [pc, #68]	; (8009c64 <prvCheckForValidListAndQueue+0x58>)
 8009c1e:	f7fd fe1f 	bl	8007860 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009c22:	4811      	ldr	r0, [pc, #68]	; (8009c68 <prvCheckForValidListAndQueue+0x5c>)
 8009c24:	f7fd fe1c 	bl	8007860 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009c28:	4b10      	ldr	r3, [pc, #64]	; (8009c6c <prvCheckForValidListAndQueue+0x60>)
 8009c2a:	4a0e      	ldr	r2, [pc, #56]	; (8009c64 <prvCheckForValidListAndQueue+0x58>)
 8009c2c:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009c2e:	4b10      	ldr	r3, [pc, #64]	; (8009c70 <prvCheckForValidListAndQueue+0x64>)
 8009c30:	4a0d      	ldr	r2, [pc, #52]	; (8009c68 <prvCheckForValidListAndQueue+0x5c>)
 8009c32:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8009c34:	2200      	movs	r2, #0
 8009c36:	210c      	movs	r1, #12
 8009c38:	200a      	movs	r0, #10
 8009c3a:	f7fd ff2d 	bl	8007a98 <xQueueGenericCreate>
 8009c3e:	4603      	mov	r3, r0
 8009c40:	4a07      	ldr	r2, [pc, #28]	; (8009c60 <prvCheckForValidListAndQueue+0x54>)
 8009c42:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009c44:	4b06      	ldr	r3, [pc, #24]	; (8009c60 <prvCheckForValidListAndQueue+0x54>)
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d005      	beq.n	8009c58 <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009c4c:	4b04      	ldr	r3, [pc, #16]	; (8009c60 <prvCheckForValidListAndQueue+0x54>)
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	4908      	ldr	r1, [pc, #32]	; (8009c74 <prvCheckForValidListAndQueue+0x68>)
 8009c52:	4618      	mov	r0, r3
 8009c54:	f7fe fc5a 	bl	800850c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009c58:	f000 f96e 	bl	8009f38 <vPortExitCritical>
}
 8009c5c:	bf00      	nop
 8009c5e:	bd80      	pop	{r7, pc}
 8009c60:	2000073c 	.word	0x2000073c
 8009c64:	2000070c 	.word	0x2000070c
 8009c68:	20000720 	.word	0x20000720
 8009c6c:	20000734 	.word	0x20000734
 8009c70:	20000738 	.word	0x20000738
 8009c74:	0800a5e0 	.word	0x0800a5e0

08009c78 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8009c78:	b480      	push	{r7}
 8009c7a:	b085      	sub	sp, #20
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	60f8      	str	r0, [r7, #12]
 8009c80:	60b9      	str	r1, [r7, #8]
 8009c82:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	3b04      	subs	r3, #4
 8009c88:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009c90:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	3b04      	subs	r3, #4
 8009c96:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8009c98:	68bb      	ldr	r3, [r7, #8]
 8009c9a:	f023 0201 	bic.w	r2, r3, #1
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	3b04      	subs	r3, #4
 8009ca6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8009ca8:	4a0c      	ldr	r2, [pc, #48]	; (8009cdc <pxPortInitialiseStack+0x64>)
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	3b14      	subs	r3, #20
 8009cb2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8009cb4:	687a      	ldr	r2, [r7, #4]
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	3b04      	subs	r3, #4
 8009cbe:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	f06f 0202 	mvn.w	r2, #2
 8009cc6:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	3b20      	subs	r3, #32
 8009ccc:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8009cce:	68fb      	ldr	r3, [r7, #12]
}
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	3714      	adds	r7, #20
 8009cd4:	46bd      	mov	sp, r7
 8009cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cda:	4770      	bx	lr
 8009cdc:	08009ce1 	.word	0x08009ce1

08009ce0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009ce0:	b480      	push	{r7}
 8009ce2:	b085      	sub	sp, #20
 8009ce4:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8009ce6:	2300      	movs	r3, #0
 8009ce8:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8009cea:	4b12      	ldr	r3, [pc, #72]	; (8009d34 <prvTaskExitError+0x54>)
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cf2:	d00a      	beq.n	8009d0a <prvTaskExitError+0x2a>
        __asm volatile
 8009cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cf8:	f383 8811 	msr	BASEPRI, r3
 8009cfc:	f3bf 8f6f 	isb	sy
 8009d00:	f3bf 8f4f 	dsb	sy
 8009d04:	60fb      	str	r3, [r7, #12]
    }
 8009d06:	bf00      	nop
 8009d08:	e7fe      	b.n	8009d08 <prvTaskExitError+0x28>
        __asm volatile
 8009d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d0e:	f383 8811 	msr	BASEPRI, r3
 8009d12:	f3bf 8f6f 	isb	sy
 8009d16:	f3bf 8f4f 	dsb	sy
 8009d1a:	60bb      	str	r3, [r7, #8]
    }
 8009d1c:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8009d1e:	bf00      	nop
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d0fc      	beq.n	8009d20 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8009d26:	bf00      	nop
 8009d28:	bf00      	nop
 8009d2a:	3714      	adds	r7, #20
 8009d2c:	46bd      	mov	sp, r7
 8009d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d32:	4770      	bx	lr
 8009d34:	200000a8 	.word	0x200000a8
	...

08009d40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8009d40:	4b07      	ldr	r3, [pc, #28]	; (8009d60 <pxCurrentTCBConst2>)
 8009d42:	6819      	ldr	r1, [r3, #0]
 8009d44:	6808      	ldr	r0, [r1, #0]
 8009d46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d4a:	f380 8809 	msr	PSP, r0
 8009d4e:	f3bf 8f6f 	isb	sy
 8009d52:	f04f 0000 	mov.w	r0, #0
 8009d56:	f380 8811 	msr	BASEPRI, r0
 8009d5a:	4770      	bx	lr
 8009d5c:	f3af 8000 	nop.w

08009d60 <pxCurrentTCBConst2>:
 8009d60:	2000020c 	.word	0x2000020c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8009d64:	bf00      	nop
 8009d66:	bf00      	nop

08009d68 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8009d68:	4808      	ldr	r0, [pc, #32]	; (8009d8c <prvPortStartFirstTask+0x24>)
 8009d6a:	6800      	ldr	r0, [r0, #0]
 8009d6c:	6800      	ldr	r0, [r0, #0]
 8009d6e:	f380 8808 	msr	MSP, r0
 8009d72:	f04f 0000 	mov.w	r0, #0
 8009d76:	f380 8814 	msr	CONTROL, r0
 8009d7a:	b662      	cpsie	i
 8009d7c:	b661      	cpsie	f
 8009d7e:	f3bf 8f4f 	dsb	sy
 8009d82:	f3bf 8f6f 	isb	sy
 8009d86:	df00      	svc	0
 8009d88:	bf00      	nop
 8009d8a:	0000      	.short	0x0000
 8009d8c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8009d90:	bf00      	nop
 8009d92:	bf00      	nop

08009d94 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009d94:	b580      	push	{r7, lr}
 8009d96:	b086      	sub	sp, #24
 8009d98:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009d9a:	4b46      	ldr	r3, [pc, #280]	; (8009eb4 <xPortStartScheduler+0x120>)
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	4a46      	ldr	r2, [pc, #280]	; (8009eb8 <xPortStartScheduler+0x124>)
 8009da0:	4293      	cmp	r3, r2
 8009da2:	d10a      	bne.n	8009dba <xPortStartScheduler+0x26>
        __asm volatile
 8009da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009da8:	f383 8811 	msr	BASEPRI, r3
 8009dac:	f3bf 8f6f 	isb	sy
 8009db0:	f3bf 8f4f 	dsb	sy
 8009db4:	613b      	str	r3, [r7, #16]
    }
 8009db6:	bf00      	nop
 8009db8:	e7fe      	b.n	8009db8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009dba:	4b3e      	ldr	r3, [pc, #248]	; (8009eb4 <xPortStartScheduler+0x120>)
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	4a3f      	ldr	r2, [pc, #252]	; (8009ebc <xPortStartScheduler+0x128>)
 8009dc0:	4293      	cmp	r3, r2
 8009dc2:	d10a      	bne.n	8009dda <xPortStartScheduler+0x46>
        __asm volatile
 8009dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dc8:	f383 8811 	msr	BASEPRI, r3
 8009dcc:	f3bf 8f6f 	isb	sy
 8009dd0:	f3bf 8f4f 	dsb	sy
 8009dd4:	60fb      	str	r3, [r7, #12]
    }
 8009dd6:	bf00      	nop
 8009dd8:	e7fe      	b.n	8009dd8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009dda:	4b39      	ldr	r3, [pc, #228]	; (8009ec0 <xPortStartScheduler+0x12c>)
 8009ddc:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009dde:	697b      	ldr	r3, [r7, #20]
 8009de0:	781b      	ldrb	r3, [r3, #0]
 8009de2:	b2db      	uxtb	r3, r3
 8009de4:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009de6:	697b      	ldr	r3, [r7, #20]
 8009de8:	22ff      	movs	r2, #255	; 0xff
 8009dea:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009dec:	697b      	ldr	r3, [r7, #20]
 8009dee:	781b      	ldrb	r3, [r3, #0]
 8009df0:	b2db      	uxtb	r3, r3
 8009df2:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009df4:	78fb      	ldrb	r3, [r7, #3]
 8009df6:	b2db      	uxtb	r3, r3
 8009df8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009dfc:	b2da      	uxtb	r2, r3
 8009dfe:	4b31      	ldr	r3, [pc, #196]	; (8009ec4 <xPortStartScheduler+0x130>)
 8009e00:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009e02:	4b31      	ldr	r3, [pc, #196]	; (8009ec8 <xPortStartScheduler+0x134>)
 8009e04:	2207      	movs	r2, #7
 8009e06:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009e08:	e009      	b.n	8009e1e <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 8009e0a:	4b2f      	ldr	r3, [pc, #188]	; (8009ec8 <xPortStartScheduler+0x134>)
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	3b01      	subs	r3, #1
 8009e10:	4a2d      	ldr	r2, [pc, #180]	; (8009ec8 <xPortStartScheduler+0x134>)
 8009e12:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009e14:	78fb      	ldrb	r3, [r7, #3]
 8009e16:	b2db      	uxtb	r3, r3
 8009e18:	005b      	lsls	r3, r3, #1
 8009e1a:	b2db      	uxtb	r3, r3
 8009e1c:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009e1e:	78fb      	ldrb	r3, [r7, #3]
 8009e20:	b2db      	uxtb	r3, r3
 8009e22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e26:	2b80      	cmp	r3, #128	; 0x80
 8009e28:	d0ef      	beq.n	8009e0a <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009e2a:	4b27      	ldr	r3, [pc, #156]	; (8009ec8 <xPortStartScheduler+0x134>)
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	f1c3 0307 	rsb	r3, r3, #7
 8009e32:	2b04      	cmp	r3, #4
 8009e34:	d00a      	beq.n	8009e4c <xPortStartScheduler+0xb8>
        __asm volatile
 8009e36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e3a:	f383 8811 	msr	BASEPRI, r3
 8009e3e:	f3bf 8f6f 	isb	sy
 8009e42:	f3bf 8f4f 	dsb	sy
 8009e46:	60bb      	str	r3, [r7, #8]
    }
 8009e48:	bf00      	nop
 8009e4a:	e7fe      	b.n	8009e4a <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009e4c:	4b1e      	ldr	r3, [pc, #120]	; (8009ec8 <xPortStartScheduler+0x134>)
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	021b      	lsls	r3, r3, #8
 8009e52:	4a1d      	ldr	r2, [pc, #116]	; (8009ec8 <xPortStartScheduler+0x134>)
 8009e54:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009e56:	4b1c      	ldr	r3, [pc, #112]	; (8009ec8 <xPortStartScheduler+0x134>)
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009e5e:	4a1a      	ldr	r2, [pc, #104]	; (8009ec8 <xPortStartScheduler+0x134>)
 8009e60:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	b2da      	uxtb	r2, r3
 8009e66:	697b      	ldr	r3, [r7, #20]
 8009e68:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8009e6a:	4b18      	ldr	r3, [pc, #96]	; (8009ecc <xPortStartScheduler+0x138>)
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	4a17      	ldr	r2, [pc, #92]	; (8009ecc <xPortStartScheduler+0x138>)
 8009e70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009e74:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8009e76:	4b15      	ldr	r3, [pc, #84]	; (8009ecc <xPortStartScheduler+0x138>)
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	4a14      	ldr	r2, [pc, #80]	; (8009ecc <xPortStartScheduler+0x138>)
 8009e7c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009e80:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8009e82:	f000 f8db 	bl	800a03c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8009e86:	4b12      	ldr	r3, [pc, #72]	; (8009ed0 <xPortStartScheduler+0x13c>)
 8009e88:	2200      	movs	r2, #0
 8009e8a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8009e8c:	f000 f8f0 	bl	800a070 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009e90:	4b10      	ldr	r3, [pc, #64]	; (8009ed4 <xPortStartScheduler+0x140>)
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	4a0f      	ldr	r2, [pc, #60]	; (8009ed4 <xPortStartScheduler+0x140>)
 8009e96:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009e9a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8009e9c:	f7ff ff64 	bl	8009d68 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8009ea0:	f7fe ff52 	bl	8008d48 <vTaskSwitchContext>
    prvTaskExitError();
 8009ea4:	f7ff ff1c 	bl	8009ce0 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8009ea8:	2300      	movs	r3, #0
}
 8009eaa:	4618      	mov	r0, r3
 8009eac:	3718      	adds	r7, #24
 8009eae:	46bd      	mov	sp, r7
 8009eb0:	bd80      	pop	{r7, pc}
 8009eb2:	bf00      	nop
 8009eb4:	e000ed00 	.word	0xe000ed00
 8009eb8:	410fc271 	.word	0x410fc271
 8009ebc:	410fc270 	.word	0x410fc270
 8009ec0:	e000e400 	.word	0xe000e400
 8009ec4:	20000748 	.word	0x20000748
 8009ec8:	2000074c 	.word	0x2000074c
 8009ecc:	e000ed20 	.word	0xe000ed20
 8009ed0:	200000a8 	.word	0x200000a8
 8009ed4:	e000ef34 	.word	0xe000ef34

08009ed8 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009ed8:	b480      	push	{r7}
 8009eda:	b083      	sub	sp, #12
 8009edc:	af00      	add	r7, sp, #0
        __asm volatile
 8009ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ee2:	f383 8811 	msr	BASEPRI, r3
 8009ee6:	f3bf 8f6f 	isb	sy
 8009eea:	f3bf 8f4f 	dsb	sy
 8009eee:	607b      	str	r3, [r7, #4]
    }
 8009ef0:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8009ef2:	4b0f      	ldr	r3, [pc, #60]	; (8009f30 <vPortEnterCritical+0x58>)
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	3301      	adds	r3, #1
 8009ef8:	4a0d      	ldr	r2, [pc, #52]	; (8009f30 <vPortEnterCritical+0x58>)
 8009efa:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8009efc:	4b0c      	ldr	r3, [pc, #48]	; (8009f30 <vPortEnterCritical+0x58>)
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	2b01      	cmp	r3, #1
 8009f02:	d10f      	bne.n	8009f24 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009f04:	4b0b      	ldr	r3, [pc, #44]	; (8009f34 <vPortEnterCritical+0x5c>)
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	b2db      	uxtb	r3, r3
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d00a      	beq.n	8009f24 <vPortEnterCritical+0x4c>
        __asm volatile
 8009f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f12:	f383 8811 	msr	BASEPRI, r3
 8009f16:	f3bf 8f6f 	isb	sy
 8009f1a:	f3bf 8f4f 	dsb	sy
 8009f1e:	603b      	str	r3, [r7, #0]
    }
 8009f20:	bf00      	nop
 8009f22:	e7fe      	b.n	8009f22 <vPortEnterCritical+0x4a>
    }
}
 8009f24:	bf00      	nop
 8009f26:	370c      	adds	r7, #12
 8009f28:	46bd      	mov	sp, r7
 8009f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2e:	4770      	bx	lr
 8009f30:	200000a8 	.word	0x200000a8
 8009f34:	e000ed04 	.word	0xe000ed04

08009f38 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009f38:	b480      	push	{r7}
 8009f3a:	b083      	sub	sp, #12
 8009f3c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8009f3e:	4b12      	ldr	r3, [pc, #72]	; (8009f88 <vPortExitCritical+0x50>)
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d10a      	bne.n	8009f5c <vPortExitCritical+0x24>
        __asm volatile
 8009f46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f4a:	f383 8811 	msr	BASEPRI, r3
 8009f4e:	f3bf 8f6f 	isb	sy
 8009f52:	f3bf 8f4f 	dsb	sy
 8009f56:	607b      	str	r3, [r7, #4]
    }
 8009f58:	bf00      	nop
 8009f5a:	e7fe      	b.n	8009f5a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8009f5c:	4b0a      	ldr	r3, [pc, #40]	; (8009f88 <vPortExitCritical+0x50>)
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	3b01      	subs	r3, #1
 8009f62:	4a09      	ldr	r2, [pc, #36]	; (8009f88 <vPortExitCritical+0x50>)
 8009f64:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8009f66:	4b08      	ldr	r3, [pc, #32]	; (8009f88 <vPortExitCritical+0x50>)
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d105      	bne.n	8009f7a <vPortExitCritical+0x42>
 8009f6e:	2300      	movs	r3, #0
 8009f70:	603b      	str	r3, [r7, #0]
        __asm volatile
 8009f72:	683b      	ldr	r3, [r7, #0]
 8009f74:	f383 8811 	msr	BASEPRI, r3
    }
 8009f78:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8009f7a:	bf00      	nop
 8009f7c:	370c      	adds	r7, #12
 8009f7e:	46bd      	mov	sp, r7
 8009f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f84:	4770      	bx	lr
 8009f86:	bf00      	nop
 8009f88:	200000a8 	.word	0x200000a8
 8009f8c:	00000000 	.word	0x00000000

08009f90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8009f90:	f3ef 8009 	mrs	r0, PSP
 8009f94:	f3bf 8f6f 	isb	sy
 8009f98:	4b15      	ldr	r3, [pc, #84]	; (8009ff0 <pxCurrentTCBConst>)
 8009f9a:	681a      	ldr	r2, [r3, #0]
 8009f9c:	f01e 0f10 	tst.w	lr, #16
 8009fa0:	bf08      	it	eq
 8009fa2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009fa6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009faa:	6010      	str	r0, [r2, #0]
 8009fac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009fb0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009fb4:	f380 8811 	msr	BASEPRI, r0
 8009fb8:	f3bf 8f4f 	dsb	sy
 8009fbc:	f3bf 8f6f 	isb	sy
 8009fc0:	f7fe fec2 	bl	8008d48 <vTaskSwitchContext>
 8009fc4:	f04f 0000 	mov.w	r0, #0
 8009fc8:	f380 8811 	msr	BASEPRI, r0
 8009fcc:	bc09      	pop	{r0, r3}
 8009fce:	6819      	ldr	r1, [r3, #0]
 8009fd0:	6808      	ldr	r0, [r1, #0]
 8009fd2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fd6:	f01e 0f10 	tst.w	lr, #16
 8009fda:	bf08      	it	eq
 8009fdc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009fe0:	f380 8809 	msr	PSP, r0
 8009fe4:	f3bf 8f6f 	isb	sy
 8009fe8:	4770      	bx	lr
 8009fea:	bf00      	nop
 8009fec:	f3af 8000 	nop.w

08009ff0 <pxCurrentTCBConst>:
 8009ff0:	2000020c 	.word	0x2000020c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8009ff4:	bf00      	nop
 8009ff6:	bf00      	nop

08009ff8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009ff8:	b580      	push	{r7, lr}
 8009ffa:	b082      	sub	sp, #8
 8009ffc:	af00      	add	r7, sp, #0
        __asm volatile
 8009ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a002:	f383 8811 	msr	BASEPRI, r3
 800a006:	f3bf 8f6f 	isb	sy
 800a00a:	f3bf 8f4f 	dsb	sy
 800a00e:	607b      	str	r3, [r7, #4]
    }
 800a010:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 800a012:	f7fe fddf 	bl	8008bd4 <xTaskIncrementTick>
 800a016:	4603      	mov	r3, r0
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d003      	beq.n	800a024 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a01c:	4b06      	ldr	r3, [pc, #24]	; (800a038 <SysTick_Handler+0x40>)
 800a01e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a022:	601a      	str	r2, [r3, #0]
 800a024:	2300      	movs	r3, #0
 800a026:	603b      	str	r3, [r7, #0]
        __asm volatile
 800a028:	683b      	ldr	r3, [r7, #0]
 800a02a:	f383 8811 	msr	BASEPRI, r3
    }
 800a02e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 800a030:	bf00      	nop
 800a032:	3708      	adds	r7, #8
 800a034:	46bd      	mov	sp, r7
 800a036:	bd80      	pop	{r7, pc}
 800a038:	e000ed04 	.word	0xe000ed04

0800a03c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800a03c:	b480      	push	{r7}
 800a03e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a040:	4b08      	ldr	r3, [pc, #32]	; (800a064 <vPortSetupTimerInterrupt+0x28>)
 800a042:	2200      	movs	r2, #0
 800a044:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a046:	4b08      	ldr	r3, [pc, #32]	; (800a068 <vPortSetupTimerInterrupt+0x2c>)
 800a048:	2200      	movs	r2, #0
 800a04a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a04c:	4b07      	ldr	r3, [pc, #28]	; (800a06c <vPortSetupTimerInterrupt+0x30>)
 800a04e:	f240 12a3 	movw	r2, #419	; 0x1a3
 800a052:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a054:	4b03      	ldr	r3, [pc, #12]	; (800a064 <vPortSetupTimerInterrupt+0x28>)
 800a056:	2207      	movs	r2, #7
 800a058:	601a      	str	r2, [r3, #0]
}
 800a05a:	bf00      	nop
 800a05c:	46bd      	mov	sp, r7
 800a05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a062:	4770      	bx	lr
 800a064:	e000e010 	.word	0xe000e010
 800a068:	e000e018 	.word	0xe000e018
 800a06c:	e000e014 	.word	0xe000e014

0800a070 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 800a070:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a080 <vPortEnableVFP+0x10>
 800a074:	6801      	ldr	r1, [r0, #0]
 800a076:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a07a:	6001      	str	r1, [r0, #0]
 800a07c:	4770      	bx	lr
 800a07e:	0000      	.short	0x0000
 800a080:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 800a084:	bf00      	nop
 800a086:	bf00      	nop

0800a088 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800a088:	b480      	push	{r7}
 800a08a:	b085      	sub	sp, #20
 800a08c:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 800a08e:	f3ef 8305 	mrs	r3, IPSR
 800a092:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	2b0f      	cmp	r3, #15
 800a098:	d914      	bls.n	800a0c4 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a09a:	4a17      	ldr	r2, [pc, #92]	; (800a0f8 <vPortValidateInterruptPriority+0x70>)
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	4413      	add	r3, r2
 800a0a0:	781b      	ldrb	r3, [r3, #0]
 800a0a2:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a0a4:	4b15      	ldr	r3, [pc, #84]	; (800a0fc <vPortValidateInterruptPriority+0x74>)
 800a0a6:	781b      	ldrb	r3, [r3, #0]
 800a0a8:	7afa      	ldrb	r2, [r7, #11]
 800a0aa:	429a      	cmp	r2, r3
 800a0ac:	d20a      	bcs.n	800a0c4 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 800a0ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0b2:	f383 8811 	msr	BASEPRI, r3
 800a0b6:	f3bf 8f6f 	isb	sy
 800a0ba:	f3bf 8f4f 	dsb	sy
 800a0be:	607b      	str	r3, [r7, #4]
    }
 800a0c0:	bf00      	nop
 800a0c2:	e7fe      	b.n	800a0c2 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a0c4:	4b0e      	ldr	r3, [pc, #56]	; (800a100 <vPortValidateInterruptPriority+0x78>)
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a0cc:	4b0d      	ldr	r3, [pc, #52]	; (800a104 <vPortValidateInterruptPriority+0x7c>)
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	429a      	cmp	r2, r3
 800a0d2:	d90a      	bls.n	800a0ea <vPortValidateInterruptPriority+0x62>
        __asm volatile
 800a0d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0d8:	f383 8811 	msr	BASEPRI, r3
 800a0dc:	f3bf 8f6f 	isb	sy
 800a0e0:	f3bf 8f4f 	dsb	sy
 800a0e4:	603b      	str	r3, [r7, #0]
    }
 800a0e6:	bf00      	nop
 800a0e8:	e7fe      	b.n	800a0e8 <vPortValidateInterruptPriority+0x60>
    }
 800a0ea:	bf00      	nop
 800a0ec:	3714      	adds	r7, #20
 800a0ee:	46bd      	mov	sp, r7
 800a0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f4:	4770      	bx	lr
 800a0f6:	bf00      	nop
 800a0f8:	e000e3f0 	.word	0xe000e3f0
 800a0fc:	20000748 	.word	0x20000748
 800a100:	e000ed0c 	.word	0xe000ed0c
 800a104:	2000074c 	.word	0x2000074c

0800a108 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800a108:	b580      	push	{r7, lr}
 800a10a:	b08a      	sub	sp, #40	; 0x28
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 800a110:	2300      	movs	r3, #0
 800a112:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 800a114:	f7fe fc90 	bl	8008a38 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800a118:	4b53      	ldr	r3, [pc, #332]	; (800a268 <pvPortMalloc+0x160>)
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d101      	bne.n	800a124 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 800a120:	f000 f908 	bl	800a334 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	2b00      	cmp	r3, #0
 800a128:	d012      	beq.n	800a150 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800a12a:	2208      	movs	r2, #8
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	f003 0307 	and.w	r3, r3, #7
 800a132:	1ad3      	subs	r3, r2, r3
 800a134:	3308      	adds	r3, #8
 800a136:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 800a138:	69bb      	ldr	r3, [r7, #24]
 800a13a:	43db      	mvns	r3, r3
 800a13c:	687a      	ldr	r2, [r7, #4]
 800a13e:	429a      	cmp	r2, r3
 800a140:	d804      	bhi.n	800a14c <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 800a142:	687a      	ldr	r2, [r7, #4]
 800a144:	69bb      	ldr	r3, [r7, #24]
 800a146:	4413      	add	r3, r2
 800a148:	607b      	str	r3, [r7, #4]
 800a14a:	e001      	b.n	800a150 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 800a14c:	2300      	movs	r3, #0
 800a14e:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	2b00      	cmp	r3, #0
 800a154:	db70      	blt.n	800a238 <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d06d      	beq.n	800a238 <pvPortMalloc+0x130>
 800a15c:	4b43      	ldr	r3, [pc, #268]	; (800a26c <pvPortMalloc+0x164>)
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	687a      	ldr	r2, [r7, #4]
 800a162:	429a      	cmp	r2, r3
 800a164:	d868      	bhi.n	800a238 <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800a166:	4b42      	ldr	r3, [pc, #264]	; (800a270 <pvPortMalloc+0x168>)
 800a168:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800a16a:	4b41      	ldr	r3, [pc, #260]	; (800a270 <pvPortMalloc+0x168>)
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a170:	e004      	b.n	800a17c <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 800a172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a174:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800a176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a17c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a17e:	685b      	ldr	r3, [r3, #4]
 800a180:	687a      	ldr	r2, [r7, #4]
 800a182:	429a      	cmp	r2, r3
 800a184:	d903      	bls.n	800a18e <pvPortMalloc+0x86>
 800a186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d1f1      	bne.n	800a172 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800a18e:	4b36      	ldr	r3, [pc, #216]	; (800a268 <pvPortMalloc+0x160>)
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a194:	429a      	cmp	r2, r3
 800a196:	d04f      	beq.n	800a238 <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a198:	6a3b      	ldr	r3, [r7, #32]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	2208      	movs	r2, #8
 800a19e:	4413      	add	r3, r2
 800a1a0:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a1a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1a4:	681a      	ldr	r2, [r3, #0]
 800a1a6:	6a3b      	ldr	r3, [r7, #32]
 800a1a8:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a1aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1ac:	685a      	ldr	r2, [r3, #4]
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	1ad2      	subs	r2, r2, r3
 800a1b2:	2308      	movs	r3, #8
 800a1b4:	005b      	lsls	r3, r3, #1
 800a1b6:	429a      	cmp	r2, r3
 800a1b8:	d91f      	bls.n	800a1fa <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a1ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	4413      	add	r3, r2
 800a1c0:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a1c2:	697b      	ldr	r3, [r7, #20]
 800a1c4:	f003 0307 	and.w	r3, r3, #7
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d00a      	beq.n	800a1e2 <pvPortMalloc+0xda>
        __asm volatile
 800a1cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1d0:	f383 8811 	msr	BASEPRI, r3
 800a1d4:	f3bf 8f6f 	isb	sy
 800a1d8:	f3bf 8f4f 	dsb	sy
 800a1dc:	613b      	str	r3, [r7, #16]
    }
 800a1de:	bf00      	nop
 800a1e0:	e7fe      	b.n	800a1e0 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a1e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1e4:	685a      	ldr	r2, [r3, #4]
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	1ad2      	subs	r2, r2, r3
 800a1ea:	697b      	ldr	r3, [r7, #20]
 800a1ec:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 800a1ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1f0:	687a      	ldr	r2, [r7, #4]
 800a1f2:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a1f4:	6978      	ldr	r0, [r7, #20]
 800a1f6:	f000 f8f9 	bl	800a3ec <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a1fa:	4b1c      	ldr	r3, [pc, #112]	; (800a26c <pvPortMalloc+0x164>)
 800a1fc:	681a      	ldr	r2, [r3, #0]
 800a1fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a200:	685b      	ldr	r3, [r3, #4]
 800a202:	1ad3      	subs	r3, r2, r3
 800a204:	4a19      	ldr	r2, [pc, #100]	; (800a26c <pvPortMalloc+0x164>)
 800a206:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a208:	4b18      	ldr	r3, [pc, #96]	; (800a26c <pvPortMalloc+0x164>)
 800a20a:	681a      	ldr	r2, [r3, #0]
 800a20c:	4b19      	ldr	r3, [pc, #100]	; (800a274 <pvPortMalloc+0x16c>)
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	429a      	cmp	r2, r3
 800a212:	d203      	bcs.n	800a21c <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a214:	4b15      	ldr	r3, [pc, #84]	; (800a26c <pvPortMalloc+0x164>)
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	4a16      	ldr	r2, [pc, #88]	; (800a274 <pvPortMalloc+0x16c>)
 800a21a:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 800a21c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a21e:	685b      	ldr	r3, [r3, #4]
 800a220:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800a224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a226:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800a228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a22a:	2200      	movs	r2, #0
 800a22c:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800a22e:	4b12      	ldr	r3, [pc, #72]	; (800a278 <pvPortMalloc+0x170>)
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	3301      	adds	r3, #1
 800a234:	4a10      	ldr	r2, [pc, #64]	; (800a278 <pvPortMalloc+0x170>)
 800a236:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800a238:	f7fe fc0c 	bl	8008a54 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a23c:	69fb      	ldr	r3, [r7, #28]
 800a23e:	f003 0307 	and.w	r3, r3, #7
 800a242:	2b00      	cmp	r3, #0
 800a244:	d00a      	beq.n	800a25c <pvPortMalloc+0x154>
        __asm volatile
 800a246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a24a:	f383 8811 	msr	BASEPRI, r3
 800a24e:	f3bf 8f6f 	isb	sy
 800a252:	f3bf 8f4f 	dsb	sy
 800a256:	60fb      	str	r3, [r7, #12]
    }
 800a258:	bf00      	nop
 800a25a:	e7fe      	b.n	800a25a <pvPortMalloc+0x152>
    return pvReturn;
 800a25c:	69fb      	ldr	r3, [r7, #28]
}
 800a25e:	4618      	mov	r0, r3
 800a260:	3728      	adds	r7, #40	; 0x28
 800a262:	46bd      	mov	sp, r7
 800a264:	bd80      	pop	{r7, pc}
 800a266:	bf00      	nop
 800a268:	20004358 	.word	0x20004358
 800a26c:	2000435c 	.word	0x2000435c
 800a270:	20004350 	.word	0x20004350
 800a274:	20004360 	.word	0x20004360
 800a278:	20004364 	.word	0x20004364

0800a27c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800a27c:	b580      	push	{r7, lr}
 800a27e:	b086      	sub	sp, #24
 800a280:	af00      	add	r7, sp, #0
 800a282:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d049      	beq.n	800a322 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800a28e:	2308      	movs	r3, #8
 800a290:	425b      	negs	r3, r3
 800a292:	697a      	ldr	r2, [r7, #20]
 800a294:	4413      	add	r3, r2
 800a296:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800a298:	697b      	ldr	r3, [r7, #20]
 800a29a:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 800a29c:	693b      	ldr	r3, [r7, #16]
 800a29e:	685b      	ldr	r3, [r3, #4]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	db0a      	blt.n	800a2ba <vPortFree+0x3e>
        __asm volatile
 800a2a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2a8:	f383 8811 	msr	BASEPRI, r3
 800a2ac:	f3bf 8f6f 	isb	sy
 800a2b0:	f3bf 8f4f 	dsb	sy
 800a2b4:	60fb      	str	r3, [r7, #12]
    }
 800a2b6:	bf00      	nop
 800a2b8:	e7fe      	b.n	800a2b8 <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a2ba:	693b      	ldr	r3, [r7, #16]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d00a      	beq.n	800a2d8 <vPortFree+0x5c>
        __asm volatile
 800a2c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2c6:	f383 8811 	msr	BASEPRI, r3
 800a2ca:	f3bf 8f6f 	isb	sy
 800a2ce:	f3bf 8f4f 	dsb	sy
 800a2d2:	60bb      	str	r3, [r7, #8]
    }
 800a2d4:	bf00      	nop
 800a2d6:	e7fe      	b.n	800a2d6 <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 800a2d8:	693b      	ldr	r3, [r7, #16]
 800a2da:	685b      	ldr	r3, [r3, #4]
 800a2dc:	0fdb      	lsrs	r3, r3, #31
 800a2de:	f003 0301 	and.w	r3, r3, #1
 800a2e2:	b2db      	uxtb	r3, r3
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d01c      	beq.n	800a322 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800a2e8:	693b      	ldr	r3, [r7, #16]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d118      	bne.n	800a322 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 800a2f0:	693b      	ldr	r3, [r7, #16]
 800a2f2:	685b      	ldr	r3, [r3, #4]
 800a2f4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800a2f8:	693b      	ldr	r3, [r7, #16]
 800a2fa:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 800a2fc:	f7fe fb9c 	bl	8008a38 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 800a300:	693b      	ldr	r3, [r7, #16]
 800a302:	685a      	ldr	r2, [r3, #4]
 800a304:	4b09      	ldr	r3, [pc, #36]	; (800a32c <vPortFree+0xb0>)
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	4413      	add	r3, r2
 800a30a:	4a08      	ldr	r2, [pc, #32]	; (800a32c <vPortFree+0xb0>)
 800a30c:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a30e:	6938      	ldr	r0, [r7, #16]
 800a310:	f000 f86c 	bl	800a3ec <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800a314:	4b06      	ldr	r3, [pc, #24]	; (800a330 <vPortFree+0xb4>)
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	3301      	adds	r3, #1
 800a31a:	4a05      	ldr	r2, [pc, #20]	; (800a330 <vPortFree+0xb4>)
 800a31c:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 800a31e:	f7fe fb99 	bl	8008a54 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800a322:	bf00      	nop
 800a324:	3718      	adds	r7, #24
 800a326:	46bd      	mov	sp, r7
 800a328:	bd80      	pop	{r7, pc}
 800a32a:	bf00      	nop
 800a32c:	2000435c 	.word	0x2000435c
 800a330:	20004368 	.word	0x20004368

0800a334 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 800a334:	b480      	push	{r7}
 800a336:	b085      	sub	sp, #20
 800a338:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a33a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800a33e:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 800a340:	4b25      	ldr	r3, [pc, #148]	; (800a3d8 <prvHeapInit+0xa4>)
 800a342:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	f003 0307 	and.w	r3, r3, #7
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d00c      	beq.n	800a368 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	3307      	adds	r3, #7
 800a352:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	f023 0307 	bic.w	r3, r3, #7
 800a35a:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 800a35c:	68ba      	ldr	r2, [r7, #8]
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	1ad3      	subs	r3, r2, r3
 800a362:	4a1d      	ldr	r2, [pc, #116]	; (800a3d8 <prvHeapInit+0xa4>)
 800a364:	4413      	add	r3, r2
 800a366:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a36c:	4a1b      	ldr	r2, [pc, #108]	; (800a3dc <prvHeapInit+0xa8>)
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800a372:	4b1a      	ldr	r3, [pc, #104]	; (800a3dc <prvHeapInit+0xa8>)
 800a374:	2200      	movs	r2, #0
 800a376:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	68ba      	ldr	r2, [r7, #8]
 800a37c:	4413      	add	r3, r2
 800a37e:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800a380:	2208      	movs	r2, #8
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	1a9b      	subs	r3, r3, r2
 800a386:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	f023 0307 	bic.w	r3, r3, #7
 800a38e:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	4a13      	ldr	r2, [pc, #76]	; (800a3e0 <prvHeapInit+0xac>)
 800a394:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800a396:	4b12      	ldr	r3, [pc, #72]	; (800a3e0 <prvHeapInit+0xac>)
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	2200      	movs	r2, #0
 800a39c:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800a39e:	4b10      	ldr	r3, [pc, #64]	; (800a3e0 <prvHeapInit+0xac>)
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	2200      	movs	r2, #0
 800a3a4:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800a3aa:	683b      	ldr	r3, [r7, #0]
 800a3ac:	68fa      	ldr	r2, [r7, #12]
 800a3ae:	1ad2      	subs	r2, r2, r3
 800a3b0:	683b      	ldr	r3, [r7, #0]
 800a3b2:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a3b4:	4b0a      	ldr	r3, [pc, #40]	; (800a3e0 <prvHeapInit+0xac>)
 800a3b6:	681a      	ldr	r2, [r3, #0]
 800a3b8:	683b      	ldr	r3, [r7, #0]
 800a3ba:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a3bc:	683b      	ldr	r3, [r7, #0]
 800a3be:	685b      	ldr	r3, [r3, #4]
 800a3c0:	4a08      	ldr	r2, [pc, #32]	; (800a3e4 <prvHeapInit+0xb0>)
 800a3c2:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a3c4:	683b      	ldr	r3, [r7, #0]
 800a3c6:	685b      	ldr	r3, [r3, #4]
 800a3c8:	4a07      	ldr	r2, [pc, #28]	; (800a3e8 <prvHeapInit+0xb4>)
 800a3ca:	6013      	str	r3, [r2, #0]
}
 800a3cc:	bf00      	nop
 800a3ce:	3714      	adds	r7, #20
 800a3d0:	46bd      	mov	sp, r7
 800a3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d6:	4770      	bx	lr
 800a3d8:	20000750 	.word	0x20000750
 800a3dc:	20004350 	.word	0x20004350
 800a3e0:	20004358 	.word	0x20004358
 800a3e4:	20004360 	.word	0x20004360
 800a3e8:	2000435c 	.word	0x2000435c

0800a3ec <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 800a3ec:	b480      	push	{r7}
 800a3ee:	b085      	sub	sp, #20
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a3f4:	4b28      	ldr	r3, [pc, #160]	; (800a498 <prvInsertBlockIntoFreeList+0xac>)
 800a3f6:	60fb      	str	r3, [r7, #12]
 800a3f8:	e002      	b.n	800a400 <prvInsertBlockIntoFreeList+0x14>
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	60fb      	str	r3, [r7, #12]
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	687a      	ldr	r2, [r7, #4]
 800a406:	429a      	cmp	r2, r3
 800a408:	d8f7      	bhi.n	800a3fa <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	685b      	ldr	r3, [r3, #4]
 800a412:	68ba      	ldr	r2, [r7, #8]
 800a414:	4413      	add	r3, r2
 800a416:	687a      	ldr	r2, [r7, #4]
 800a418:	429a      	cmp	r2, r3
 800a41a:	d108      	bne.n	800a42e <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	685a      	ldr	r2, [r3, #4]
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	685b      	ldr	r3, [r3, #4]
 800a424:	441a      	add	r2, r3
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	685b      	ldr	r3, [r3, #4]
 800a436:	68ba      	ldr	r2, [r7, #8]
 800a438:	441a      	add	r2, r3
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	429a      	cmp	r2, r3
 800a440:	d118      	bne.n	800a474 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	681a      	ldr	r2, [r3, #0]
 800a446:	4b15      	ldr	r3, [pc, #84]	; (800a49c <prvInsertBlockIntoFreeList+0xb0>)
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	429a      	cmp	r2, r3
 800a44c:	d00d      	beq.n	800a46a <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	685a      	ldr	r2, [r3, #4]
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	685b      	ldr	r3, [r3, #4]
 800a458:	441a      	add	r2, r3
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	681a      	ldr	r2, [r3, #0]
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	601a      	str	r2, [r3, #0]
 800a468:	e008      	b.n	800a47c <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a46a:	4b0c      	ldr	r3, [pc, #48]	; (800a49c <prvInsertBlockIntoFreeList+0xb0>)
 800a46c:	681a      	ldr	r2, [r3, #0]
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	601a      	str	r2, [r3, #0]
 800a472:	e003      	b.n	800a47c <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	681a      	ldr	r2, [r3, #0]
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 800a47c:	68fa      	ldr	r2, [r7, #12]
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	429a      	cmp	r2, r3
 800a482:	d002      	beq.n	800a48a <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	687a      	ldr	r2, [r7, #4]
 800a488:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800a48a:	bf00      	nop
 800a48c:	3714      	adds	r7, #20
 800a48e:	46bd      	mov	sp, r7
 800a490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a494:	4770      	bx	lr
 800a496:	bf00      	nop
 800a498:	20004350 	.word	0x20004350
 800a49c:	20004358 	.word	0x20004358

0800a4a0 <SystemInit>:

/**********************************************************************************************************************
 *  GLOBAL FUNCTIONS
 *********************************************************************************************************************/
void SystemInit(void)
{
 800a4a0:	b580      	push	{r7, lr}
 800a4a2:	af00      	add	r7, sp, #0
	SCB->VTOR = 0x08000000UL | 0x4000; /* Vector Table Relocation in Internal FLASH */
 800a4a4:	4b04      	ldr	r3, [pc, #16]	; (800a4b8 <SystemInit+0x18>)
 800a4a6:	4a05      	ldr	r2, [pc, #20]	; (800a4bc <SystemInit+0x1c>)
 800a4a8:	609a      	str	r2, [r3, #8]
	RCC_voidInit();
 800a4aa:	f7fc f985 	bl	80067b8 <RCC_voidInit>
	TIM_Init(&TIM2_Cfg);
 800a4ae:	4804      	ldr	r0, [pc, #16]	; (800a4c0 <SystemInit+0x20>)
 800a4b0:	f7fc fe1c 	bl	80070ec <TIM_Init>
}
 800a4b4:	bf00      	nop
 800a4b6:	bd80      	pop	{r7, pc}
 800a4b8:	e000ed00 	.word	0xe000ed00
 800a4bc:	08004000 	.word	0x08004000
 800a4c0:	2000008c 	.word	0x2000008c

0800a4c4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800a4c4:	480d      	ldr	r0, [pc, #52]	; (800a4fc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800a4c6:	4685      	mov	sp, r0


/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800a4c8:	480d      	ldr	r0, [pc, #52]	; (800a500 <LoopForever+0x6>)
  ldr r1, =_edata
 800a4ca:	490e      	ldr	r1, [pc, #56]	; (800a504 <LoopForever+0xa>)
  ldr r2, =_sidata
 800a4cc:	4a0e      	ldr	r2, [pc, #56]	; (800a508 <LoopForever+0xe>)
  movs r3, #0
 800a4ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800a4d0:	e002      	b.n	800a4d8 <LoopCopyDataInit>

0800a4d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800a4d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800a4d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800a4d6:	3304      	adds	r3, #4

0800a4d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800a4d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800a4da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800a4dc:	d3f9      	bcc.n	800a4d2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800a4de:	4a0b      	ldr	r2, [pc, #44]	; (800a50c <LoopForever+0x12>)
  ldr r4, =_ebss
 800a4e0:	4c0b      	ldr	r4, [pc, #44]	; (800a510 <LoopForever+0x16>)
  movs r3, #0
 800a4e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 800a4e4:	e001      	b.n	800a4ea <LoopFillZerobss>

0800a4e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800a4e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800a4e8:	3204      	adds	r2, #4

0800a4ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800a4ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800a4ec:	d3fb      	bcc.n	800a4e6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800a4ee:	f000 f81b 	bl	800a528 <__libc_init_array>
/* Call the application's entry point.*/

/* Call the clock system initialization function.*/
  bl  SystemInit
 800a4f2:	f7ff ffd5 	bl	800a4a0 <SystemInit>

  bl main
 800a4f6:	f7fa fcb5 	bl	8004e64 <main>

0800a4fa <LoopForever>:

LoopForever:
  b LoopForever
 800a4fa:	e7fe      	b.n	800a4fa <LoopForever>
  ldr   r0, =_estack
 800a4fc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800a500:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800a504:	200000ac 	.word	0x200000ac
  ldr r2, =_sidata
 800a508:	08039b70 	.word	0x08039b70
  ldr r2, =_sbss
 800a50c:	200000ac 	.word	0x200000ac
  ldr r4, =_ebss
 800a510:	2000436c 	.word	0x2000436c

0800a514 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800a514:	e7fe      	b.n	800a514 <ADC_IRQHandler>

0800a516 <memset>:
 800a516:	4402      	add	r2, r0
 800a518:	4603      	mov	r3, r0
 800a51a:	4293      	cmp	r3, r2
 800a51c:	d100      	bne.n	800a520 <memset+0xa>
 800a51e:	4770      	bx	lr
 800a520:	f803 1b01 	strb.w	r1, [r3], #1
 800a524:	e7f9      	b.n	800a51a <memset+0x4>
	...

0800a528 <__libc_init_array>:
 800a528:	b570      	push	{r4, r5, r6, lr}
 800a52a:	4d0d      	ldr	r5, [pc, #52]	; (800a560 <__libc_init_array+0x38>)
 800a52c:	4c0d      	ldr	r4, [pc, #52]	; (800a564 <__libc_init_array+0x3c>)
 800a52e:	1b64      	subs	r4, r4, r5
 800a530:	10a4      	asrs	r4, r4, #2
 800a532:	2600      	movs	r6, #0
 800a534:	42a6      	cmp	r6, r4
 800a536:	d109      	bne.n	800a54c <__libc_init_array+0x24>
 800a538:	4d0b      	ldr	r5, [pc, #44]	; (800a568 <__libc_init_array+0x40>)
 800a53a:	4c0c      	ldr	r4, [pc, #48]	; (800a56c <__libc_init_array+0x44>)
 800a53c:	f000 f826 	bl	800a58c <_init>
 800a540:	1b64      	subs	r4, r4, r5
 800a542:	10a4      	asrs	r4, r4, #2
 800a544:	2600      	movs	r6, #0
 800a546:	42a6      	cmp	r6, r4
 800a548:	d105      	bne.n	800a556 <__libc_init_array+0x2e>
 800a54a:	bd70      	pop	{r4, r5, r6, pc}
 800a54c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a550:	4798      	blx	r3
 800a552:	3601      	adds	r6, #1
 800a554:	e7ee      	b.n	800a534 <__libc_init_array+0xc>
 800a556:	f855 3b04 	ldr.w	r3, [r5], #4
 800a55a:	4798      	blx	r3
 800a55c:	3601      	adds	r6, #1
 800a55e:	e7f2      	b.n	800a546 <__libc_init_array+0x1e>
 800a560:	08039b68 	.word	0x08039b68
 800a564:	08039b68 	.word	0x08039b68
 800a568:	08039b68 	.word	0x08039b68
 800a56c:	08039b6c 	.word	0x08039b6c

0800a570 <memcpy>:
 800a570:	440a      	add	r2, r1
 800a572:	4291      	cmp	r1, r2
 800a574:	f100 33ff 	add.w	r3, r0, #4294967295
 800a578:	d100      	bne.n	800a57c <memcpy+0xc>
 800a57a:	4770      	bx	lr
 800a57c:	b510      	push	{r4, lr}
 800a57e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a582:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a586:	4291      	cmp	r1, r2
 800a588:	d1f9      	bne.n	800a57e <memcpy+0xe>
 800a58a:	bd10      	pop	{r4, pc}

0800a58c <_init>:
 800a58c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a58e:	bf00      	nop
 800a590:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a592:	bc08      	pop	{r3}
 800a594:	469e      	mov	lr, r3
 800a596:	4770      	bx	lr

0800a598 <_fini>:
 800a598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a59a:	bf00      	nop
 800a59c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a59e:	bc08      	pop	{r3}
 800a5a0:	469e      	mov	lr, r3
 800a5a2:	4770      	bx	lr

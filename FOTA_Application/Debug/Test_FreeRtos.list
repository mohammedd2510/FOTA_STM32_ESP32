
Test_FreeRtos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000069f8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0002f8d8  08006b98  08006b98  00016b98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08036470  08036470  000500d0  2**0
                  CONTENTS
  4 .ARM          00000000  08036470  08036470  000500d0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08036470  08036470  000500d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08036470  08036470  00046470  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08036474  08036474  00046474  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d0  20000000  08036478  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000042cc  200000d0  08036548  000500d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000439c  08036548  0005439c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000500d0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00050100  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c467  00000000  00000000  00050143  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002bf8  00000000  00000000  0005c5aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cd8  00000000  00000000  0005f1a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000091e  00000000  00000000  0005fe80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000518b  00000000  00000000  0006079e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d9ec  00000000  00000000  00065929  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00015e05  00000000  00000000  00073315  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002f90  00000000  00000000  0008911c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  0008c0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000d0 	.word	0x200000d0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006b80 	.word	0x08006b80

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000d4 	.word	0x200000d4
 80001dc:	08006b80 	.word	0x08006b80

080001e0 <__aeabi_drsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001e4:	e002      	b.n	80001ec <__adddf3>
 80001e6:	bf00      	nop

080001e8 <__aeabi_dsub>:
 80001e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001ec <__adddf3>:
 80001ec:	b530      	push	{r4, r5, lr}
 80001ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f6:	ea94 0f05 	teq	r4, r5
 80001fa:	bf08      	it	eq
 80001fc:	ea90 0f02 	teqeq	r0, r2
 8000200:	bf1f      	itttt	ne
 8000202:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000206:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000212:	f000 80e2 	beq.w	80003da <__adddf3+0x1ee>
 8000216:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021e:	bfb8      	it	lt
 8000220:	426d      	neglt	r5, r5
 8000222:	dd0c      	ble.n	800023e <__adddf3+0x52>
 8000224:	442c      	add	r4, r5
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	ea82 0000 	eor.w	r0, r2, r0
 8000232:	ea83 0101 	eor.w	r1, r3, r1
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	2d36      	cmp	r5, #54	; 0x36
 8000240:	bf88      	it	hi
 8000242:	bd30      	pophi	{r4, r5, pc}
 8000244:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000248:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800024c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000250:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x70>
 8000256:	4240      	negs	r0, r0
 8000258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000260:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000264:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x84>
 800026a:	4252      	negs	r2, r2
 800026c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000270:	ea94 0f05 	teq	r4, r5
 8000274:	f000 80a7 	beq.w	80003c6 <__adddf3+0x1da>
 8000278:	f1a4 0401 	sub.w	r4, r4, #1
 800027c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000280:	db0d      	blt.n	800029e <__adddf3+0xb2>
 8000282:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000286:	fa22 f205 	lsr.w	r2, r2, r5
 800028a:	1880      	adds	r0, r0, r2
 800028c:	f141 0100 	adc.w	r1, r1, #0
 8000290:	fa03 f20e 	lsl.w	r2, r3, lr
 8000294:	1880      	adds	r0, r0, r2
 8000296:	fa43 f305 	asr.w	r3, r3, r5
 800029a:	4159      	adcs	r1, r3
 800029c:	e00e      	b.n	80002bc <__adddf3+0xd0>
 800029e:	f1a5 0520 	sub.w	r5, r5, #32
 80002a2:	f10e 0e20 	add.w	lr, lr, #32
 80002a6:	2a01      	cmp	r2, #1
 80002a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ac:	bf28      	it	cs
 80002ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	18c0      	adds	r0, r0, r3
 80002b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c0:	d507      	bpl.n	80002d2 <__adddf3+0xe6>
 80002c2:	f04f 0e00 	mov.w	lr, #0
 80002c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002d6:	d31b      	bcc.n	8000310 <__adddf3+0x124>
 80002d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002dc:	d30c      	bcc.n	80002f8 <__adddf3+0x10c>
 80002de:	0849      	lsrs	r1, r1, #1
 80002e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e8:	f104 0401 	add.w	r4, r4, #1
 80002ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002f4:	f080 809a 	bcs.w	800042c <__adddf3+0x240>
 80002f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002fc:	bf08      	it	eq
 80002fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000302:	f150 0000 	adcs.w	r0, r0, #0
 8000306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030a:	ea41 0105 	orr.w	r1, r1, r5
 800030e:	bd30      	pop	{r4, r5, pc}
 8000310:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000314:	4140      	adcs	r0, r0
 8000316:	eb41 0101 	adc.w	r1, r1, r1
 800031a:	3c01      	subs	r4, #1
 800031c:	bf28      	it	cs
 800031e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000322:	d2e9      	bcs.n	80002f8 <__adddf3+0x10c>
 8000324:	f091 0f00 	teq	r1, #0
 8000328:	bf04      	itt	eq
 800032a:	4601      	moveq	r1, r0
 800032c:	2000      	moveq	r0, #0
 800032e:	fab1 f381 	clz	r3, r1
 8000332:	bf08      	it	eq
 8000334:	3320      	addeq	r3, #32
 8000336:	f1a3 030b 	sub.w	r3, r3, #11
 800033a:	f1b3 0220 	subs.w	r2, r3, #32
 800033e:	da0c      	bge.n	800035a <__adddf3+0x16e>
 8000340:	320c      	adds	r2, #12
 8000342:	dd08      	ble.n	8000356 <__adddf3+0x16a>
 8000344:	f102 0c14 	add.w	ip, r2, #20
 8000348:	f1c2 020c 	rsb	r2, r2, #12
 800034c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000350:	fa21 f102 	lsr.w	r1, r1, r2
 8000354:	e00c      	b.n	8000370 <__adddf3+0x184>
 8000356:	f102 0214 	add.w	r2, r2, #20
 800035a:	bfd8      	it	le
 800035c:	f1c2 0c20 	rsble	ip, r2, #32
 8000360:	fa01 f102 	lsl.w	r1, r1, r2
 8000364:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000368:	bfdc      	itt	le
 800036a:	ea41 010c 	orrle.w	r1, r1, ip
 800036e:	4090      	lslle	r0, r2
 8000370:	1ae4      	subs	r4, r4, r3
 8000372:	bfa2      	ittt	ge
 8000374:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000378:	4329      	orrge	r1, r5
 800037a:	bd30      	popge	{r4, r5, pc}
 800037c:	ea6f 0404 	mvn.w	r4, r4
 8000380:	3c1f      	subs	r4, #31
 8000382:	da1c      	bge.n	80003be <__adddf3+0x1d2>
 8000384:	340c      	adds	r4, #12
 8000386:	dc0e      	bgt.n	80003a6 <__adddf3+0x1ba>
 8000388:	f104 0414 	add.w	r4, r4, #20
 800038c:	f1c4 0220 	rsb	r2, r4, #32
 8000390:	fa20 f004 	lsr.w	r0, r0, r4
 8000394:	fa01 f302 	lsl.w	r3, r1, r2
 8000398:	ea40 0003 	orr.w	r0, r0, r3
 800039c:	fa21 f304 	lsr.w	r3, r1, r4
 80003a0:	ea45 0103 	orr.w	r1, r5, r3
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	f1c4 040c 	rsb	r4, r4, #12
 80003aa:	f1c4 0220 	rsb	r2, r4, #32
 80003ae:	fa20 f002 	lsr.w	r0, r0, r2
 80003b2:	fa01 f304 	lsl.w	r3, r1, r4
 80003b6:	ea40 0003 	orr.w	r0, r0, r3
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	fa21 f004 	lsr.w	r0, r1, r4
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f094 0f00 	teq	r4, #0
 80003ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ce:	bf06      	itte	eq
 80003d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003d4:	3401      	addeq	r4, #1
 80003d6:	3d01      	subne	r5, #1
 80003d8:	e74e      	b.n	8000278 <__adddf3+0x8c>
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf18      	it	ne
 80003e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e4:	d029      	beq.n	800043a <__adddf3+0x24e>
 80003e6:	ea94 0f05 	teq	r4, r5
 80003ea:	bf08      	it	eq
 80003ec:	ea90 0f02 	teqeq	r0, r2
 80003f0:	d005      	beq.n	80003fe <__adddf3+0x212>
 80003f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f6:	bf04      	itt	eq
 80003f8:	4619      	moveq	r1, r3
 80003fa:	4610      	moveq	r0, r2
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea91 0f03 	teq	r1, r3
 8000402:	bf1e      	ittt	ne
 8000404:	2100      	movne	r1, #0
 8000406:	2000      	movne	r0, #0
 8000408:	bd30      	popne	{r4, r5, pc}
 800040a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040e:	d105      	bne.n	800041c <__adddf3+0x230>
 8000410:	0040      	lsls	r0, r0, #1
 8000412:	4149      	adcs	r1, r1
 8000414:	bf28      	it	cs
 8000416:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800041a:	bd30      	pop	{r4, r5, pc}
 800041c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000420:	bf3c      	itt	cc
 8000422:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000426:	bd30      	popcc	{r4, r5, pc}
 8000428:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800042c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf1a      	itte	ne
 8000440:	4619      	movne	r1, r3
 8000442:	4610      	movne	r0, r2
 8000444:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000448:	bf1c      	itt	ne
 800044a:	460b      	movne	r3, r1
 800044c:	4602      	movne	r2, r0
 800044e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000452:	bf06      	itte	eq
 8000454:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000458:	ea91 0f03 	teqeq	r1, r3
 800045c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	bf00      	nop

08000464 <__aeabi_ui2d>:
 8000464:	f090 0f00 	teq	r0, #0
 8000468:	bf04      	itt	eq
 800046a:	2100      	moveq	r1, #0
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000474:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000478:	f04f 0500 	mov.w	r5, #0
 800047c:	f04f 0100 	mov.w	r1, #0
 8000480:	e750      	b.n	8000324 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_i2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800049c:	bf48      	it	mi
 800049e:	4240      	negmi	r0, r0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e73e      	b.n	8000324 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_f2d>:
 80004a8:	0042      	lsls	r2, r0, #1
 80004aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b6:	bf1f      	itttt	ne
 80004b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004c4:	4770      	bxne	lr
 80004c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ca:	bf08      	it	eq
 80004cc:	4770      	bxeq	lr
 80004ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004d2:	bf04      	itt	eq
 80004d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e71c      	b.n	8000324 <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_ul2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f04f 0500 	mov.w	r5, #0
 80004fa:	e00a      	b.n	8000512 <__aeabi_l2d+0x16>

080004fc <__aeabi_l2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800050a:	d502      	bpl.n	8000512 <__aeabi_l2d+0x16>
 800050c:	4240      	negs	r0, r0
 800050e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000512:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000516:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051e:	f43f aed8 	beq.w	80002d2 <__adddf3+0xe6>
 8000522:	f04f 0203 	mov.w	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000542:	fa20 f002 	lsr.w	r0, r0, r2
 8000546:	fa01 fe03 	lsl.w	lr, r1, r3
 800054a:	ea40 000e 	orr.w	r0, r0, lr
 800054e:	fa21 f102 	lsr.w	r1, r1, r2
 8000552:	4414      	add	r4, r2
 8000554:	e6bd      	b.n	80002d2 <__adddf3+0xe6>
 8000556:	bf00      	nop

08000558 <__aeabi_dmul>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800055e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000562:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000566:	bf1d      	ittte	ne
 8000568:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800056c:	ea94 0f0c 	teqne	r4, ip
 8000570:	ea95 0f0c 	teqne	r5, ip
 8000574:	f000 f8de 	bleq	8000734 <__aeabi_dmul+0x1dc>
 8000578:	442c      	add	r4, r5
 800057a:	ea81 0603 	eor.w	r6, r1, r3
 800057e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000582:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000586:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058a:	bf18      	it	ne
 800058c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000590:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000594:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000598:	d038      	beq.n	800060c <__aeabi_dmul+0xb4>
 800059a:	fba0 ce02 	umull	ip, lr, r0, r2
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ae:	f04f 0600 	mov.w	r6, #0
 80005b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005b6:	f09c 0f00 	teq	ip, #0
 80005ba:	bf18      	it	ne
 80005bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005cc:	d204      	bcs.n	80005d8 <__aeabi_dmul+0x80>
 80005ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d2:	416d      	adcs	r5, r5
 80005d4:	eb46 0606 	adc.w	r6, r6, r6
 80005d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f0:	bf88      	it	hi
 80005f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005f6:	d81e      	bhi.n	8000636 <__aeabi_dmul+0xde>
 80005f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005fc:	bf08      	it	eq
 80005fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000602:	f150 0000 	adcs.w	r0, r0, #0
 8000606:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000610:	ea46 0101 	orr.w	r1, r6, r1
 8000614:	ea40 0002 	orr.w	r0, r0, r2
 8000618:	ea81 0103 	eor.w	r1, r1, r3
 800061c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000620:	bfc2      	ittt	gt
 8000622:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000626:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062a:	bd70      	popgt	{r4, r5, r6, pc}
 800062c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000630:	f04f 0e00 	mov.w	lr, #0
 8000634:	3c01      	subs	r4, #1
 8000636:	f300 80ab 	bgt.w	8000790 <__aeabi_dmul+0x238>
 800063a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800063e:	bfde      	ittt	le
 8000640:	2000      	movle	r0, #0
 8000642:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000646:	bd70      	pople	{r4, r5, r6, pc}
 8000648:	f1c4 0400 	rsb	r4, r4, #0
 800064c:	3c20      	subs	r4, #32
 800064e:	da35      	bge.n	80006bc <__aeabi_dmul+0x164>
 8000650:	340c      	adds	r4, #12
 8000652:	dc1b      	bgt.n	800068c <__aeabi_dmul+0x134>
 8000654:	f104 0414 	add.w	r4, r4, #20
 8000658:	f1c4 0520 	rsb	r5, r4, #32
 800065c:	fa00 f305 	lsl.w	r3, r0, r5
 8000660:	fa20 f004 	lsr.w	r0, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea40 0002 	orr.w	r0, r0, r2
 800066c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000670:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000674:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000678:	fa21 f604 	lsr.w	r6, r1, r4
 800067c:	eb42 0106 	adc.w	r1, r2, r6
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f1c4 040c 	rsb	r4, r4, #12
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f304 	lsl.w	r3, r0, r4
 8000698:	fa20 f005 	lsr.w	r0, r0, r5
 800069c:	fa01 f204 	lsl.w	r2, r1, r4
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ac:	f141 0100 	adc.w	r1, r1, #0
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 0520 	rsb	r5, r4, #32
 80006c0:	fa00 f205 	lsl.w	r2, r0, r5
 80006c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c8:	fa20 f304 	lsr.w	r3, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea43 0302 	orr.w	r3, r3, r2
 80006d4:	fa21 f004 	lsr.w	r0, r1, r4
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006dc:	fa21 f204 	lsr.w	r2, r1, r4
 80006e0:	ea20 0002 	bic.w	r0, r0, r2
 80006e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f094 0f00 	teq	r4, #0
 80006f8:	d10f      	bne.n	800071a <__aeabi_dmul+0x1c2>
 80006fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006fe:	0040      	lsls	r0, r0, #1
 8000700:	eb41 0101 	adc.w	r1, r1, r1
 8000704:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3c01      	subeq	r4, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1a6>
 800070e:	ea41 0106 	orr.w	r1, r1, r6
 8000712:	f095 0f00 	teq	r5, #0
 8000716:	bf18      	it	ne
 8000718:	4770      	bxne	lr
 800071a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800071e:	0052      	lsls	r2, r2, #1
 8000720:	eb43 0303 	adc.w	r3, r3, r3
 8000724:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3d01      	subeq	r5, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1c6>
 800072e:	ea43 0306 	orr.w	r3, r3, r6
 8000732:	4770      	bx	lr
 8000734:	ea94 0f0c 	teq	r4, ip
 8000738:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800073c:	bf18      	it	ne
 800073e:	ea95 0f0c 	teqne	r5, ip
 8000742:	d00c      	beq.n	800075e <__aeabi_dmul+0x206>
 8000744:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000748:	bf18      	it	ne
 800074a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074e:	d1d1      	bne.n	80006f4 <__aeabi_dmul+0x19c>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd70      	pop	{r4, r5, r6, pc}
 800075e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000762:	bf06      	itte	eq
 8000764:	4610      	moveq	r0, r2
 8000766:	4619      	moveq	r1, r3
 8000768:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076c:	d019      	beq.n	80007a2 <__aeabi_dmul+0x24a>
 800076e:	ea94 0f0c 	teq	r4, ip
 8000772:	d102      	bne.n	800077a <__aeabi_dmul+0x222>
 8000774:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000778:	d113      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800077a:	ea95 0f0c 	teq	r5, ip
 800077e:	d105      	bne.n	800078c <__aeabi_dmul+0x234>
 8000780:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000784:	bf1c      	itt	ne
 8000786:	4610      	movne	r0, r2
 8000788:	4619      	movne	r1, r3
 800078a:	d10a      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800078c:	ea81 0103 	eor.w	r1, r1, r3
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000794:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000798:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800079c:	f04f 0000 	mov.w	r0, #0
 80007a0:	bd70      	pop	{r4, r5, r6, pc}
 80007a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007aa:	bd70      	pop	{r4, r5, r6, pc}

080007ac <__aeabi_ddiv>:
 80007ac:	b570      	push	{r4, r5, r6, lr}
 80007ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ba:	bf1d      	ittte	ne
 80007bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c0:	ea94 0f0c 	teqne	r4, ip
 80007c4:	ea95 0f0c 	teqne	r5, ip
 80007c8:	f000 f8a7 	bleq	800091a <__aeabi_ddiv+0x16e>
 80007cc:	eba4 0405 	sub.w	r4, r4, r5
 80007d0:	ea81 0e03 	eor.w	lr, r1, r3
 80007d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007dc:	f000 8088 	beq.w	80008f0 <__aeabi_ddiv+0x144>
 80007e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000800:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000804:	429d      	cmp	r5, r3
 8000806:	bf08      	it	eq
 8000808:	4296      	cmpeq	r6, r2
 800080a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800080e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000812:	d202      	bcs.n	800081a <__aeabi_ddiv+0x6e>
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	1ab6      	subs	r6, r6, r2
 800081c:	eb65 0503 	sbc.w	r5, r5, r3
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800082a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000888:	ea55 0e06 	orrs.w	lr, r5, r6
 800088c:	d018      	beq.n	80008c0 <__aeabi_ddiv+0x114>
 800088e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000892:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000896:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800089e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008aa:	d1c0      	bne.n	800082e <__aeabi_ddiv+0x82>
 80008ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b0:	d10b      	bne.n	80008ca <__aeabi_ddiv+0x11e>
 80008b2:	ea41 0100 	orr.w	r1, r1, r0
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008be:	e7b6      	b.n	800082e <__aeabi_ddiv+0x82>
 80008c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c4:	bf04      	itt	eq
 80008c6:	4301      	orreq	r1, r0
 80008c8:	2000      	moveq	r0, #0
 80008ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ce:	bf88      	it	hi
 80008d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008d4:	f63f aeaf 	bhi.w	8000636 <__aeabi_dmul+0xde>
 80008d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008dc:	bf04      	itt	eq
 80008de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008e6:	f150 0000 	adcs.w	r0, r0, #0
 80008ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	pop	{r4, r5, r6, pc}
 80008f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008fc:	bfc2      	ittt	gt
 80008fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000902:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000906:	bd70      	popgt	{r4, r5, r6, pc}
 8000908:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800090c:	f04f 0e00 	mov.w	lr, #0
 8000910:	3c01      	subs	r4, #1
 8000912:	e690      	b.n	8000636 <__aeabi_dmul+0xde>
 8000914:	ea45 0e06 	orr.w	lr, r5, r6
 8000918:	e68d      	b.n	8000636 <__aeabi_dmul+0xde>
 800091a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800091e:	ea94 0f0c 	teq	r4, ip
 8000922:	bf08      	it	eq
 8000924:	ea95 0f0c 	teqeq	r5, ip
 8000928:	f43f af3b 	beq.w	80007a2 <__aeabi_dmul+0x24a>
 800092c:	ea94 0f0c 	teq	r4, ip
 8000930:	d10a      	bne.n	8000948 <__aeabi_ddiv+0x19c>
 8000932:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000936:	f47f af34 	bne.w	80007a2 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	f47f af25 	bne.w	800078c <__aeabi_dmul+0x234>
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	e72c      	b.n	80007a2 <__aeabi_dmul+0x24a>
 8000948:	ea95 0f0c 	teq	r5, ip
 800094c:	d106      	bne.n	800095c <__aeabi_ddiv+0x1b0>
 800094e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000952:	f43f aefd 	beq.w	8000750 <__aeabi_dmul+0x1f8>
 8000956:	4610      	mov	r0, r2
 8000958:	4619      	mov	r1, r3
 800095a:	e722      	b.n	80007a2 <__aeabi_dmul+0x24a>
 800095c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000960:	bf18      	it	ne
 8000962:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000966:	f47f aec5 	bne.w	80006f4 <__aeabi_dmul+0x19c>
 800096a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800096e:	f47f af0d 	bne.w	800078c <__aeabi_dmul+0x234>
 8000972:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000976:	f47f aeeb 	bne.w	8000750 <__aeabi_dmul+0x1f8>
 800097a:	e712      	b.n	80007a2 <__aeabi_dmul+0x24a>

0800097c <__aeabi_d2uiz>:
 800097c:	004a      	lsls	r2, r1, #1
 800097e:	d211      	bcs.n	80009a4 <__aeabi_d2uiz+0x28>
 8000980:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000984:	d211      	bcs.n	80009aa <__aeabi_d2uiz+0x2e>
 8000986:	d50d      	bpl.n	80009a4 <__aeabi_d2uiz+0x28>
 8000988:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800098c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000990:	d40e      	bmi.n	80009b0 <__aeabi_d2uiz+0x34>
 8000992:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000996:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800099a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800099e:	fa23 f002 	lsr.w	r0, r3, r2
 80009a2:	4770      	bx	lr
 80009a4:	f04f 0000 	mov.w	r0, #0
 80009a8:	4770      	bx	lr
 80009aa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ae:	d102      	bne.n	80009b6 <__aeabi_d2uiz+0x3a>
 80009b0:	f04f 30ff 	mov.w	r0, #4294967295
 80009b4:	4770      	bx	lr
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	4770      	bx	lr

080009bc <IR_CALLBACK>:
u8  Signal_Stop_Flag = ZERO_INIT;
u8 LEDMAT_Stop_Flag = ZERO_INIT;
/*********************/

void IR_CALLBACK(void)
{
 80009bc:	b590      	push	{r4, r7, lr}
 80009be:	b085      	sub	sp, #20
 80009c0:	af02      	add	r7, sp, #8
	u8 TFT_Queue_Send =0;
 80009c2:	2300      	movs	r3, #0
 80009c4:	71fb      	strb	r3, [r7, #7]
    if(IR_u32GetReceivedData() == IR_TV_REMOTE_1)
 80009c6:	f000 fb55 	bl	8001074 <IR_u32GetReceivedData>
 80009ca:	4603      	mov	r3, r0
 80009cc:	4a1d      	ldr	r2, [pc, #116]	; (8000a44 <IR_CALLBACK+0x88>)
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d115      	bne.n	80009fe <IR_CALLBACK+0x42>
    {
    	TFT_Queue_Send = TFT_AMRDIAB;
 80009d2:	2301      	movs	r3, #1
 80009d4:	71fb      	strb	r3, [r7, #7]
    	xQueueSendToFrontFromISR(TFT_QueueHandler,&TFT_Queue_Send,NULL);
 80009d6:	4b1c      	ldr	r3, [pc, #112]	; (8000a48 <IR_CALLBACK+0x8c>)
 80009d8:	6818      	ldr	r0, [r3, #0]
 80009da:	1df9      	adds	r1, r7, #7
 80009dc:	2301      	movs	r3, #1
 80009de:	2200      	movs	r2, #0
 80009e0:	f003 fce6 	bl	80043b0 <xQueueGenericSendFromISR>
    	xTimerStartFromISR( RGB_TimerHandler,NULL );
 80009e4:	4b19      	ldr	r3, [pc, #100]	; (8000a4c <IR_CALLBACK+0x90>)
 80009e6:	681c      	ldr	r4, [r3, #0]
 80009e8:	f004 fbe4 	bl	80051b4 <xTaskGetTickCountFromISR>
 80009ec:	4602      	mov	r2, r0
 80009ee:	2300      	movs	r3, #0
 80009f0:	9300      	str	r3, [sp, #0]
 80009f2:	2300      	movs	r3, #0
 80009f4:	2106      	movs	r1, #6
 80009f6:	4620      	mov	r0, r4
 80009f8:	f005 f960 	bl	8005cbc <xTimerGenericCommand>
    {
    	TFT_Queue_Send = TFT_STOP;
    	xQueueSendToFrontFromISR(TFT_QueueHandler,&TFT_Queue_Send,NULL);

    }
}
 80009fc:	e01e      	b.n	8000a3c <IR_CALLBACK+0x80>
    else if(IR_u32GetReceivedData() == IR_TV_REMOTE_2)
 80009fe:	f000 fb39 	bl	8001074 <IR_u32GetReceivedData>
 8000a02:	4603      	mov	r3, r0
 8000a04:	4a12      	ldr	r2, [pc, #72]	; (8000a50 <IR_CALLBACK+0x94>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d109      	bne.n	8000a1e <IR_CALLBACK+0x62>
    	TFT_Queue_Send = TFT_MOUNIR;
 8000a0a:	2302      	movs	r3, #2
 8000a0c:	71fb      	strb	r3, [r7, #7]
    	xQueueSendToFrontFromISR(TFT_QueueHandler,&TFT_Queue_Send,NULL);
 8000a0e:	4b0e      	ldr	r3, [pc, #56]	; (8000a48 <IR_CALLBACK+0x8c>)
 8000a10:	6818      	ldr	r0, [r3, #0]
 8000a12:	1df9      	adds	r1, r7, #7
 8000a14:	2301      	movs	r3, #1
 8000a16:	2200      	movs	r2, #0
 8000a18:	f003 fcca 	bl	80043b0 <xQueueGenericSendFromISR>
}
 8000a1c:	e00e      	b.n	8000a3c <IR_CALLBACK+0x80>
    else if(IR_u32GetReceivedData() == IR_TV_REMOTE_EXIT)
 8000a1e:	f000 fb29 	bl	8001074 <IR_u32GetReceivedData>
 8000a22:	4603      	mov	r3, r0
 8000a24:	4a0b      	ldr	r2, [pc, #44]	; (8000a54 <IR_CALLBACK+0x98>)
 8000a26:	4293      	cmp	r3, r2
 8000a28:	d108      	bne.n	8000a3c <IR_CALLBACK+0x80>
    	TFT_Queue_Send = TFT_STOP;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	71fb      	strb	r3, [r7, #7]
    	xQueueSendToFrontFromISR(TFT_QueueHandler,&TFT_Queue_Send,NULL);
 8000a2e:	4b06      	ldr	r3, [pc, #24]	; (8000a48 <IR_CALLBACK+0x8c>)
 8000a30:	6818      	ldr	r0, [r3, #0]
 8000a32:	1df9      	adds	r1, r7, #7
 8000a34:	2301      	movs	r3, #1
 8000a36:	2200      	movs	r2, #0
 8000a38:	f003 fcba 	bl	80043b0 <xQueueGenericSendFromISR>
}
 8000a3c:	bf00      	nop
 8000a3e:	370c      	adds	r7, #12
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd90      	pop	{r4, r7, pc}
 8000a44:	22d9d827 	.word	0x22d9d827
 8000a48:	20000100 	.word	0x20000100
 8000a4c:	200000fc 	.word	0x200000fc
 8000a50:	22d9f00f 	.word	0x22d9f00f
 8000a54:	22d9c837 	.word	0x22d9c837

08000a58 <InitTask>:


void InitTask( void * pvParameters )
	{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b084      	sub	sp, #16
 8000a5c:	af02      	add	r7, sp, #8
 8000a5e:	6078      	str	r0, [r7, #4]
		/* Application Modules Init */
		RGB_voidInit(&RGB_Lcfg);
 8000a60:	4842      	ldr	r0, [pc, #264]	; (8000b6c <InitTask+0x114>)
 8000a62:	f000 fe27 	bl	80016b4 <RGB_voidInit>
		MNVIC_voidSetPriority(EXTI0_IRQn, configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY+1);
 8000a66:	2106      	movs	r1, #6
 8000a68:	2006      	movs	r0, #6
 8000a6a:	f002 f8fd 	bl	8002c68 <MNVIC_voidSetPriority>
		IR_voidInit(&IR_Config, IR_CALLBACK);
 8000a6e:	4940      	ldr	r1, [pc, #256]	; (8000b70 <InitTask+0x118>)
 8000a70:	4840      	ldr	r0, [pc, #256]	; (8000b74 <InitTask+0x11c>)
 8000a72:	f000 fab3 	bl	8000fdc <IR_voidInit>
		TFT_voidInit(&TFT_Config);
 8000a76:	4840      	ldr	r0, [pc, #256]	; (8000b78 <InitTask+0x120>)
 8000a78:	f001 f80a 	bl	8001a90 <TFT_voidInit>
		R2RDAC_voidInit(&R2RDAC_Config);
 8000a7c:	483f      	ldr	r0, [pc, #252]	; (8000b7c <InitTask+0x124>)
 8000a7e:	f000 fdbd 	bl	80015fc <R2RDAC_voidInit>
		HLEDMAT_voidInit(&ledmat_obj);
 8000a82:	483f      	ldr	r0, [pc, #252]	; (8000b80 <InitTask+0x128>)
 8000a84:	f000 fcfe 	bl	8001484 <HLEDMAT_voidInit>
		/* Tasks Creation */
		xTaskCreate(TFT_Task,"TFTTask",128,( void * ) NULL, 10,&TFTTaskHandle );
 8000a88:	4b3e      	ldr	r3, [pc, #248]	; (8000b84 <InitTask+0x12c>)
 8000a8a:	9301      	str	r3, [sp, #4]
 8000a8c:	230a      	movs	r3, #10
 8000a8e:	9300      	str	r3, [sp, #0]
 8000a90:	2300      	movs	r3, #0
 8000a92:	2280      	movs	r2, #128	; 0x80
 8000a94:	493c      	ldr	r1, [pc, #240]	; (8000b88 <InitTask+0x130>)
 8000a96:	483d      	ldr	r0, [pc, #244]	; (8000b8c <InitTask+0x134>)
 8000a98:	f004 f898 	bl	8004bcc <xTaskCreate>
		xTaskCreate(DAC_Task,"DACTask",128,( void * ) NULL, 9,&DACTaskHandle );
 8000a9c:	4b3c      	ldr	r3, [pc, #240]	; (8000b90 <InitTask+0x138>)
 8000a9e:	9301      	str	r3, [sp, #4]
 8000aa0:	2309      	movs	r3, #9
 8000aa2:	9300      	str	r3, [sp, #0]
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	2280      	movs	r2, #128	; 0x80
 8000aa8:	493a      	ldr	r1, [pc, #232]	; (8000b94 <InitTask+0x13c>)
 8000aaa:	483b      	ldr	r0, [pc, #236]	; (8000b98 <InitTask+0x140>)
 8000aac:	f004 f88e 	bl	8004bcc <xTaskCreate>
		xTaskCreate(LEDMAT_Task,"LEMATTask",128,( void * ) NULL, 4,&LEDMATTaskHandle );
 8000ab0:	4b3a      	ldr	r3, [pc, #232]	; (8000b9c <InitTask+0x144>)
 8000ab2:	9301      	str	r3, [sp, #4]
 8000ab4:	2304      	movs	r3, #4
 8000ab6:	9300      	str	r3, [sp, #0]
 8000ab8:	2300      	movs	r3, #0
 8000aba:	2280      	movs	r2, #128	; 0x80
 8000abc:	4938      	ldr	r1, [pc, #224]	; (8000ba0 <InitTask+0x148>)
 8000abe:	4839      	ldr	r0, [pc, #228]	; (8000ba4 <InitTask+0x14c>)
 8000ac0:	f004 f884 	bl	8004bcc <xTaskCreate>

		/* Kernel objects Creation */
		RGB_TimerHandler = xTimerCreate( "Timer", 20000, pdTRUE, ( void * ) 0, RGBTimerCallback);
 8000ac4:	4b38      	ldr	r3, [pc, #224]	; (8000ba8 <InitTask+0x150>)
 8000ac6:	9300      	str	r3, [sp, #0]
 8000ac8:	2300      	movs	r3, #0
 8000aca:	2201      	movs	r2, #1
 8000acc:	f644 6120 	movw	r1, #20000	; 0x4e20
 8000ad0:	4836      	ldr	r0, [pc, #216]	; (8000bac <InitTask+0x154>)
 8000ad2:	f005 f897 	bl	8005c04 <xTimerCreate>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	4a35      	ldr	r2, [pc, #212]	; (8000bb0 <InitTask+0x158>)
 8000ada:	6013      	str	r3, [r2, #0]
		TFT_QueueHandler= xQueueCreate( 1, sizeof( u8 ) );
 8000adc:	2200      	movs	r2, #0
 8000ade:	2101      	movs	r1, #1
 8000ae0:	2001      	movs	r0, #1
 8000ae2:	f003 fadb 	bl	800409c <xQueueGenericCreate>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	4a32      	ldr	r2, [pc, #200]	; (8000bb4 <InitTask+0x15c>)
 8000aea:	6013      	str	r3, [r2, #0]

		AudioSignal_Mutex = xSemaphoreCreateMutex();
 8000aec:	2001      	movs	r0, #1
 8000aee:	f003 fb48 	bl	8004182 <xQueueCreateMutex>
 8000af2:	4603      	mov	r3, r0
 8000af4:	4a30      	ldr	r2, [pc, #192]	; (8000bb8 <InitTask+0x160>)
 8000af6:	6013      	str	r3, [r2, #0]
		AudioSignalStopFlag_Mutex = xSemaphoreCreateMutex();
 8000af8:	2001      	movs	r0, #1
 8000afa:	f003 fb42 	bl	8004182 <xQueueCreateMutex>
 8000afe:	4603      	mov	r3, r0
 8000b00:	4a2e      	ldr	r2, [pc, #184]	; (8000bbc <InitTask+0x164>)
 8000b02:	6013      	str	r3, [r2, #0]
		AudioSignalStart_Semaphore = xSemaphoreCreateBinary();
 8000b04:	2203      	movs	r2, #3
 8000b06:	2100      	movs	r1, #0
 8000b08:	2001      	movs	r0, #1
 8000b0a:	f003 fac7 	bl	800409c <xQueueGenericCreate>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	4a2b      	ldr	r2, [pc, #172]	; (8000bc0 <InitTask+0x168>)
 8000b12:	6013      	str	r3, [r2, #0]

		LEDMATStopFlag_Mutex = xSemaphoreCreateMutex();
 8000b14:	2001      	movs	r0, #1
 8000b16:	f003 fb34 	bl	8004182 <xQueueCreateMutex>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	4a29      	ldr	r2, [pc, #164]	; (8000bc4 <InitTask+0x16c>)
 8000b1e:	6013      	str	r3, [r2, #0]
		LEDMATStart_Semaphore = xSemaphoreCreateBinary();
 8000b20:	2203      	movs	r2, #3
 8000b22:	2100      	movs	r1, #0
 8000b24:	2001      	movs	r0, #1
 8000b26:	f003 fab9 	bl	800409c <xQueueGenericCreate>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	4a26      	ldr	r2, [pc, #152]	; (8000bc8 <InitTask+0x170>)
 8000b2e:	6013      	str	r3, [r2, #0]

		xSemaphoreGive(AudioSignal_Mutex);
 8000b30:	4b21      	ldr	r3, [pc, #132]	; (8000bb8 <InitTask+0x160>)
 8000b32:	6818      	ldr	r0, [r3, #0]
 8000b34:	2300      	movs	r3, #0
 8000b36:	2200      	movs	r2, #0
 8000b38:	2100      	movs	r1, #0
 8000b3a:	f003 fb3b 	bl	80041b4 <xQueueGenericSend>
		xSemaphoreGive(AudioSignalStopFlag_Mutex);
 8000b3e:	4b1f      	ldr	r3, [pc, #124]	; (8000bbc <InitTask+0x164>)
 8000b40:	6818      	ldr	r0, [r3, #0]
 8000b42:	2300      	movs	r3, #0
 8000b44:	2200      	movs	r2, #0
 8000b46:	2100      	movs	r1, #0
 8000b48:	f003 fb34 	bl	80041b4 <xQueueGenericSend>
		xSemaphoreGive(LEDMATStopFlag_Mutex);
 8000b4c:	4b1d      	ldr	r3, [pc, #116]	; (8000bc4 <InitTask+0x16c>)
 8000b4e:	6818      	ldr	r0, [r3, #0]
 8000b50:	2300      	movs	r3, #0
 8000b52:	2200      	movs	r2, #0
 8000b54:	2100      	movs	r1, #0
 8000b56:	f003 fb2d 	bl	80041b4 <xQueueGenericSend>

		vTaskDelete(InitTaskHandle);
 8000b5a:	4b1c      	ldr	r3, [pc, #112]	; (8000bcc <InitTask+0x174>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f004 f978 	bl	8004e54 <vTaskDelete>
	}
 8000b64:	bf00      	nop
 8000b66:	3708      	adds	r7, #8
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	20000030 	.word	0x20000030
 8000b70:	080009bd 	.word	0x080009bd
 8000b74:	20000000 	.word	0x20000000
 8000b78:	20000044 	.word	0x20000044
 8000b7c:	20000020 	.word	0x20000020
 8000b80:	20000004 	.word	0x20000004
 8000b84:	200000f0 	.word	0x200000f0
 8000b88:	08006b98 	.word	0x08006b98
 8000b8c:	08000bd1 	.word	0x08000bd1
 8000b90:	200000f4 	.word	0x200000f4
 8000b94:	08006ba0 	.word	0x08006ba0
 8000b98:	08000e35 	.word	0x08000e35
 8000b9c:	200000f8 	.word	0x200000f8
 8000ba0:	08006ba8 	.word	0x08006ba8
 8000ba4:	08000ee1 	.word	0x08000ee1
 8000ba8:	08000f59 	.word	0x08000f59
 8000bac:	08006bb4 	.word	0x08006bb4
 8000bb0:	200000fc 	.word	0x200000fc
 8000bb4:	20000100 	.word	0x20000100
 8000bb8:	20000104 	.word	0x20000104
 8000bbc:	20000108 	.word	0x20000108
 8000bc0:	2000010c 	.word	0x2000010c
 8000bc4:	20000110 	.word	0x20000110
 8000bc8:	20000114 	.word	0x20000114
 8000bcc:	200000ec 	.word	0x200000ec

08000bd0 <TFT_Task>:

void TFT_Task( void * pvParameters )
{
 8000bd0:	b590      	push	{r4, r7, lr}
 8000bd2:	b087      	sub	sp, #28
 8000bd4:	af02      	add	r7, sp, #8
 8000bd6:	6078      	str	r0, [r7, #4]
	u8 TFT_Queue_Recieve = 0;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	73fb      	strb	r3, [r7, #15]
	for(;;)
	{
		xQueueReceive( TFT_QueueHandler,  &( TFT_Queue_Recieve ), portMAX_DELAY );
 8000bdc:	4b84      	ldr	r3, [pc, #528]	; (8000df0 <TFT_Task+0x220>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	f107 010f 	add.w	r1, r7, #15
 8000be4:	f04f 32ff 	mov.w	r2, #4294967295
 8000be8:	4618      	mov	r0, r3
 8000bea:	f003 fc7d 	bl	80044e8 <xQueueReceive>
		if(TFT_Queue_Recieve == TFT_STOP){
 8000bee:	7bfb      	ldrb	r3, [r7, #15]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d147      	bne.n	8000c84 <TFT_Task+0xb4>
			TFT_ClearScreen(&TFT_Config); // Clear TFT Screen
 8000bf4:	487f      	ldr	r0, [pc, #508]	; (8000df4 <TFT_Task+0x224>)
 8000bf6:	f001 f84a 	bl	8001c8e <TFT_ClearScreen>

	    	xTimerStop( RGB_TimerHandler,portMAX_DELAY ); // Stop RGB Animation
 8000bfa:	4b7f      	ldr	r3, [pc, #508]	; (8000df8 <TFT_Task+0x228>)
 8000bfc:	6818      	ldr	r0, [r3, #0]
 8000bfe:	f04f 33ff 	mov.w	r3, #4294967295
 8000c02:	9300      	str	r3, [sp, #0]
 8000c04:	2300      	movs	r3, #0
 8000c06:	2200      	movs	r2, #0
 8000c08:	2103      	movs	r1, #3
 8000c0a:	f005 f857 	bl	8005cbc <xTimerGenericCommand>
	    	RGB_Colors_Counter =0; // Reset RGB Colors Counter
 8000c0e:	4b7b      	ldr	r3, [pc, #492]	; (8000dfc <TFT_Task+0x22c>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	701a      	strb	r2, [r3, #0]
	    	RGB_voidSetColor(&RGB_Lcfg, RGB_BLACK_COLOR); // Set RGB to Black Color
 8000c14:	2100      	movs	r1, #0
 8000c16:	487a      	ldr	r0, [pc, #488]	; (8000e00 <TFT_Task+0x230>)
 8000c18:	f000 fd6c 	bl	80016f4 <RGB_voidSetColor>

			xSemaphoreTake(AudioSignal_Mutex,portMAX_DELAY); // Take Audio Signal Mutex
 8000c1c:	4b79      	ldr	r3, [pc, #484]	; (8000e04 <TFT_Task+0x234>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	f04f 31ff 	mov.w	r1, #4294967295
 8000c24:	4618      	mov	r0, r3
 8000c26:	f003 fd3f 	bl	80046a8 <xQueueSemaphoreTake>
			Copy_pu8Signal = NULL; // set signal pointer to NULL
 8000c2a:	4b77      	ldr	r3, [pc, #476]	; (8000e08 <TFT_Task+0x238>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	601a      	str	r2, [r3, #0]
			xSemaphoreGive(AudioSignal_Mutex); // Give Audio Signal Mutex
 8000c30:	4b74      	ldr	r3, [pc, #464]	; (8000e04 <TFT_Task+0x234>)
 8000c32:	6818      	ldr	r0, [r3, #0]
 8000c34:	2300      	movs	r3, #0
 8000c36:	2200      	movs	r2, #0
 8000c38:	2100      	movs	r1, #0
 8000c3a:	f003 fabb 	bl	80041b4 <xQueueGenericSend>

			xSemaphoreTake(AudioSignalStopFlag_Mutex,portMAX_DELAY); // Take Audio Signal Stop Flag Mutex
 8000c3e:	4b73      	ldr	r3, [pc, #460]	; (8000e0c <TFT_Task+0x23c>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	f04f 31ff 	mov.w	r1, #4294967295
 8000c46:	4618      	mov	r0, r3
 8000c48:	f003 fd2e 	bl	80046a8 <xQueueSemaphoreTake>
			Signal_Stop_Flag =1; // Set Signal Stop Flag to 1 to stop the current song
 8000c4c:	4b70      	ldr	r3, [pc, #448]	; (8000e10 <TFT_Task+0x240>)
 8000c4e:	2201      	movs	r2, #1
 8000c50:	701a      	strb	r2, [r3, #0]
			xSemaphoreGive(AudioSignalStopFlag_Mutex); // Give Audio Signal Stop Flag Mutex
 8000c52:	4b6e      	ldr	r3, [pc, #440]	; (8000e0c <TFT_Task+0x23c>)
 8000c54:	6818      	ldr	r0, [r3, #0]
 8000c56:	2300      	movs	r3, #0
 8000c58:	2200      	movs	r2, #0
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	f003 faaa 	bl	80041b4 <xQueueGenericSend>

			xSemaphoreTake(LEDMATStopFlag_Mutex,portMAX_DELAY); // Take LEDMAT Stop Flag Mutex
 8000c60:	4b6c      	ldr	r3, [pc, #432]	; (8000e14 <TFT_Task+0x244>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	f04f 31ff 	mov.w	r1, #4294967295
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f003 fd1d 	bl	80046a8 <xQueueSemaphoreTake>
			LEDMAT_Stop_Flag =1; // Set LEDMAT Stop Flag to 1 to stop the current Animation
 8000c6e:	4b6a      	ldr	r3, [pc, #424]	; (8000e18 <TFT_Task+0x248>)
 8000c70:	2201      	movs	r2, #1
 8000c72:	701a      	strb	r2, [r3, #0]
			xSemaphoreGive(LEDMATStopFlag_Mutex); // Give LEDMAT Stop Flag Mutex
 8000c74:	4b67      	ldr	r3, [pc, #412]	; (8000e14 <TFT_Task+0x244>)
 8000c76:	6818      	ldr	r0, [r3, #0]
 8000c78:	2300      	movs	r3, #0
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	f003 fa99 	bl	80041b4 <xQueueGenericSend>
 8000c82:	e7ab      	b.n	8000bdc <TFT_Task+0xc>



		}
		else if (TFT_Queue_Recieve == TFT_AMRDIAB)
 8000c84:	7bfb      	ldrb	r3, [r7, #15]
 8000c86:	2b01      	cmp	r3, #1
 8000c88:	d156      	bne.n	8000d38 <TFT_Task+0x168>
		{
			TFT_voidDisplayFullImage(&TFT_Config, AmrDiab_Image); // Display AmrDiab image
 8000c8a:	4964      	ldr	r1, [pc, #400]	; (8000e1c <TFT_Task+0x24c>)
 8000c8c:	4859      	ldr	r0, [pc, #356]	; (8000df4 <TFT_Task+0x224>)
 8000c8e:	f000 ff9a 	bl	8001bc6 <TFT_voidDisplayFullImage>

			xTimerStart( RGB_TimerHandler,portMAX_DELAY ); // Start RGB Animation
 8000c92:	4b59      	ldr	r3, [pc, #356]	; (8000df8 <TFT_Task+0x228>)
 8000c94:	681c      	ldr	r4, [r3, #0]
 8000c96:	f004 fa7d 	bl	8005194 <xTaskGetTickCount>
 8000c9a:	4602      	mov	r2, r0
 8000c9c:	f04f 33ff 	mov.w	r3, #4294967295
 8000ca0:	9300      	str	r3, [sp, #0]
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	2101      	movs	r1, #1
 8000ca6:	4620      	mov	r0, r4
 8000ca8:	f005 f808 	bl	8005cbc <xTimerGenericCommand>

			if(Copy_pu8Signal == NULL){
 8000cac:	4b56      	ldr	r3, [pc, #344]	; (8000e08 <TFT_Task+0x238>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d10d      	bne.n	8000cd0 <TFT_Task+0x100>
				xSemaphoreGive(AudioSignalStart_Semaphore); // signaling DAC Task to Start
 8000cb4:	4b5a      	ldr	r3, [pc, #360]	; (8000e20 <TFT_Task+0x250>)
 8000cb6:	6818      	ldr	r0, [r3, #0]
 8000cb8:	2300      	movs	r3, #0
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	f003 fa79 	bl	80041b4 <xQueueGenericSend>
				xSemaphoreGive(LEDMATStart_Semaphore); // signaling LEDMAT Task to Start
 8000cc2:	4b58      	ldr	r3, [pc, #352]	; (8000e24 <TFT_Task+0x254>)
 8000cc4:	6818      	ldr	r0, [r3, #0]
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	2200      	movs	r2, #0
 8000cca:	2100      	movs	r1, #0
 8000ccc:	f003 fa72 	bl	80041b4 <xQueueGenericSend>
			}
			xSemaphoreTake(AudioSignal_Mutex,portMAX_DELAY); // Take Audio Signal Mutex
 8000cd0:	4b4c      	ldr	r3, [pc, #304]	; (8000e04 <TFT_Task+0x234>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	f04f 31ff 	mov.w	r1, #4294967295
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f003 fce5 	bl	80046a8 <xQueueSemaphoreTake>
			Copy_pu8Signal = wayah_raw; // set signal pointer to wayah_song
 8000cde:	4b4a      	ldr	r3, [pc, #296]	; (8000e08 <TFT_Task+0x238>)
 8000ce0:	4a51      	ldr	r2, [pc, #324]	; (8000e28 <TFT_Task+0x258>)
 8000ce2:	601a      	str	r2, [r3, #0]
			xSemaphoreGive(AudioSignal_Mutex); // Give Audio Signal Mutex
 8000ce4:	4b47      	ldr	r3, [pc, #284]	; (8000e04 <TFT_Task+0x234>)
 8000ce6:	6818      	ldr	r0, [r3, #0]
 8000ce8:	2300      	movs	r3, #0
 8000cea:	2200      	movs	r2, #0
 8000cec:	2100      	movs	r1, #0
 8000cee:	f003 fa61 	bl	80041b4 <xQueueGenericSend>

			xSemaphoreTake(AudioSignalStopFlag_Mutex,portMAX_DELAY); // Take Audio Signal Stop Flag Mutex
 8000cf2:	4b46      	ldr	r3, [pc, #280]	; (8000e0c <TFT_Task+0x23c>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	f04f 31ff 	mov.w	r1, #4294967295
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f003 fcd4 	bl	80046a8 <xQueueSemaphoreTake>
			Signal_Stop_Flag =1;  // Set Audio Signal Stop Flag to 1 to stop the cuurent song
 8000d00:	4b43      	ldr	r3, [pc, #268]	; (8000e10 <TFT_Task+0x240>)
 8000d02:	2201      	movs	r2, #1
 8000d04:	701a      	strb	r2, [r3, #0]
			xSemaphoreGive(AudioSignalStopFlag_Mutex); // Give Audio Signal Stop Flag Mutex
 8000d06:	4b41      	ldr	r3, [pc, #260]	; (8000e0c <TFT_Task+0x23c>)
 8000d08:	6818      	ldr	r0, [r3, #0]
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	2100      	movs	r1, #0
 8000d10:	f003 fa50 	bl	80041b4 <xQueueGenericSend>

			xSemaphoreTake(LEDMATStopFlag_Mutex,portMAX_DELAY); // Take LEDMAT Stop Flag Mutex
 8000d14:	4b3f      	ldr	r3, [pc, #252]	; (8000e14 <TFT_Task+0x244>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	f04f 31ff 	mov.w	r1, #4294967295
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f003 fcc3 	bl	80046a8 <xQueueSemaphoreTake>
			LEDMAT_Stop_Flag =1; // Set LEDMAT Stop Flag to 1 to stop the current Animation
 8000d22:	4b3d      	ldr	r3, [pc, #244]	; (8000e18 <TFT_Task+0x248>)
 8000d24:	2201      	movs	r2, #1
 8000d26:	701a      	strb	r2, [r3, #0]
			xSemaphoreGive(LEDMATStopFlag_Mutex); // Give LEDMAT Stop Flag Mutex
 8000d28:	4b3a      	ldr	r3, [pc, #232]	; (8000e14 <TFT_Task+0x244>)
 8000d2a:	6818      	ldr	r0, [r3, #0]
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	2200      	movs	r2, #0
 8000d30:	2100      	movs	r1, #0
 8000d32:	f003 fa3f 	bl	80041b4 <xQueueGenericSend>
 8000d36:	e751      	b.n	8000bdc <TFT_Task+0xc>
		}
		else if (TFT_Queue_Recieve == TFT_MOUNIR)
 8000d38:	7bfb      	ldrb	r3, [r7, #15]
 8000d3a:	2b02      	cmp	r3, #2
 8000d3c:	f47f af4e 	bne.w	8000bdc <TFT_Task+0xc>
		{
			TFT_voidDisplayFullImage(&TFT_Config, Mounir_Image); // Display Mounir image
 8000d40:	493a      	ldr	r1, [pc, #232]	; (8000e2c <TFT_Task+0x25c>)
 8000d42:	482c      	ldr	r0, [pc, #176]	; (8000df4 <TFT_Task+0x224>)
 8000d44:	f000 ff3f 	bl	8001bc6 <TFT_voidDisplayFullImage>

		   	xTimerStart( RGB_TimerHandler,portMAX_DELAY ); // Start RGB Animation
 8000d48:	4b2b      	ldr	r3, [pc, #172]	; (8000df8 <TFT_Task+0x228>)
 8000d4a:	681c      	ldr	r4, [r3, #0]
 8000d4c:	f004 fa22 	bl	8005194 <xTaskGetTickCount>
 8000d50:	4602      	mov	r2, r0
 8000d52:	f04f 33ff 	mov.w	r3, #4294967295
 8000d56:	9300      	str	r3, [sp, #0]
 8000d58:	2300      	movs	r3, #0
 8000d5a:	2101      	movs	r1, #1
 8000d5c:	4620      	mov	r0, r4
 8000d5e:	f004 ffad 	bl	8005cbc <xTimerGenericCommand>

			if(Copy_pu8Signal == NULL){
 8000d62:	4b29      	ldr	r3, [pc, #164]	; (8000e08 <TFT_Task+0x238>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d10d      	bne.n	8000d86 <TFT_Task+0x1b6>
				xSemaphoreGive(AudioSignalStart_Semaphore); // signaling DAC Task to Start
 8000d6a:	4b2d      	ldr	r3, [pc, #180]	; (8000e20 <TFT_Task+0x250>)
 8000d6c:	6818      	ldr	r0, [r3, #0]
 8000d6e:	2300      	movs	r3, #0
 8000d70:	2200      	movs	r2, #0
 8000d72:	2100      	movs	r1, #0
 8000d74:	f003 fa1e 	bl	80041b4 <xQueueGenericSend>
				xSemaphoreGive(LEDMATStart_Semaphore);  // signaling LEDMAT Task to Start
 8000d78:	4b2a      	ldr	r3, [pc, #168]	; (8000e24 <TFT_Task+0x254>)
 8000d7a:	6818      	ldr	r0, [r3, #0]
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	2200      	movs	r2, #0
 8000d80:	2100      	movs	r1, #0
 8000d82:	f003 fa17 	bl	80041b4 <xQueueGenericSend>
			}
			xSemaphoreTake(AudioSignal_Mutex,portMAX_DELAY); // Take Audio Signal Mutex
 8000d86:	4b1f      	ldr	r3, [pc, #124]	; (8000e04 <TFT_Task+0x234>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	f04f 31ff 	mov.w	r1, #4294967295
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f003 fc8a 	bl	80046a8 <xQueueSemaphoreTake>
			Copy_pu8Signal = ya_lally_raw; // set signal pointer to ya_lally_song
 8000d94:	4b1c      	ldr	r3, [pc, #112]	; (8000e08 <TFT_Task+0x238>)
 8000d96:	4a26      	ldr	r2, [pc, #152]	; (8000e30 <TFT_Task+0x260>)
 8000d98:	601a      	str	r2, [r3, #0]
			xSemaphoreGive(AudioSignal_Mutex); // Give Audio Signal Mutex
 8000d9a:	4b1a      	ldr	r3, [pc, #104]	; (8000e04 <TFT_Task+0x234>)
 8000d9c:	6818      	ldr	r0, [r3, #0]
 8000d9e:	2300      	movs	r3, #0
 8000da0:	2200      	movs	r2, #0
 8000da2:	2100      	movs	r1, #0
 8000da4:	f003 fa06 	bl	80041b4 <xQueueGenericSend>

			xSemaphoreTake(AudioSignalStopFlag_Mutex,portMAX_DELAY); // Take Audio Signal Stop Flag Mutex
 8000da8:	4b18      	ldr	r3, [pc, #96]	; (8000e0c <TFT_Task+0x23c>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	f04f 31ff 	mov.w	r1, #4294967295
 8000db0:	4618      	mov	r0, r3
 8000db2:	f003 fc79 	bl	80046a8 <xQueueSemaphoreTake>
			Signal_Stop_Flag =1; // Set Signal Stop Flag to 1 to stop the current song
 8000db6:	4b16      	ldr	r3, [pc, #88]	; (8000e10 <TFT_Task+0x240>)
 8000db8:	2201      	movs	r2, #1
 8000dba:	701a      	strb	r2, [r3, #0]
			xSemaphoreGive(AudioSignalStopFlag_Mutex); // Give Audio Signal Stop Flag Mutex
 8000dbc:	4b13      	ldr	r3, [pc, #76]	; (8000e0c <TFT_Task+0x23c>)
 8000dbe:	6818      	ldr	r0, [r3, #0]
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	2100      	movs	r1, #0
 8000dc6:	f003 f9f5 	bl	80041b4 <xQueueGenericSend>

			xSemaphoreTake(LEDMATStopFlag_Mutex,portMAX_DELAY); // Take LEDMAT Stop Flag Mutex
 8000dca:	4b12      	ldr	r3, [pc, #72]	; (8000e14 <TFT_Task+0x244>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	f04f 31ff 	mov.w	r1, #4294967295
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f003 fc68 	bl	80046a8 <xQueueSemaphoreTake>
			LEDMAT_Stop_Flag =1; // Set LEDMAT Stop Flag to 1 to stop the current Animation
 8000dd8:	4b0f      	ldr	r3, [pc, #60]	; (8000e18 <TFT_Task+0x248>)
 8000dda:	2201      	movs	r2, #1
 8000ddc:	701a      	strb	r2, [r3, #0]
			xSemaphoreGive(LEDMATStopFlag_Mutex); // Give LEDMAT Stop Flag Mutex
 8000dde:	4b0d      	ldr	r3, [pc, #52]	; (8000e14 <TFT_Task+0x244>)
 8000de0:	6818      	ldr	r0, [r3, #0]
 8000de2:	2300      	movs	r3, #0
 8000de4:	2200      	movs	r2, #0
 8000de6:	2100      	movs	r1, #0
 8000de8:	f003 f9e4 	bl	80041b4 <xQueueGenericSend>
		xQueueReceive( TFT_QueueHandler,  &( TFT_Queue_Recieve ), portMAX_DELAY );
 8000dec:	e6f6      	b.n	8000bdc <TFT_Task+0xc>
 8000dee:	bf00      	nop
 8000df0:	20000100 	.word	0x20000100
 8000df4:	20000044 	.word	0x20000044
 8000df8:	200000fc 	.word	0x200000fc
 8000dfc:	20000118 	.word	0x20000118
 8000e00:	20000030 	.word	0x20000030
 8000e04:	20000104 	.word	0x20000104
 8000e08:	2000011c 	.word	0x2000011c
 8000e0c:	20000108 	.word	0x20000108
 8000e10:	20000120 	.word	0x20000120
 8000e14:	20000110 	.word	0x20000110
 8000e18:	20000121 	.word	0x20000121
 8000e1c:	08006bf8 	.word	0x08006bf8
 8000e20:	2000010c 	.word	0x2000010c
 8000e24:	20000114 	.word	0x20000114
 8000e28:	0801abf8 	.word	0x0801abf8
 8000e2c:	08010bf8 	.word	0x08010bf8
 8000e30:	080286b8 	.word	0x080286b8

08000e34 <DAC_Task>:
	}

}

void DAC_Task( void * pvParameters )
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b086      	sub	sp, #24
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
	u32 Local_DAC_Counter = ZERO_INIT;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	617b      	str	r3, [r7, #20]
	u8 	Local_DAC_BitCounter = ZERO_INIT;
 8000e40:	2300      	movs	r3, #0
 8000e42:	74fb      	strb	r3, [r7, #19]
	u32 Copy_u32SignalLength = AUDIO_LENGTH;
 8000e44:	f64d 23c0 	movw	r3, #56000	; 0xdac0
 8000e48:	60fb      	str	r3, [r7, #12]

	for(;;)
	{
		Signal_Stop_Flag = 0;
 8000e4a:	4b21      	ldr	r3, [pc, #132]	; (8000ed0 <DAC_Task+0x9c>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	701a      	strb	r2, [r3, #0]
		if(Copy_pu8Signal == NULL){
 8000e50:	4b20      	ldr	r3, [pc, #128]	; (8000ed4 <DAC_Task+0xa0>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d106      	bne.n	8000e66 <DAC_Task+0x32>
			xSemaphoreTake(AudioSignalStart_Semaphore,portMAX_DELAY);
 8000e58:	4b1f      	ldr	r3, [pc, #124]	; (8000ed8 <DAC_Task+0xa4>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e60:	4618      	mov	r0, r3
 8000e62:	f003 fc21 	bl	80046a8 <xQueueSemaphoreTake>
		}
		for(Local_DAC_Counter=ZERO_INIT;Local_DAC_Counter<Copy_u32SignalLength;Local_DAC_Counter++)
 8000e66:	2300      	movs	r3, #0
 8000e68:	617b      	str	r3, [r7, #20]
 8000e6a:	e029      	b.n	8000ec0 <DAC_Task+0x8c>
		{
			for(Local_DAC_BitCounter=ZERO_INIT;Local_DAC_BitCounter<R2RDAC_RESOLUTION;Local_DAC_BitCounter++)
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	74fb      	strb	r3, [r7, #19]
 8000e70:	e019      	b.n	8000ea6 <DAC_Task+0x72>
				{
					GPIO_voidSetPinValue
 8000e72:	7cfb      	ldrb	r3, [r7, #19]
 8000e74:	4a19      	ldr	r2, [pc, #100]	; (8000edc <DAC_Task+0xa8>)
 8000e76:	4413      	add	r3, r2
 8000e78:	7a18      	ldrb	r0, [r3, #8]
 8000e7a:	7cfb      	ldrb	r3, [r7, #19]
 8000e7c:	4a17      	ldr	r2, [pc, #92]	; (8000edc <DAC_Task+0xa8>)
 8000e7e:	5cd1      	ldrb	r1, [r2, r3]
					(
						R2RDAC_Config.R2RDAC_Bit_Port[Local_DAC_BitCounter],
						R2RDAC_Config.R2RDAC_Bit_Pin[Local_DAC_BitCounter],
						GET_BIT(Copy_pu8Signal[Local_DAC_Counter],Local_DAC_BitCounter)
 8000e80:	4b14      	ldr	r3, [pc, #80]	; (8000ed4 <DAC_Task+0xa0>)
 8000e82:	681a      	ldr	r2, [r3, #0]
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	4413      	add	r3, r2
 8000e88:	781b      	ldrb	r3, [r3, #0]
 8000e8a:	461a      	mov	r2, r3
 8000e8c:	7cfb      	ldrb	r3, [r7, #19]
 8000e8e:	fa42 f303 	asr.w	r3, r2, r3
 8000e92:	b2db      	uxtb	r3, r3
 8000e94:	f003 0301 	and.w	r3, r3, #1
 8000e98:	b2db      	uxtb	r3, r3
					GPIO_voidSetPinValue
 8000e9a:	461a      	mov	r2, r3
 8000e9c:	f001 fe0c 	bl	8002ab8 <GPIO_voidSetPinValue>
			for(Local_DAC_BitCounter=ZERO_INIT;Local_DAC_BitCounter<R2RDAC_RESOLUTION;Local_DAC_BitCounter++)
 8000ea0:	7cfb      	ldrb	r3, [r7, #19]
 8000ea2:	3301      	adds	r3, #1
 8000ea4:	74fb      	strb	r3, [r7, #19]
 8000ea6:	7cfb      	ldrb	r3, [r7, #19]
 8000ea8:	2b07      	cmp	r3, #7
 8000eaa:	d9e2      	bls.n	8000e72 <DAC_Task+0x3e>
					);
				}
			if(Signal_Stop_Flag == 1){
 8000eac:	4b08      	ldr	r3, [pc, #32]	; (8000ed0 <DAC_Task+0x9c>)
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	2b01      	cmp	r3, #1
 8000eb2:	d00a      	beq.n	8000eca <DAC_Task+0x96>
				break;
			}
			vTaskDelay(20);
 8000eb4:	2014      	movs	r0, #20
 8000eb6:	f004 f83f 	bl	8004f38 <vTaskDelay>
		for(Local_DAC_Counter=ZERO_INIT;Local_DAC_Counter<Copy_u32SignalLength;Local_DAC_Counter++)
 8000eba:	697b      	ldr	r3, [r7, #20]
 8000ebc:	3301      	adds	r3, #1
 8000ebe:	617b      	str	r3, [r7, #20]
 8000ec0:	697a      	ldr	r2, [r7, #20]
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	429a      	cmp	r2, r3
 8000ec6:	d3d1      	bcc.n	8000e6c <DAC_Task+0x38>
 8000ec8:	e7bf      	b.n	8000e4a <DAC_Task+0x16>
				break;
 8000eca:	bf00      	nop
		Signal_Stop_Flag = 0;
 8000ecc:	e7bd      	b.n	8000e4a <DAC_Task+0x16>
 8000ece:	bf00      	nop
 8000ed0:	20000120 	.word	0x20000120
 8000ed4:	2000011c 	.word	0x2000011c
 8000ed8:	2000010c 	.word	0x2000010c
 8000edc:	20000020 	.word	0x20000020

08000ee0 <LEDMAT_Task>:
		}
	}
}

void LEDMAT_Task( void * pvParameters )
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]


	for(;;)
	{
		LEDMAT_Stop_Flag = 0;
 8000ee8:	4b13      	ldr	r3, [pc, #76]	; (8000f38 <LEDMAT_Task+0x58>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	701a      	strb	r2, [r3, #0]
		if(Copy_pu8Signal==wayah_raw)
 8000eee:	4b13      	ldr	r3, [pc, #76]	; (8000f3c <LEDMAT_Task+0x5c>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	4a13      	ldr	r2, [pc, #76]	; (8000f40 <LEDMAT_Task+0x60>)
 8000ef4:	4293      	cmp	r3, r2
 8000ef6:	d106      	bne.n	8000f06 <LEDMAT_Task+0x26>
		{
			HLEDMAT_voidDisplayScrollingString_WithStopFlag(&ledmat_obj,(u8*)"AMRDIAB", 150,&LEDMAT_Stop_Flag);
 8000ef8:	4b0f      	ldr	r3, [pc, #60]	; (8000f38 <LEDMAT_Task+0x58>)
 8000efa:	2296      	movs	r2, #150	; 0x96
 8000efc:	4911      	ldr	r1, [pc, #68]	; (8000f44 <LEDMAT_Task+0x64>)
 8000efe:	4812      	ldr	r0, [pc, #72]	; (8000f48 <LEDMAT_Task+0x68>)
 8000f00:	f000 face 	bl	80014a0 <HLEDMAT_voidDisplayScrollingString_WithStopFlag>
 8000f04:	e7f0      	b.n	8000ee8 <LEDMAT_Task+0x8>
		}
		else if(Copy_pu8Signal==ya_lally_raw)
 8000f06:	4b0d      	ldr	r3, [pc, #52]	; (8000f3c <LEDMAT_Task+0x5c>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4a10      	ldr	r2, [pc, #64]	; (8000f4c <LEDMAT_Task+0x6c>)
 8000f0c:	4293      	cmp	r3, r2
 8000f0e:	d106      	bne.n	8000f1e <LEDMAT_Task+0x3e>
		{
			HLEDMAT_voidDisplayScrollingString_WithStopFlag(&ledmat_obj,(u8*)"MOUNIR", 150,&LEDMAT_Stop_Flag);
 8000f10:	4b09      	ldr	r3, [pc, #36]	; (8000f38 <LEDMAT_Task+0x58>)
 8000f12:	2296      	movs	r2, #150	; 0x96
 8000f14:	490e      	ldr	r1, [pc, #56]	; (8000f50 <LEDMAT_Task+0x70>)
 8000f16:	480c      	ldr	r0, [pc, #48]	; (8000f48 <LEDMAT_Task+0x68>)
 8000f18:	f000 fac2 	bl	80014a0 <HLEDMAT_voidDisplayScrollingString_WithStopFlag>
 8000f1c:	e7e4      	b.n	8000ee8 <LEDMAT_Task+0x8>
		}
		else if(Copy_pu8Signal==NULL)
 8000f1e:	4b07      	ldr	r3, [pc, #28]	; (8000f3c <LEDMAT_Task+0x5c>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d1e0      	bne.n	8000ee8 <LEDMAT_Task+0x8>
		{
			xSemaphoreTake(LEDMATStart_Semaphore,portMAX_DELAY);
 8000f26:	4b0b      	ldr	r3, [pc, #44]	; (8000f54 <LEDMAT_Task+0x74>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	f04f 31ff 	mov.w	r1, #4294967295
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f003 fbba 	bl	80046a8 <xQueueSemaphoreTake>
		LEDMAT_Stop_Flag = 0;
 8000f34:	e7d8      	b.n	8000ee8 <LEDMAT_Task+0x8>
 8000f36:	bf00      	nop
 8000f38:	20000121 	.word	0x20000121
 8000f3c:	2000011c 	.word	0x2000011c
 8000f40:	0801abf8 	.word	0x0801abf8
 8000f44:	08006bbc 	.word	0x08006bbc
 8000f48:	20000004 	.word	0x20000004
 8000f4c:	080286b8 	.word	0x080286b8
 8000f50:	08006bc4 	.word	0x08006bc4
 8000f54:	20000114 	.word	0x20000114

08000f58 <RGBTimerCallback>:
		}
	}
}
void RGBTimerCallback(TimerHandle_t xTimer)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b084      	sub	sp, #16
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
	u8 RGB_Colors[8]=
 8000f60:	4a10      	ldr	r2, [pc, #64]	; (8000fa4 <RGBTimerCallback+0x4c>)
 8000f62:	f107 0308 	add.w	r3, r7, #8
 8000f66:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f6a:	e883 0003 	stmia.w	r3, {r0, r1}
			RGB_WHITE_COLOR ,
			RGB_PURPLE_COLOR,
			RGB_CYAN_COLOR  ,
			RGB_BLACK_COLOR
	};
	RGB_voidSetColor(&RGB_Lcfg, RGB_Colors[RGB_Colors_Counter]);
 8000f6e:	4b0e      	ldr	r3, [pc, #56]	; (8000fa8 <RGBTimerCallback+0x50>)
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	3310      	adds	r3, #16
 8000f74:	443b      	add	r3, r7
 8000f76:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	480b      	ldr	r0, [pc, #44]	; (8000fac <RGBTimerCallback+0x54>)
 8000f7e:	f000 fbb9 	bl	80016f4 <RGB_voidSetColor>
	RGB_Colors_Counter++;
 8000f82:	4b09      	ldr	r3, [pc, #36]	; (8000fa8 <RGBTimerCallback+0x50>)
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	3301      	adds	r3, #1
 8000f88:	b2da      	uxtb	r2, r3
 8000f8a:	4b07      	ldr	r3, [pc, #28]	; (8000fa8 <RGBTimerCallback+0x50>)
 8000f8c:	701a      	strb	r2, [r3, #0]
	if(RGB_Colors_Counter == 8){
 8000f8e:	4b06      	ldr	r3, [pc, #24]	; (8000fa8 <RGBTimerCallback+0x50>)
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	2b08      	cmp	r3, #8
 8000f94:	d102      	bne.n	8000f9c <RGBTimerCallback+0x44>
		RGB_Colors_Counter =0;
 8000f96:	4b04      	ldr	r3, [pc, #16]	; (8000fa8 <RGBTimerCallback+0x50>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	701a      	strb	r2, [r3, #0]
	}
}
 8000f9c:	bf00      	nop
 8000f9e:	3710      	adds	r7, #16
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	08006bcc 	.word	0x08006bcc
 8000fa8:	20000118 	.word	0x20000118
 8000fac:	20000030 	.word	0x20000030

08000fb0 <main>:

int main(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af02      	add	r7, sp, #8
    /* Loop forever */
	xTaskCreate(
 8000fb6:	4b06      	ldr	r3, [pc, #24]	; (8000fd0 <main+0x20>)
 8000fb8:	9301      	str	r3, [sp, #4]
 8000fba:	2337      	movs	r3, #55	; 0x37
 8000fbc:	9300      	str	r3, [sp, #0]
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	2280      	movs	r2, #128	; 0x80
 8000fc2:	4904      	ldr	r1, [pc, #16]	; (8000fd4 <main+0x24>)
 8000fc4:	4804      	ldr	r0, [pc, #16]	; (8000fd8 <main+0x28>)
 8000fc6:	f003 fe01 	bl	8004bcc <xTaskCreate>
			TASK_MAX_PRIORITY,/* Priority at which the task is created. */
			&InitTaskHandle );



	vTaskStartScheduler();
 8000fca:	f003 ffe9 	bl	8004fa0 <vTaskStartScheduler>

	for(;;){
 8000fce:	e7fe      	b.n	8000fce <main+0x1e>
 8000fd0:	200000ec 	.word	0x200000ec
 8000fd4:	08006bd4 	.word	0x08006bd4
 8000fd8:	08000a59 	.word	0x08000a59

08000fdc <IR_voidInit>:

/**********************************************************************************************************************
 *  GLOBAL FUNCTIONS
 *********************************************************************************************************************/
void IR_voidInit (IR_Config_t *Copy_IR_Config , pCallBackNotification IR_CallbackNotification)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b084      	sub	sp, #16
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
 8000fe4:	6039      	str	r1, [r7, #0]
	MEXTI_CONFIG_t IR_EXTI_Config;
	IR_EXTI_Config.MEXTI_Mode = MEXTI_INTERRUPT_MODE;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	73fb      	strb	r3, [r7, #15]
	IR_EXTI_Config.MEXTI_SenseSignal = Copy_IR_Config->IR_Trigger_Mode;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	789b      	ldrb	r3, [r3, #2]
 8000fee:	73bb      	strb	r3, [r7, #14]
	IR_EXTI_Config.MEXTI_Line = Copy_IR_Config->IR_Pin;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	785b      	ldrb	r3, [r3, #1]
 8000ff4:	737b      	strb	r3, [r7, #13]
    IR_EXTI_Config.MEXTI_Port = Copy_IR_Config->IR_Port;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	733b      	strb	r3, [r7, #12]
	MEXTI_voidInit(&IR_EXTI_Config,IR_EXTI_Handler);
 8000ffc:	f107 030c 	add.w	r3, r7, #12
 8001000:	491a      	ldr	r1, [pc, #104]	; (800106c <IR_voidInit+0x90>)
 8001002:	4618      	mov	r0, r3
 8001004:	f001 f958 	bl	80022b8 <MEXTI_voidInit>
	switch (Copy_IR_Config->IR_Port)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	2b02      	cmp	r3, #2
 800100e:	d010      	beq.n	8001032 <IR_voidInit+0x56>
 8001010:	2b02      	cmp	r3, #2
 8001012:	dc13      	bgt.n	800103c <IR_voidInit+0x60>
 8001014:	2b00      	cmp	r3, #0
 8001016:	d002      	beq.n	800101e <IR_voidInit+0x42>
 8001018:	2b01      	cmp	r3, #1
 800101a:	d005      	beq.n	8001028 <IR_voidInit+0x4c>
	      break;
	    case GPIO_PORTC:
	      RCC_voidEnablePeripheralClock(RCC_AHB,RCC_AHB_GPIOCEN);
	      break;
	    default:
	      break;
 800101c:	e00e      	b.n	800103c <IR_voidInit+0x60>
	      RCC_voidEnablePeripheralClock(RCC_AHB,RCC_AHB_GPIOAEN);
 800101e:	2100      	movs	r1, #0
 8001020:	2000      	movs	r0, #0
 8001022:	f001 fee7 	bl	8002df4 <RCC_voidEnablePeripheralClock>
	      break;
 8001026:	e00a      	b.n	800103e <IR_voidInit+0x62>
	      RCC_voidEnablePeripheralClock(RCC_AHB,RCC_AHB_GPIOBEN);
 8001028:	2101      	movs	r1, #1
 800102a:	2000      	movs	r0, #0
 800102c:	f001 fee2 	bl	8002df4 <RCC_voidEnablePeripheralClock>
	      break;
 8001030:	e005      	b.n	800103e <IR_voidInit+0x62>
	      RCC_voidEnablePeripheralClock(RCC_AHB,RCC_AHB_GPIOCEN);
 8001032:	2102      	movs	r1, #2
 8001034:	2000      	movs	r0, #0
 8001036:	f001 fedd 	bl	8002df4 <RCC_voidEnablePeripheralClock>
	      break;
 800103a:	e000      	b.n	800103e <IR_voidInit+0x62>
	      break;
 800103c:	bf00      	nop
	  }
	  GPIO_voidSetPinMode(Copy_IR_Config->IR_Port,Copy_IR_Config->IR_Pin,GPIO_INPUT_PIN_MODE);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	7818      	ldrb	r0, [r3, #0]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	785b      	ldrb	r3, [r3, #1]
 8001046:	2200      	movs	r2, #0
 8001048:	4619      	mov	r1, r3
 800104a:	f001 fb87 	bl	800275c <GPIO_voidSetPinMode>
	  GPIO_voidSetPinPullUpDownResistor(Copy_IR_Config->IR_Port,Copy_IR_Config->IR_Pin,GPIO_INPUT_PIN_FLOAT);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	7818      	ldrb	r0, [r3, #0]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	785b      	ldrb	r3, [r3, #1]
 8001056:	2200      	movs	r2, #0
 8001058:	4619      	mov	r1, r3
 800105a:	f001 fd8d 	bl	8002b78 <GPIO_voidSetPinPullUpDownResistor>
	  IR_callback = IR_CallbackNotification;
 800105e:	4a04      	ldr	r2, [pc, #16]	; (8001070 <IR_voidInit+0x94>)
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	6013      	str	r3, [r2, #0]
}
 8001064:	bf00      	nop
 8001066:	3710      	adds	r7, #16
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	0800108d 	.word	0x0800108d
 8001070:	20000124 	.word	0x20000124

08001074 <IR_u32GetReceivedData>:
	}
	return Local_IR_ReceivedFlag;
}

u32  IR_u32GetReceivedData(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
	return IR_ReceivedData;
 8001078:	4b03      	ldr	r3, [pc, #12]	; (8001088 <IR_u32GetReceivedData+0x14>)
 800107a:	681b      	ldr	r3, [r3, #0]
}
 800107c:	4618      	mov	r0, r3
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop
 8001088:	20000128 	.word	0x20000128

0800108c <IR_EXTI_Handler>:

static void IR_EXTI_Handler()
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
	static u8 IR_Status_Flag = IR_START_SIGNAL_STARTED;
	static s8 IR_BitCounter = IR_BIT_COUNT_INIT;
	u32 IR_ElapsedTime = ZERO_INIT;
 8001092:	2300      	movs	r3, #0
 8001094:	607b      	str	r3, [r7, #4]
	if(IR_Status_Flag == IR_START_SIGNAL_STARTED)
 8001096:	4b4d      	ldr	r3, [pc, #308]	; (80011cc <IR_EXTI_Handler+0x140>)
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d108      	bne.n	80010b0 <IR_EXTI_Handler+0x24>
	{
		IR_Status_Flag = IR_START_SIGNAL_ENDED;
 800109e:	4b4b      	ldr	r3, [pc, #300]	; (80011cc <IR_EXTI_Handler+0x140>)
 80010a0:	2201      	movs	r2, #1
 80010a2:	701a      	strb	r2, [r3, #0]
		TIM_SetPreload(&TIM2_Cfg,IR_START_SIGNAL_RANGE_HIGH);
 80010a4:	f643 2198 	movw	r1, #15000	; 0x3a98
 80010a8:	4849      	ldr	r0, [pc, #292]	; (80011d0 <IR_EXTI_Handler+0x144>)
 80010aa:	f002 fc61 	bl	8003970 <TIM_SetPreload>
			IR_ReceivedFlag = IR_RECEIVED_DATA_STATUS;
		}

	}

}
 80010ae:	e089      	b.n	80011c4 <IR_EXTI_Handler+0x138>
	else if (IR_Status_Flag == IR_START_SIGNAL_ENDED)
 80010b0:	4b46      	ldr	r3, [pc, #280]	; (80011cc <IR_EXTI_Handler+0x140>)
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	2b01      	cmp	r3, #1
 80010b6:	d124      	bne.n	8001102 <IR_EXTI_Handler+0x76>
		IR_ElapsedTime = TIM_GetElapsedTime(&TIM2_Cfg);
 80010b8:	4845      	ldr	r0, [pc, #276]	; (80011d0 <IR_EXTI_Handler+0x144>)
 80010ba:	f002 fbb3 	bl	8003824 <TIM_GetElapsedTime>
 80010be:	6078      	str	r0, [r7, #4]
		if(IR_ElapsedTime >= IR_START_SIGNAL_RANGE_LOW && IR_ElapsedTime <= IR_START_SIGNAL_RANGE_HIGH)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	f243 22c7 	movw	r2, #12999	; 0x32c7
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d908      	bls.n	80010dc <IR_EXTI_Handler+0x50>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	f643 2298 	movw	r2, #15000	; 0x3a98
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d803      	bhi.n	80010dc <IR_EXTI_Handler+0x50>
			IR_Status_Flag = IR_GETTING_DATA;
 80010d4:	4b3d      	ldr	r3, [pc, #244]	; (80011cc <IR_EXTI_Handler+0x140>)
 80010d6:	2202      	movs	r2, #2
 80010d8:	701a      	strb	r2, [r3, #0]
 80010da:	e00c      	b.n	80010f6 <IR_EXTI_Handler+0x6a>
		else if(IR_ElapsedTime >=IR_REPEAT_SIGNAL_RANGE_LOW  && IR_ElapsedTime <= IR_REPEAT_SIGNAL_RANGE_HIGH){
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	f642 22f7 	movw	r2, #10999	; 0x2af7
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d907      	bls.n	80010f6 <IR_EXTI_Handler+0x6a>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 80010ec:	4293      	cmp	r3, r2
 80010ee:	d802      	bhi.n	80010f6 <IR_EXTI_Handler+0x6a>
			IR_callback();
 80010f0:	4b38      	ldr	r3, [pc, #224]	; (80011d4 <IR_EXTI_Handler+0x148>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4798      	blx	r3
		TIM_SetPreload(&TIM2_Cfg,IR_START_SIGNAL_RANGE_HIGH);
 80010f6:	f643 2198 	movw	r1, #15000	; 0x3a98
 80010fa:	4835      	ldr	r0, [pc, #212]	; (80011d0 <IR_EXTI_Handler+0x144>)
 80010fc:	f002 fc38 	bl	8003970 <TIM_SetPreload>
}
 8001100:	e060      	b.n	80011c4 <IR_EXTI_Handler+0x138>
	else if (IR_Status_Flag == IR_GETTING_DATA)
 8001102:	4b32      	ldr	r3, [pc, #200]	; (80011cc <IR_EXTI_Handler+0x140>)
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	2b02      	cmp	r3, #2
 8001108:	d147      	bne.n	800119a <IR_EXTI_Handler+0x10e>
		IR_ElapsedTime = TIM_GetElapsedTime(&TIM2_Cfg);
 800110a:	4831      	ldr	r0, [pc, #196]	; (80011d0 <IR_EXTI_Handler+0x144>)
 800110c:	f002 fb8a 	bl	8003824 <TIM_GetElapsedTime>
 8001110:	6078      	str	r0, [r7, #4]
		if(IR_ElapsedTime >= IR_LOW_LEVEL_SIGNAL_RANGE_LOW && IR_ElapsedTime <= IR_LOW_LEVEL_SIGNAL_RANGE_HIGH)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001118:	d312      	bcc.n	8001140 <IR_EXTI_Handler+0xb4>
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001120:	4293      	cmp	r3, r2
 8001122:	d80d      	bhi.n	8001140 <IR_EXTI_Handler+0xb4>
			CLR_BIT(IR_ReceivedData,IR_BitCounter);
 8001124:	4b2c      	ldr	r3, [pc, #176]	; (80011d8 <IR_EXTI_Handler+0x14c>)
 8001126:	f993 3000 	ldrsb.w	r3, [r3]
 800112a:	461a      	mov	r2, r3
 800112c:	2301      	movs	r3, #1
 800112e:	4093      	lsls	r3, r2
 8001130:	43db      	mvns	r3, r3
 8001132:	461a      	mov	r2, r3
 8001134:	4b29      	ldr	r3, [pc, #164]	; (80011dc <IR_EXTI_Handler+0x150>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4013      	ands	r3, r2
 800113a:	4a28      	ldr	r2, [pc, #160]	; (80011dc <IR_EXTI_Handler+0x150>)
 800113c:	6013      	str	r3, [r2, #0]
 800113e:	e014      	b.n	800116a <IR_EXTI_Handler+0xde>
		else if (IR_ElapsedTime >= IR_HIGH_LEVEL_SIGNAL_RANGE_LOW && IR_ElapsedTime <= IR_HIGH_LEVEL_SIGNAL_RANGE_HIGH)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001146:	d310      	bcc.n	800116a <IR_EXTI_Handler+0xde>
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800114e:	4293      	cmp	r3, r2
 8001150:	d80b      	bhi.n	800116a <IR_EXTI_Handler+0xde>
			SET_BIT(IR_ReceivedData,IR_BitCounter);
 8001152:	4b21      	ldr	r3, [pc, #132]	; (80011d8 <IR_EXTI_Handler+0x14c>)
 8001154:	f993 3000 	ldrsb.w	r3, [r3]
 8001158:	461a      	mov	r2, r3
 800115a:	2301      	movs	r3, #1
 800115c:	4093      	lsls	r3, r2
 800115e:	461a      	mov	r2, r3
 8001160:	4b1e      	ldr	r3, [pc, #120]	; (80011dc <IR_EXTI_Handler+0x150>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4313      	orrs	r3, r2
 8001166:	4a1d      	ldr	r2, [pc, #116]	; (80011dc <IR_EXTI_Handler+0x150>)
 8001168:	6013      	str	r3, [r2, #0]
		IR_BitCounter--;
 800116a:	4b1b      	ldr	r3, [pc, #108]	; (80011d8 <IR_EXTI_Handler+0x14c>)
 800116c:	f993 3000 	ldrsb.w	r3, [r3]
 8001170:	b2db      	uxtb	r3, r3
 8001172:	3b01      	subs	r3, #1
 8001174:	b2db      	uxtb	r3, r3
 8001176:	b25a      	sxtb	r2, r3
 8001178:	4b17      	ldr	r3, [pc, #92]	; (80011d8 <IR_EXTI_Handler+0x14c>)
 800117a:	701a      	strb	r2, [r3, #0]
		if(IR_BitCounter == IR_BIT_COUNT_END) IR_Status_Flag = IR_END_OF_FRAME_DETECTED;
 800117c:	4b16      	ldr	r3, [pc, #88]	; (80011d8 <IR_EXTI_Handler+0x14c>)
 800117e:	f993 3000 	ldrsb.w	r3, [r3]
 8001182:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001186:	d102      	bne.n	800118e <IR_EXTI_Handler+0x102>
 8001188:	4b10      	ldr	r3, [pc, #64]	; (80011cc <IR_EXTI_Handler+0x140>)
 800118a:	2205      	movs	r2, #5
 800118c:	701a      	strb	r2, [r3, #0]
		TIM_SetPreload(&TIM2_Cfg,IR_START_SIGNAL_RANGE_HIGH);
 800118e:	f643 2198 	movw	r1, #15000	; 0x3a98
 8001192:	480f      	ldr	r0, [pc, #60]	; (80011d0 <IR_EXTI_Handler+0x144>)
 8001194:	f002 fbec 	bl	8003970 <TIM_SetPreload>
}
 8001198:	e014      	b.n	80011c4 <IR_EXTI_Handler+0x138>
	else if(IR_Status_Flag == IR_END_OF_FRAME_DETECTED)
 800119a:	4b0c      	ldr	r3, [pc, #48]	; (80011cc <IR_EXTI_Handler+0x140>)
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	2b05      	cmp	r3, #5
 80011a0:	d110      	bne.n	80011c4 <IR_EXTI_Handler+0x138>
		IR_BitCounter = IR_BIT_COUNT_INIT;
 80011a2:	4b0d      	ldr	r3, [pc, #52]	; (80011d8 <IR_EXTI_Handler+0x14c>)
 80011a4:	221f      	movs	r2, #31
 80011a6:	701a      	strb	r2, [r3, #0]
		IR_Status_Flag =  IR_START_SIGNAL_STARTED;
 80011a8:	4b08      	ldr	r3, [pc, #32]	; (80011cc <IR_EXTI_Handler+0x140>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	701a      	strb	r2, [r3, #0]
		if(IR_callback != NULL){
 80011ae:	4b09      	ldr	r3, [pc, #36]	; (80011d4 <IR_EXTI_Handler+0x148>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d003      	beq.n	80011be <IR_EXTI_Handler+0x132>
			IR_callback();
 80011b6:	4b07      	ldr	r3, [pc, #28]	; (80011d4 <IR_EXTI_Handler+0x148>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4798      	blx	r3
}
 80011bc:	e002      	b.n	80011c4 <IR_EXTI_Handler+0x138>
			IR_ReceivedFlag = IR_RECEIVED_DATA_STATUS;
 80011be:	4b08      	ldr	r3, [pc, #32]	; (80011e0 <IR_EXTI_Handler+0x154>)
 80011c0:	2201      	movs	r2, #1
 80011c2:	701a      	strb	r2, [r3, #0]
}
 80011c4:	bf00      	nop
 80011c6:	3708      	adds	r7, #8
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	2000012d 	.word	0x2000012d
 80011d0:	200000b0 	.word	0x200000b0
 80011d4:	20000124 	.word	0x20000124
 80011d8:	20000003 	.word	0x20000003
 80011dc:	20000128 	.word	0x20000128
 80011e0:	2000012c 	.word	0x2000012c

080011e4 <LEDMAT_Timer_CallBack_Handler>:

/**********************************************************************************************************************
 *  LOCAL FUNCTIONS
 *********************************************************************************************************************/
static void LEDMAT_Timer_CallBack_Handler(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
	LEDMAT_Delay_Flag = LEDMAT_DELAY_COMPLETED;
 80011e8:	4b03      	ldr	r3, [pc, #12]	; (80011f8 <LEDMAT_Timer_CallBack_Handler+0x14>)
 80011ea:	2201      	movs	r2, #1
 80011ec:	701a      	strb	r2, [r3, #0]
}
 80011ee:	bf00      	nop
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr
 80011f8:	2000012e 	.word	0x2000012e

080011fc <voidDisableAllRows>:
static void voidDisableAllRows(ledmat_t* ledmat_obj)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b084      	sub	sp, #16
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
	u8 Local_RowsCounter = ZERO_INIT;
 8001204:	2300      	movs	r3, #0
 8001206:	73fb      	strb	r3, [r7, #15]
	for(Local_RowsCounter = ZERO_INIT; Local_RowsCounter<LED_MATRIX_ROW_NUM; Local_RowsCounter++)
 8001208:	2300      	movs	r3, #0
 800120a:	73fb      	strb	r3, [r7, #15]
 800120c:	e015      	b.n	800123a <voidDisableAllRows+0x3e>
	{
#if LEDMAT_SHIFTREG_MODE == SHIFTREG_MODE_DISABLED
		GPIO_voidSetPinValue(ledmat_obj->row[Local_RowsCounter].port, ledmat_obj->row[Local_RowsCounter].pin,GPIO_LOW);
	}
#else
		CLR_BIT(ledmat_obj->ptrShiftRegCfg->ShiftReg_Data , ledmat_obj->row[Local_RowsCounter].ShiftRegPin);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	699b      	ldr	r3, [r3, #24]
 8001212:	881b      	ldrh	r3, [r3, #0]
 8001214:	b21a      	sxth	r2, r3
 8001216:	7bfb      	ldrb	r3, [r7, #15]
 8001218:	6879      	ldr	r1, [r7, #4]
 800121a:	5ccb      	ldrb	r3, [r1, r3]
 800121c:	4619      	mov	r1, r3
 800121e:	2301      	movs	r3, #1
 8001220:	408b      	lsls	r3, r1
 8001222:	b21b      	sxth	r3, r3
 8001224:	43db      	mvns	r3, r3
 8001226:	b21b      	sxth	r3, r3
 8001228:	4013      	ands	r3, r2
 800122a:	b21a      	sxth	r2, r3
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	699b      	ldr	r3, [r3, #24]
 8001230:	b292      	uxth	r2, r2
 8001232:	801a      	strh	r2, [r3, #0]
	for(Local_RowsCounter = ZERO_INIT; Local_RowsCounter<LED_MATRIX_ROW_NUM; Local_RowsCounter++)
 8001234:	7bfb      	ldrb	r3, [r7, #15]
 8001236:	3301      	adds	r3, #1
 8001238:	73fb      	strb	r3, [r7, #15]
 800123a:	7bfb      	ldrb	r3, [r7, #15]
 800123c:	2b07      	cmp	r3, #7
 800123e:	d9e6      	bls.n	800120e <voidDisableAllRows+0x12>
	}
		SHIFTREG_voidLatchData(ledmat_obj->ptrShiftRegCfg);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	699b      	ldr	r3, [r3, #24]
 8001244:	4618      	mov	r0, r3
 8001246:	f000 fb0d 	bl	8001864 <SHIFTREG_voidLatchData>
#endif

}
 800124a:	bf00      	nop
 800124c:	3710      	adds	r7, #16
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}

08001252 <voidDisableAllColumns>:
static void voidDisableAllColumns(ledmat_t* ledmat_obj)
{
 8001252:	b580      	push	{r7, lr}
 8001254:	b084      	sub	sp, #16
 8001256:	af00      	add	r7, sp, #0
 8001258:	6078      	str	r0, [r7, #4]
	u8 Local_ColumnsCounter = ZERO_INIT;
 800125a:	2300      	movs	r3, #0
 800125c:	73fb      	strb	r3, [r7, #15]
	for(Local_ColumnsCounter = ZERO_INIT; Local_ColumnsCounter<LED_MATRIX_COL_NUM; Local_ColumnsCounter++)
 800125e:	2300      	movs	r3, #0
 8001260:	73fb      	strb	r3, [r7, #15]
 8001262:	e014      	b.n	800128e <voidDisableAllColumns+0x3c>
	{
#if LEDMAT_SHIFTREG_MODE == SHIFTREG_MODE_DISABLED
		GPIO_voidSetPinValue(ledmat_obj->col[Local_ColumnsCounter].port, ledmat_obj->col[Local_ColumnsCounter].pin,GPIO_HIGH);
	}
#else
		SET_BIT(ledmat_obj->ptrShiftRegCfg->ShiftReg_Data , ledmat_obj->col[Local_ColumnsCounter].ShiftRegPin);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	699b      	ldr	r3, [r3, #24]
 8001268:	881b      	ldrh	r3, [r3, #0]
 800126a:	b21a      	sxth	r2, r3
 800126c:	7bfb      	ldrb	r3, [r7, #15]
 800126e:	6879      	ldr	r1, [r7, #4]
 8001270:	440b      	add	r3, r1
 8001272:	7a1b      	ldrb	r3, [r3, #8]
 8001274:	4619      	mov	r1, r3
 8001276:	2301      	movs	r3, #1
 8001278:	408b      	lsls	r3, r1
 800127a:	b21b      	sxth	r3, r3
 800127c:	4313      	orrs	r3, r2
 800127e:	b21a      	sxth	r2, r3
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	699b      	ldr	r3, [r3, #24]
 8001284:	b292      	uxth	r2, r2
 8001286:	801a      	strh	r2, [r3, #0]
	for(Local_ColumnsCounter = ZERO_INIT; Local_ColumnsCounter<LED_MATRIX_COL_NUM; Local_ColumnsCounter++)
 8001288:	7bfb      	ldrb	r3, [r7, #15]
 800128a:	3301      	adds	r3, #1
 800128c:	73fb      	strb	r3, [r7, #15]
 800128e:	7bfb      	ldrb	r3, [r7, #15]
 8001290:	2b07      	cmp	r3, #7
 8001292:	d9e7      	bls.n	8001264 <voidDisableAllColumns+0x12>
	}
		SHIFTREG_voidLatchData(ledmat_obj->ptrShiftRegCfg);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	699b      	ldr	r3, [r3, #24]
 8001298:	4618      	mov	r0, r3
 800129a:	f000 fae3 	bl	8001864 <SHIFTREG_voidLatchData>
#endif
}
 800129e:	bf00      	nop
 80012a0:	3710      	adds	r7, #16
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
	...

080012a8 <voidUpdateScreen_WithDelay_WithStopFlag>:
	}
	LEDMAT_Delay_Flag = LEDMAT_DELAY_NOT_COMPLETED;
}

static void voidUpdateScreen_WithDelay_WithStopFlag(ledmat_t* ledmat_obj, u32 time_ms , u8* StopFlag)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b086      	sub	sp, #24
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	60f8      	str	r0, [r7, #12]
 80012b0:	60b9      	str	r1, [r7, #8]
 80012b2:	607a      	str	r2, [r7, #4]
	u8 Local_RowsCounter = ZERO_INIT;
 80012b4:	2300      	movs	r3, #0
 80012b6:	75fb      	strb	r3, [r7, #23]
	u8 Local_ColumnsCounter = ZERO_INIT;
 80012b8:	2300      	movs	r3, #0
 80012ba:	75bb      	strb	r3, [r7, #22]
	gpio_logic_t Local_col_pin_logic = GPIO_HIGH;
 80012bc:	2301      	movs	r3, #1
 80012be:	757b      	strb	r3, [r7, #21]
	voidDisableAllRows(ledmat_obj);
 80012c0:	68f8      	ldr	r0, [r7, #12]
 80012c2:	f7ff ff9b 	bl	80011fc <voidDisableAllRows>
	TIM_SingleInterval(&TIM2_Cfg, time_ms*1000, LEDMAT_Timer_CallBack_Handler);
 80012c6:	68bb      	ldr	r3, [r7, #8]
 80012c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80012cc:	fb02 f303 	mul.w	r3, r2, r3
 80012d0:	4a51      	ldr	r2, [pc, #324]	; (8001418 <voidUpdateScreen_WithDelay_WithStopFlag+0x170>)
 80012d2:	4619      	mov	r1, r3
 80012d4:	4851      	ldr	r0, [pc, #324]	; (800141c <voidUpdateScreen_WithDelay_WithStopFlag+0x174>)
 80012d6:	f002 fac7 	bl	8003868 <TIM_SingleInterval>
	while(LEDMAT_Delay_Flag == LEDMAT_DELAY_NOT_COMPLETED)
 80012da:	e092      	b.n	8001402 <voidUpdateScreen_WithDelay_WithStopFlag+0x15a>
	{
		for(Local_RowsCounter = ZERO_INIT; Local_RowsCounter<LED_MATRIX_ROW_NUM; Local_RowsCounter++)
 80012dc:	2300      	movs	r3, #0
 80012de:	75fb      	strb	r3, [r7, #23]
 80012e0:	e08b      	b.n	80013fa <voidUpdateScreen_WithDelay_WithStopFlag+0x152>
		{
			voidDisableAllColumns(ledmat_obj);
 80012e2:	68f8      	ldr	r0, [r7, #12]
 80012e4:	f7ff ffb5 	bl	8001252 <voidDisableAllColumns>
			#if LEDMAT_SHIFTREG_MODE == SHIFTREG_MODE_DISABLED
			GPIO_voidSetPinValue(ledmat_obj->row[Local_RowsCounter].port, ledmat_obj->row[Local_RowsCounter].pin,GPIO_HIGH);
			#else
			SET_BIT(ledmat_obj->ptrShiftRegCfg->ShiftReg_Data,ledmat_obj->row[Local_RowsCounter].ShiftRegPin);
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	699b      	ldr	r3, [r3, #24]
 80012ec:	881b      	ldrh	r3, [r3, #0]
 80012ee:	b21a      	sxth	r2, r3
 80012f0:	7dfb      	ldrb	r3, [r7, #23]
 80012f2:	68f9      	ldr	r1, [r7, #12]
 80012f4:	5ccb      	ldrb	r3, [r1, r3]
 80012f6:	4619      	mov	r1, r3
 80012f8:	2301      	movs	r3, #1
 80012fa:	408b      	lsls	r3, r1
 80012fc:	b21b      	sxth	r3, r3
 80012fe:	4313      	orrs	r3, r2
 8001300:	b21a      	sxth	r2, r3
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	699b      	ldr	r3, [r3, #24]
 8001306:	b292      	uxth	r2, r2
 8001308:	801a      	strh	r2, [r3, #0]
			SHIFTREG_voidLatchData(ledmat_obj->ptrShiftRegCfg);
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	699b      	ldr	r3, [r3, #24]
 800130e:	4618      	mov	r0, r3
 8001310:	f000 faa8 	bl	8001864 <SHIFTREG_voidLatchData>
			#endif
			for(Local_ColumnsCounter = ZERO_INIT; Local_ColumnsCounter<LED_MATRIX_COL_NUM; Local_ColumnsCounter++)
 8001314:	2300      	movs	r3, #0
 8001316:	75bb      	strb	r3, [r7, #22]
 8001318:	e03f      	b.n	800139a <voidUpdateScreen_WithDelay_WithStopFlag+0xf2>
			{
				Local_col_pin_logic= !(ledmat_obj->LedMatrix_Buffer[Local_RowsCounter]>>Local_ColumnsCounter &0x01);
 800131a:	7dfb      	ldrb	r3, [r7, #23]
 800131c:	68fa      	ldr	r2, [r7, #12]
 800131e:	4413      	add	r3, r2
 8001320:	7c1b      	ldrb	r3, [r3, #16]
 8001322:	461a      	mov	r2, r3
 8001324:	7dbb      	ldrb	r3, [r7, #22]
 8001326:	fa42 f303 	asr.w	r3, r2, r3
 800132a:	f003 0301 	and.w	r3, r3, #1
 800132e:	2b00      	cmp	r3, #0
 8001330:	bf0c      	ite	eq
 8001332:	2301      	moveq	r3, #1
 8001334:	2300      	movne	r3, #0
 8001336:	b2db      	uxtb	r3, r3
 8001338:	757b      	strb	r3, [r7, #21]
				#if LEDMAT_SHIFTREG_MODE == SHIFTREG_MODE_DISABLED
				GPIO_voidSetPinValue(ledmat_obj->col[Local_ColumnsCounter].port, ledmat_obj->col[Local_ColumnsCounter].pin,Local_col_pin_logic);
				Frame_delay();
				#else
				if(Local_col_pin_logic == GPIO_HIGH){
 800133a:	7d7b      	ldrb	r3, [r7, #21]
 800133c:	2b01      	cmp	r3, #1
 800133e:	d112      	bne.n	8001366 <voidUpdateScreen_WithDelay_WithStopFlag+0xbe>
					SET_BIT(ledmat_obj->ptrShiftRegCfg->ShiftReg_Data,ledmat_obj->col[Local_ColumnsCounter].ShiftRegPin);
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	699b      	ldr	r3, [r3, #24]
 8001344:	881b      	ldrh	r3, [r3, #0]
 8001346:	b21a      	sxth	r2, r3
 8001348:	7dbb      	ldrb	r3, [r7, #22]
 800134a:	68f9      	ldr	r1, [r7, #12]
 800134c:	440b      	add	r3, r1
 800134e:	7a1b      	ldrb	r3, [r3, #8]
 8001350:	4619      	mov	r1, r3
 8001352:	2301      	movs	r3, #1
 8001354:	408b      	lsls	r3, r1
 8001356:	b21b      	sxth	r3, r3
 8001358:	4313      	orrs	r3, r2
 800135a:	b21a      	sxth	r2, r3
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	699b      	ldr	r3, [r3, #24]
 8001360:	b292      	uxth	r2, r2
 8001362:	801a      	strh	r2, [r3, #0]
 8001364:	e016      	b.n	8001394 <voidUpdateScreen_WithDelay_WithStopFlag+0xec>
				}
				else if(Local_col_pin_logic == GPIO_LOW){
 8001366:	7d7b      	ldrb	r3, [r7, #21]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d113      	bne.n	8001394 <voidUpdateScreen_WithDelay_WithStopFlag+0xec>
					CLR_BIT(ledmat_obj->ptrShiftRegCfg->ShiftReg_Data,ledmat_obj->col[Local_ColumnsCounter].ShiftRegPin);
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	699b      	ldr	r3, [r3, #24]
 8001370:	881b      	ldrh	r3, [r3, #0]
 8001372:	b21a      	sxth	r2, r3
 8001374:	7dbb      	ldrb	r3, [r7, #22]
 8001376:	68f9      	ldr	r1, [r7, #12]
 8001378:	440b      	add	r3, r1
 800137a:	7a1b      	ldrb	r3, [r3, #8]
 800137c:	4619      	mov	r1, r3
 800137e:	2301      	movs	r3, #1
 8001380:	408b      	lsls	r3, r1
 8001382:	b21b      	sxth	r3, r3
 8001384:	43db      	mvns	r3, r3
 8001386:	b21b      	sxth	r3, r3
 8001388:	4013      	ands	r3, r2
 800138a:	b21a      	sxth	r2, r3
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	699b      	ldr	r3, [r3, #24]
 8001390:	b292      	uxth	r2, r2
 8001392:	801a      	strh	r2, [r3, #0]
			for(Local_ColumnsCounter = ZERO_INIT; Local_ColumnsCounter<LED_MATRIX_COL_NUM; Local_ColumnsCounter++)
 8001394:	7dbb      	ldrb	r3, [r7, #22]
 8001396:	3301      	adds	r3, #1
 8001398:	75bb      	strb	r3, [r7, #22]
 800139a:	7dbb      	ldrb	r3, [r7, #22]
 800139c:	2b07      	cmp	r3, #7
 800139e:	d9bc      	bls.n	800131a <voidUpdateScreen_WithDelay_WithStopFlag+0x72>
				#endif
			}
			#if LEDMAT_SHIFTREG_MODE == SHIFTREG_MODE_DISABLED
			GPIO_voidSetPinValue(ledmat_obj->row[Local_RowsCounter].port, ledmat_obj->row[Local_RowsCounter].pin,GPIO_LOW);
			#else
			SHIFTREG_voidLatchData(ledmat_obj->ptrShiftRegCfg);
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	699b      	ldr	r3, [r3, #24]
 80013a4:	4618      	mov	r0, r3
 80013a6:	f000 fa5d 	bl	8001864 <SHIFTREG_voidLatchData>
			CLR_BIT(ledmat_obj->ptrShiftRegCfg->ShiftReg_Data,ledmat_obj->row[Local_RowsCounter].ShiftRegPin);
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	699b      	ldr	r3, [r3, #24]
 80013ae:	881b      	ldrh	r3, [r3, #0]
 80013b0:	b21a      	sxth	r2, r3
 80013b2:	7dfb      	ldrb	r3, [r7, #23]
 80013b4:	68f9      	ldr	r1, [r7, #12]
 80013b6:	5ccb      	ldrb	r3, [r1, r3]
 80013b8:	4619      	mov	r1, r3
 80013ba:	2301      	movs	r3, #1
 80013bc:	408b      	lsls	r3, r1
 80013be:	b21b      	sxth	r3, r3
 80013c0:	43db      	mvns	r3, r3
 80013c2:	b21b      	sxth	r3, r3
 80013c4:	4013      	ands	r3, r2
 80013c6:	b21a      	sxth	r2, r3
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	699b      	ldr	r3, [r3, #24]
 80013cc:	b292      	uxth	r2, r2
 80013ce:	801a      	strh	r2, [r3, #0]
			SHIFTREG_voidLatchData(ledmat_obj->ptrShiftRegCfg);
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	699b      	ldr	r3, [r3, #24]
 80013d4:	4618      	mov	r0, r3
 80013d6:	f000 fa45 	bl	8001864 <SHIFTREG_voidLatchData>
			#endif
		if(*StopFlag == 1)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	2b01      	cmp	r3, #1
 80013e0:	d108      	bne.n	80013f4 <voidUpdateScreen_WithDelay_WithStopFlag+0x14c>
		{
			voidDisableAllColumns(ledmat_obj);
 80013e2:	68f8      	ldr	r0, [r7, #12]
 80013e4:	f7ff ff35 	bl	8001252 <voidDisableAllColumns>
			SHIFTREG_voidLatchData(ledmat_obj->ptrShiftRegCfg);
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	699b      	ldr	r3, [r3, #24]
 80013ec:	4618      	mov	r0, r3
 80013ee:	f000 fa39 	bl	8001864 <SHIFTREG_voidLatchData>
			return;
 80013f2:	e00e      	b.n	8001412 <voidUpdateScreen_WithDelay_WithStopFlag+0x16a>
		for(Local_RowsCounter = ZERO_INIT; Local_RowsCounter<LED_MATRIX_ROW_NUM; Local_RowsCounter++)
 80013f4:	7dfb      	ldrb	r3, [r7, #23]
 80013f6:	3301      	adds	r3, #1
 80013f8:	75fb      	strb	r3, [r7, #23]
 80013fa:	7dfb      	ldrb	r3, [r7, #23]
 80013fc:	2b07      	cmp	r3, #7
 80013fe:	f67f af70 	bls.w	80012e2 <voidUpdateScreen_WithDelay_WithStopFlag+0x3a>
	while(LEDMAT_Delay_Flag == LEDMAT_DELAY_NOT_COMPLETED)
 8001402:	4b07      	ldr	r3, [pc, #28]	; (8001420 <voidUpdateScreen_WithDelay_WithStopFlag+0x178>)
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	2b00      	cmp	r3, #0
 8001408:	f43f af68 	beq.w	80012dc <voidUpdateScreen_WithDelay_WithStopFlag+0x34>
		}
		}
	}
	LEDMAT_Delay_Flag = LEDMAT_DELAY_NOT_COMPLETED;
 800140c:	4b04      	ldr	r3, [pc, #16]	; (8001420 <voidUpdateScreen_WithDelay_WithStopFlag+0x178>)
 800140e:	2200      	movs	r2, #0
 8001410:	701a      	strb	r2, [r3, #0]
}
 8001412:	3718      	adds	r7, #24
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	080011e5 	.word	0x080011e5
 800141c:	200000b0 	.word	0x200000b0
 8001420:	2000012e 	.word	0x2000012e

08001424 <voidClearLEDMATBuffer>:
static void voidClearLEDMATBuffer(ledmat_t* ledmat_obj){
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
	memset(ledmat_obj->LedMatrix_Buffer,0,LED_MATRIX_ROW_NUM);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	3310      	adds	r3, #16
 8001430:	2208      	movs	r2, #8
 8001432:	2100      	movs	r1, #0
 8001434:	4618      	mov	r0, r3
 8001436:	f005 fb68 	bl	8006b0a <memset>
}
 800143a:	bf00      	nop
 800143c:	3708      	adds	r7, #8
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}

08001442 <voidScrollLeft>:
static void voidScrollLeft(ledmat_t* ledmat_obj)
{
 8001442:	b480      	push	{r7}
 8001444:	b085      	sub	sp, #20
 8001446:	af00      	add	r7, sp, #0
 8001448:	6078      	str	r0, [r7, #4]
	u8 Local_RowsCounter = ZERO_INIT;
 800144a:	2300      	movs	r3, #0
 800144c:	73fb      	strb	r3, [r7, #15]
	for(Local_RowsCounter = ZERO_INIT; Local_RowsCounter<LED_MATRIX_ROW_NUM; Local_RowsCounter++)
 800144e:	2300      	movs	r3, #0
 8001450:	73fb      	strb	r3, [r7, #15]
 8001452:	e00d      	b.n	8001470 <voidScrollLeft+0x2e>
	{
		ledmat_obj->LedMatrix_Buffer[Local_RowsCounter] >>= 1;
 8001454:	7bfb      	ldrb	r3, [r7, #15]
 8001456:	687a      	ldr	r2, [r7, #4]
 8001458:	4413      	add	r3, r2
 800145a:	7c1a      	ldrb	r2, [r3, #16]
 800145c:	7bfb      	ldrb	r3, [r7, #15]
 800145e:	0852      	lsrs	r2, r2, #1
 8001460:	b2d1      	uxtb	r1, r2
 8001462:	687a      	ldr	r2, [r7, #4]
 8001464:	4413      	add	r3, r2
 8001466:	460a      	mov	r2, r1
 8001468:	741a      	strb	r2, [r3, #16]
	for(Local_RowsCounter = ZERO_INIT; Local_RowsCounter<LED_MATRIX_ROW_NUM; Local_RowsCounter++)
 800146a:	7bfb      	ldrb	r3, [r7, #15]
 800146c:	3301      	adds	r3, #1
 800146e:	73fb      	strb	r3, [r7, #15]
 8001470:	7bfb      	ldrb	r3, [r7, #15]
 8001472:	2b07      	cmp	r3, #7
 8001474:	d9ee      	bls.n	8001454 <voidScrollLeft+0x12>
	}
}
 8001476:	bf00      	nop
 8001478:	bf00      	nop
 800147a:	3714      	adds	r7, #20
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr

08001484 <HLEDMAT_voidInit>:
}
/**********************************************************************************************************************
 *  GLOBAL FUNCTIONS
 *********************************************************************************************************************/
void HLEDMAT_voidInit(ledmat_t* ledmat_obj)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
			  GPIO_voidSetPinOutputMode(ledmat_obj->col[Local_ColumnsCounter].port,ledmat_obj->col[Local_ColumnsCounter].pin,GPIO_OUTPUT_PIN_PUSH_PULL);
			  GPIO_voidSetPinOutputSpeed(ledmat_obj->col[Local_ColumnsCounter].port,ledmat_obj->col[Local_ColumnsCounter].pin,GPIO_OUTPUT_PIN_LOW_SPEED);
			  GPIO_voidSetPinValue(ledmat_obj->col[Local_ColumnsCounter].port,ledmat_obj->col[Local_ColumnsCounter].pin,ledmat_obj->col[Local_ColumnsCounter].state);
		}
#else
SHIFTREG_voidInit(ledmat_obj->ptrShiftRegCfg);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	699b      	ldr	r3, [r3, #24]
 8001490:	4618      	mov	r0, r3
 8001492:	f000 f9c7 	bl	8001824 <SHIFTREG_voidInit>
#endif
}
 8001496:	bf00      	nop
 8001498:	3708      	adds	r7, #8
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
	...

080014a0 <HLEDMAT_voidDisplayScrollingString_WithStopFlag>:
		voidScrollLeft(ledmat_obj);
		voidUpdateScreen_WithDelay(ledmat_obj,Copy_u32TimeMs);
	}
}
void HLEDMAT_voidDisplayScrollingString_WithStopFlag(ledmat_t* ledmat_obj,u8* Copy_pu8Str,u32 Copy_u32TimeMs , u8* StopFlag)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b086      	sub	sp, #24
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	60f8      	str	r0, [r7, #12]
 80014a8:	60b9      	str	r1, [r7, #8]
 80014aa:	607a      	str	r2, [r7, #4]
 80014ac:	603b      	str	r3, [r7, #0]
	u8 Local_u8ColumnCounter = ZERO_INIT;
 80014ae:	2300      	movs	r3, #0
 80014b0:	75fb      	strb	r3, [r7, #23]
	u8 Local_u8RowCounter = ZERO_INIT;
 80014b2:	2300      	movs	r3, #0
 80014b4:	75bb      	strb	r3, [r7, #22]
	voidClearLEDMATBuffer(ledmat_obj);
 80014b6:	68f8      	ldr	r0, [r7, #12]
 80014b8:	f7ff ffb4 	bl	8001424 <voidClearLEDMATBuffer>
	while(*Copy_pu8Str)
 80014bc:	e03d      	b.n	800153a <HLEDMAT_voidDisplayScrollingString_WithStopFlag+0x9a>
	{
		for (Local_u8ColumnCounter = ZERO_INIT; Local_u8ColumnCounter <LED_MATRIX_COL_NUM;Local_u8ColumnCounter++)
 80014be:	2300      	movs	r3, #0
 80014c0:	75fb      	strb	r3, [r7, #23]
 80014c2:	e034      	b.n	800152e <HLEDMAT_voidDisplayScrollingString_WithStopFlag+0x8e>
			{
				for (Local_u8RowCounter = ZERO_INIT;Local_u8RowCounter<LED_MATRIX_ROW_NUM;Local_u8RowCounter++)
 80014c4:	2300      	movs	r3, #0
 80014c6:	75bb      	strb	r3, [r7, #22]
 80014c8:	e01f      	b.n	800150a <HLEDMAT_voidDisplayScrollingString_WithStopFlag+0x6a>
				{
						ledmat_obj->LedMatrix_Buffer[Local_u8RowCounter] |= ((Chr_font[*Copy_pu8Str-FONT_START][Local_u8RowCounter]>>Local_u8ColumnCounter&0x01)<<7);
 80014ca:	7dbb      	ldrb	r3, [r7, #22]
 80014cc:	68fa      	ldr	r2, [r7, #12]
 80014ce:	4413      	add	r3, r2
 80014d0:	7c1b      	ldrb	r3, [r3, #16]
 80014d2:	b25a      	sxtb	r2, r3
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	f1a3 0120 	sub.w	r1, r3, #32
 80014dc:	7dbb      	ldrb	r3, [r7, #22]
 80014de:	4827      	ldr	r0, [pc, #156]	; (800157c <HLEDMAT_voidDisplayScrollingString_WithStopFlag+0xdc>)
 80014e0:	00c9      	lsls	r1, r1, #3
 80014e2:	4401      	add	r1, r0
 80014e4:	440b      	add	r3, r1
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	4619      	mov	r1, r3
 80014ea:	7dfb      	ldrb	r3, [r7, #23]
 80014ec:	fa41 f303 	asr.w	r3, r1, r3
 80014f0:	01db      	lsls	r3, r3, #7
 80014f2:	b25b      	sxtb	r3, r3
 80014f4:	4313      	orrs	r3, r2
 80014f6:	b25a      	sxtb	r2, r3
 80014f8:	7dbb      	ldrb	r3, [r7, #22]
 80014fa:	b2d1      	uxtb	r1, r2
 80014fc:	68fa      	ldr	r2, [r7, #12]
 80014fe:	4413      	add	r3, r2
 8001500:	460a      	mov	r2, r1
 8001502:	741a      	strb	r2, [r3, #16]
				for (Local_u8RowCounter = ZERO_INIT;Local_u8RowCounter<LED_MATRIX_ROW_NUM;Local_u8RowCounter++)
 8001504:	7dbb      	ldrb	r3, [r7, #22]
 8001506:	3301      	adds	r3, #1
 8001508:	75bb      	strb	r3, [r7, #22]
 800150a:	7dbb      	ldrb	r3, [r7, #22]
 800150c:	2b07      	cmp	r3, #7
 800150e:	d9dc      	bls.n	80014ca <HLEDMAT_voidDisplayScrollingString_WithStopFlag+0x2a>
				}
				voidUpdateScreen_WithDelay_WithStopFlag(ledmat_obj,Copy_u32TimeMs,StopFlag);
 8001510:	683a      	ldr	r2, [r7, #0]
 8001512:	6879      	ldr	r1, [r7, #4]
 8001514:	68f8      	ldr	r0, [r7, #12]
 8001516:	f7ff fec7 	bl	80012a8 <voidUpdateScreen_WithDelay_WithStopFlag>
				if(*StopFlag == 1){
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	2b01      	cmp	r3, #1
 8001520:	d025      	beq.n	800156e <HLEDMAT_voidDisplayScrollingString_WithStopFlag+0xce>
					return;
				}
				voidScrollLeft(ledmat_obj);
 8001522:	68f8      	ldr	r0, [r7, #12]
 8001524:	f7ff ff8d 	bl	8001442 <voidScrollLeft>
		for (Local_u8ColumnCounter = ZERO_INIT; Local_u8ColumnCounter <LED_MATRIX_COL_NUM;Local_u8ColumnCounter++)
 8001528:	7dfb      	ldrb	r3, [r7, #23]
 800152a:	3301      	adds	r3, #1
 800152c:	75fb      	strb	r3, [r7, #23]
 800152e:	7dfb      	ldrb	r3, [r7, #23]
 8001530:	2b07      	cmp	r3, #7
 8001532:	d9c7      	bls.n	80014c4 <HLEDMAT_voidDisplayScrollingString_WithStopFlag+0x24>
			}
		Copy_pu8Str++;
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	3301      	adds	r3, #1
 8001538:	60bb      	str	r3, [r7, #8]
	while(*Copy_pu8Str)
 800153a:	68bb      	ldr	r3, [r7, #8]
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d1bd      	bne.n	80014be <HLEDMAT_voidDisplayScrollingString_WithStopFlag+0x1e>
	}
	for(Local_u8ColumnCounter =0; Local_u8ColumnCounter<LED_MATRIX_COL_NUM;Local_u8ColumnCounter++)
 8001542:	2300      	movs	r3, #0
 8001544:	75fb      	strb	r3, [r7, #23]
 8001546:	e00e      	b.n	8001566 <HLEDMAT_voidDisplayScrollingString_WithStopFlag+0xc6>
	{
		voidScrollLeft(ledmat_obj);
 8001548:	68f8      	ldr	r0, [r7, #12]
 800154a:	f7ff ff7a 	bl	8001442 <voidScrollLeft>
		voidUpdateScreen_WithDelay_WithStopFlag(ledmat_obj,Copy_u32TimeMs,StopFlag);
 800154e:	683a      	ldr	r2, [r7, #0]
 8001550:	6879      	ldr	r1, [r7, #4]
 8001552:	68f8      	ldr	r0, [r7, #12]
 8001554:	f7ff fea8 	bl	80012a8 <voidUpdateScreen_WithDelay_WithStopFlag>
		if(*StopFlag == 1){
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	2b01      	cmp	r3, #1
 800155e:	d008      	beq.n	8001572 <HLEDMAT_voidDisplayScrollingString_WithStopFlag+0xd2>
	for(Local_u8ColumnCounter =0; Local_u8ColumnCounter<LED_MATRIX_COL_NUM;Local_u8ColumnCounter++)
 8001560:	7dfb      	ldrb	r3, [r7, #23]
 8001562:	3301      	adds	r3, #1
 8001564:	75fb      	strb	r3, [r7, #23]
 8001566:	7dfb      	ldrb	r3, [r7, #23]
 8001568:	2b07      	cmp	r3, #7
 800156a:	d9ed      	bls.n	8001548 <HLEDMAT_voidDisplayScrollingString_WithStopFlag+0xa8>
 800156c:	e002      	b.n	8001574 <HLEDMAT_voidDisplayScrollingString_WithStopFlag+0xd4>
					return;
 800156e:	bf00      	nop
 8001570:	e000      	b.n	8001574 <HLEDMAT_voidDisplayScrollingString_WithStopFlag+0xd4>
							return;
 8001572:	bf00      	nop
						}
	}
}
 8001574:	3718      	adds	r7, #24
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	08036178 	.word	0x08036178

08001580 <R2RDAC_Bit_init>:

/**********************************************************************************************************************
 *  LOCAL FUNCTIONS
 *********************************************************************************************************************/
static void R2RDAC_Bit_init(port_index_t R2RDAC_BitPort, pin_index_t R2RDAC_BitPin)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	4603      	mov	r3, r0
 8001588:	460a      	mov	r2, r1
 800158a:	71fb      	strb	r3, [r7, #7]
 800158c:	4613      	mov	r3, r2
 800158e:	71bb      	strb	r3, [r7, #6]
	switch (R2RDAC_BitPort)
 8001590:	79fb      	ldrb	r3, [r7, #7]
 8001592:	2b02      	cmp	r3, #2
 8001594:	d010      	beq.n	80015b8 <R2RDAC_Bit_init+0x38>
 8001596:	2b02      	cmp	r3, #2
 8001598:	dc13      	bgt.n	80015c2 <R2RDAC_Bit_init+0x42>
 800159a:	2b00      	cmp	r3, #0
 800159c:	d002      	beq.n	80015a4 <R2RDAC_Bit_init+0x24>
 800159e:	2b01      	cmp	r3, #1
 80015a0:	d005      	beq.n	80015ae <R2RDAC_Bit_init+0x2e>
	      break;
	    case GPIO_PORTC:
	      RCC_voidEnablePeripheralClock(RCC_AHB,RCC_AHB_GPIOCEN);
	      break;
	    default:
	      break;
 80015a2:	e00e      	b.n	80015c2 <R2RDAC_Bit_init+0x42>
	      RCC_voidEnablePeripheralClock(RCC_AHB,RCC_AHB_GPIOAEN);
 80015a4:	2100      	movs	r1, #0
 80015a6:	2000      	movs	r0, #0
 80015a8:	f001 fc24 	bl	8002df4 <RCC_voidEnablePeripheralClock>
	      break;
 80015ac:	e00a      	b.n	80015c4 <R2RDAC_Bit_init+0x44>
	      RCC_voidEnablePeripheralClock(RCC_AHB,RCC_AHB_GPIOBEN);
 80015ae:	2101      	movs	r1, #1
 80015b0:	2000      	movs	r0, #0
 80015b2:	f001 fc1f 	bl	8002df4 <RCC_voidEnablePeripheralClock>
	      break;
 80015b6:	e005      	b.n	80015c4 <R2RDAC_Bit_init+0x44>
	      RCC_voidEnablePeripheralClock(RCC_AHB,RCC_AHB_GPIOCEN);
 80015b8:	2102      	movs	r1, #2
 80015ba:	2000      	movs	r0, #0
 80015bc:	f001 fc1a 	bl	8002df4 <RCC_voidEnablePeripheralClock>
	      break;
 80015c0:	e000      	b.n	80015c4 <R2RDAC_Bit_init+0x44>
	      break;
 80015c2:	bf00      	nop
	  }
	  GPIO_voidSetPinMode(R2RDAC_BitPort,R2RDAC_BitPin,GPIO_OUTPUT_PIN_MODE);
 80015c4:	79b9      	ldrb	r1, [r7, #6]
 80015c6:	79fb      	ldrb	r3, [r7, #7]
 80015c8:	2201      	movs	r2, #1
 80015ca:	4618      	mov	r0, r3
 80015cc:	f001 f8c6 	bl	800275c <GPIO_voidSetPinMode>
	  GPIO_voidSetPinOutputMode(R2RDAC_BitPort,R2RDAC_BitPin,GPIO_OUTPUT_PIN_PUSH_PULL);
 80015d0:	79b9      	ldrb	r1, [r7, #6]
 80015d2:	79fb      	ldrb	r3, [r7, #7]
 80015d4:	2200      	movs	r2, #0
 80015d6:	4618      	mov	r0, r3
 80015d8:	f001 f91a 	bl	8002810 <GPIO_voidSetPinOutputMode>
	  GPIO_voidSetPinOutputSpeed(R2RDAC_BitPort,R2RDAC_BitPin,GPIO_OUTPUT_PIN_LOW_SPEED);
 80015dc:	79b9      	ldrb	r1, [r7, #6]
 80015de:	79fb      	ldrb	r3, [r7, #7]
 80015e0:	2200      	movs	r2, #0
 80015e2:	4618      	mov	r0, r3
 80015e4:	f001 fa0e 	bl	8002a04 <GPIO_voidSetPinOutputSpeed>
	  GPIO_voidSetPinValue(R2RDAC_BitPort,R2RDAC_BitPin,GPIO_LOW);
 80015e8:	79b9      	ldrb	r1, [r7, #6]
 80015ea:	79fb      	ldrb	r3, [r7, #7]
 80015ec:	2200      	movs	r2, #0
 80015ee:	4618      	mov	r0, r3
 80015f0:	f001 fa62 	bl	8002ab8 <GPIO_voidSetPinValue>
}
 80015f4:	bf00      	nop
 80015f6:	3708      	adds	r7, #8
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}

080015fc <R2RDAC_voidInit>:
/**********************************************************************************************************************
 *  GLOBAL FUNCTIONS
 *********************************************************************************************************************/
void R2RDAC_voidInit(R2RDAC_config_t* R2RDAC_Config)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b084      	sub	sp, #16
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
	u8 	Local_DAC_BitCounter = ZERO_INIT;
 8001604:	2300      	movs	r3, #0
 8001606:	73fb      	strb	r3, [r7, #15]
	for(Local_DAC_BitCounter = ZERO_INIT;Local_DAC_BitCounter<R2RDAC_RESOLUTION;Local_DAC_BitCounter++)
 8001608:	2300      	movs	r3, #0
 800160a:	73fb      	strb	r3, [r7, #15]
 800160c:	e00c      	b.n	8001628 <R2RDAC_voidInit+0x2c>
	{
		R2RDAC_Bit_init(R2RDAC_Config->R2RDAC_Bit_Port[Local_DAC_BitCounter],R2RDAC_Config->R2RDAC_Bit_Pin[Local_DAC_BitCounter]);
 800160e:	7bfb      	ldrb	r3, [r7, #15]
 8001610:	687a      	ldr	r2, [r7, #4]
 8001612:	4413      	add	r3, r2
 8001614:	7a18      	ldrb	r0, [r3, #8]
 8001616:	7bfb      	ldrb	r3, [r7, #15]
 8001618:	687a      	ldr	r2, [r7, #4]
 800161a:	5cd3      	ldrb	r3, [r2, r3]
 800161c:	4619      	mov	r1, r3
 800161e:	f7ff ffaf 	bl	8001580 <R2RDAC_Bit_init>
	for(Local_DAC_BitCounter = ZERO_INIT;Local_DAC_BitCounter<R2RDAC_RESOLUTION;Local_DAC_BitCounter++)
 8001622:	7bfb      	ldrb	r3, [r7, #15]
 8001624:	3301      	adds	r3, #1
 8001626:	73fb      	strb	r3, [r7, #15]
 8001628:	7bfb      	ldrb	r3, [r7, #15]
 800162a:	2b07      	cmp	r3, #7
 800162c:	d9ef      	bls.n	800160e <R2RDAC_voidInit+0x12>
	}

}
 800162e:	bf00      	nop
 8001630:	bf00      	nop
 8001632:	3710      	adds	r7, #16
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}

08001638 <RGB_init_led>:

/**********************************************************************************************************************
 *  LOCAL FUNCTIONS
 *********************************************************************************************************************/
static void RGB_init_led(port_index_t RGB_LedPort, pin_index_t RGB_LedPin)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
 800163e:	4603      	mov	r3, r0
 8001640:	460a      	mov	r2, r1
 8001642:	71fb      	strb	r3, [r7, #7]
 8001644:	4613      	mov	r3, r2
 8001646:	71bb      	strb	r3, [r7, #6]
	switch (RGB_LedPort) {
 8001648:	79fb      	ldrb	r3, [r7, #7]
 800164a:	2b02      	cmp	r3, #2
 800164c:	d010      	beq.n	8001670 <RGB_init_led+0x38>
 800164e:	2b02      	cmp	r3, #2
 8001650:	dc13      	bgt.n	800167a <RGB_init_led+0x42>
 8001652:	2b00      	cmp	r3, #0
 8001654:	d002      	beq.n	800165c <RGB_init_led+0x24>
 8001656:	2b01      	cmp	r3, #1
 8001658:	d005      	beq.n	8001666 <RGB_init_led+0x2e>
	      break;
	    case GPIO_PORTC:
	      RCC_voidEnablePeripheralClock(RCC_AHB,RCC_AHB_GPIOCEN);
	      break;
	    default:
	      break;
 800165a:	e00e      	b.n	800167a <RGB_init_led+0x42>
	      RCC_voidEnablePeripheralClock(RCC_AHB,RCC_AHB_GPIOAEN);
 800165c:	2100      	movs	r1, #0
 800165e:	2000      	movs	r0, #0
 8001660:	f001 fbc8 	bl	8002df4 <RCC_voidEnablePeripheralClock>
	      break;
 8001664:	e00a      	b.n	800167c <RGB_init_led+0x44>
	      RCC_voidEnablePeripheralClock(RCC_AHB,RCC_AHB_GPIOBEN);
 8001666:	2101      	movs	r1, #1
 8001668:	2000      	movs	r0, #0
 800166a:	f001 fbc3 	bl	8002df4 <RCC_voidEnablePeripheralClock>
	      break;
 800166e:	e005      	b.n	800167c <RGB_init_led+0x44>
	      RCC_voidEnablePeripheralClock(RCC_AHB,RCC_AHB_GPIOCEN);
 8001670:	2102      	movs	r1, #2
 8001672:	2000      	movs	r0, #0
 8001674:	f001 fbbe 	bl	8002df4 <RCC_voidEnablePeripheralClock>
	      break;
 8001678:	e000      	b.n	800167c <RGB_init_led+0x44>
	      break;
 800167a:	bf00      	nop
	  }
	  GPIO_voidSetPinMode(RGB_LedPort,RGB_LedPin,GPIO_OUTPUT_PIN_MODE);
 800167c:	79b9      	ldrb	r1, [r7, #6]
 800167e:	79fb      	ldrb	r3, [r7, #7]
 8001680:	2201      	movs	r2, #1
 8001682:	4618      	mov	r0, r3
 8001684:	f001 f86a 	bl	800275c <GPIO_voidSetPinMode>
	  GPIO_voidSetPinOutputMode(RGB_LedPort,RGB_LedPin,GPIO_OUTPUT_PIN_PUSH_PULL);
 8001688:	79b9      	ldrb	r1, [r7, #6]
 800168a:	79fb      	ldrb	r3, [r7, #7]
 800168c:	2200      	movs	r2, #0
 800168e:	4618      	mov	r0, r3
 8001690:	f001 f8be 	bl	8002810 <GPIO_voidSetPinOutputMode>
	  GPIO_voidSetPinOutputSpeed(RGB_LedPort,RGB_LedPin,GPIO_OUTPUT_PIN_LOW_SPEED);
 8001694:	79b9      	ldrb	r1, [r7, #6]
 8001696:	79fb      	ldrb	r3, [r7, #7]
 8001698:	2200      	movs	r2, #0
 800169a:	4618      	mov	r0, r3
 800169c:	f001 f9b2 	bl	8002a04 <GPIO_voidSetPinOutputSpeed>
	  GPIO_voidSetPinValue(RGB_LedPort,RGB_LedPin,GPIO_HIGH);
 80016a0:	79b9      	ldrb	r1, [r7, #6]
 80016a2:	79fb      	ldrb	r3, [r7, #7]
 80016a4:	2201      	movs	r2, #1
 80016a6:	4618      	mov	r0, r3
 80016a8:	f001 fa06 	bl	8002ab8 <GPIO_voidSetPinValue>
}
 80016ac:	bf00      	nop
 80016ae:	3708      	adds	r7, #8
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}

080016b4 <RGB_voidInit>:
/**********************************************************************************************************************
 *  GLOBAL FUNCTIONS
 *********************************************************************************************************************/

void RGB_voidInit(RGB_Config_t* REF_RGBObj)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
	RGB_init_led(REF_RGBObj->RGB_Red_Port, REF_RGBObj->RGB_Red_Pin);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	785a      	ldrb	r2, [r3, #1]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	4619      	mov	r1, r3
 80016c6:	4610      	mov	r0, r2
 80016c8:	f7ff ffb6 	bl	8001638 <RGB_init_led>
	RGB_init_led(REF_RGBObj->RGB_Green_Port, REF_RGBObj->RGB_Green_Pin);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	791a      	ldrb	r2, [r3, #4]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	78db      	ldrb	r3, [r3, #3]
 80016d4:	4619      	mov	r1, r3
 80016d6:	4610      	mov	r0, r2
 80016d8:	f7ff ffae 	bl	8001638 <RGB_init_led>
	RGB_init_led(REF_RGBObj->RGB_Blue_Port, REF_RGBObj->RGB_Blue_Pin);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	79da      	ldrb	r2, [r3, #7]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	799b      	ldrb	r3, [r3, #6]
 80016e4:	4619      	mov	r1, r3
 80016e6:	4610      	mov	r0, r2
 80016e8:	f7ff ffa6 	bl	8001638 <RGB_init_led>
}
 80016ec:	bf00      	nop
 80016ee:	3708      	adds	r7, #8
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}

080016f4 <RGB_voidSetColor>:
void RGB_voidSetColor(RGB_Config_t* REF_RGBObj, u8 RGB_color)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
 80016fc:	460b      	mov	r3, r1
 80016fe:	70fb      	strb	r3, [r7, #3]
	GPIO_voidSetPinValue(REF_RGBObj->RGB_Red_Port, REF_RGBObj->RGB_Red_Pin, !(RGB_color>>2 & 0x01));
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	7858      	ldrb	r0, [r3, #1]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	7819      	ldrb	r1, [r3, #0]
 8001708:	78fb      	ldrb	r3, [r7, #3]
 800170a:	089b      	lsrs	r3, r3, #2
 800170c:	b2db      	uxtb	r3, r3
 800170e:	f003 0301 	and.w	r3, r3, #1
 8001712:	2b00      	cmp	r3, #0
 8001714:	bf0c      	ite	eq
 8001716:	2301      	moveq	r3, #1
 8001718:	2300      	movne	r3, #0
 800171a:	b2db      	uxtb	r3, r3
 800171c:	461a      	mov	r2, r3
 800171e:	f001 f9cb 	bl	8002ab8 <GPIO_voidSetPinValue>
	REF_RGBObj->RGB_Red_State = !(RGB_color>>2 & 0x01);
 8001722:	78fb      	ldrb	r3, [r7, #3]
 8001724:	089b      	lsrs	r3, r3, #2
 8001726:	b2db      	uxtb	r3, r3
 8001728:	f003 0301 	and.w	r3, r3, #1
 800172c:	2b00      	cmp	r3, #0
 800172e:	bf0c      	ite	eq
 8001730:	2301      	moveq	r3, #1
 8001732:	2300      	movne	r3, #0
 8001734:	b2db      	uxtb	r3, r3
 8001736:	461a      	mov	r2, r3
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	709a      	strb	r2, [r3, #2]
	GPIO_voidSetPinValue(REF_RGBObj->RGB_Green_Port, REF_RGBObj->RGB_Green_Pin, !(RGB_color>>1 & 0x01));
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	7918      	ldrb	r0, [r3, #4]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	78d9      	ldrb	r1, [r3, #3]
 8001744:	78fb      	ldrb	r3, [r7, #3]
 8001746:	085b      	lsrs	r3, r3, #1
 8001748:	b2db      	uxtb	r3, r3
 800174a:	f003 0301 	and.w	r3, r3, #1
 800174e:	2b00      	cmp	r3, #0
 8001750:	bf0c      	ite	eq
 8001752:	2301      	moveq	r3, #1
 8001754:	2300      	movne	r3, #0
 8001756:	b2db      	uxtb	r3, r3
 8001758:	461a      	mov	r2, r3
 800175a:	f001 f9ad 	bl	8002ab8 <GPIO_voidSetPinValue>
	REF_RGBObj->RGB_Green_State = !(RGB_color>>1 & 0x01);
 800175e:	78fb      	ldrb	r3, [r7, #3]
 8001760:	085b      	lsrs	r3, r3, #1
 8001762:	b2db      	uxtb	r3, r3
 8001764:	f003 0301 	and.w	r3, r3, #1
 8001768:	2b00      	cmp	r3, #0
 800176a:	bf0c      	ite	eq
 800176c:	2301      	moveq	r3, #1
 800176e:	2300      	movne	r3, #0
 8001770:	b2db      	uxtb	r3, r3
 8001772:	461a      	mov	r2, r3
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	715a      	strb	r2, [r3, #5]
	GPIO_voidSetPinValue(REF_RGBObj->RGB_Blue_Port, REF_RGBObj->RGB_Blue_Pin, !(RGB_color>>0 & 0x01));
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	79d8      	ldrb	r0, [r3, #7]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	7999      	ldrb	r1, [r3, #6]
 8001780:	78fb      	ldrb	r3, [r7, #3]
 8001782:	f003 0301 	and.w	r3, r3, #1
 8001786:	2b00      	cmp	r3, #0
 8001788:	bf0c      	ite	eq
 800178a:	2301      	moveq	r3, #1
 800178c:	2300      	movne	r3, #0
 800178e:	b2db      	uxtb	r3, r3
 8001790:	461a      	mov	r2, r3
 8001792:	f001 f991 	bl	8002ab8 <GPIO_voidSetPinValue>
	REF_RGBObj->RGB_Blue_State = !(RGB_color>>0 & 0x01);
 8001796:	78fb      	ldrb	r3, [r7, #3]
 8001798:	f003 0301 	and.w	r3, r3, #1
 800179c:	2b00      	cmp	r3, #0
 800179e:	bf0c      	ite	eq
 80017a0:	2301      	moveq	r3, #1
 80017a2:	2300      	movne	r3, #0
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	461a      	mov	r2, r3
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	721a      	strb	r2, [r3, #8]
}
 80017ac:	bf00      	nop
 80017ae:	3708      	adds	r7, #8
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}

080017b4 <SHIFTREG_voidPinInit>:

/**********************************************************************************************************************
 *  LOCAL FUNCTIONS
 *********************************************************************************************************************/
static void SHIFTREG_voidPinInit(port_index_t port_index, pin_index_t pin_index)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	4603      	mov	r3, r0
 80017bc:	460a      	mov	r2, r1
 80017be:	71fb      	strb	r3, [r7, #7]
 80017c0:	4613      	mov	r3, r2
 80017c2:	71bb      	strb	r3, [r7, #6]
	switch (port_index) {
 80017c4:	79fb      	ldrb	r3, [r7, #7]
 80017c6:	2b02      	cmp	r3, #2
 80017c8:	d010      	beq.n	80017ec <SHIFTREG_voidPinInit+0x38>
 80017ca:	2b02      	cmp	r3, #2
 80017cc:	dc13      	bgt.n	80017f6 <SHIFTREG_voidPinInit+0x42>
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d002      	beq.n	80017d8 <SHIFTREG_voidPinInit+0x24>
 80017d2:	2b01      	cmp	r3, #1
 80017d4:	d005      	beq.n	80017e2 <SHIFTREG_voidPinInit+0x2e>
		      break;
		    case GPIO_PORTC:
		      RCC_voidEnablePeripheralClock(RCC_AHB,RCC_AHB_GPIOCEN);
		      break;
		    default:
		      break;
 80017d6:	e00e      	b.n	80017f6 <SHIFTREG_voidPinInit+0x42>
		      RCC_voidEnablePeripheralClock(RCC_AHB,RCC_AHB_GPIOAEN);
 80017d8:	2100      	movs	r1, #0
 80017da:	2000      	movs	r0, #0
 80017dc:	f001 fb0a 	bl	8002df4 <RCC_voidEnablePeripheralClock>
		      break;
 80017e0:	e00a      	b.n	80017f8 <SHIFTREG_voidPinInit+0x44>
		      RCC_voidEnablePeripheralClock(RCC_AHB,RCC_AHB_GPIOBEN);
 80017e2:	2101      	movs	r1, #1
 80017e4:	2000      	movs	r0, #0
 80017e6:	f001 fb05 	bl	8002df4 <RCC_voidEnablePeripheralClock>
		      break;
 80017ea:	e005      	b.n	80017f8 <SHIFTREG_voidPinInit+0x44>
		      RCC_voidEnablePeripheralClock(RCC_AHB,RCC_AHB_GPIOCEN);
 80017ec:	2102      	movs	r1, #2
 80017ee:	2000      	movs	r0, #0
 80017f0:	f001 fb00 	bl	8002df4 <RCC_voidEnablePeripheralClock>
		      break;
 80017f4:	e000      	b.n	80017f8 <SHIFTREG_voidPinInit+0x44>
		      break;
 80017f6:	bf00      	nop
		  }
		  GPIO_voidSetPinMode(port_index,pin_index,GPIO_OUTPUT_PIN_MODE);
 80017f8:	79b9      	ldrb	r1, [r7, #6]
 80017fa:	79fb      	ldrb	r3, [r7, #7]
 80017fc:	2201      	movs	r2, #1
 80017fe:	4618      	mov	r0, r3
 8001800:	f000 ffac 	bl	800275c <GPIO_voidSetPinMode>
		  GPIO_voidSetPinOutputMode(port_index,pin_index,GPIO_OUTPUT_PIN_PUSH_PULL);
 8001804:	79b9      	ldrb	r1, [r7, #6]
 8001806:	79fb      	ldrb	r3, [r7, #7]
 8001808:	2200      	movs	r2, #0
 800180a:	4618      	mov	r0, r3
 800180c:	f001 f800 	bl	8002810 <GPIO_voidSetPinOutputMode>
		  GPIO_voidSetPinOutputSpeed(port_index,pin_index,GPIO_OUTPUT_PIN_LOW_SPEED);
 8001810:	79b9      	ldrb	r1, [r7, #6]
 8001812:	79fb      	ldrb	r3, [r7, #7]
 8001814:	2200      	movs	r2, #0
 8001816:	4618      	mov	r0, r3
 8001818:	f001 f8f4 	bl	8002a04 <GPIO_voidSetPinOutputSpeed>
}
 800181c:	bf00      	nop
 800181e:	3708      	adds	r7, #8
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}

08001824 <SHIFTREG_voidInit>:
/**********************************************************************************************************************
 *  GLOBAL FUNCTIONS
 *********************************************************************************************************************/

void SHIFTREG_voidInit(SHIFTREG_t *ptrSHIFTREG)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
		SHIFTREG_voidPinInit(ptrSHIFTREG->ShiftReg_DataSerial_Port,ptrSHIFTREG->ShiftReg_DataSerial_Pin);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	789a      	ldrb	r2, [r3, #2]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	78db      	ldrb	r3, [r3, #3]
 8001834:	4619      	mov	r1, r3
 8001836:	4610      	mov	r0, r2
 8001838:	f7ff ffbc 	bl	80017b4 <SHIFTREG_voidPinInit>
		SHIFTREG_voidPinInit(ptrSHIFTREG->ShiftReg_StorageClk_Port,ptrSHIFTREG->ShiftReg_StorageClk_Pin);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	799a      	ldrb	r2, [r3, #6]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	79db      	ldrb	r3, [r3, #7]
 8001844:	4619      	mov	r1, r3
 8001846:	4610      	mov	r0, r2
 8001848:	f7ff ffb4 	bl	80017b4 <SHIFTREG_voidPinInit>
		SHIFTREG_voidPinInit(ptrSHIFTREG->ShiftReg_ShiftClk_Port,ptrSHIFTREG->ShiftReg_ShiftClk_Pin);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	791a      	ldrb	r2, [r3, #4]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	795b      	ldrb	r3, [r3, #5]
 8001854:	4619      	mov	r1, r3
 8001856:	4610      	mov	r0, r2
 8001858:	f7ff ffac 	bl	80017b4 <SHIFTREG_voidPinInit>
}
 800185c:	bf00      	nop
 800185e:	3708      	adds	r7, #8
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}

08001864 <SHIFTREG_voidLatchData>:
{
	ptrSHIFTREG->ShiftReg_Data = 0;

}
void SHIFTREG_voidLatchData(SHIFTREG_t *ptrSHIFTREG)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b084      	sub	sp, #16
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
	u8 Local_u8Counter = 0;
 800186c:	2300      	movs	r3, #0
 800186e:	73fb      	strb	r3, [r7, #15]
	for(Local_u8Counter=0;Local_u8Counter<16;Local_u8Counter++)
 8001870:	2300      	movs	r3, #0
 8001872:	73fb      	strb	r3, [r7, #15]
 8001874:	e025      	b.n	80018c2 <SHIFTREG_voidLatchData+0x5e>
	{
		GPIO_voidSetPinValue(ptrSHIFTREG->ShiftReg_DataSerial_Port,ptrSHIFTREG->ShiftReg_DataSerial_Pin,GET_BIT(ptrSHIFTREG->ShiftReg_Data,(15-Local_u8Counter)));
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	7898      	ldrb	r0, [r3, #2]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	78d9      	ldrb	r1, [r3, #3]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	881b      	ldrh	r3, [r3, #0]
 8001882:	461a      	mov	r2, r3
 8001884:	7bfb      	ldrb	r3, [r7, #15]
 8001886:	f1c3 030f 	rsb	r3, r3, #15
 800188a:	fa42 f303 	asr.w	r3, r2, r3
 800188e:	b2db      	uxtb	r3, r3
 8001890:	f003 0301 	and.w	r3, r3, #1
 8001894:	b2db      	uxtb	r3, r3
 8001896:	461a      	mov	r2, r3
 8001898:	f001 f90e 	bl	8002ab8 <GPIO_voidSetPinValue>

		GPIO_voidSetPinValue(ptrSHIFTREG->ShiftReg_ShiftClk_Port,ptrSHIFTREG->ShiftReg_ShiftClk_Pin,GPIO_HIGH);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	7918      	ldrb	r0, [r3, #4]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	795b      	ldrb	r3, [r3, #5]
 80018a4:	2201      	movs	r2, #1
 80018a6:	4619      	mov	r1, r3
 80018a8:	f001 f906 	bl	8002ab8 <GPIO_voidSetPinValue>
		GPIO_voidSetPinValue(ptrSHIFTREG->ShiftReg_ShiftClk_Port,ptrSHIFTREG->ShiftReg_ShiftClk_Pin,GPIO_LOW);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	7918      	ldrb	r0, [r3, #4]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	795b      	ldrb	r3, [r3, #5]
 80018b4:	2200      	movs	r2, #0
 80018b6:	4619      	mov	r1, r3
 80018b8:	f001 f8fe 	bl	8002ab8 <GPIO_voidSetPinValue>
	for(Local_u8Counter=0;Local_u8Counter<16;Local_u8Counter++)
 80018bc:	7bfb      	ldrb	r3, [r7, #15]
 80018be:	3301      	adds	r3, #1
 80018c0:	73fb      	strb	r3, [r7, #15]
 80018c2:	7bfb      	ldrb	r3, [r7, #15]
 80018c4:	2b0f      	cmp	r3, #15
 80018c6:	d9d6      	bls.n	8001876 <SHIFTREG_voidLatchData+0x12>
	}
	GPIO_voidSetPinValue(ptrSHIFTREG->ShiftReg_StorageClk_Port,ptrSHIFTREG->ShiftReg_StorageClk_Pin,GPIO_HIGH);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	7998      	ldrb	r0, [r3, #6]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	79db      	ldrb	r3, [r3, #7]
 80018d0:	2201      	movs	r2, #1
 80018d2:	4619      	mov	r1, r3
 80018d4:	f001 f8f0 	bl	8002ab8 <GPIO_voidSetPinValue>
	GPIO_voidSetPinValue(ptrSHIFTREG->ShiftReg_StorageClk_Port,ptrSHIFTREG->ShiftReg_StorageClk_Pin,GPIO_LOW);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	7998      	ldrb	r0, [r3, #6]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	79db      	ldrb	r3, [r3, #7]
 80018e0:	2200      	movs	r2, #0
 80018e2:	4619      	mov	r1, r3
 80018e4:	f001 f8e8 	bl	8002ab8 <GPIO_voidSetPinValue>
}
 80018e8:	bf00      	nop
 80018ea:	3710      	adds	r7, #16
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}

080018f0 <TFT_GPIO_PinsInit>:

/**********************************************************************************************************************
 *  LOCAL FUNCTIONS
 *********************************************************************************************************************/
static void TFT_GPIO_PinsInit(port_index_t port, pin_index_t pin)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	4603      	mov	r3, r0
 80018f8:	460a      	mov	r2, r1
 80018fa:	71fb      	strb	r3, [r7, #7]
 80018fc:	4613      	mov	r3, r2
 80018fe:	71bb      	strb	r3, [r7, #6]
	switch (port)
 8001900:	79fb      	ldrb	r3, [r7, #7]
 8001902:	2b02      	cmp	r3, #2
 8001904:	d010      	beq.n	8001928 <TFT_GPIO_PinsInit+0x38>
 8001906:	2b02      	cmp	r3, #2
 8001908:	dc13      	bgt.n	8001932 <TFT_GPIO_PinsInit+0x42>
 800190a:	2b00      	cmp	r3, #0
 800190c:	d002      	beq.n	8001914 <TFT_GPIO_PinsInit+0x24>
 800190e:	2b01      	cmp	r3, #1
 8001910:	d005      	beq.n	800191e <TFT_GPIO_PinsInit+0x2e>
			      break;
			    case GPIO_PORTC:
			      RCC_voidEnablePeripheralClock(RCC_AHB,RCC_AHB_GPIOCEN);
			      break;
			    default:
			      break;
 8001912:	e00e      	b.n	8001932 <TFT_GPIO_PinsInit+0x42>
			      RCC_voidEnablePeripheralClock(RCC_AHB,RCC_AHB_GPIOAEN);
 8001914:	2100      	movs	r1, #0
 8001916:	2000      	movs	r0, #0
 8001918:	f001 fa6c 	bl	8002df4 <RCC_voidEnablePeripheralClock>
			      break;
 800191c:	e00a      	b.n	8001934 <TFT_GPIO_PinsInit+0x44>
			      RCC_voidEnablePeripheralClock(RCC_AHB,RCC_AHB_GPIOBEN);
 800191e:	2101      	movs	r1, #1
 8001920:	2000      	movs	r0, #0
 8001922:	f001 fa67 	bl	8002df4 <RCC_voidEnablePeripheralClock>
			      break;
 8001926:	e005      	b.n	8001934 <TFT_GPIO_PinsInit+0x44>
			      RCC_voidEnablePeripheralClock(RCC_AHB,RCC_AHB_GPIOCEN);
 8001928:	2102      	movs	r1, #2
 800192a:	2000      	movs	r0, #0
 800192c:	f001 fa62 	bl	8002df4 <RCC_voidEnablePeripheralClock>
			      break;
 8001930:	e000      	b.n	8001934 <TFT_GPIO_PinsInit+0x44>
			      break;
 8001932:	bf00      	nop
			  }
	GPIO_voidSetPinMode(port,pin,GPIO_OUTPUT_PIN_MODE);
 8001934:	79b9      	ldrb	r1, [r7, #6]
 8001936:	79fb      	ldrb	r3, [r7, #7]
 8001938:	2201      	movs	r2, #1
 800193a:	4618      	mov	r0, r3
 800193c:	f000 ff0e 	bl	800275c <GPIO_voidSetPinMode>
}
 8001940:	bf00      	nop
 8001942:	3708      	adds	r7, #8
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}

08001948 <TFT_ResetSequence>:

static void TFT_ResetSequence(TFT_t* TFT_Config)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b088      	sub	sp, #32
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
	GPIO_voidSetPinValue(TFT_Config->TFT_RESET_Port,TFT_Config->TFT_RESET_Pin, GPIO_HIGH);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800195c:	2201      	movs	r2, #1
 800195e:	4619      	mov	r1, r3
 8001960:	f001 f8aa 	bl	8002ab8 <GPIO_voidSetPinValue>
	Delay_us(100);
 8001964:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
 8001968:	61fb      	str	r3, [r7, #28]
 800196a:	e002      	b.n	8001972 <TFT_ResetSequence+0x2a>
 800196c:	69fb      	ldr	r3, [r7, #28]
 800196e:	3b01      	subs	r3, #1
 8001970:	61fb      	str	r3, [r7, #28]
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d1f9      	bne.n	800196c <TFT_ResetSequence+0x24>
	GPIO_voidSetPinValue(TFT_Config->TFT_RESET_Port,TFT_Config->TFT_RESET_Pin, GPIO_LOW);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8001984:	2200      	movs	r2, #0
 8001986:	4619      	mov	r1, r3
 8001988:	f001 f896 	bl	8002ab8 <GPIO_voidSetPinValue>
	Delay_us(1);
 800198c:	2304      	movs	r3, #4
 800198e:	61bb      	str	r3, [r7, #24]
 8001990:	e002      	b.n	8001998 <TFT_ResetSequence+0x50>
 8001992:	69bb      	ldr	r3, [r7, #24]
 8001994:	3b01      	subs	r3, #1
 8001996:	61bb      	str	r3, [r7, #24]
 8001998:	69bb      	ldr	r3, [r7, #24]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d1f9      	bne.n	8001992 <TFT_ResetSequence+0x4a>
	GPIO_voidSetPinValue(TFT_Config->TFT_RESET_Port,TFT_Config->TFT_RESET_Pin, GPIO_HIGH);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80019aa:	2201      	movs	r2, #1
 80019ac:	4619      	mov	r1, r3
 80019ae:	f001 f883 	bl	8002ab8 <GPIO_voidSetPinValue>
	Delay_us(100);
 80019b2:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
 80019b6:	617b      	str	r3, [r7, #20]
 80019b8:	e002      	b.n	80019c0 <TFT_ResetSequence+0x78>
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	3b01      	subs	r3, #1
 80019be:	617b      	str	r3, [r7, #20]
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d1f9      	bne.n	80019ba <TFT_ResetSequence+0x72>
	GPIO_voidSetPinValue(TFT_Config->TFT_RESET_Port,TFT_Config->TFT_RESET_Pin, GPIO_LOW);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80019d2:	2200      	movs	r2, #0
 80019d4:	4619      	mov	r1, r3
 80019d6:	f001 f86f 	bl	8002ab8 <GPIO_voidSetPinValue>
	Delay_us(100);
 80019da:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
 80019de:	613b      	str	r3, [r7, #16]
 80019e0:	e002      	b.n	80019e8 <TFT_ResetSequence+0xa0>
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	3b01      	subs	r3, #1
 80019e6:	613b      	str	r3, [r7, #16]
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d1f9      	bne.n	80019e2 <TFT_ResetSequence+0x9a>
	GPIO_voidSetPinValue(TFT_Config->TFT_RESET_Port,TFT_Config->TFT_RESET_Pin, GPIO_HIGH);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80019fa:	2201      	movs	r2, #1
 80019fc:	4619      	mov	r1, r3
 80019fe:	f001 f85b 	bl	8002ab8 <GPIO_voidSetPinValue>
	Delay_ms(120);
 8001a02:	4b07      	ldr	r3, [pc, #28]	; (8001a20 <TFT_ResetSequence+0xd8>)
 8001a04:	60fb      	str	r3, [r7, #12]
 8001a06:	e002      	b.n	8001a0e <TFT_ResetSequence+0xc6>
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	3b01      	subs	r3, #1
 8001a0c:	60fb      	str	r3, [r7, #12]
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d1f9      	bne.n	8001a08 <TFT_ResetSequence+0xc0>
}
 8001a14:	bf00      	nop
 8001a16:	bf00      	nop
 8001a18:	3720      	adds	r7, #32
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	0007b0c0 	.word	0x0007b0c0

08001a24 <TFT_voidSendCommand>:
static void TFT_voidSendCommand(TFT_t* TFT_Config, u8 Command)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b082      	sub	sp, #8
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
 8001a2c:	460b      	mov	r3, r1
 8001a2e:	70fb      	strb	r3, [r7, #3]
	GPIO_voidSetPinValue(TFT_Config->TFT_DC_Port,TFT_Config->TFT_DC_Pin, GPIO_LOW);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	f893 005a 	ldrb.w	r0, [r3, #90]	; 0x5a
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	4619      	mov	r1, r3
 8001a40:	f001 f83a 	bl	8002ab8 <GPIO_voidSetPinValue>
	MSPI_TransmitByte(&TFT_Config->TFT_SPI_Config, Command , 1000);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	78f9      	ldrb	r1, [r7, #3]
 8001a48:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f001 faf5 	bl	800303c <MSPI_TransmitByte>
}
 8001a52:	bf00      	nop
 8001a54:	3708      	adds	r7, #8
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}

08001a5a <TFT_voidSendData>:
static void TFT_voidSendData(TFT_t* TFT_Config, u8 Data){
 8001a5a:	b580      	push	{r7, lr}
 8001a5c:	b082      	sub	sp, #8
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	6078      	str	r0, [r7, #4]
 8001a62:	460b      	mov	r3, r1
 8001a64:	70fb      	strb	r3, [r7, #3]
	GPIO_voidSetPinValue(TFT_Config->TFT_DC_Port,TFT_Config->TFT_DC_Pin, GPIO_HIGH);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	f893 005a 	ldrb.w	r0, [r3, #90]	; 0x5a
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 8001a72:	2201      	movs	r2, #1
 8001a74:	4619      	mov	r1, r3
 8001a76:	f001 f81f 	bl	8002ab8 <GPIO_voidSetPinValue>
	MSPI_TransmitByte(&TFT_Config->TFT_SPI_Config, Data , 1000);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	78f9      	ldrb	r1, [r7, #3]
 8001a7e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001a82:	4618      	mov	r0, r3
 8001a84:	f001 fada 	bl	800303c <MSPI_TransmitByte>
}
 8001a88:	bf00      	nop
 8001a8a:	3708      	adds	r7, #8
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}

08001a90 <TFT_voidInit>:
/**********************************************************************************************************************
 *  GLOBAL FUNCTIONS
 *********************************************************************************************************************/

void TFT_voidInit(TFT_t* TFT_Config)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b084      	sub	sp, #16
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
	TFT_GPIO_PinsInit(TFT_Config->TFT_RESET_Port, TFT_Config->TFT_RESET_Pin);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	4610      	mov	r0, r2
 8001aa8:	f7ff ff22 	bl	80018f0 <TFT_GPIO_PinsInit>
	TFT_GPIO_PinsInit(TFT_Config->TFT_DC_Port, TFT_Config->TFT_DC_Pin);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	f893 205a 	ldrb.w	r2, [r3, #90]	; 0x5a
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 8001ab8:	4619      	mov	r1, r3
 8001aba:	4610      	mov	r0, r2
 8001abc:	f7ff ff18 	bl	80018f0 <TFT_GPIO_PinsInit>
	MSPI_voidInit(&TFT_Config->TFT_SPI_Config);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f001 fa70 	bl	8002fa8 <MSPI_voidInit>
	TFT_ResetSequence(TFT_Config);
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	f7ff ff3d 	bl	8001948 <TFT_ResetSequence>
	TFT_voidSendCommand(TFT_Config,SLPOUT_CMD);
 8001ace:	2111      	movs	r1, #17
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	f7ff ffa7 	bl	8001a24 <TFT_voidSendCommand>
	Delay_ms(150);
 8001ad6:	4b1a      	ldr	r3, [pc, #104]	; (8001b40 <TFT_voidInit+0xb0>)
 8001ad8:	60fb      	str	r3, [r7, #12]
 8001ada:	e002      	b.n	8001ae2 <TFT_voidInit+0x52>
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	3b01      	subs	r3, #1
 8001ae0:	60fb      	str	r3, [r7, #12]
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d1f9      	bne.n	8001adc <TFT_voidInit+0x4c>
	TFT_voidSendCommand(TFT_Config,COLMOD_CMD);
 8001ae8:	213a      	movs	r1, #58	; 0x3a
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	f7ff ff9a 	bl	8001a24 <TFT_voidSendCommand>
	TFT_voidSendData(TFT_Config,RGB565_COLOR_MODE);
 8001af0:	2105      	movs	r1, #5
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	f7ff ffb1 	bl	8001a5a <TFT_voidSendData>
	TFT_voidSendCommand(TFT_Config,INVON_CMD);
 8001af8:	2121      	movs	r1, #33	; 0x21
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	f7ff ff92 	bl	8001a24 <TFT_voidSendCommand>
	TFT_voidSendCommand(TFT_Config,MADCTL_CMD);
 8001b00:	2136      	movs	r1, #54	; 0x36
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	f7ff ff8e 	bl	8001a24 <TFT_voidSendCommand>
	TFT_voidSendData(TFT_Config,TOP_TO_BOTTOM_MODE);
 8001b08:	21c0      	movs	r1, #192	; 0xc0
 8001b0a:	6878      	ldr	r0, [r7, #4]
 8001b0c:	f7ff ffa5 	bl	8001a5a <TFT_voidSendData>
	TFT_FillScreen(TFT_Config,TFT_Config->TFT_InitColor);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001b16:	b29b      	uxth	r3, r3
 8001b18:	4619      	mov	r1, r3
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	f000 f875 	bl	8001c0a <TFT_FillScreen>
	TFT_voidSendCommand(TFT_Config,DISPON_CMD);
 8001b20:	2129      	movs	r1, #41	; 0x29
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	f7ff ff7e 	bl	8001a24 <TFT_voidSendCommand>
	TFT_Config->TFT_Row_Loc = 0;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
	TFT_Config->TFT_Col_Loc = 0;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2200      	movs	r2, #0
 8001b34:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
}
 8001b38:	bf00      	nop
 8001b3a:	3710      	adds	r7, #16
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	00099cf0 	.word	0x00099cf0

08001b44 <TFT_voidSetWindow>:

void TFT_voidSetWindow(TFT_t* TFT_Config ,u8 Copy_u8X0, u8 Copy_u8X1, u8 Copy_u8Y0, u8 Copy_u8Y1)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
 8001b4c:	4608      	mov	r0, r1
 8001b4e:	4611      	mov	r1, r2
 8001b50:	461a      	mov	r2, r3
 8001b52:	4603      	mov	r3, r0
 8001b54:	70fb      	strb	r3, [r7, #3]
 8001b56:	460b      	mov	r3, r1
 8001b58:	70bb      	strb	r3, [r7, #2]
 8001b5a:	4613      	mov	r3, r2
 8001b5c:	707b      	strb	r3, [r7, #1]
    // Send Set X Addresses Command
    TFT_voidSendCommand(TFT_Config,CASET_CMD);
 8001b5e:	212a      	movs	r1, #42	; 0x2a
 8001b60:	6878      	ldr	r0, [r7, #4]
 8001b62:	f7ff ff5f 	bl	8001a24 <TFT_voidSendCommand>
    TFT_voidSendData(TFT_Config,0);
 8001b66:	2100      	movs	r1, #0
 8001b68:	6878      	ldr	r0, [r7, #4]
 8001b6a:	f7ff ff76 	bl	8001a5a <TFT_voidSendData>
    TFT_voidSendData(TFT_Config , Copy_u8X0);
 8001b6e:	78fb      	ldrb	r3, [r7, #3]
 8001b70:	4619      	mov	r1, r3
 8001b72:	6878      	ldr	r0, [r7, #4]
 8001b74:	f7ff ff71 	bl	8001a5a <TFT_voidSendData>
    TFT_voidSendData(TFT_Config , 0);
 8001b78:	2100      	movs	r1, #0
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	f7ff ff6d 	bl	8001a5a <TFT_voidSendData>
    TFT_voidSendData(TFT_Config,Copy_u8X1);
 8001b80:	78bb      	ldrb	r3, [r7, #2]
 8001b82:	4619      	mov	r1, r3
 8001b84:	6878      	ldr	r0, [r7, #4]
 8001b86:	f7ff ff68 	bl	8001a5a <TFT_voidSendData>
    // Send Set Y Addresses Command
    TFT_voidSendCommand(TFT_Config,RASET_CMD);
 8001b8a:	212b      	movs	r1, #43	; 0x2b
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	f7ff ff49 	bl	8001a24 <TFT_voidSendCommand>
    TFT_voidSendData(TFT_Config,0);
 8001b92:	2100      	movs	r1, #0
 8001b94:	6878      	ldr	r0, [r7, #4]
 8001b96:	f7ff ff60 	bl	8001a5a <TFT_voidSendData>
    TFT_voidSendData(TFT_Config,Copy_u8Y0);
 8001b9a:	787b      	ldrb	r3, [r7, #1]
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	6878      	ldr	r0, [r7, #4]
 8001ba0:	f7ff ff5b 	bl	8001a5a <TFT_voidSendData>
    TFT_voidSendData(TFT_Config,0);
 8001ba4:	2100      	movs	r1, #0
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f7ff ff57 	bl	8001a5a <TFT_voidSendData>
    TFT_voidSendData(TFT_Config,Copy_u8Y1);
 8001bac:	7c3b      	ldrb	r3, [r7, #16]
 8001bae:	4619      	mov	r1, r3
 8001bb0:	6878      	ldr	r0, [r7, #4]
 8001bb2:	f7ff ff52 	bl	8001a5a <TFT_voidSendData>
    TFT_voidSendCommand(TFT_Config,RAM_WR_CMD);
 8001bb6:	212c      	movs	r1, #44	; 0x2c
 8001bb8:	6878      	ldr	r0, [r7, #4]
 8001bba:	f7ff ff33 	bl	8001a24 <TFT_voidSendCommand>
}
 8001bbe:	bf00      	nop
 8001bc0:	3708      	adds	r7, #8
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}

08001bc6 <TFT_voidDisplayFullImage>:
    TFT_voidSetWindow(TFT_Config,Copy_u8ColStart,Copy_u8ColEnd,Copy_u8RowStart,Copy_u8RowEnd);
    GPIO_voidSetPinValue(TFT_Config->TFT_DC_Port,TFT_Config->TFT_DC_Pin, GPIO_HIGH);
    MSPI_DMA_Transmit(&TFT_Config->TFT_SPI_Config, Copy_pu8Image, Height*Width*2);
}
void TFT_voidDisplayFullImage(TFT_t* TFT_Config,const u16 * Copy_pu8Image)
{
 8001bc6:	b580      	push	{r7, lr}
 8001bc8:	b084      	sub	sp, #16
 8001bca:	af02      	add	r7, sp, #8
 8001bcc:	6078      	str	r0, [r7, #4]
 8001bce:	6039      	str	r1, [r7, #0]
	TFT_voidSetWindow(TFT_Config,0,TFT_WIDTH-1,0,TFT_HEIGHT-1);
 8001bd0:	239f      	movs	r3, #159	; 0x9f
 8001bd2:	9300      	str	r3, [sp, #0]
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	227f      	movs	r2, #127	; 0x7f
 8001bd8:	2100      	movs	r1, #0
 8001bda:	6878      	ldr	r0, [r7, #4]
 8001bdc:	f7ff ffb2 	bl	8001b44 <TFT_voidSetWindow>
	GPIO_voidSetPinValue(TFT_Config->TFT_DC_Port,TFT_Config->TFT_DC_Pin, GPIO_HIGH);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	f893 005a 	ldrb.w	r0, [r3, #90]	; 0x5a
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 8001bec:	2201      	movs	r2, #1
 8001bee:	4619      	mov	r1, r3
 8001bf0:	f000 ff62 	bl	8002ab8 <GPIO_voidSetPinValue>
	MSPI_DMA_Transmit(&TFT_Config->TFT_SPI_Config, Copy_pu8Image,TFT_WIDTH*TFT_HEIGHT*2);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 8001bfa:	6839      	ldr	r1, [r7, #0]
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f001 fa6d 	bl	80030dc <MSPI_DMA_Transmit>
}
 8001c02:	bf00      	nop
 8001c04:	3708      	adds	r7, #8
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}

08001c0a <TFT_FillScreen>:
		str++;
	}
}

void TFT_FillScreen(TFT_t* TFT_Config, u16 color)
{
 8001c0a:	b580      	push	{r7, lr}
 8001c0c:	b086      	sub	sp, #24
 8001c0e:	af02      	add	r7, sp, #8
 8001c10:	6078      	str	r0, [r7, #4]
 8001c12:	460b      	mov	r3, r1
 8001c14:	807b      	strh	r3, [r7, #2]
	u16 Local_RowCounter = ZERO_INIT;
 8001c16:	2300      	movs	r3, #0
 8001c18:	81fb      	strh	r3, [r7, #14]
	u16 Local_ColCounter = ZERO_INIT;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	81bb      	strh	r3, [r7, #12]
	u8 color_arr[2]={color>>8,(u8)color};
 8001c1e:	887b      	ldrh	r3, [r7, #2]
 8001c20:	0a1b      	lsrs	r3, r3, #8
 8001c22:	b29b      	uxth	r3, r3
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	723b      	strb	r3, [r7, #8]
 8001c28:	887b      	ldrh	r3, [r7, #2]
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	727b      	strb	r3, [r7, #9]
	TFT_voidSetWindow(TFT_Config,0,TFT_WIDTH-1,0,TFT_HEIGHT-1);
 8001c2e:	239f      	movs	r3, #159	; 0x9f
 8001c30:	9300      	str	r3, [sp, #0]
 8001c32:	2300      	movs	r3, #0
 8001c34:	227f      	movs	r2, #127	; 0x7f
 8001c36:	2100      	movs	r1, #0
 8001c38:	6878      	ldr	r0, [r7, #4]
 8001c3a:	f7ff ff83 	bl	8001b44 <TFT_voidSetWindow>
	GPIO_voidSetPinValue(TFT_Config->TFT_DC_Port,TFT_Config->TFT_DC_Pin, GPIO_HIGH);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	f893 005a 	ldrb.w	r0, [r3, #90]	; 0x5a
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	f000 ff33 	bl	8002ab8 <GPIO_voidSetPinValue>
	for(Local_RowCounter = ZERO_INIT; Local_RowCounter < TFT_HEIGHT; Local_RowCounter++)
 8001c52:	2300      	movs	r3, #0
 8001c54:	81fb      	strh	r3, [r7, #14]
 8001c56:	e012      	b.n	8001c7e <TFT_FillScreen+0x74>
	{
		for(Local_ColCounter = ZERO_INIT; Local_ColCounter < TFT_WIDTH; Local_ColCounter++)
 8001c58:	2300      	movs	r3, #0
 8001c5a:	81bb      	strh	r3, [r7, #12]
 8001c5c:	e009      	b.n	8001c72 <TFT_FillScreen+0x68>
		{
			MSPI_DMA_Transmit(&TFT_Config->TFT_SPI_Config, color_arr,2);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	f107 0108 	add.w	r1, r7, #8
 8001c64:	2202      	movs	r2, #2
 8001c66:	4618      	mov	r0, r3
 8001c68:	f001 fa38 	bl	80030dc <MSPI_DMA_Transmit>
		for(Local_ColCounter = ZERO_INIT; Local_ColCounter < TFT_WIDTH; Local_ColCounter++)
 8001c6c:	89bb      	ldrh	r3, [r7, #12]
 8001c6e:	3301      	adds	r3, #1
 8001c70:	81bb      	strh	r3, [r7, #12]
 8001c72:	89bb      	ldrh	r3, [r7, #12]
 8001c74:	2b7f      	cmp	r3, #127	; 0x7f
 8001c76:	d9f2      	bls.n	8001c5e <TFT_FillScreen+0x54>
	for(Local_RowCounter = ZERO_INIT; Local_RowCounter < TFT_HEIGHT; Local_RowCounter++)
 8001c78:	89fb      	ldrh	r3, [r7, #14]
 8001c7a:	3301      	adds	r3, #1
 8001c7c:	81fb      	strh	r3, [r7, #14]
 8001c7e:	89fb      	ldrh	r3, [r7, #14]
 8001c80:	2b9f      	cmp	r3, #159	; 0x9f
 8001c82:	d9e9      	bls.n	8001c58 <TFT_FillScreen+0x4e>
		}
	}
}
 8001c84:	bf00      	nop
 8001c86:	bf00      	nop
 8001c88:	3710      	adds	r7, #16
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}

08001c8e <TFT_ClearScreen>:

void TFT_ClearScreen(TFT_t* TFT_Config)
{
 8001c8e:	b580      	push	{r7, lr}
 8001c90:	b082      	sub	sp, #8
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	6078      	str	r0, [r7, #4]
	TFT_Config->TFT_Col_Loc = ZERO_INIT;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
	TFT_Config->TFT_Row_Loc = ZERO_INIT;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
	TFT_FillScreen(TFT_Config, TFT_Config->TFT_InitColor);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001cac:	b29b      	uxth	r3, r3
 8001cae:	4619      	mov	r1, r3
 8001cb0:	6878      	ldr	r0, [r7, #4]
 8001cb2:	f7ff ffaa 	bl	8001c0a <TFT_FillScreen>
}
 8001cb6:	bf00      	nop
 8001cb8:	3708      	adds	r7, #8
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}

08001cbe <DMA_ClearTCInterruptFlag>:
/**********************************************************************************************************************
 *  LOCAL FUNCTIONS
 *********************************************************************************************************************
*********************************************************************************************************************/
static void DMA_ClearTCInterruptFlag(DMA_Config_t* DMA_Config)
{
 8001cbe:	b480      	push	{r7}
 8001cc0:	b083      	sub	sp, #12
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	6078      	str	r0, [r7, #4]
	if(DMA_Config->Stream == DMA_STREAM_0)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d108      	bne.n	8001ce0 <DMA_ClearTCInterruptFlag+0x22>
	{
		SET_BIT(DMA_Config->Instance->LIFCR ,DMA_CTCIF0_BIT_POS);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	689a      	ldr	r2, [r3, #8]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f042 0220 	orr.w	r2, r2, #32
 8001cdc:	609a      	str	r2, [r3, #8]
	}
	else if (DMA_Config->Stream == DMA_STREAM_7)
	{
		SET_BIT(DMA_Config->Instance->HIFCR ,DMA_CTCIF7_BIT_POS);
	}
}
 8001cde:	e059      	b.n	8001d94 <DMA_ClearTCInterruptFlag+0xd6>
	else if (DMA_Config->Stream == DMA_STREAM_1)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	d108      	bne.n	8001cfa <DMA_ClearTCInterruptFlag+0x3c>
		SET_BIT(DMA_Config->Instance->LIFCR ,DMA_CTCIF1_BIT_POS);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	689a      	ldr	r2, [r3, #8]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001cf6:	609a      	str	r2, [r3, #8]
}
 8001cf8:	e04c      	b.n	8001d94 <DMA_ClearTCInterruptFlag+0xd6>
	else if (DMA_Config->Stream == DMA_STREAM_2)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	2b02      	cmp	r3, #2
 8001d00:	d108      	bne.n	8001d14 <DMA_ClearTCInterruptFlag+0x56>
		SET_BIT(DMA_Config->Instance->LIFCR ,DMA_CTCIF2_BIT_POS);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	689a      	ldr	r2, [r3, #8]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8001d10:	609a      	str	r2, [r3, #8]
}
 8001d12:	e03f      	b.n	8001d94 <DMA_ClearTCInterruptFlag+0xd6>
	else if (DMA_Config->Stream == DMA_STREAM_3)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	2b03      	cmp	r3, #3
 8001d1a:	d108      	bne.n	8001d2e <DMA_ClearTCInterruptFlag+0x70>
		SET_BIT(DMA_Config->Instance->LIFCR ,DMA_CTCIF3_BIT_POS);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	689a      	ldr	r2, [r3, #8]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8001d2a:	609a      	str	r2, [r3, #8]
}
 8001d2c:	e032      	b.n	8001d94 <DMA_ClearTCInterruptFlag+0xd6>
	else if (DMA_Config->Stream == DMA_STREAM_4)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	2b04      	cmp	r3, #4
 8001d34:	d108      	bne.n	8001d48 <DMA_ClearTCInterruptFlag+0x8a>
		SET_BIT(DMA_Config->Instance->HIFCR ,DMA_CTCIF4_BIT_POS);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	68da      	ldr	r2, [r3, #12]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f042 0220 	orr.w	r2, r2, #32
 8001d44:	60da      	str	r2, [r3, #12]
}
 8001d46:	e025      	b.n	8001d94 <DMA_ClearTCInterruptFlag+0xd6>
	else if (DMA_Config->Stream == DMA_STREAM_5)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	2b05      	cmp	r3, #5
 8001d4e:	d108      	bne.n	8001d62 <DMA_ClearTCInterruptFlag+0xa4>
		SET_BIT(DMA_Config->Instance->HIFCR ,DMA_CTCIF5_BIT_POS);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	68da      	ldr	r2, [r3, #12]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001d5e:	60da      	str	r2, [r3, #12]
}
 8001d60:	e018      	b.n	8001d94 <DMA_ClearTCInterruptFlag+0xd6>
	else if (DMA_Config->Stream == DMA_STREAM_6)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	2b06      	cmp	r3, #6
 8001d68:	d108      	bne.n	8001d7c <DMA_ClearTCInterruptFlag+0xbe>
		SET_BIT(DMA_Config->Instance->HIFCR ,DMA_CTCIF6_BIT_POS);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	68da      	ldr	r2, [r3, #12]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8001d78:	60da      	str	r2, [r3, #12]
}
 8001d7a:	e00b      	b.n	8001d94 <DMA_ClearTCInterruptFlag+0xd6>
	else if (DMA_Config->Stream == DMA_STREAM_7)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	2b07      	cmp	r3, #7
 8001d82:	d107      	bne.n	8001d94 <DMA_ClearTCInterruptFlag+0xd6>
		SET_BIT(DMA_Config->Instance->HIFCR ,DMA_CTCIF7_BIT_POS);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	68da      	ldr	r2, [r3, #12]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8001d92:	60da      	str	r2, [r3, #12]
}
 8001d94:	bf00      	nop
 8001d96:	370c      	adds	r7, #12
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr

08001da0 <DMA_Interrupt_Init>:
static void DMA_Interrupt_Init(DMA_Config_t* DMA_Config)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
	if(DMA_Config->Instance ==  DMA1)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a33      	ldr	r2, [pc, #204]	; (8001e7c <DMA_Interrupt_Init+0xdc>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d11c      	bne.n	8001dec <DMA_Interrupt_Init+0x4c>
	{
		if(DMA_Config->Stream <=6)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	2b06      	cmp	r3, #6
 8001db8:	d809      	bhi.n	8001dce <DMA_Interrupt_Init+0x2e>
		{
			MNVIC_voidEnableIRQ(DMA_Config->Stream + 11);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	b2db      	uxtb	r3, r3
 8001dc0:	330b      	adds	r3, #11
 8001dc2:	b2db      	uxtb	r3, r3
 8001dc4:	b25b      	sxtb	r3, r3
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f000 ff30 	bl	8002c2c <MNVIC_voidEnableIRQ>
 8001dcc:	e006      	b.n	8001ddc <DMA_Interrupt_Init+0x3c>
		}
		else if (DMA_Config->Stream == 7 )
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	2b07      	cmp	r3, #7
 8001dd4:	d102      	bne.n	8001ddc <DMA_Interrupt_Init+0x3c>
		{
			MNVIC_voidEnableIRQ(DMA1_Stream7_IRQn);
 8001dd6:	202f      	movs	r0, #47	; 0x2f
 8001dd8:	f000 ff28 	bl	8002c2c <MNVIC_voidEnableIRQ>
		}
		DMA1_TCx_Callback[DMA_Config->Stream] = DMA_Config->DMA_TC_Callback;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	687a      	ldr	r2, [r7, #4]
 8001de2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001de4:	4926      	ldr	r1, [pc, #152]	; (8001e80 <DMA_Interrupt_Init+0xe0>)
 8001de6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8001dea:	e02a      	b.n	8001e42 <DMA_Interrupt_Init+0xa2>
	}
	else if (DMA_Config->Instance == DMA2)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a24      	ldr	r2, [pc, #144]	; (8001e84 <DMA_Interrupt_Init+0xe4>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d125      	bne.n	8001e42 <DMA_Interrupt_Init+0xa2>
	{
		if(DMA_Config->Stream <=4)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	2b04      	cmp	r3, #4
 8001dfc:	d809      	bhi.n	8001e12 <DMA_Interrupt_Init+0x72>
		{
			MNVIC_voidEnableIRQ(DMA_Config->Stream + 56);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	b2db      	uxtb	r3, r3
 8001e04:	3338      	adds	r3, #56	; 0x38
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	b25b      	sxtb	r3, r3
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f000 ff0e 	bl	8002c2c <MNVIC_voidEnableIRQ>
 8001e10:	e010      	b.n	8001e34 <DMA_Interrupt_Init+0x94>
		}
		else if ((DMA_Config->Stream > 4) && (DMA_Config->Stream <= 7 ))
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	2b04      	cmp	r3, #4
 8001e18:	d90c      	bls.n	8001e34 <DMA_Interrupt_Init+0x94>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	2b07      	cmp	r3, #7
 8001e20:	d808      	bhi.n	8001e34 <DMA_Interrupt_Init+0x94>
		{
			MNVIC_voidEnableIRQ(DMA_Config->Stream + 68);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	3344      	adds	r3, #68	; 0x44
 8001e2a:	b2db      	uxtb	r3, r3
 8001e2c:	b25b      	sxtb	r3, r3
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f000 fefc 	bl	8002c2c <MNVIC_voidEnableIRQ>
		}
		DMA2_TCx_Callback[DMA_Config->Stream] = DMA_Config->DMA_TC_Callback;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	687a      	ldr	r2, [r7, #4]
 8001e3a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001e3c:	4912      	ldr	r1, [pc, #72]	; (8001e88 <DMA_Interrupt_Init+0xe8>)
 8001e3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}
	else
	{
		/* Nothing */
	}
	SET_BIT(DMA_Config->Instance->DMA_Sx[DMA_Config->Stream].CR,DMA_TCIE_BIT_POS);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6819      	ldr	r1, [r3, #0]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	685a      	ldr	r2, [r3, #4]
 8001e4a:	4613      	mov	r3, r2
 8001e4c:	005b      	lsls	r3, r3, #1
 8001e4e:	4413      	add	r3, r2
 8001e50:	00db      	lsls	r3, r3, #3
 8001e52:	440b      	add	r3, r1
 8001e54:	3310      	adds	r3, #16
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	687a      	ldr	r2, [r7, #4]
 8001e5a:	6810      	ldr	r0, [r2, #0]
 8001e5c:	687a      	ldr	r2, [r7, #4]
 8001e5e:	6852      	ldr	r2, [r2, #4]
 8001e60:	f043 0110 	orr.w	r1, r3, #16
 8001e64:	4613      	mov	r3, r2
 8001e66:	005b      	lsls	r3, r3, #1
 8001e68:	4413      	add	r3, r2
 8001e6a:	00db      	lsls	r3, r3, #3
 8001e6c:	4403      	add	r3, r0
 8001e6e:	3310      	adds	r3, #16
 8001e70:	6019      	str	r1, [r3, #0]
}
 8001e72:	bf00      	nop
 8001e74:	3708      	adds	r7, #8
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	40026000 	.word	0x40026000
 8001e80:	20000130 	.word	0x20000130
 8001e84:	40026400 	.word	0x40026400
 8001e88:	20000150 	.word	0x20000150

08001e8c <MDMA_voidInit>:
/**********************************************************************************************************************
 *  GLOBAL FUNCTIONS
 *********************************************************************************************************************/

void MDMA_voidInit(DMA_Config_t* DMA_Config)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
	/* Enable DMA Clock */
	if(DMA_Config->Instance ==  DMA1)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a24      	ldr	r2, [pc, #144]	; (8001f2c <MDMA_voidInit+0xa0>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d104      	bne.n	8001ea8 <MDMA_voidInit+0x1c>
	{
		RCC_voidEnablePeripheralClock(RCC_AHB, RCC_AHB_DMA1EN);
 8001e9e:	2115      	movs	r1, #21
 8001ea0:	2000      	movs	r0, #0
 8001ea2:	f000 ffa7 	bl	8002df4 <RCC_voidEnablePeripheralClock>
 8001ea6:	e008      	b.n	8001eba <MDMA_voidInit+0x2e>
	}
	else if (DMA_Config->Instance == DMA2)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a20      	ldr	r2, [pc, #128]	; (8001f30 <MDMA_voidInit+0xa4>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d103      	bne.n	8001eba <MDMA_voidInit+0x2e>
	{
		RCC_voidEnablePeripheralClock(RCC_AHB, RCC_AHB_DMA2EN);
 8001eb2:	2116      	movs	r1, #22
 8001eb4:	2000      	movs	r0, #0
 8001eb6:	f000 ff9d 	bl	8002df4 <RCC_voidEnablePeripheralClock>
	else
	{
		/* Nothing */
	}
	/* Clear DMA stream pervious configuration */
	DMA_Config->Instance->DMA_Sx[DMA_Config->Stream].CR =0;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6819      	ldr	r1, [r3, #0]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	685a      	ldr	r2, [r3, #4]
 8001ec2:	4613      	mov	r3, r2
 8001ec4:	005b      	lsls	r3, r3, #1
 8001ec6:	4413      	add	r3, r2
 8001ec8:	00db      	lsls	r3, r3, #3
 8001eca:	440b      	add	r3, r1
 8001ecc:	3310      	adds	r3, #16
 8001ece:	2200      	movs	r2, #0
 8001ed0:	601a      	str	r2, [r3, #0]
	/* Clear DMA TC interrupt Flag */
	DMA_ClearTCInterruptFlag(DMA_Config);
 8001ed2:	6878      	ldr	r0, [r7, #4]
 8001ed4:	f7ff fef3 	bl	8001cbe <DMA_ClearTCInterruptFlag>
	/* Configure DMA Stream */
	DMA_Config->Instance->DMA_Sx[DMA_Config->Stream].CR =
			((DMA_Config->Channel) |
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	689a      	ldr	r2, [r3, #8]
			(DMA_Config->Direction) |
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	68db      	ldr	r3, [r3, #12]
			((DMA_Config->Channel) |
 8001ee0:	431a      	orrs	r2, r3
			(DMA_Config->PeriphInc) |
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	691b      	ldr	r3, [r3, #16]
			(DMA_Config->Direction) |
 8001ee6:	431a      	orrs	r2, r3
			(DMA_Config->MemInc) |
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	695b      	ldr	r3, [r3, #20]
			(DMA_Config->PeriphInc) |
 8001eec:	431a      	orrs	r2, r3
			(DMA_Config->PeriphDataSize) |
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	699b      	ldr	r3, [r3, #24]
			(DMA_Config->MemInc) |
 8001ef2:	ea42 0103 	orr.w	r1, r2, r3
			(DMA_Config->MemDataSize) );
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	69db      	ldr	r3, [r3, #28]
	DMA_Config->Instance->DMA_Sx[DMA_Config->Stream].CR =
 8001efa:	687a      	ldr	r2, [r7, #4]
 8001efc:	6810      	ldr	r0, [r2, #0]
 8001efe:	687a      	ldr	r2, [r7, #4]
 8001f00:	6852      	ldr	r2, [r2, #4]
			(DMA_Config->PeriphDataSize) |
 8001f02:	4319      	orrs	r1, r3
	DMA_Config->Instance->DMA_Sx[DMA_Config->Stream].CR =
 8001f04:	4613      	mov	r3, r2
 8001f06:	005b      	lsls	r3, r3, #1
 8001f08:	4413      	add	r3, r2
 8001f0a:	00db      	lsls	r3, r3, #3
 8001f0c:	4403      	add	r3, r0
 8001f0e:	3310      	adds	r3, #16
 8001f10:	6019      	str	r1, [r3, #0]
	if(DMA_Config->DMA_TC_InterruptEnable == INTERRUPT_ENABLED)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	d102      	bne.n	8001f22 <MDMA_voidInit+0x96>
	{
		DMA_Interrupt_Init(DMA_Config);
 8001f1c:	6878      	ldr	r0, [r7, #4]
 8001f1e:	f7ff ff3f 	bl	8001da0 <DMA_Interrupt_Init>
	}
}
 8001f22:	bf00      	nop
 8001f24:	3708      	adds	r7, #8
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	40026000 	.word	0x40026000
 8001f30:	40026400 	.word	0x40026400

08001f34 <MDMA_voidStart>:
void MDMA_voidStart(DMA_Config_t* DMA_Config , u32* PeriphAddr , u32* MemAddr , u32 DataLength)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b085      	sub	sp, #20
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	60f8      	str	r0, [r7, #12]
 8001f3c:	60b9      	str	r1, [r7, #8]
 8001f3e:	607a      	str	r2, [r7, #4]
 8001f40:	603b      	str	r3, [r7, #0]
	CLR_BIT(DMA_Config->Instance->DMA_Sx[DMA_Config->Stream].CR ,DMA_STREAM_ENABLE_BIT_POS);
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	6819      	ldr	r1, [r3, #0]
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	685a      	ldr	r2, [r3, #4]
 8001f4a:	4613      	mov	r3, r2
 8001f4c:	005b      	lsls	r3, r3, #1
 8001f4e:	4413      	add	r3, r2
 8001f50:	00db      	lsls	r3, r3, #3
 8001f52:	440b      	add	r3, r1
 8001f54:	3310      	adds	r3, #16
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	68fa      	ldr	r2, [r7, #12]
 8001f5a:	6810      	ldr	r0, [r2, #0]
 8001f5c:	68fa      	ldr	r2, [r7, #12]
 8001f5e:	6852      	ldr	r2, [r2, #4]
 8001f60:	f023 0101 	bic.w	r1, r3, #1
 8001f64:	4613      	mov	r3, r2
 8001f66:	005b      	lsls	r3, r3, #1
 8001f68:	4413      	add	r3, r2
 8001f6a:	00db      	lsls	r3, r3, #3
 8001f6c:	4403      	add	r3, r0
 8001f6e:	3310      	adds	r3, #16
 8001f70:	6019      	str	r1, [r3, #0]
	DMA_Config->Instance->DMA_Sx[DMA_Config->Stream].NDTR = DataLength;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	6819      	ldr	r1, [r3, #0]
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	685a      	ldr	r2, [r3, #4]
 8001f7a:	4613      	mov	r3, r2
 8001f7c:	005b      	lsls	r3, r3, #1
 8001f7e:	4413      	add	r3, r2
 8001f80:	00db      	lsls	r3, r3, #3
 8001f82:	440b      	add	r3, r1
 8001f84:	3314      	adds	r3, #20
 8001f86:	683a      	ldr	r2, [r7, #0]
 8001f88:	601a      	str	r2, [r3, #0]
	DMA_Config->Instance->DMA_Sx[DMA_Config->Stream].PAR = (u32)PeriphAddr;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	6818      	ldr	r0, [r3, #0]
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	68b9      	ldr	r1, [r7, #8]
 8001f94:	1c5a      	adds	r2, r3, #1
 8001f96:	4613      	mov	r3, r2
 8001f98:	005b      	lsls	r3, r3, #1
 8001f9a:	4413      	add	r3, r2
 8001f9c:	00db      	lsls	r3, r3, #3
 8001f9e:	4403      	add	r3, r0
 8001fa0:	6019      	str	r1, [r3, #0]
	DMA_Config->Instance->DMA_Sx[DMA_Config->Stream].M0AR = (u32)MemAddr;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	6818      	ldr	r0, [r3, #0]
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	6879      	ldr	r1, [r7, #4]
 8001fac:	1c5a      	adds	r2, r3, #1
 8001fae:	4613      	mov	r3, r2
 8001fb0:	005b      	lsls	r3, r3, #1
 8001fb2:	4413      	add	r3, r2
 8001fb4:	00db      	lsls	r3, r3, #3
 8001fb6:	4403      	add	r3, r0
 8001fb8:	3304      	adds	r3, #4
 8001fba:	6019      	str	r1, [r3, #0]
	SET_BIT(DMA_Config->Instance->DMA_Sx[DMA_Config->Stream].CR ,DMA_STREAM_ENABLE_BIT_POS);
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	6819      	ldr	r1, [r3, #0]
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	685a      	ldr	r2, [r3, #4]
 8001fc4:	4613      	mov	r3, r2
 8001fc6:	005b      	lsls	r3, r3, #1
 8001fc8:	4413      	add	r3, r2
 8001fca:	00db      	lsls	r3, r3, #3
 8001fcc:	440b      	add	r3, r1
 8001fce:	3310      	adds	r3, #16
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	68fa      	ldr	r2, [r7, #12]
 8001fd4:	6810      	ldr	r0, [r2, #0]
 8001fd6:	68fa      	ldr	r2, [r7, #12]
 8001fd8:	6852      	ldr	r2, [r2, #4]
 8001fda:	f043 0101 	orr.w	r1, r3, #1
 8001fde:	4613      	mov	r3, r2
 8001fe0:	005b      	lsls	r3, r3, #1
 8001fe2:	4413      	add	r3, r2
 8001fe4:	00db      	lsls	r3, r3, #3
 8001fe6:	4403      	add	r3, r0
 8001fe8:	3310      	adds	r3, #16
 8001fea:	6019      	str	r1, [r3, #0]
}
 8001fec:	bf00      	nop
 8001fee:	3714      	adds	r7, #20
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr

08001ff8 <DMA1_Stream0_IRQHandler>:

/************************************* DMA1 ISRs************************************************/
void DMA1_Stream0_IRQHandler(void)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	af00      	add	r7, sp, #0
	SET_BIT(DMA1->LIFCR ,DMA_CTCIF0_BIT_POS);
 8001ffc:	4b07      	ldr	r3, [pc, #28]	; (800201c <DMA1_Stream0_IRQHandler+0x24>)
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	4a06      	ldr	r2, [pc, #24]	; (800201c <DMA1_Stream0_IRQHandler+0x24>)
 8002002:	f043 0320 	orr.w	r3, r3, #32
 8002006:	6093      	str	r3, [r2, #8]
	if(DMA1_TCx_Callback[0] != NULL)
 8002008:	4b05      	ldr	r3, [pc, #20]	; (8002020 <DMA1_Stream0_IRQHandler+0x28>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d002      	beq.n	8002016 <DMA1_Stream0_IRQHandler+0x1e>
	{
		DMA1_TCx_Callback[0]();
 8002010:	4b03      	ldr	r3, [pc, #12]	; (8002020 <DMA1_Stream0_IRQHandler+0x28>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4798      	blx	r3
	}
}
 8002016:	bf00      	nop
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	40026000 	.word	0x40026000
 8002020:	20000130 	.word	0x20000130

08002024 <DMA1_Stream1_IRQHandler>:
void DMA1_Stream1_IRQHandler(void){
 8002024:	b580      	push	{r7, lr}
 8002026:	af00      	add	r7, sp, #0
	SET_BIT(DMA1->LIFCR ,DMA_CTCIF1_BIT_POS);
 8002028:	4b07      	ldr	r3, [pc, #28]	; (8002048 <DMA1_Stream1_IRQHandler+0x24>)
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	4a06      	ldr	r2, [pc, #24]	; (8002048 <DMA1_Stream1_IRQHandler+0x24>)
 800202e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002032:	6093      	str	r3, [r2, #8]
	if(DMA1_TCx_Callback[1] != NULL)
 8002034:	4b05      	ldr	r3, [pc, #20]	; (800204c <DMA1_Stream1_IRQHandler+0x28>)
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d002      	beq.n	8002042 <DMA1_Stream1_IRQHandler+0x1e>
	{
		DMA1_TCx_Callback[1]();
 800203c:	4b03      	ldr	r3, [pc, #12]	; (800204c <DMA1_Stream1_IRQHandler+0x28>)
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	4798      	blx	r3
	}
}
 8002042:	bf00      	nop
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	40026000 	.word	0x40026000
 800204c:	20000130 	.word	0x20000130

08002050 <DMA1_Stream2_IRQHandler>:
void DMA1_Stream2_IRQHandler(void){
 8002050:	b580      	push	{r7, lr}
 8002052:	af00      	add	r7, sp, #0
	SET_BIT(DMA1->LIFCR ,DMA_CTCIF2_BIT_POS);
 8002054:	4b07      	ldr	r3, [pc, #28]	; (8002074 <DMA1_Stream2_IRQHandler+0x24>)
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	4a06      	ldr	r2, [pc, #24]	; (8002074 <DMA1_Stream2_IRQHandler+0x24>)
 800205a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800205e:	6093      	str	r3, [r2, #8]
	if(DMA1_TCx_Callback[2] != NULL)
 8002060:	4b05      	ldr	r3, [pc, #20]	; (8002078 <DMA1_Stream2_IRQHandler+0x28>)
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d002      	beq.n	800206e <DMA1_Stream2_IRQHandler+0x1e>
	{
		DMA1_TCx_Callback[2]();
 8002068:	4b03      	ldr	r3, [pc, #12]	; (8002078 <DMA1_Stream2_IRQHandler+0x28>)
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	4798      	blx	r3
	}
}
 800206e:	bf00      	nop
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	40026000 	.word	0x40026000
 8002078:	20000130 	.word	0x20000130

0800207c <DMA1_Stream3_IRQHandler>:
void DMA1_Stream3_IRQHandler(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	af00      	add	r7, sp, #0
	SET_BIT(DMA1->LIFCR ,DMA_CTCIF3_BIT_POS);
 8002080:	4b07      	ldr	r3, [pc, #28]	; (80020a0 <DMA1_Stream3_IRQHandler+0x24>)
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	4a06      	ldr	r2, [pc, #24]	; (80020a0 <DMA1_Stream3_IRQHandler+0x24>)
 8002086:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800208a:	6093      	str	r3, [r2, #8]
	if(DMA1_TCx_Callback[3] != NULL)
 800208c:	4b05      	ldr	r3, [pc, #20]	; (80020a4 <DMA1_Stream3_IRQHandler+0x28>)
 800208e:	68db      	ldr	r3, [r3, #12]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d002      	beq.n	800209a <DMA1_Stream3_IRQHandler+0x1e>
	{
		DMA1_TCx_Callback[3]();
 8002094:	4b03      	ldr	r3, [pc, #12]	; (80020a4 <DMA1_Stream3_IRQHandler+0x28>)
 8002096:	68db      	ldr	r3, [r3, #12]
 8002098:	4798      	blx	r3
	}
}
 800209a:	bf00      	nop
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	40026000 	.word	0x40026000
 80020a4:	20000130 	.word	0x20000130

080020a8 <DMA1_Stream4_IRQHandler>:
void DMA1_Stream4_IRQHandler(void){
 80020a8:	b580      	push	{r7, lr}
 80020aa:	af00      	add	r7, sp, #0
	SET_BIT(DMA1->HIFCR ,DMA_CTCIF4_BIT_POS);
 80020ac:	4b07      	ldr	r3, [pc, #28]	; (80020cc <DMA1_Stream4_IRQHandler+0x24>)
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	4a06      	ldr	r2, [pc, #24]	; (80020cc <DMA1_Stream4_IRQHandler+0x24>)
 80020b2:	f043 0320 	orr.w	r3, r3, #32
 80020b6:	60d3      	str	r3, [r2, #12]
	if(DMA1_TCx_Callback[4] != NULL)
 80020b8:	4b05      	ldr	r3, [pc, #20]	; (80020d0 <DMA1_Stream4_IRQHandler+0x28>)
 80020ba:	691b      	ldr	r3, [r3, #16]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d002      	beq.n	80020c6 <DMA1_Stream4_IRQHandler+0x1e>
	{
		DMA1_TCx_Callback[4]();
 80020c0:	4b03      	ldr	r3, [pc, #12]	; (80020d0 <DMA1_Stream4_IRQHandler+0x28>)
 80020c2:	691b      	ldr	r3, [r3, #16]
 80020c4:	4798      	blx	r3
	}
}
 80020c6:	bf00      	nop
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	40026000 	.word	0x40026000
 80020d0:	20000130 	.word	0x20000130

080020d4 <DMA1_Stream5_IRQHandler>:
void DMA1_Stream5_IRQHandler(void){
 80020d4:	b580      	push	{r7, lr}
 80020d6:	af00      	add	r7, sp, #0
	SET_BIT(DMA1->HIFCR ,DMA_CTCIF5_BIT_POS);
 80020d8:	4b07      	ldr	r3, [pc, #28]	; (80020f8 <DMA1_Stream5_IRQHandler+0x24>)
 80020da:	68db      	ldr	r3, [r3, #12]
 80020dc:	4a06      	ldr	r2, [pc, #24]	; (80020f8 <DMA1_Stream5_IRQHandler+0x24>)
 80020de:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80020e2:	60d3      	str	r3, [r2, #12]
	if(DMA1_TCx_Callback[5] != NULL)
 80020e4:	4b05      	ldr	r3, [pc, #20]	; (80020fc <DMA1_Stream5_IRQHandler+0x28>)
 80020e6:	695b      	ldr	r3, [r3, #20]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d002      	beq.n	80020f2 <DMA1_Stream5_IRQHandler+0x1e>
	{
		DMA1_TCx_Callback[5]();
 80020ec:	4b03      	ldr	r3, [pc, #12]	; (80020fc <DMA1_Stream5_IRQHandler+0x28>)
 80020ee:	695b      	ldr	r3, [r3, #20]
 80020f0:	4798      	blx	r3
	}
}
 80020f2:	bf00      	nop
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	40026000 	.word	0x40026000
 80020fc:	20000130 	.word	0x20000130

08002100 <DMA1_Stream6_IRQHandler>:
void DMA1_Stream6_IRQHandler(void){
 8002100:	b580      	push	{r7, lr}
 8002102:	af00      	add	r7, sp, #0
	SET_BIT(DMA1->HIFCR ,DMA_CTCIF6_BIT_POS);
 8002104:	4b07      	ldr	r3, [pc, #28]	; (8002124 <DMA1_Stream6_IRQHandler+0x24>)
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	4a06      	ldr	r2, [pc, #24]	; (8002124 <DMA1_Stream6_IRQHandler+0x24>)
 800210a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800210e:	60d3      	str	r3, [r2, #12]
	if(DMA1_TCx_Callback[6] != NULL)
 8002110:	4b05      	ldr	r3, [pc, #20]	; (8002128 <DMA1_Stream6_IRQHandler+0x28>)
 8002112:	699b      	ldr	r3, [r3, #24]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d002      	beq.n	800211e <DMA1_Stream6_IRQHandler+0x1e>
	{
		DMA1_TCx_Callback[6]();
 8002118:	4b03      	ldr	r3, [pc, #12]	; (8002128 <DMA1_Stream6_IRQHandler+0x28>)
 800211a:	699b      	ldr	r3, [r3, #24]
 800211c:	4798      	blx	r3
	}
}
 800211e:	bf00      	nop
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	40026000 	.word	0x40026000
 8002128:	20000130 	.word	0x20000130

0800212c <DMA1_Stream7_IRQHandler>:
void DMA1_Stream7_IRQHandler(void){
 800212c:	b580      	push	{r7, lr}
 800212e:	af00      	add	r7, sp, #0
	SET_BIT(DMA1->HIFCR ,DMA_CTCIF7_BIT_POS);
 8002130:	4b07      	ldr	r3, [pc, #28]	; (8002150 <DMA1_Stream7_IRQHandler+0x24>)
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	4a06      	ldr	r2, [pc, #24]	; (8002150 <DMA1_Stream7_IRQHandler+0x24>)
 8002136:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800213a:	60d3      	str	r3, [r2, #12]
	if(DMA1_TCx_Callback[7] != NULL)
 800213c:	4b05      	ldr	r3, [pc, #20]	; (8002154 <DMA1_Stream7_IRQHandler+0x28>)
 800213e:	69db      	ldr	r3, [r3, #28]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d002      	beq.n	800214a <DMA1_Stream7_IRQHandler+0x1e>
	{
		DMA1_TCx_Callback[7]();
 8002144:	4b03      	ldr	r3, [pc, #12]	; (8002154 <DMA1_Stream7_IRQHandler+0x28>)
 8002146:	69db      	ldr	r3, [r3, #28]
 8002148:	4798      	blx	r3
	}
}
 800214a:	bf00      	nop
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	40026000 	.word	0x40026000
 8002154:	20000130 	.word	0x20000130

08002158 <DMA2_Stream0_IRQHandler>:

/************************************* DMA2 ISRs************************************************/
void DMA2_Stream0_IRQHandler(void)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	af00      	add	r7, sp, #0
	SET_BIT(DMA2->LIFCR ,DMA_CTCIF0_BIT_POS);
 800215c:	4b07      	ldr	r3, [pc, #28]	; (800217c <DMA2_Stream0_IRQHandler+0x24>)
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	4a06      	ldr	r2, [pc, #24]	; (800217c <DMA2_Stream0_IRQHandler+0x24>)
 8002162:	f043 0320 	orr.w	r3, r3, #32
 8002166:	6093      	str	r3, [r2, #8]
	if(DMA2_TCx_Callback[0] != NULL)
 8002168:	4b05      	ldr	r3, [pc, #20]	; (8002180 <DMA2_Stream0_IRQHandler+0x28>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d002      	beq.n	8002176 <DMA2_Stream0_IRQHandler+0x1e>
	{
		DMA2_TCx_Callback[0]();
 8002170:	4b03      	ldr	r3, [pc, #12]	; (8002180 <DMA2_Stream0_IRQHandler+0x28>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4798      	blx	r3
	}
}
 8002176:	bf00      	nop
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	40026400 	.word	0x40026400
 8002180:	20000150 	.word	0x20000150

08002184 <DMA2_Stream1_IRQHandler>:
void DMA2_Stream1_IRQHandler(void){
 8002184:	b580      	push	{r7, lr}
 8002186:	af00      	add	r7, sp, #0
	SET_BIT(DMA2->LIFCR ,DMA_CTCIF1_BIT_POS);
 8002188:	4b07      	ldr	r3, [pc, #28]	; (80021a8 <DMA2_Stream1_IRQHandler+0x24>)
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	4a06      	ldr	r2, [pc, #24]	; (80021a8 <DMA2_Stream1_IRQHandler+0x24>)
 800218e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002192:	6093      	str	r3, [r2, #8]
	if(DMA2_TCx_Callback[1] != NULL)
 8002194:	4b05      	ldr	r3, [pc, #20]	; (80021ac <DMA2_Stream1_IRQHandler+0x28>)
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d002      	beq.n	80021a2 <DMA2_Stream1_IRQHandler+0x1e>
	{
		DMA2_TCx_Callback[1]();
 800219c:	4b03      	ldr	r3, [pc, #12]	; (80021ac <DMA2_Stream1_IRQHandler+0x28>)
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	4798      	blx	r3
	}
}
 80021a2:	bf00      	nop
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	40026400 	.word	0x40026400
 80021ac:	20000150 	.word	0x20000150

080021b0 <DMA2_Stream2_IRQHandler>:
void DMA2_Stream2_IRQHandler(void){
 80021b0:	b580      	push	{r7, lr}
 80021b2:	af00      	add	r7, sp, #0
	SET_BIT(DMA2->LIFCR ,DMA_CTCIF2_BIT_POS);
 80021b4:	4b07      	ldr	r3, [pc, #28]	; (80021d4 <DMA2_Stream2_IRQHandler+0x24>)
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	4a06      	ldr	r2, [pc, #24]	; (80021d4 <DMA2_Stream2_IRQHandler+0x24>)
 80021ba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80021be:	6093      	str	r3, [r2, #8]
	if(DMA2_TCx_Callback[2] != NULL)
 80021c0:	4b05      	ldr	r3, [pc, #20]	; (80021d8 <DMA2_Stream2_IRQHandler+0x28>)
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d002      	beq.n	80021ce <DMA2_Stream2_IRQHandler+0x1e>
	{
		DMA2_TCx_Callback[2]();
 80021c8:	4b03      	ldr	r3, [pc, #12]	; (80021d8 <DMA2_Stream2_IRQHandler+0x28>)
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	4798      	blx	r3
	}
}
 80021ce:	bf00      	nop
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	40026400 	.word	0x40026400
 80021d8:	20000150 	.word	0x20000150

080021dc <DMA2_Stream3_IRQHandler>:
void DMA2_Stream3_IRQHandler(void)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	af00      	add	r7, sp, #0
	SET_BIT(DMA2->LIFCR ,DMA_CTCIF3_BIT_POS);
 80021e0:	4b07      	ldr	r3, [pc, #28]	; (8002200 <DMA2_Stream3_IRQHandler+0x24>)
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	4a06      	ldr	r2, [pc, #24]	; (8002200 <DMA2_Stream3_IRQHandler+0x24>)
 80021e6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80021ea:	6093      	str	r3, [r2, #8]
	if(DMA2_TCx_Callback[3] != NULL)
 80021ec:	4b05      	ldr	r3, [pc, #20]	; (8002204 <DMA2_Stream3_IRQHandler+0x28>)
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d002      	beq.n	80021fa <DMA2_Stream3_IRQHandler+0x1e>
	{
		DMA2_TCx_Callback[3]();
 80021f4:	4b03      	ldr	r3, [pc, #12]	; (8002204 <DMA2_Stream3_IRQHandler+0x28>)
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	4798      	blx	r3
	}
}
 80021fa:	bf00      	nop
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	40026400 	.word	0x40026400
 8002204:	20000150 	.word	0x20000150

08002208 <DMA2_Stream4_IRQHandler>:
void DMA2_Stream4_IRQHandler(void){
 8002208:	b580      	push	{r7, lr}
 800220a:	af00      	add	r7, sp, #0
	SET_BIT(DMA2->HIFCR ,DMA_CTCIF4_BIT_POS);
 800220c:	4b07      	ldr	r3, [pc, #28]	; (800222c <DMA2_Stream4_IRQHandler+0x24>)
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	4a06      	ldr	r2, [pc, #24]	; (800222c <DMA2_Stream4_IRQHandler+0x24>)
 8002212:	f043 0320 	orr.w	r3, r3, #32
 8002216:	60d3      	str	r3, [r2, #12]
	if(DMA2_TCx_Callback[4] != NULL)
 8002218:	4b05      	ldr	r3, [pc, #20]	; (8002230 <DMA2_Stream4_IRQHandler+0x28>)
 800221a:	691b      	ldr	r3, [r3, #16]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d002      	beq.n	8002226 <DMA2_Stream4_IRQHandler+0x1e>
	{
		DMA2_TCx_Callback[4]();
 8002220:	4b03      	ldr	r3, [pc, #12]	; (8002230 <DMA2_Stream4_IRQHandler+0x28>)
 8002222:	691b      	ldr	r3, [r3, #16]
 8002224:	4798      	blx	r3
	}
}
 8002226:	bf00      	nop
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	40026400 	.word	0x40026400
 8002230:	20000150 	.word	0x20000150

08002234 <DMA2_Stream5_IRQHandler>:
void DMA2_Stream5_IRQHandler(void){
 8002234:	b580      	push	{r7, lr}
 8002236:	af00      	add	r7, sp, #0
	SET_BIT(DMA2->HIFCR ,DMA_CTCIF5_BIT_POS);
 8002238:	4b07      	ldr	r3, [pc, #28]	; (8002258 <DMA2_Stream5_IRQHandler+0x24>)
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	4a06      	ldr	r2, [pc, #24]	; (8002258 <DMA2_Stream5_IRQHandler+0x24>)
 800223e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002242:	60d3      	str	r3, [r2, #12]
	if(DMA2_TCx_Callback[5] != NULL)
 8002244:	4b05      	ldr	r3, [pc, #20]	; (800225c <DMA2_Stream5_IRQHandler+0x28>)
 8002246:	695b      	ldr	r3, [r3, #20]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d002      	beq.n	8002252 <DMA2_Stream5_IRQHandler+0x1e>
	{
		DMA2_TCx_Callback[5]();
 800224c:	4b03      	ldr	r3, [pc, #12]	; (800225c <DMA2_Stream5_IRQHandler+0x28>)
 800224e:	695b      	ldr	r3, [r3, #20]
 8002250:	4798      	blx	r3
	}
}
 8002252:	bf00      	nop
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	40026400 	.word	0x40026400
 800225c:	20000150 	.word	0x20000150

08002260 <DMA2_Stream6_IRQHandler>:
void DMA2_Stream6_IRQHandler(void){
 8002260:	b580      	push	{r7, lr}
 8002262:	af00      	add	r7, sp, #0
	SET_BIT(DMA2->HIFCR ,DMA_CTCIF6_BIT_POS);
 8002264:	4b07      	ldr	r3, [pc, #28]	; (8002284 <DMA2_Stream6_IRQHandler+0x24>)
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	4a06      	ldr	r2, [pc, #24]	; (8002284 <DMA2_Stream6_IRQHandler+0x24>)
 800226a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800226e:	60d3      	str	r3, [r2, #12]
	if(DMA2_TCx_Callback[6] != NULL)
 8002270:	4b05      	ldr	r3, [pc, #20]	; (8002288 <DMA2_Stream6_IRQHandler+0x28>)
 8002272:	699b      	ldr	r3, [r3, #24]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d002      	beq.n	800227e <DMA2_Stream6_IRQHandler+0x1e>
	{
		DMA2_TCx_Callback[6]();
 8002278:	4b03      	ldr	r3, [pc, #12]	; (8002288 <DMA2_Stream6_IRQHandler+0x28>)
 800227a:	699b      	ldr	r3, [r3, #24]
 800227c:	4798      	blx	r3
	}
}
 800227e:	bf00      	nop
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	40026400 	.word	0x40026400
 8002288:	20000150 	.word	0x20000150

0800228c <DMA2_Stream7_IRQHandler>:
void DMA2_Stream7_IRQHandler(void){
 800228c:	b580      	push	{r7, lr}
 800228e:	af00      	add	r7, sp, #0
	SET_BIT(DMA2->HIFCR ,DMA_CTCIF7_BIT_POS);
 8002290:	4b07      	ldr	r3, [pc, #28]	; (80022b0 <DMA2_Stream7_IRQHandler+0x24>)
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	4a06      	ldr	r2, [pc, #24]	; (80022b0 <DMA2_Stream7_IRQHandler+0x24>)
 8002296:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800229a:	60d3      	str	r3, [r2, #12]
	if(DMA2_TCx_Callback[7] != NULL)
 800229c:	4b05      	ldr	r3, [pc, #20]	; (80022b4 <DMA2_Stream7_IRQHandler+0x28>)
 800229e:	69db      	ldr	r3, [r3, #28]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d002      	beq.n	80022aa <DMA2_Stream7_IRQHandler+0x1e>
	{
		DMA2_TCx_Callback[7]();
 80022a4:	4b03      	ldr	r3, [pc, #12]	; (80022b4 <DMA2_Stream7_IRQHandler+0x28>)
 80022a6:	69db      	ldr	r3, [r3, #28]
 80022a8:	4798      	blx	r3
	}
}
 80022aa:	bf00      	nop
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	40026400 	.word	0x40026400
 80022b4:	20000150 	.word	0x20000150

080022b8 <MEXTI_voidInit>:
 *********************************************************************************************************************/

/**********************************************************************************************************************
 *  GLOBAL FUNCTIONS
 *********************************************************************************************************************/
void MEXTI_voidInit(MEXTI_CONFIG_t* Copy_tEXTIConfig ,void (*pCallBackFunction)(void)){
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b082      	sub	sp, #8
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
 80022c0:	6039      	str	r1, [r7, #0]

	/*Enable EXTI Line mode interrupt or event*/
	switch(Copy_tEXTIConfig->MEXTI_Mode)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	78db      	ldrb	r3, [r3, #3]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d002      	beq.n	80022d0 <MEXTI_voidInit+0x18>
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	d00c      	beq.n	80022e8 <MEXTI_voidInit+0x30>
			break;
		case MEXTI_EVENT_MODE:
			SET_BIT(EXTI->EMR,Copy_tEXTIConfig->MEXTI_Line);
			break;
		default:
			break;
 80022ce:	e017      	b.n	8002300 <MEXTI_voidInit+0x48>
			SET_BIT(EXTI->IMR,Copy_tEXTIConfig->MEXTI_Line);
 80022d0:	4b7a      	ldr	r3, [pc, #488]	; (80024bc <MEXTI_voidInit+0x204>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	687a      	ldr	r2, [r7, #4]
 80022d6:	7852      	ldrb	r2, [r2, #1]
 80022d8:	4611      	mov	r1, r2
 80022da:	2201      	movs	r2, #1
 80022dc:	408a      	lsls	r2, r1
 80022de:	4611      	mov	r1, r2
 80022e0:	4a76      	ldr	r2, [pc, #472]	; (80024bc <MEXTI_voidInit+0x204>)
 80022e2:	430b      	orrs	r3, r1
 80022e4:	6013      	str	r3, [r2, #0]
			break;
 80022e6:	e00b      	b.n	8002300 <MEXTI_voidInit+0x48>
			SET_BIT(EXTI->EMR,Copy_tEXTIConfig->MEXTI_Line);
 80022e8:	4b74      	ldr	r3, [pc, #464]	; (80024bc <MEXTI_voidInit+0x204>)
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	687a      	ldr	r2, [r7, #4]
 80022ee:	7852      	ldrb	r2, [r2, #1]
 80022f0:	4611      	mov	r1, r2
 80022f2:	2201      	movs	r2, #1
 80022f4:	408a      	lsls	r2, r1
 80022f6:	4611      	mov	r1, r2
 80022f8:	4a70      	ldr	r2, [pc, #448]	; (80024bc <MEXTI_voidInit+0x204>)
 80022fa:	430b      	orrs	r3, r1
 80022fc:	6053      	str	r3, [r2, #4]
			break;
 80022fe:	bf00      	nop
	}

	/*Set Notification function*/
	EXTI_pNotificationFunction[Copy_tEXTIConfig->MEXTI_Line] = pCallBackFunction;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	785b      	ldrb	r3, [r3, #1]
 8002304:	4619      	mov	r1, r3
 8002306:	4a6e      	ldr	r2, [pc, #440]	; (80024c0 <MEXTI_voidInit+0x208>)
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

	/*Set Sense Signal mode RISING, FALLING, ONCHANGE */
	switch(Copy_tEXTIConfig->MEXTI_SenseSignal){
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	789b      	ldrb	r3, [r3, #2]
 8002312:	2b02      	cmp	r3, #2
 8002314:	d036      	beq.n	8002384 <MEXTI_voidInit+0xcc>
 8002316:	2b02      	cmp	r3, #2
 8002318:	dc4b      	bgt.n	80023b2 <MEXTI_voidInit+0xfa>
 800231a:	2b00      	cmp	r3, #0
 800231c:	d002      	beq.n	8002324 <MEXTI_voidInit+0x6c>
 800231e:	2b01      	cmp	r3, #1
 8002320:	d018      	beq.n	8002354 <MEXTI_voidInit+0x9c>
		case MEXTI_ONCHANGE:
			SET_BIT(EXTI->RTSR,Copy_tEXTIConfig->MEXTI_Line);
			SET_BIT(EXTI->FTSR,Copy_tEXTIConfig->MEXTI_Line);
			break;
		default:
			break;
 8002322:	e046      	b.n	80023b2 <MEXTI_voidInit+0xfa>
			SET_BIT(EXTI->RTSR,Copy_tEXTIConfig->MEXTI_Line);
 8002324:	4b65      	ldr	r3, [pc, #404]	; (80024bc <MEXTI_voidInit+0x204>)
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	687a      	ldr	r2, [r7, #4]
 800232a:	7852      	ldrb	r2, [r2, #1]
 800232c:	4611      	mov	r1, r2
 800232e:	2201      	movs	r2, #1
 8002330:	408a      	lsls	r2, r1
 8002332:	4611      	mov	r1, r2
 8002334:	4a61      	ldr	r2, [pc, #388]	; (80024bc <MEXTI_voidInit+0x204>)
 8002336:	430b      	orrs	r3, r1
 8002338:	6093      	str	r3, [r2, #8]
			CLR_BIT(EXTI->FTSR,Copy_tEXTIConfig->MEXTI_Line);
 800233a:	4b60      	ldr	r3, [pc, #384]	; (80024bc <MEXTI_voidInit+0x204>)
 800233c:	68db      	ldr	r3, [r3, #12]
 800233e:	687a      	ldr	r2, [r7, #4]
 8002340:	7852      	ldrb	r2, [r2, #1]
 8002342:	4611      	mov	r1, r2
 8002344:	2201      	movs	r2, #1
 8002346:	408a      	lsls	r2, r1
 8002348:	43d2      	mvns	r2, r2
 800234a:	4611      	mov	r1, r2
 800234c:	4a5b      	ldr	r2, [pc, #364]	; (80024bc <MEXTI_voidInit+0x204>)
 800234e:	400b      	ands	r3, r1
 8002350:	60d3      	str	r3, [r2, #12]
			break;
 8002352:	e02f      	b.n	80023b4 <MEXTI_voidInit+0xfc>
			SET_BIT(EXTI->FTSR,Copy_tEXTIConfig->MEXTI_Line);
 8002354:	4b59      	ldr	r3, [pc, #356]	; (80024bc <MEXTI_voidInit+0x204>)
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	687a      	ldr	r2, [r7, #4]
 800235a:	7852      	ldrb	r2, [r2, #1]
 800235c:	4611      	mov	r1, r2
 800235e:	2201      	movs	r2, #1
 8002360:	408a      	lsls	r2, r1
 8002362:	4611      	mov	r1, r2
 8002364:	4a55      	ldr	r2, [pc, #340]	; (80024bc <MEXTI_voidInit+0x204>)
 8002366:	430b      	orrs	r3, r1
 8002368:	60d3      	str	r3, [r2, #12]
			CLR_BIT(EXTI->RTSR,Copy_tEXTIConfig->MEXTI_Line);
 800236a:	4b54      	ldr	r3, [pc, #336]	; (80024bc <MEXTI_voidInit+0x204>)
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	7852      	ldrb	r2, [r2, #1]
 8002372:	4611      	mov	r1, r2
 8002374:	2201      	movs	r2, #1
 8002376:	408a      	lsls	r2, r1
 8002378:	43d2      	mvns	r2, r2
 800237a:	4611      	mov	r1, r2
 800237c:	4a4f      	ldr	r2, [pc, #316]	; (80024bc <MEXTI_voidInit+0x204>)
 800237e:	400b      	ands	r3, r1
 8002380:	6093      	str	r3, [r2, #8]
			break;
 8002382:	e017      	b.n	80023b4 <MEXTI_voidInit+0xfc>
			SET_BIT(EXTI->RTSR,Copy_tEXTIConfig->MEXTI_Line);
 8002384:	4b4d      	ldr	r3, [pc, #308]	; (80024bc <MEXTI_voidInit+0x204>)
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	687a      	ldr	r2, [r7, #4]
 800238a:	7852      	ldrb	r2, [r2, #1]
 800238c:	4611      	mov	r1, r2
 800238e:	2201      	movs	r2, #1
 8002390:	408a      	lsls	r2, r1
 8002392:	4611      	mov	r1, r2
 8002394:	4a49      	ldr	r2, [pc, #292]	; (80024bc <MEXTI_voidInit+0x204>)
 8002396:	430b      	orrs	r3, r1
 8002398:	6093      	str	r3, [r2, #8]
			SET_BIT(EXTI->FTSR,Copy_tEXTIConfig->MEXTI_Line);
 800239a:	4b48      	ldr	r3, [pc, #288]	; (80024bc <MEXTI_voidInit+0x204>)
 800239c:	68db      	ldr	r3, [r3, #12]
 800239e:	687a      	ldr	r2, [r7, #4]
 80023a0:	7852      	ldrb	r2, [r2, #1]
 80023a2:	4611      	mov	r1, r2
 80023a4:	2201      	movs	r2, #1
 80023a6:	408a      	lsls	r2, r1
 80023a8:	4611      	mov	r1, r2
 80023aa:	4a44      	ldr	r2, [pc, #272]	; (80024bc <MEXTI_voidInit+0x204>)
 80023ac:	430b      	orrs	r3, r1
 80023ae:	60d3      	str	r3, [r2, #12]
			break;
 80023b0:	e000      	b.n	80023b4 <MEXTI_voidInit+0xfc>
			break;
 80023b2:	bf00      	nop
	}
	/* Enable SYSCFG Peripheral Clock*/
	RCC_voidEnablePeripheralClock(RCC_APB2, RCC_APB2_SYSCFGEN);
 80023b4:	210e      	movs	r1, #14
 80023b6:	2002      	movs	r0, #2
 80023b8:	f000 fd1c 	bl	8002df4 <RCC_voidEnablePeripheralClock>
	/*Set EXTI Port PORTA, PORTB, PORTC*/
	if(Copy_tEXTIConfig->MEXTI_Line < 4 && Copy_tEXTIConfig->MEXTI_Line >= 0)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	785b      	ldrb	r3, [r3, #1]
 80023c0:	2b03      	cmp	r3, #3
 80023c2:	d80e      	bhi.n	80023e2 <MEXTI_voidInit+0x12a>
	{
		SYSCFG_EXTICR1 |= (Copy_tEXTIConfig->MEXTI_Port << (Copy_tEXTIConfig->MEXTI_Line*4));
 80023c4:	4b3f      	ldr	r3, [pc, #252]	; (80024c4 <MEXTI_voidInit+0x20c>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	687a      	ldr	r2, [r7, #4]
 80023ca:	7812      	ldrb	r2, [r2, #0]
 80023cc:	4611      	mov	r1, r2
 80023ce:	687a      	ldr	r2, [r7, #4]
 80023d0:	7852      	ldrb	r2, [r2, #1]
 80023d2:	0092      	lsls	r2, r2, #2
 80023d4:	fa01 f202 	lsl.w	r2, r1, r2
 80023d8:	4611      	mov	r1, r2
 80023da:	4a3a      	ldr	r2, [pc, #232]	; (80024c4 <MEXTI_voidInit+0x20c>)
 80023dc:	430b      	orrs	r3, r1
 80023de:	6013      	str	r3, [r2, #0]
 80023e0:	e043      	b.n	800246a <MEXTI_voidInit+0x1b2>

	}
	else if(Copy_tEXTIConfig->MEXTI_Line < 8 && Copy_tEXTIConfig->MEXTI_Line >= 4){
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	785b      	ldrb	r3, [r3, #1]
 80023e6:	2b07      	cmp	r3, #7
 80023e8:	d812      	bhi.n	8002410 <MEXTI_voidInit+0x158>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	785b      	ldrb	r3, [r3, #1]
 80023ee:	2b03      	cmp	r3, #3
 80023f0:	d90e      	bls.n	8002410 <MEXTI_voidInit+0x158>
		SYSCFG_EXTICR2 |= (Copy_tEXTIConfig->MEXTI_Port << (Copy_tEXTIConfig->MEXTI_Line*4));
 80023f2:	4b35      	ldr	r3, [pc, #212]	; (80024c8 <MEXTI_voidInit+0x210>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	687a      	ldr	r2, [r7, #4]
 80023f8:	7812      	ldrb	r2, [r2, #0]
 80023fa:	4611      	mov	r1, r2
 80023fc:	687a      	ldr	r2, [r7, #4]
 80023fe:	7852      	ldrb	r2, [r2, #1]
 8002400:	0092      	lsls	r2, r2, #2
 8002402:	fa01 f202 	lsl.w	r2, r1, r2
 8002406:	4611      	mov	r1, r2
 8002408:	4a2f      	ldr	r2, [pc, #188]	; (80024c8 <MEXTI_voidInit+0x210>)
 800240a:	430b      	orrs	r3, r1
 800240c:	6013      	str	r3, [r2, #0]
 800240e:	e02c      	b.n	800246a <MEXTI_voidInit+0x1b2>
	}
	else if(Copy_tEXTIConfig->MEXTI_Line < 12 && Copy_tEXTIConfig->MEXTI_Line >= 8){
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	785b      	ldrb	r3, [r3, #1]
 8002414:	2b0b      	cmp	r3, #11
 8002416:	d812      	bhi.n	800243e <MEXTI_voidInit+0x186>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	785b      	ldrb	r3, [r3, #1]
 800241c:	2b07      	cmp	r3, #7
 800241e:	d90e      	bls.n	800243e <MEXTI_voidInit+0x186>
		SYSCFG_EXTICR3 |= (Copy_tEXTIConfig->MEXTI_Port << (Copy_tEXTIConfig->MEXTI_Line*4));
 8002420:	4b2a      	ldr	r3, [pc, #168]	; (80024cc <MEXTI_voidInit+0x214>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	687a      	ldr	r2, [r7, #4]
 8002426:	7812      	ldrb	r2, [r2, #0]
 8002428:	4611      	mov	r1, r2
 800242a:	687a      	ldr	r2, [r7, #4]
 800242c:	7852      	ldrb	r2, [r2, #1]
 800242e:	0092      	lsls	r2, r2, #2
 8002430:	fa01 f202 	lsl.w	r2, r1, r2
 8002434:	4611      	mov	r1, r2
 8002436:	4a25      	ldr	r2, [pc, #148]	; (80024cc <MEXTI_voidInit+0x214>)
 8002438:	430b      	orrs	r3, r1
 800243a:	6013      	str	r3, [r2, #0]
 800243c:	e015      	b.n	800246a <MEXTI_voidInit+0x1b2>
	}
	else if(Copy_tEXTIConfig->MEXTI_Line < 16 && Copy_tEXTIConfig->MEXTI_Line >= 12){
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	785b      	ldrb	r3, [r3, #1]
 8002442:	2b0f      	cmp	r3, #15
 8002444:	d811      	bhi.n	800246a <MEXTI_voidInit+0x1b2>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	785b      	ldrb	r3, [r3, #1]
 800244a:	2b0b      	cmp	r3, #11
 800244c:	d90d      	bls.n	800246a <MEXTI_voidInit+0x1b2>
		SYSCFG_EXTICR4 |= (Copy_tEXTIConfig->MEXTI_Port << (Copy_tEXTIConfig->MEXTI_Line*4));
 800244e:	4b20      	ldr	r3, [pc, #128]	; (80024d0 <MEXTI_voidInit+0x218>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	7812      	ldrb	r2, [r2, #0]
 8002456:	4611      	mov	r1, r2
 8002458:	687a      	ldr	r2, [r7, #4]
 800245a:	7852      	ldrb	r2, [r2, #1]
 800245c:	0092      	lsls	r2, r2, #2
 800245e:	fa01 f202 	lsl.w	r2, r1, r2
 8002462:	4611      	mov	r1, r2
 8002464:	4a1a      	ldr	r2, [pc, #104]	; (80024d0 <MEXTI_voidInit+0x218>)
 8002466:	430b      	orrs	r3, r1
 8002468:	6013      	str	r3, [r2, #0]
	}

	/*Enable NVIC Mask for EXTI Line*/
	if(Copy_tEXTIConfig->MEXTI_Line <5){
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	785b      	ldrb	r3, [r3, #1]
 800246e:	2b04      	cmp	r3, #4
 8002470:	d808      	bhi.n	8002484 <MEXTI_voidInit+0x1cc>
		MNVIC_voidEnableIRQ(EXTI0_IRQn+Copy_tEXTIConfig->MEXTI_Line);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	785b      	ldrb	r3, [r3, #1]
 8002476:	3306      	adds	r3, #6
 8002478:	b2db      	uxtb	r3, r3
 800247a:	b25b      	sxtb	r3, r3
 800247c:	4618      	mov	r0, r3
 800247e:	f000 fbd5 	bl	8002c2c <MNVIC_voidEnableIRQ>
		MNVIC_voidEnableIRQ(EXTI9_5_IRQn);
	}
	else if(Copy_tEXTIConfig->MEXTI_Line >= 10 && Copy_tEXTIConfig->MEXTI_Line <= 15){
		MNVIC_voidEnableIRQ(EXTI15_10_IRQn);
	}
}
 8002482:	e016      	b.n	80024b2 <MEXTI_voidInit+0x1fa>
	else if(Copy_tEXTIConfig->MEXTI_Line >= 5 && Copy_tEXTIConfig->MEXTI_Line <= 9){
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	785b      	ldrb	r3, [r3, #1]
 8002488:	2b04      	cmp	r3, #4
 800248a:	d907      	bls.n	800249c <MEXTI_voidInit+0x1e4>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	785b      	ldrb	r3, [r3, #1]
 8002490:	2b09      	cmp	r3, #9
 8002492:	d803      	bhi.n	800249c <MEXTI_voidInit+0x1e4>
		MNVIC_voidEnableIRQ(EXTI9_5_IRQn);
 8002494:	2017      	movs	r0, #23
 8002496:	f000 fbc9 	bl	8002c2c <MNVIC_voidEnableIRQ>
}
 800249a:	e00a      	b.n	80024b2 <MEXTI_voidInit+0x1fa>
	else if(Copy_tEXTIConfig->MEXTI_Line >= 10 && Copy_tEXTIConfig->MEXTI_Line <= 15){
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	785b      	ldrb	r3, [r3, #1]
 80024a0:	2b09      	cmp	r3, #9
 80024a2:	d906      	bls.n	80024b2 <MEXTI_voidInit+0x1fa>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	785b      	ldrb	r3, [r3, #1]
 80024a8:	2b0f      	cmp	r3, #15
 80024aa:	d802      	bhi.n	80024b2 <MEXTI_voidInit+0x1fa>
		MNVIC_voidEnableIRQ(EXTI15_10_IRQn);
 80024ac:	2028      	movs	r0, #40	; 0x28
 80024ae:	f000 fbbd 	bl	8002c2c <MNVIC_voidEnableIRQ>
}
 80024b2:	bf00      	nop
 80024b4:	3708      	adds	r7, #8
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	40013c00 	.word	0x40013c00
 80024c0:	20000170 	.word	0x20000170
 80024c4:	40013808 	.word	0x40013808
 80024c8:	4001380c 	.word	0x4001380c
 80024cc:	40013810 	.word	0x40013810
 80024d0:	40013814 	.word	0x40013814

080024d4 <MEXTI_voidClearPendingFlag>:

void MEXTI_voidSetCallBack(MEXTI_INTERRUPT_LINE_t Copy_tInterruptLine, void (*pCallBackFunction)(void)){
    EXTI_pNotificationFunction[Copy_tInterruptLine] = pCallBackFunction;
}

void MEXTI_voidClearPendingFlag(MEXTI_INTERRUPT_LINE_t Copy_tInterruptLine){
 80024d4:	b480      	push	{r7}
 80024d6:	b083      	sub	sp, #12
 80024d8:	af00      	add	r7, sp, #0
 80024da:	4603      	mov	r3, r0
 80024dc:	71fb      	strb	r3, [r7, #7]
	SET_BIT(EXTI->PR,Copy_tInterruptLine);
 80024de:	4b08      	ldr	r3, [pc, #32]	; (8002500 <MEXTI_voidClearPendingFlag+0x2c>)
 80024e0:	695b      	ldr	r3, [r3, #20]
 80024e2:	79fa      	ldrb	r2, [r7, #7]
 80024e4:	2101      	movs	r1, #1
 80024e6:	fa01 f202 	lsl.w	r2, r1, r2
 80024ea:	4611      	mov	r1, r2
 80024ec:	4a04      	ldr	r2, [pc, #16]	; (8002500 <MEXTI_voidClearPendingFlag+0x2c>)
 80024ee:	430b      	orrs	r3, r1
 80024f0:	6153      	str	r3, [r2, #20]
}
 80024f2:	bf00      	nop
 80024f4:	370c      	adds	r7, #12
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr
 80024fe:	bf00      	nop
 8002500:	40013c00 	.word	0x40013c00

08002504 <MEXTI_u8GetPendingFlag>:

u8 MEXTI_u8GetPendingFlag(MEXTI_INTERRUPT_LINE_t Copy_tInterruptLine)
{
 8002504:	b480      	push	{r7}
 8002506:	b083      	sub	sp, #12
 8002508:	af00      	add	r7, sp, #0
 800250a:	4603      	mov	r3, r0
 800250c:	71fb      	strb	r3, [r7, #7]
	return GET_BIT(EXTI->PR,Copy_tInterruptLine);
 800250e:	4b07      	ldr	r3, [pc, #28]	; (800252c <MEXTI_u8GetPendingFlag+0x28>)
 8002510:	695a      	ldr	r2, [r3, #20]
 8002512:	79fb      	ldrb	r3, [r7, #7]
 8002514:	fa22 f303 	lsr.w	r3, r2, r3
 8002518:	b2db      	uxtb	r3, r3
 800251a:	f003 0301 	and.w	r3, r3, #1
 800251e:	b2db      	uxtb	r3, r3
}
 8002520:	4618      	mov	r0, r3
 8002522:	370c      	adds	r7, #12
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr
 800252c:	40013c00 	.word	0x40013c00

08002530 <EXTI0_IRQHandler>:


/*********************************************EXTI0_15_IRQHandlers******************************/
void EXTI0_IRQHandler(void){
 8002530:	b580      	push	{r7, lr}
 8002532:	af00      	add	r7, sp, #0
    if(EXTI_pNotificationFunction[0] != NULL){
 8002534:	4b05      	ldr	r3, [pc, #20]	; (800254c <EXTI0_IRQHandler+0x1c>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d002      	beq.n	8002542 <EXTI0_IRQHandler+0x12>
        EXTI_pNotificationFunction[0]();
 800253c:	4b03      	ldr	r3, [pc, #12]	; (800254c <EXTI0_IRQHandler+0x1c>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4798      	blx	r3
    }
    MEXTI_voidClearPendingFlag(MEXTI_EXTI0);
 8002542:	2000      	movs	r0, #0
 8002544:	f7ff ffc6 	bl	80024d4 <MEXTI_voidClearPendingFlag>
}
 8002548:	bf00      	nop
 800254a:	bd80      	pop	{r7, pc}
 800254c:	20000170 	.word	0x20000170

08002550 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void){
 8002550:	b580      	push	{r7, lr}
 8002552:	af00      	add	r7, sp, #0
    if(EXTI_pNotificationFunction[1] != NULL){
 8002554:	4b05      	ldr	r3, [pc, #20]	; (800256c <EXTI1_IRQHandler+0x1c>)
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d002      	beq.n	8002562 <EXTI1_IRQHandler+0x12>
        EXTI_pNotificationFunction[1]();
 800255c:	4b03      	ldr	r3, [pc, #12]	; (800256c <EXTI1_IRQHandler+0x1c>)
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	4798      	blx	r3
    }
    MEXTI_voidClearPendingFlag(MEXTI_EXTI1);
 8002562:	2001      	movs	r0, #1
 8002564:	f7ff ffb6 	bl	80024d4 <MEXTI_voidClearPendingFlag>
}
 8002568:	bf00      	nop
 800256a:	bd80      	pop	{r7, pc}
 800256c:	20000170 	.word	0x20000170

08002570 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void){
 8002570:	b580      	push	{r7, lr}
 8002572:	af00      	add	r7, sp, #0
    if(EXTI_pNotificationFunction[2] != NULL){
 8002574:	4b05      	ldr	r3, [pc, #20]	; (800258c <EXTI2_IRQHandler+0x1c>)
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d002      	beq.n	8002582 <EXTI2_IRQHandler+0x12>
        EXTI_pNotificationFunction[2]();
 800257c:	4b03      	ldr	r3, [pc, #12]	; (800258c <EXTI2_IRQHandler+0x1c>)
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	4798      	blx	r3
    }
    MEXTI_voidClearPendingFlag(MEXTI_EXTI2);
 8002582:	2002      	movs	r0, #2
 8002584:	f7ff ffa6 	bl	80024d4 <MEXTI_voidClearPendingFlag>
}
 8002588:	bf00      	nop
 800258a:	bd80      	pop	{r7, pc}
 800258c:	20000170 	.word	0x20000170

08002590 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void){
 8002590:	b580      	push	{r7, lr}
 8002592:	af00      	add	r7, sp, #0
    if(EXTI_pNotificationFunction[3] != NULL){
 8002594:	4b05      	ldr	r3, [pc, #20]	; (80025ac <EXTI3_IRQHandler+0x1c>)
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d002      	beq.n	80025a2 <EXTI3_IRQHandler+0x12>
        EXTI_pNotificationFunction[3]();
 800259c:	4b03      	ldr	r3, [pc, #12]	; (80025ac <EXTI3_IRQHandler+0x1c>)
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	4798      	blx	r3
    }
    MEXTI_voidClearPendingFlag(MEXTI_EXTI3);
 80025a2:	2003      	movs	r0, #3
 80025a4:	f7ff ff96 	bl	80024d4 <MEXTI_voidClearPendingFlag>
}
 80025a8:	bf00      	nop
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	20000170 	.word	0x20000170

080025b0 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void){
 80025b0:	b580      	push	{r7, lr}
 80025b2:	af00      	add	r7, sp, #0
    if(EXTI_pNotificationFunction[4] != NULL){
 80025b4:	4b05      	ldr	r3, [pc, #20]	; (80025cc <EXTI4_IRQHandler+0x1c>)
 80025b6:	691b      	ldr	r3, [r3, #16]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d002      	beq.n	80025c2 <EXTI4_IRQHandler+0x12>
        EXTI_pNotificationFunction[4]();
 80025bc:	4b03      	ldr	r3, [pc, #12]	; (80025cc <EXTI4_IRQHandler+0x1c>)
 80025be:	691b      	ldr	r3, [r3, #16]
 80025c0:	4798      	blx	r3
    }
    MEXTI_voidClearPendingFlag(MEXTI_EXTI4);
 80025c2:	2004      	movs	r0, #4
 80025c4:	f7ff ff86 	bl	80024d4 <MEXTI_voidClearPendingFlag>
}
 80025c8:	bf00      	nop
 80025ca:	bd80      	pop	{r7, pc}
 80025cc:	20000170 	.word	0x20000170

080025d0 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	af00      	add	r7, sp, #0
	if(MEXTI_u8GetPendingFlag(MEXTI_EXTI5))
 80025d4:	2005      	movs	r0, #5
 80025d6:	f7ff ff95 	bl	8002504 <MEXTI_u8GetPendingFlag>
 80025da:	4603      	mov	r3, r0
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d00a      	beq.n	80025f6 <EXTI9_5_IRQHandler+0x26>
	{
		if(EXTI_pNotificationFunction[5] != NULL){
 80025e0:	4b27      	ldr	r3, [pc, #156]	; (8002680 <EXTI9_5_IRQHandler+0xb0>)
 80025e2:	695b      	ldr	r3, [r3, #20]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d002      	beq.n	80025ee <EXTI9_5_IRQHandler+0x1e>
			EXTI_pNotificationFunction[5]();
 80025e8:	4b25      	ldr	r3, [pc, #148]	; (8002680 <EXTI9_5_IRQHandler+0xb0>)
 80025ea:	695b      	ldr	r3, [r3, #20]
 80025ec:	4798      	blx	r3
		}
		MEXTI_voidClearPendingFlag(MEXTI_EXTI5);
 80025ee:	2005      	movs	r0, #5
 80025f0:	f7ff ff70 	bl	80024d4 <MEXTI_voidClearPendingFlag>
		if(EXTI_pNotificationFunction[9] != NULL){
			EXTI_pNotificationFunction[9]();
		}
		MEXTI_voidClearPendingFlag(MEXTI_EXTI9);
	}
}
 80025f4:	e042      	b.n	800267c <EXTI9_5_IRQHandler+0xac>
	else if(MEXTI_u8GetPendingFlag(MEXTI_EXTI6))
 80025f6:	2006      	movs	r0, #6
 80025f8:	f7ff ff84 	bl	8002504 <MEXTI_u8GetPendingFlag>
 80025fc:	4603      	mov	r3, r0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d00a      	beq.n	8002618 <EXTI9_5_IRQHandler+0x48>
		if(EXTI_pNotificationFunction[6] != NULL){
 8002602:	4b1f      	ldr	r3, [pc, #124]	; (8002680 <EXTI9_5_IRQHandler+0xb0>)
 8002604:	699b      	ldr	r3, [r3, #24]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d002      	beq.n	8002610 <EXTI9_5_IRQHandler+0x40>
			EXTI_pNotificationFunction[6]();
 800260a:	4b1d      	ldr	r3, [pc, #116]	; (8002680 <EXTI9_5_IRQHandler+0xb0>)
 800260c:	699b      	ldr	r3, [r3, #24]
 800260e:	4798      	blx	r3
		MEXTI_voidClearPendingFlag(MEXTI_EXTI6);
 8002610:	2006      	movs	r0, #6
 8002612:	f7ff ff5f 	bl	80024d4 <MEXTI_voidClearPendingFlag>
}
 8002616:	e031      	b.n	800267c <EXTI9_5_IRQHandler+0xac>
	else if(MEXTI_u8GetPendingFlag(MEXTI_EXTI7))
 8002618:	2007      	movs	r0, #7
 800261a:	f7ff ff73 	bl	8002504 <MEXTI_u8GetPendingFlag>
 800261e:	4603      	mov	r3, r0
 8002620:	2b00      	cmp	r3, #0
 8002622:	d00a      	beq.n	800263a <EXTI9_5_IRQHandler+0x6a>
		if(EXTI_pNotificationFunction[7] != NULL){
 8002624:	4b16      	ldr	r3, [pc, #88]	; (8002680 <EXTI9_5_IRQHandler+0xb0>)
 8002626:	69db      	ldr	r3, [r3, #28]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d002      	beq.n	8002632 <EXTI9_5_IRQHandler+0x62>
			EXTI_pNotificationFunction[7]();
 800262c:	4b14      	ldr	r3, [pc, #80]	; (8002680 <EXTI9_5_IRQHandler+0xb0>)
 800262e:	69db      	ldr	r3, [r3, #28]
 8002630:	4798      	blx	r3
		MEXTI_voidClearPendingFlag(MEXTI_EXTI7);
 8002632:	2007      	movs	r0, #7
 8002634:	f7ff ff4e 	bl	80024d4 <MEXTI_voidClearPendingFlag>
}
 8002638:	e020      	b.n	800267c <EXTI9_5_IRQHandler+0xac>
	else if (MEXTI_u8GetPendingFlag(MEXTI_EXTI8))
 800263a:	2008      	movs	r0, #8
 800263c:	f7ff ff62 	bl	8002504 <MEXTI_u8GetPendingFlag>
 8002640:	4603      	mov	r3, r0
 8002642:	2b00      	cmp	r3, #0
 8002644:	d00a      	beq.n	800265c <EXTI9_5_IRQHandler+0x8c>
		if(EXTI_pNotificationFunction[8] != NULL){
 8002646:	4b0e      	ldr	r3, [pc, #56]	; (8002680 <EXTI9_5_IRQHandler+0xb0>)
 8002648:	6a1b      	ldr	r3, [r3, #32]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d002      	beq.n	8002654 <EXTI9_5_IRQHandler+0x84>
			EXTI_pNotificationFunction[8]();
 800264e:	4b0c      	ldr	r3, [pc, #48]	; (8002680 <EXTI9_5_IRQHandler+0xb0>)
 8002650:	6a1b      	ldr	r3, [r3, #32]
 8002652:	4798      	blx	r3
		MEXTI_voidClearPendingFlag(MEXTI_EXTI8);
 8002654:	2008      	movs	r0, #8
 8002656:	f7ff ff3d 	bl	80024d4 <MEXTI_voidClearPendingFlag>
}
 800265a:	e00f      	b.n	800267c <EXTI9_5_IRQHandler+0xac>
	else if (MEXTI_u8GetPendingFlag(MEXTI_EXTI9))
 800265c:	2009      	movs	r0, #9
 800265e:	f7ff ff51 	bl	8002504 <MEXTI_u8GetPendingFlag>
 8002662:	4603      	mov	r3, r0
 8002664:	2b00      	cmp	r3, #0
 8002666:	d009      	beq.n	800267c <EXTI9_5_IRQHandler+0xac>
		if(EXTI_pNotificationFunction[9] != NULL){
 8002668:	4b05      	ldr	r3, [pc, #20]	; (8002680 <EXTI9_5_IRQHandler+0xb0>)
 800266a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800266c:	2b00      	cmp	r3, #0
 800266e:	d002      	beq.n	8002676 <EXTI9_5_IRQHandler+0xa6>
			EXTI_pNotificationFunction[9]();
 8002670:	4b03      	ldr	r3, [pc, #12]	; (8002680 <EXTI9_5_IRQHandler+0xb0>)
 8002672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002674:	4798      	blx	r3
		MEXTI_voidClearPendingFlag(MEXTI_EXTI9);
 8002676:	2009      	movs	r0, #9
 8002678:	f7ff ff2c 	bl	80024d4 <MEXTI_voidClearPendingFlag>
}
 800267c:	bf00      	nop
 800267e:	bd80      	pop	{r7, pc}
 8002680:	20000170 	.word	0x20000170

08002684 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	af00      	add	r7, sp, #0
	if(MEXTI_u8GetPendingFlag(MEXTI_EXTI10))
 8002688:	200a      	movs	r0, #10
 800268a:	f7ff ff3b 	bl	8002504 <MEXTI_u8GetPendingFlag>
 800268e:	4603      	mov	r3, r0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d00a      	beq.n	80026aa <EXTI15_10_IRQHandler+0x26>
	{
		if(EXTI_pNotificationFunction[10] != NULL){
 8002694:	4b30      	ldr	r3, [pc, #192]	; (8002758 <EXTI15_10_IRQHandler+0xd4>)
 8002696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002698:	2b00      	cmp	r3, #0
 800269a:	d002      	beq.n	80026a2 <EXTI15_10_IRQHandler+0x1e>
			EXTI_pNotificationFunction[10]();
 800269c:	4b2e      	ldr	r3, [pc, #184]	; (8002758 <EXTI15_10_IRQHandler+0xd4>)
 800269e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026a0:	4798      	blx	r3
		}
		MEXTI_voidClearPendingFlag(MEXTI_EXTI10);
 80026a2:	200a      	movs	r0, #10
 80026a4:	f7ff ff16 	bl	80024d4 <MEXTI_voidClearPendingFlag>
		if(EXTI_pNotificationFunction[15] != NULL){
			EXTI_pNotificationFunction[15]();
		}
		MEXTI_voidClearPendingFlag(MEXTI_EXTI15);
	}
}
 80026a8:	e053      	b.n	8002752 <EXTI15_10_IRQHandler+0xce>
	else if(MEXTI_u8GetPendingFlag(MEXTI_EXTI11))
 80026aa:	200b      	movs	r0, #11
 80026ac:	f7ff ff2a 	bl	8002504 <MEXTI_u8GetPendingFlag>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d00a      	beq.n	80026cc <EXTI15_10_IRQHandler+0x48>
		if(EXTI_pNotificationFunction[11] != NULL){
 80026b6:	4b28      	ldr	r3, [pc, #160]	; (8002758 <EXTI15_10_IRQHandler+0xd4>)
 80026b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d002      	beq.n	80026c4 <EXTI15_10_IRQHandler+0x40>
			EXTI_pNotificationFunction[11]();
 80026be:	4b26      	ldr	r3, [pc, #152]	; (8002758 <EXTI15_10_IRQHandler+0xd4>)
 80026c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026c2:	4798      	blx	r3
		MEXTI_voidClearPendingFlag(MEXTI_EXTI11);
 80026c4:	200b      	movs	r0, #11
 80026c6:	f7ff ff05 	bl	80024d4 <MEXTI_voidClearPendingFlag>
}
 80026ca:	e042      	b.n	8002752 <EXTI15_10_IRQHandler+0xce>
	else if(MEXTI_u8GetPendingFlag(MEXTI_EXTI12))
 80026cc:	200c      	movs	r0, #12
 80026ce:	f7ff ff19 	bl	8002504 <MEXTI_u8GetPendingFlag>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d00a      	beq.n	80026ee <EXTI15_10_IRQHandler+0x6a>
		if(EXTI_pNotificationFunction[12] != NULL){
 80026d8:	4b1f      	ldr	r3, [pc, #124]	; (8002758 <EXTI15_10_IRQHandler+0xd4>)
 80026da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d002      	beq.n	80026e6 <EXTI15_10_IRQHandler+0x62>
			EXTI_pNotificationFunction[12]();
 80026e0:	4b1d      	ldr	r3, [pc, #116]	; (8002758 <EXTI15_10_IRQHandler+0xd4>)
 80026e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e4:	4798      	blx	r3
		MEXTI_voidClearPendingFlag(MEXTI_EXTI12);
 80026e6:	200c      	movs	r0, #12
 80026e8:	f7ff fef4 	bl	80024d4 <MEXTI_voidClearPendingFlag>
}
 80026ec:	e031      	b.n	8002752 <EXTI15_10_IRQHandler+0xce>
	else if (MEXTI_u8GetPendingFlag(MEXTI_EXTI13))
 80026ee:	200d      	movs	r0, #13
 80026f0:	f7ff ff08 	bl	8002504 <MEXTI_u8GetPendingFlag>
 80026f4:	4603      	mov	r3, r0
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d00a      	beq.n	8002710 <EXTI15_10_IRQHandler+0x8c>
		if(EXTI_pNotificationFunction[13] != NULL){
 80026fa:	4b17      	ldr	r3, [pc, #92]	; (8002758 <EXTI15_10_IRQHandler+0xd4>)
 80026fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d002      	beq.n	8002708 <EXTI15_10_IRQHandler+0x84>
			EXTI_pNotificationFunction[13]();
 8002702:	4b15      	ldr	r3, [pc, #84]	; (8002758 <EXTI15_10_IRQHandler+0xd4>)
 8002704:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002706:	4798      	blx	r3
		MEXTI_voidClearPendingFlag(MEXTI_EXTI13);
 8002708:	200d      	movs	r0, #13
 800270a:	f7ff fee3 	bl	80024d4 <MEXTI_voidClearPendingFlag>
}
 800270e:	e020      	b.n	8002752 <EXTI15_10_IRQHandler+0xce>
	else if (MEXTI_u8GetPendingFlag(MEXTI_EXTI14))
 8002710:	200e      	movs	r0, #14
 8002712:	f7ff fef7 	bl	8002504 <MEXTI_u8GetPendingFlag>
 8002716:	4603      	mov	r3, r0
 8002718:	2b00      	cmp	r3, #0
 800271a:	d00a      	beq.n	8002732 <EXTI15_10_IRQHandler+0xae>
		if(EXTI_pNotificationFunction[14] != NULL){
 800271c:	4b0e      	ldr	r3, [pc, #56]	; (8002758 <EXTI15_10_IRQHandler+0xd4>)
 800271e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002720:	2b00      	cmp	r3, #0
 8002722:	d002      	beq.n	800272a <EXTI15_10_IRQHandler+0xa6>
			EXTI_pNotificationFunction[14]();
 8002724:	4b0c      	ldr	r3, [pc, #48]	; (8002758 <EXTI15_10_IRQHandler+0xd4>)
 8002726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002728:	4798      	blx	r3
		MEXTI_voidClearPendingFlag(MEXTI_EXTI14);
 800272a:	200e      	movs	r0, #14
 800272c:	f7ff fed2 	bl	80024d4 <MEXTI_voidClearPendingFlag>
}
 8002730:	e00f      	b.n	8002752 <EXTI15_10_IRQHandler+0xce>
	else if (MEXTI_u8GetPendingFlag(MEXTI_EXTI15))
 8002732:	200f      	movs	r0, #15
 8002734:	f7ff fee6 	bl	8002504 <MEXTI_u8GetPendingFlag>
 8002738:	4603      	mov	r3, r0
 800273a:	2b00      	cmp	r3, #0
 800273c:	d009      	beq.n	8002752 <EXTI15_10_IRQHandler+0xce>
		if(EXTI_pNotificationFunction[15] != NULL){
 800273e:	4b06      	ldr	r3, [pc, #24]	; (8002758 <EXTI15_10_IRQHandler+0xd4>)
 8002740:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002742:	2b00      	cmp	r3, #0
 8002744:	d002      	beq.n	800274c <EXTI15_10_IRQHandler+0xc8>
			EXTI_pNotificationFunction[15]();
 8002746:	4b04      	ldr	r3, [pc, #16]	; (8002758 <EXTI15_10_IRQHandler+0xd4>)
 8002748:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800274a:	4798      	blx	r3
		MEXTI_voidClearPendingFlag(MEXTI_EXTI15);
 800274c:	200f      	movs	r0, #15
 800274e:	f7ff fec1 	bl	80024d4 <MEXTI_voidClearPendingFlag>
}
 8002752:	bf00      	nop
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	20000170 	.word	0x20000170

0800275c <GPIO_voidSetPinMode>:
#include"GPIO_config.h"
#include"GPIO_interface.h"
#include"GPIO_private.h"

void GPIO_voidSetPinMode(port_index_t Copy_PortIndex, pin_index_t Copy_PinIndex,
                         gpio_pin_mode_t Copy_GPIOPinMode) {
 800275c:	b480      	push	{r7}
 800275e:	b083      	sub	sp, #12
 8002760:	af00      	add	r7, sp, #0
 8002762:	4603      	mov	r3, r0
 8002764:	71fb      	strb	r3, [r7, #7]
 8002766:	460b      	mov	r3, r1
 8002768:	71bb      	strb	r3, [r7, #6]
 800276a:	4613      	mov	r3, r2
 800276c:	717b      	strb	r3, [r7, #5]
  switch (Copy_PortIndex) {
 800276e:	79fb      	ldrb	r3, [r7, #7]
 8002770:	2b02      	cmp	r3, #2
 8002772:	d02c      	beq.n	80027ce <GPIO_voidSetPinMode+0x72>
 8002774:	2b02      	cmp	r3, #2
 8002776:	dc3d      	bgt.n	80027f4 <GPIO_voidSetPinMode+0x98>
 8002778:	2b00      	cmp	r3, #0
 800277a:	d002      	beq.n	8002782 <GPIO_voidSetPinMode+0x26>
 800277c:	2b01      	cmp	r3, #1
 800277e:	d013      	beq.n	80027a8 <GPIO_voidSetPinMode+0x4c>
      MODIFY_REG(GPIOC_MODER,
                 GPIO_MODER_CLEAR_MASK << GPIO_MODER_PIN_BITS * Copy_PinIndex,
                 Copy_GPIOPinMode << GPIO_MODER_PIN_BITS * Copy_PinIndex);
      break;
    default:
      break;
 8002780:	e038      	b.n	80027f4 <GPIO_voidSetPinMode+0x98>
      MODIFY_REG(GPIOA_MODER,
 8002782:	4b20      	ldr	r3, [pc, #128]	; (8002804 <GPIO_voidSetPinMode+0xa8>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	79ba      	ldrb	r2, [r7, #6]
 8002788:	0052      	lsls	r2, r2, #1
 800278a:	2103      	movs	r1, #3
 800278c:	fa01 f202 	lsl.w	r2, r1, r2
 8002790:	43d2      	mvns	r2, r2
 8002792:	4013      	ands	r3, r2
 8002794:	7979      	ldrb	r1, [r7, #5]
 8002796:	79ba      	ldrb	r2, [r7, #6]
 8002798:	0052      	lsls	r2, r2, #1
 800279a:	fa01 f202 	lsl.w	r2, r1, r2
 800279e:	4611      	mov	r1, r2
 80027a0:	4a18      	ldr	r2, [pc, #96]	; (8002804 <GPIO_voidSetPinMode+0xa8>)
 80027a2:	430b      	orrs	r3, r1
 80027a4:	6013      	str	r3, [r2, #0]
      break;
 80027a6:	e026      	b.n	80027f6 <GPIO_voidSetPinMode+0x9a>
      MODIFY_REG(GPIOB_MODER,
 80027a8:	4b17      	ldr	r3, [pc, #92]	; (8002808 <GPIO_voidSetPinMode+0xac>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	79ba      	ldrb	r2, [r7, #6]
 80027ae:	0052      	lsls	r2, r2, #1
 80027b0:	2103      	movs	r1, #3
 80027b2:	fa01 f202 	lsl.w	r2, r1, r2
 80027b6:	43d2      	mvns	r2, r2
 80027b8:	4013      	ands	r3, r2
 80027ba:	7979      	ldrb	r1, [r7, #5]
 80027bc:	79ba      	ldrb	r2, [r7, #6]
 80027be:	0052      	lsls	r2, r2, #1
 80027c0:	fa01 f202 	lsl.w	r2, r1, r2
 80027c4:	4611      	mov	r1, r2
 80027c6:	4a10      	ldr	r2, [pc, #64]	; (8002808 <GPIO_voidSetPinMode+0xac>)
 80027c8:	430b      	orrs	r3, r1
 80027ca:	6013      	str	r3, [r2, #0]
      break;
 80027cc:	e013      	b.n	80027f6 <GPIO_voidSetPinMode+0x9a>
      MODIFY_REG(GPIOC_MODER,
 80027ce:	4b0f      	ldr	r3, [pc, #60]	; (800280c <GPIO_voidSetPinMode+0xb0>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	79ba      	ldrb	r2, [r7, #6]
 80027d4:	0052      	lsls	r2, r2, #1
 80027d6:	2103      	movs	r1, #3
 80027d8:	fa01 f202 	lsl.w	r2, r1, r2
 80027dc:	43d2      	mvns	r2, r2
 80027de:	4013      	ands	r3, r2
 80027e0:	7979      	ldrb	r1, [r7, #5]
 80027e2:	79ba      	ldrb	r2, [r7, #6]
 80027e4:	0052      	lsls	r2, r2, #1
 80027e6:	fa01 f202 	lsl.w	r2, r1, r2
 80027ea:	4611      	mov	r1, r2
 80027ec:	4a07      	ldr	r2, [pc, #28]	; (800280c <GPIO_voidSetPinMode+0xb0>)
 80027ee:	430b      	orrs	r3, r1
 80027f0:	6013      	str	r3, [r2, #0]
      break;
 80027f2:	e000      	b.n	80027f6 <GPIO_voidSetPinMode+0x9a>
      break;
 80027f4:	bf00      	nop
  }
}
 80027f6:	bf00      	nop
 80027f8:	370c      	adds	r7, #12
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr
 8002802:	bf00      	nop
 8002804:	40020000 	.word	0x40020000
 8002808:	40020400 	.word	0x40020400
 800280c:	40020800 	.word	0x40020800

08002810 <GPIO_voidSetPinOutputMode>:
void GPIO_voidSetPinOutputMode(port_index_t Copy_PortIndex,
                               pin_index_t Copy_PinIndex,
                               output_pin_mode_t Copy_OutputPinMode) {
 8002810:	b480      	push	{r7}
 8002812:	b083      	sub	sp, #12
 8002814:	af00      	add	r7, sp, #0
 8002816:	4603      	mov	r3, r0
 8002818:	71fb      	strb	r3, [r7, #7]
 800281a:	460b      	mov	r3, r1
 800281c:	71bb      	strb	r3, [r7, #6]
 800281e:	4613      	mov	r3, r2
 8002820:	717b      	strb	r3, [r7, #5]
  switch (Copy_PortIndex) {
 8002822:	79fb      	ldrb	r3, [r7, #7]
 8002824:	2b02      	cmp	r3, #2
 8002826:	d028      	beq.n	800287a <GPIO_voidSetPinOutputMode+0x6a>
 8002828:	2b02      	cmp	r3, #2
 800282a:	dc37      	bgt.n	800289c <GPIO_voidSetPinOutputMode+0x8c>
 800282c:	2b00      	cmp	r3, #0
 800282e:	d002      	beq.n	8002836 <GPIO_voidSetPinOutputMode+0x26>
 8002830:	2b01      	cmp	r3, #1
 8002832:	d011      	beq.n	8002858 <GPIO_voidSetPinOutputMode+0x48>
    case GPIO_PORTC:
      MODIFY_REG(GPIOC_OTYPER, GPIO_OTYPER_CLEAR_MASK << Copy_PinIndex,
                 Copy_OutputPinMode << Copy_PinIndex);
      break;
    default:
      break;
 8002834:	e032      	b.n	800289c <GPIO_voidSetPinOutputMode+0x8c>
      MODIFY_REG(GPIOB_OTYPER, GPIO_OTYPER_CLEAR_MASK << Copy_PinIndex,
 8002836:	4b1d      	ldr	r3, [pc, #116]	; (80028ac <GPIO_voidSetPinOutputMode+0x9c>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	79ba      	ldrb	r2, [r7, #6]
 800283c:	2101      	movs	r1, #1
 800283e:	fa01 f202 	lsl.w	r2, r1, r2
 8002842:	43d2      	mvns	r2, r2
 8002844:	4013      	ands	r3, r2
 8002846:	7979      	ldrb	r1, [r7, #5]
 8002848:	79ba      	ldrb	r2, [r7, #6]
 800284a:	fa01 f202 	lsl.w	r2, r1, r2
 800284e:	4611      	mov	r1, r2
 8002850:	4a16      	ldr	r2, [pc, #88]	; (80028ac <GPIO_voidSetPinOutputMode+0x9c>)
 8002852:	430b      	orrs	r3, r1
 8002854:	6013      	str	r3, [r2, #0]
      break;
 8002856:	e022      	b.n	800289e <GPIO_voidSetPinOutputMode+0x8e>
      MODIFY_REG(GPIOB_OTYPER, GPIO_OTYPER_CLEAR_MASK << Copy_PinIndex,
 8002858:	4b14      	ldr	r3, [pc, #80]	; (80028ac <GPIO_voidSetPinOutputMode+0x9c>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	79ba      	ldrb	r2, [r7, #6]
 800285e:	2101      	movs	r1, #1
 8002860:	fa01 f202 	lsl.w	r2, r1, r2
 8002864:	43d2      	mvns	r2, r2
 8002866:	4013      	ands	r3, r2
 8002868:	7979      	ldrb	r1, [r7, #5]
 800286a:	79ba      	ldrb	r2, [r7, #6]
 800286c:	fa01 f202 	lsl.w	r2, r1, r2
 8002870:	4611      	mov	r1, r2
 8002872:	4a0e      	ldr	r2, [pc, #56]	; (80028ac <GPIO_voidSetPinOutputMode+0x9c>)
 8002874:	430b      	orrs	r3, r1
 8002876:	6013      	str	r3, [r2, #0]
      break;
 8002878:	e011      	b.n	800289e <GPIO_voidSetPinOutputMode+0x8e>
      MODIFY_REG(GPIOC_OTYPER, GPIO_OTYPER_CLEAR_MASK << Copy_PinIndex,
 800287a:	4b0d      	ldr	r3, [pc, #52]	; (80028b0 <GPIO_voidSetPinOutputMode+0xa0>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	79ba      	ldrb	r2, [r7, #6]
 8002880:	2101      	movs	r1, #1
 8002882:	fa01 f202 	lsl.w	r2, r1, r2
 8002886:	43d2      	mvns	r2, r2
 8002888:	4013      	ands	r3, r2
 800288a:	7979      	ldrb	r1, [r7, #5]
 800288c:	79ba      	ldrb	r2, [r7, #6]
 800288e:	fa01 f202 	lsl.w	r2, r1, r2
 8002892:	4611      	mov	r1, r2
 8002894:	4a06      	ldr	r2, [pc, #24]	; (80028b0 <GPIO_voidSetPinOutputMode+0xa0>)
 8002896:	430b      	orrs	r3, r1
 8002898:	6013      	str	r3, [r2, #0]
      break;
 800289a:	e000      	b.n	800289e <GPIO_voidSetPinOutputMode+0x8e>
      break;
 800289c:	bf00      	nop
  }
}
 800289e:	bf00      	nop
 80028a0:	370c      	adds	r7, #12
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr
 80028aa:	bf00      	nop
 80028ac:	40020404 	.word	0x40020404
 80028b0:	40020804 	.word	0x40020804

080028b4 <GPIO_voidSetPinAlternateFunction>:
void GPIO_voidSetPinAlternateFunction(port_index_t Copy_PortIndex, pin_index_t Copy_PinIndex, u8 Copy_u8AlternateFunction)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b083      	sub	sp, #12
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	4603      	mov	r3, r0
 80028bc:	71fb      	strb	r3, [r7, #7]
 80028be:	460b      	mov	r3, r1
 80028c0:	71bb      	strb	r3, [r7, #6]
 80028c2:	4613      	mov	r3, r2
 80028c4:	717b      	strb	r3, [r7, #5]
	switch (Copy_PortIndex) {
 80028c6:	79fb      	ldrb	r3, [r7, #7]
 80028c8:	2b02      	cmp	r3, #2
 80028ca:	d05d      	beq.n	8002988 <GPIO_voidSetPinAlternateFunction+0xd4>
 80028cc:	2b02      	cmp	r3, #2
 80028ce:	f300 8086 	bgt.w	80029de <GPIO_voidSetPinAlternateFunction+0x12a>
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d002      	beq.n	80028dc <GPIO_voidSetPinAlternateFunction+0x28>
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d02b      	beq.n	8002932 <GPIO_voidSetPinAlternateFunction+0x7e>
	    		MODIFY_REG(GPIOC_AFRH, GPIO_AF_CLEAR_MASK << (Copy_PinIndex-8) * GPIO_AF_PIN_BITS,
	    				Copy_u8AlternateFunction << (Copy_PinIndex-8) * GPIO_AF_PIN_BITS);
	    	}
	      break;
	    default:
	      break;
 80028da:	e080      	b.n	80029de <GPIO_voidSetPinAlternateFunction+0x12a>
             if(Copy_PinIndex < 8)
 80028dc:	79bb      	ldrb	r3, [r7, #6]
 80028de:	2b07      	cmp	r3, #7
 80028e0:	d812      	bhi.n	8002908 <GPIO_voidSetPinAlternateFunction+0x54>
            	 MODIFY_REG(GPIOA_AFRL, GPIO_AF_CLEAR_MASK << Copy_PinIndex * GPIO_AF_PIN_BITS,
 80028e2:	4b42      	ldr	r3, [pc, #264]	; (80029ec <GPIO_voidSetPinAlternateFunction+0x138>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	79ba      	ldrb	r2, [r7, #6]
 80028e8:	0092      	lsls	r2, r2, #2
 80028ea:	210f      	movs	r1, #15
 80028ec:	fa01 f202 	lsl.w	r2, r1, r2
 80028f0:	43d2      	mvns	r2, r2
 80028f2:	4013      	ands	r3, r2
 80028f4:	7979      	ldrb	r1, [r7, #5]
 80028f6:	79ba      	ldrb	r2, [r7, #6]
 80028f8:	0092      	lsls	r2, r2, #2
 80028fa:	fa01 f202 	lsl.w	r2, r1, r2
 80028fe:	4611      	mov	r1, r2
 8002900:	4a3a      	ldr	r2, [pc, #232]	; (80029ec <GPIO_voidSetPinAlternateFunction+0x138>)
 8002902:	430b      	orrs	r3, r1
 8002904:	6013      	str	r3, [r2, #0]
	      break;
 8002906:	e06b      	b.n	80029e0 <GPIO_voidSetPinAlternateFunction+0x12c>
            	 MODIFY_REG(GPIOA_AFRH, GPIO_AF_CLEAR_MASK << (Copy_PinIndex-8) * GPIO_AF_PIN_BITS,
 8002908:	4b39      	ldr	r3, [pc, #228]	; (80029f0 <GPIO_voidSetPinAlternateFunction+0x13c>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	79ba      	ldrb	r2, [r7, #6]
 800290e:	3a08      	subs	r2, #8
 8002910:	0092      	lsls	r2, r2, #2
 8002912:	210f      	movs	r1, #15
 8002914:	fa01 f202 	lsl.w	r2, r1, r2
 8002918:	43d2      	mvns	r2, r2
 800291a:	4013      	ands	r3, r2
 800291c:	7979      	ldrb	r1, [r7, #5]
 800291e:	79ba      	ldrb	r2, [r7, #6]
 8002920:	3a08      	subs	r2, #8
 8002922:	0092      	lsls	r2, r2, #2
 8002924:	fa01 f202 	lsl.w	r2, r1, r2
 8002928:	4611      	mov	r1, r2
 800292a:	4a31      	ldr	r2, [pc, #196]	; (80029f0 <GPIO_voidSetPinAlternateFunction+0x13c>)
 800292c:	430b      	orrs	r3, r1
 800292e:	6013      	str	r3, [r2, #0]
	      break;
 8002930:	e056      	b.n	80029e0 <GPIO_voidSetPinAlternateFunction+0x12c>
	    	if(Copy_PinIndex < 8)
 8002932:	79bb      	ldrb	r3, [r7, #6]
 8002934:	2b07      	cmp	r3, #7
 8002936:	d812      	bhi.n	800295e <GPIO_voidSetPinAlternateFunction+0xaa>
	    		MODIFY_REG(GPIOB_AFRL, GPIO_AF_CLEAR_MASK << Copy_PinIndex * GPIO_AF_PIN_BITS,
 8002938:	4b2e      	ldr	r3, [pc, #184]	; (80029f4 <GPIO_voidSetPinAlternateFunction+0x140>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	79ba      	ldrb	r2, [r7, #6]
 800293e:	0092      	lsls	r2, r2, #2
 8002940:	210f      	movs	r1, #15
 8002942:	fa01 f202 	lsl.w	r2, r1, r2
 8002946:	43d2      	mvns	r2, r2
 8002948:	4013      	ands	r3, r2
 800294a:	7979      	ldrb	r1, [r7, #5]
 800294c:	79ba      	ldrb	r2, [r7, #6]
 800294e:	0092      	lsls	r2, r2, #2
 8002950:	fa01 f202 	lsl.w	r2, r1, r2
 8002954:	4611      	mov	r1, r2
 8002956:	4a27      	ldr	r2, [pc, #156]	; (80029f4 <GPIO_voidSetPinAlternateFunction+0x140>)
 8002958:	430b      	orrs	r3, r1
 800295a:	6013      	str	r3, [r2, #0]
	      break;
 800295c:	e040      	b.n	80029e0 <GPIO_voidSetPinAlternateFunction+0x12c>
	    		MODIFY_REG(GPIOB_AFRH, GPIO_AF_CLEAR_MASK << (Copy_PinIndex-8) * GPIO_AF_PIN_BITS,
 800295e:	4b26      	ldr	r3, [pc, #152]	; (80029f8 <GPIO_voidSetPinAlternateFunction+0x144>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	79ba      	ldrb	r2, [r7, #6]
 8002964:	3a08      	subs	r2, #8
 8002966:	0092      	lsls	r2, r2, #2
 8002968:	210f      	movs	r1, #15
 800296a:	fa01 f202 	lsl.w	r2, r1, r2
 800296e:	43d2      	mvns	r2, r2
 8002970:	4013      	ands	r3, r2
 8002972:	7979      	ldrb	r1, [r7, #5]
 8002974:	79ba      	ldrb	r2, [r7, #6]
 8002976:	3a08      	subs	r2, #8
 8002978:	0092      	lsls	r2, r2, #2
 800297a:	fa01 f202 	lsl.w	r2, r1, r2
 800297e:	4611      	mov	r1, r2
 8002980:	4a1d      	ldr	r2, [pc, #116]	; (80029f8 <GPIO_voidSetPinAlternateFunction+0x144>)
 8002982:	430b      	orrs	r3, r1
 8002984:	6013      	str	r3, [r2, #0]
	      break;
 8002986:	e02b      	b.n	80029e0 <GPIO_voidSetPinAlternateFunction+0x12c>
	    	if(Copy_PinIndex < 8)
 8002988:	79bb      	ldrb	r3, [r7, #6]
 800298a:	2b07      	cmp	r3, #7
 800298c:	d812      	bhi.n	80029b4 <GPIO_voidSetPinAlternateFunction+0x100>
	    		MODIFY_REG(GPIOC_AFRL, GPIO_AF_CLEAR_MASK << Copy_PinIndex * GPIO_AF_PIN_BITS,
 800298e:	4b1b      	ldr	r3, [pc, #108]	; (80029fc <GPIO_voidSetPinAlternateFunction+0x148>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	79ba      	ldrb	r2, [r7, #6]
 8002994:	0092      	lsls	r2, r2, #2
 8002996:	210f      	movs	r1, #15
 8002998:	fa01 f202 	lsl.w	r2, r1, r2
 800299c:	43d2      	mvns	r2, r2
 800299e:	4013      	ands	r3, r2
 80029a0:	7979      	ldrb	r1, [r7, #5]
 80029a2:	79ba      	ldrb	r2, [r7, #6]
 80029a4:	0092      	lsls	r2, r2, #2
 80029a6:	fa01 f202 	lsl.w	r2, r1, r2
 80029aa:	4611      	mov	r1, r2
 80029ac:	4a13      	ldr	r2, [pc, #76]	; (80029fc <GPIO_voidSetPinAlternateFunction+0x148>)
 80029ae:	430b      	orrs	r3, r1
 80029b0:	6013      	str	r3, [r2, #0]
	      break;
 80029b2:	e015      	b.n	80029e0 <GPIO_voidSetPinAlternateFunction+0x12c>
	    		MODIFY_REG(GPIOC_AFRH, GPIO_AF_CLEAR_MASK << (Copy_PinIndex-8) * GPIO_AF_PIN_BITS,
 80029b4:	4b12      	ldr	r3, [pc, #72]	; (8002a00 <GPIO_voidSetPinAlternateFunction+0x14c>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	79ba      	ldrb	r2, [r7, #6]
 80029ba:	3a08      	subs	r2, #8
 80029bc:	0092      	lsls	r2, r2, #2
 80029be:	210f      	movs	r1, #15
 80029c0:	fa01 f202 	lsl.w	r2, r1, r2
 80029c4:	43d2      	mvns	r2, r2
 80029c6:	4013      	ands	r3, r2
 80029c8:	7979      	ldrb	r1, [r7, #5]
 80029ca:	79ba      	ldrb	r2, [r7, #6]
 80029cc:	3a08      	subs	r2, #8
 80029ce:	0092      	lsls	r2, r2, #2
 80029d0:	fa01 f202 	lsl.w	r2, r1, r2
 80029d4:	4611      	mov	r1, r2
 80029d6:	4a0a      	ldr	r2, [pc, #40]	; (8002a00 <GPIO_voidSetPinAlternateFunction+0x14c>)
 80029d8:	430b      	orrs	r3, r1
 80029da:	6013      	str	r3, [r2, #0]
	      break;
 80029dc:	e000      	b.n	80029e0 <GPIO_voidSetPinAlternateFunction+0x12c>
	      break;
 80029de:	bf00      	nop
	  }
}
 80029e0:	bf00      	nop
 80029e2:	370c      	adds	r7, #12
 80029e4:	46bd      	mov	sp, r7
 80029e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ea:	4770      	bx	lr
 80029ec:	40020020 	.word	0x40020020
 80029f0:	40020024 	.word	0x40020024
 80029f4:	40020420 	.word	0x40020420
 80029f8:	40020424 	.word	0x40020424
 80029fc:	40020820 	.word	0x40020820
 8002a00:	40020824 	.word	0x40020824

08002a04 <GPIO_voidSetPinOutputSpeed>:
void GPIO_voidSetPinOutputSpeed(port_index_t Copy_PortIndex,
                                pin_index_t Copy_PinIndex,
                                output_pin_speed_mode_t Copy_OutputPinSpeed) {
 8002a04:	b480      	push	{r7}
 8002a06:	b083      	sub	sp, #12
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	71fb      	strb	r3, [r7, #7]
 8002a0e:	460b      	mov	r3, r1
 8002a10:	71bb      	strb	r3, [r7, #6]
 8002a12:	4613      	mov	r3, r2
 8002a14:	717b      	strb	r3, [r7, #5]
  switch (Copy_PortIndex) {
 8002a16:	79fb      	ldrb	r3, [r7, #7]
 8002a18:	2b02      	cmp	r3, #2
 8002a1a:	d02c      	beq.n	8002a76 <GPIO_voidSetPinOutputSpeed+0x72>
 8002a1c:	2b02      	cmp	r3, #2
 8002a1e:	dc3d      	bgt.n	8002a9c <GPIO_voidSetPinOutputSpeed+0x98>
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d002      	beq.n	8002a2a <GPIO_voidSetPinOutputSpeed+0x26>
 8002a24:	2b01      	cmp	r3, #1
 8002a26:	d013      	beq.n	8002a50 <GPIO_voidSetPinOutputSpeed+0x4c>
      MODIFY_REG(GPIOC_OSPEEDR,
                 GPIO_MODER_CLEAR_MASK << GPIO_OSPEEDR_PIN_BITS * Copy_PinIndex,
                 Copy_OutputPinSpeed << GPIO_OSPEEDR_PIN_BITS * Copy_PinIndex);
      break;
    default:
      break;
 8002a28:	e038      	b.n	8002a9c <GPIO_voidSetPinOutputSpeed+0x98>
      MODIFY_REG(
 8002a2a:	4b20      	ldr	r3, [pc, #128]	; (8002aac <GPIO_voidSetPinOutputSpeed+0xa8>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	79ba      	ldrb	r2, [r7, #6]
 8002a30:	0052      	lsls	r2, r2, #1
 8002a32:	2103      	movs	r1, #3
 8002a34:	fa01 f202 	lsl.w	r2, r1, r2
 8002a38:	43d2      	mvns	r2, r2
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	7979      	ldrb	r1, [r7, #5]
 8002a3e:	79ba      	ldrb	r2, [r7, #6]
 8002a40:	0052      	lsls	r2, r2, #1
 8002a42:	fa01 f202 	lsl.w	r2, r1, r2
 8002a46:	4611      	mov	r1, r2
 8002a48:	4a18      	ldr	r2, [pc, #96]	; (8002aac <GPIO_voidSetPinOutputSpeed+0xa8>)
 8002a4a:	430b      	orrs	r3, r1
 8002a4c:	6013      	str	r3, [r2, #0]
      break;
 8002a4e:	e026      	b.n	8002a9e <GPIO_voidSetPinOutputSpeed+0x9a>
      MODIFY_REG(
 8002a50:	4b17      	ldr	r3, [pc, #92]	; (8002ab0 <GPIO_voidSetPinOutputSpeed+0xac>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	79ba      	ldrb	r2, [r7, #6]
 8002a56:	0052      	lsls	r2, r2, #1
 8002a58:	2103      	movs	r1, #3
 8002a5a:	fa01 f202 	lsl.w	r2, r1, r2
 8002a5e:	43d2      	mvns	r2, r2
 8002a60:	4013      	ands	r3, r2
 8002a62:	7979      	ldrb	r1, [r7, #5]
 8002a64:	79ba      	ldrb	r2, [r7, #6]
 8002a66:	0052      	lsls	r2, r2, #1
 8002a68:	fa01 f202 	lsl.w	r2, r1, r2
 8002a6c:	4611      	mov	r1, r2
 8002a6e:	4a10      	ldr	r2, [pc, #64]	; (8002ab0 <GPIO_voidSetPinOutputSpeed+0xac>)
 8002a70:	430b      	orrs	r3, r1
 8002a72:	6013      	str	r3, [r2, #0]
      break;
 8002a74:	e013      	b.n	8002a9e <GPIO_voidSetPinOutputSpeed+0x9a>
      MODIFY_REG(GPIOC_OSPEEDR,
 8002a76:	4b0f      	ldr	r3, [pc, #60]	; (8002ab4 <GPIO_voidSetPinOutputSpeed+0xb0>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	79ba      	ldrb	r2, [r7, #6]
 8002a7c:	0052      	lsls	r2, r2, #1
 8002a7e:	2103      	movs	r1, #3
 8002a80:	fa01 f202 	lsl.w	r2, r1, r2
 8002a84:	43d2      	mvns	r2, r2
 8002a86:	4013      	ands	r3, r2
 8002a88:	7979      	ldrb	r1, [r7, #5]
 8002a8a:	79ba      	ldrb	r2, [r7, #6]
 8002a8c:	0052      	lsls	r2, r2, #1
 8002a8e:	fa01 f202 	lsl.w	r2, r1, r2
 8002a92:	4611      	mov	r1, r2
 8002a94:	4a07      	ldr	r2, [pc, #28]	; (8002ab4 <GPIO_voidSetPinOutputSpeed+0xb0>)
 8002a96:	430b      	orrs	r3, r1
 8002a98:	6013      	str	r3, [r2, #0]
      break;
 8002a9a:	e000      	b.n	8002a9e <GPIO_voidSetPinOutputSpeed+0x9a>
      break;
 8002a9c:	bf00      	nop
  }
}
 8002a9e:	bf00      	nop
 8002aa0:	370c      	adds	r7, #12
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr
 8002aaa:	bf00      	nop
 8002aac:	40020008 	.word	0x40020008
 8002ab0:	40020408 	.word	0x40020408
 8002ab4:	40020808 	.word	0x40020808

08002ab8 <GPIO_voidSetPinValue>:
void GPIO_voidSetPinValue(port_index_t Copy_PortIndex,
                          pin_index_t Copy_PinIndex,
                          gpio_logic_t Copy_GPIOLogic) {
 8002ab8:	b480      	push	{r7}
 8002aba:	b083      	sub	sp, #12
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	4603      	mov	r3, r0
 8002ac0:	71fb      	strb	r3, [r7, #7]
 8002ac2:	460b      	mov	r3, r1
 8002ac4:	71bb      	strb	r3, [r7, #6]
 8002ac6:	4613      	mov	r3, r2
 8002ac8:	717b      	strb	r3, [r7, #5]
  switch (Copy_PortIndex) {
 8002aca:	79fb      	ldrb	r3, [r7, #7]
 8002acc:	2b02      	cmp	r3, #2
 8002ace:	d02c      	beq.n	8002b2a <GPIO_voidSetPinValue+0x72>
 8002ad0:	2b02      	cmp	r3, #2
 8002ad2:	dc3d      	bgt.n	8002b50 <GPIO_voidSetPinValue+0x98>
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d002      	beq.n	8002ade <GPIO_voidSetPinValue+0x26>
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d013      	beq.n	8002b04 <GPIO_voidSetPinValue+0x4c>
        WRITE_REG(GPIOC_BSRR, GPIO_RESET_BIT_POS << Copy_PinIndex);
      } else { /* Nothing */
      }
      break;
    default:
      break;
 8002adc:	e038      	b.n	8002b50 <GPIO_voidSetPinValue+0x98>
      if (Copy_GPIOLogic == GPIO_HIGH) {
 8002ade:	797b      	ldrb	r3, [r7, #5]
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d105      	bne.n	8002af0 <GPIO_voidSetPinValue+0x38>
        WRITE_REG(GPIOA_BSRR, GPIO_SET_BIT_POS << Copy_PinIndex);
 8002ae4:	79bb      	ldrb	r3, [r7, #6]
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	409a      	lsls	r2, r3
 8002aea:	4b20      	ldr	r3, [pc, #128]	; (8002b6c <GPIO_voidSetPinValue+0xb4>)
 8002aec:	601a      	str	r2, [r3, #0]
      break;
 8002aee:	e031      	b.n	8002b54 <GPIO_voidSetPinValue+0x9c>
      } else if (Copy_GPIOLogic == GPIO_LOW) {
 8002af0:	797b      	ldrb	r3, [r7, #5]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d12e      	bne.n	8002b54 <GPIO_voidSetPinValue+0x9c>
        WRITE_REG(GPIOA_BSRR, GPIO_RESET_BIT_POS << Copy_PinIndex);
 8002af6:	79bb      	ldrb	r3, [r7, #6]
 8002af8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002afc:	409a      	lsls	r2, r3
 8002afe:	4b1b      	ldr	r3, [pc, #108]	; (8002b6c <GPIO_voidSetPinValue+0xb4>)
 8002b00:	601a      	str	r2, [r3, #0]
      break;
 8002b02:	e027      	b.n	8002b54 <GPIO_voidSetPinValue+0x9c>
      if (Copy_GPIOLogic == GPIO_HIGH) {
 8002b04:	797b      	ldrb	r3, [r7, #5]
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	d105      	bne.n	8002b16 <GPIO_voidSetPinValue+0x5e>
        WRITE_REG(GPIOB_BSRR, GPIO_SET_BIT_POS << Copy_PinIndex);
 8002b0a:	79bb      	ldrb	r3, [r7, #6]
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	409a      	lsls	r2, r3
 8002b10:	4b17      	ldr	r3, [pc, #92]	; (8002b70 <GPIO_voidSetPinValue+0xb8>)
 8002b12:	601a      	str	r2, [r3, #0]
      break;
 8002b14:	e020      	b.n	8002b58 <GPIO_voidSetPinValue+0xa0>
      } else if (Copy_GPIOLogic == GPIO_LOW) {
 8002b16:	797b      	ldrb	r3, [r7, #5]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d11d      	bne.n	8002b58 <GPIO_voidSetPinValue+0xa0>
        WRITE_REG(GPIOB_BSRR, GPIO_RESET_BIT_POS << Copy_PinIndex);
 8002b1c:	79bb      	ldrb	r3, [r7, #6]
 8002b1e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002b22:	409a      	lsls	r2, r3
 8002b24:	4b12      	ldr	r3, [pc, #72]	; (8002b70 <GPIO_voidSetPinValue+0xb8>)
 8002b26:	601a      	str	r2, [r3, #0]
      break;
 8002b28:	e016      	b.n	8002b58 <GPIO_voidSetPinValue+0xa0>
      if (Copy_GPIOLogic == GPIO_HIGH) {
 8002b2a:	797b      	ldrb	r3, [r7, #5]
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	d105      	bne.n	8002b3c <GPIO_voidSetPinValue+0x84>
        WRITE_REG(GPIOC_BSRR, GPIO_SET_BIT_POS << Copy_PinIndex);
 8002b30:	79bb      	ldrb	r3, [r7, #6]
 8002b32:	2201      	movs	r2, #1
 8002b34:	409a      	lsls	r2, r3
 8002b36:	4b0f      	ldr	r3, [pc, #60]	; (8002b74 <GPIO_voidSetPinValue+0xbc>)
 8002b38:	601a      	str	r2, [r3, #0]
      break;
 8002b3a:	e00f      	b.n	8002b5c <GPIO_voidSetPinValue+0xa4>
      } else if (Copy_GPIOLogic == GPIO_LOW) {
 8002b3c:	797b      	ldrb	r3, [r7, #5]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d10c      	bne.n	8002b5c <GPIO_voidSetPinValue+0xa4>
        WRITE_REG(GPIOC_BSRR, GPIO_RESET_BIT_POS << Copy_PinIndex);
 8002b42:	79bb      	ldrb	r3, [r7, #6]
 8002b44:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002b48:	409a      	lsls	r2, r3
 8002b4a:	4b0a      	ldr	r3, [pc, #40]	; (8002b74 <GPIO_voidSetPinValue+0xbc>)
 8002b4c:	601a      	str	r2, [r3, #0]
      break;
 8002b4e:	e005      	b.n	8002b5c <GPIO_voidSetPinValue+0xa4>
      break;
 8002b50:	bf00      	nop
 8002b52:	e004      	b.n	8002b5e <GPIO_voidSetPinValue+0xa6>
      break;
 8002b54:	bf00      	nop
 8002b56:	e002      	b.n	8002b5e <GPIO_voidSetPinValue+0xa6>
      break;
 8002b58:	bf00      	nop
 8002b5a:	e000      	b.n	8002b5e <GPIO_voidSetPinValue+0xa6>
      break;
 8002b5c:	bf00      	nop
  }
}
 8002b5e:	bf00      	nop
 8002b60:	370c      	adds	r7, #12
 8002b62:	46bd      	mov	sp, r7
 8002b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b68:	4770      	bx	lr
 8002b6a:	bf00      	nop
 8002b6c:	40020018 	.word	0x40020018
 8002b70:	40020418 	.word	0x40020418
 8002b74:	40020818 	.word	0x40020818

08002b78 <GPIO_voidSetPinPullUpDownResistor>:
void GPIO_voidSetPinPullUpDownResistor(port_index_t Copy_PortIndex,
                                       pin_index_t Copy_PinIndex,
                                       input_pin_mode_t Copy_InputPinMode) {
 8002b78:	b480      	push	{r7}
 8002b7a:	b083      	sub	sp, #12
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	4603      	mov	r3, r0
 8002b80:	71fb      	strb	r3, [r7, #7]
 8002b82:	460b      	mov	r3, r1
 8002b84:	71bb      	strb	r3, [r7, #6]
 8002b86:	4613      	mov	r3, r2
 8002b88:	717b      	strb	r3, [r7, #5]
  switch (Copy_PortIndex) {
 8002b8a:	79fb      	ldrb	r3, [r7, #7]
 8002b8c:	2b02      	cmp	r3, #2
 8002b8e:	d02c      	beq.n	8002bea <GPIO_voidSetPinPullUpDownResistor+0x72>
 8002b90:	2b02      	cmp	r3, #2
 8002b92:	dc3d      	bgt.n	8002c10 <GPIO_voidSetPinPullUpDownResistor+0x98>
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d002      	beq.n	8002b9e <GPIO_voidSetPinPullUpDownResistor+0x26>
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d013      	beq.n	8002bc4 <GPIO_voidSetPinPullUpDownResistor+0x4c>
      MODIFY_REG(GPIOC_PUPDR,
                 GPIO_PUPDR_CLEAR_MASK << GPIO_PUPDR_PIN_BITS * Copy_PinIndex,
                 Copy_InputPinMode << GPIO_PUPDR_PIN_BITS * Copy_PinIndex);
      break;
    default:
      break;
 8002b9c:	e038      	b.n	8002c10 <GPIO_voidSetPinPullUpDownResistor+0x98>
      MODIFY_REG(GPIOA_PUPDR,
 8002b9e:	4b20      	ldr	r3, [pc, #128]	; (8002c20 <GPIO_voidSetPinPullUpDownResistor+0xa8>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	79ba      	ldrb	r2, [r7, #6]
 8002ba4:	0052      	lsls	r2, r2, #1
 8002ba6:	2103      	movs	r1, #3
 8002ba8:	fa01 f202 	lsl.w	r2, r1, r2
 8002bac:	43d2      	mvns	r2, r2
 8002bae:	4013      	ands	r3, r2
 8002bb0:	7979      	ldrb	r1, [r7, #5]
 8002bb2:	79ba      	ldrb	r2, [r7, #6]
 8002bb4:	0052      	lsls	r2, r2, #1
 8002bb6:	fa01 f202 	lsl.w	r2, r1, r2
 8002bba:	4611      	mov	r1, r2
 8002bbc:	4a18      	ldr	r2, [pc, #96]	; (8002c20 <GPIO_voidSetPinPullUpDownResistor+0xa8>)
 8002bbe:	430b      	orrs	r3, r1
 8002bc0:	6013      	str	r3, [r2, #0]
      break;
 8002bc2:	e026      	b.n	8002c12 <GPIO_voidSetPinPullUpDownResistor+0x9a>
      MODIFY_REG(GPIOB_PUPDR,
 8002bc4:	4b17      	ldr	r3, [pc, #92]	; (8002c24 <GPIO_voidSetPinPullUpDownResistor+0xac>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	79ba      	ldrb	r2, [r7, #6]
 8002bca:	0052      	lsls	r2, r2, #1
 8002bcc:	2103      	movs	r1, #3
 8002bce:	fa01 f202 	lsl.w	r2, r1, r2
 8002bd2:	43d2      	mvns	r2, r2
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	7979      	ldrb	r1, [r7, #5]
 8002bd8:	79ba      	ldrb	r2, [r7, #6]
 8002bda:	0052      	lsls	r2, r2, #1
 8002bdc:	fa01 f202 	lsl.w	r2, r1, r2
 8002be0:	4611      	mov	r1, r2
 8002be2:	4a10      	ldr	r2, [pc, #64]	; (8002c24 <GPIO_voidSetPinPullUpDownResistor+0xac>)
 8002be4:	430b      	orrs	r3, r1
 8002be6:	6013      	str	r3, [r2, #0]
      break;
 8002be8:	e013      	b.n	8002c12 <GPIO_voidSetPinPullUpDownResistor+0x9a>
      MODIFY_REG(GPIOC_PUPDR,
 8002bea:	4b0f      	ldr	r3, [pc, #60]	; (8002c28 <GPIO_voidSetPinPullUpDownResistor+0xb0>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	79ba      	ldrb	r2, [r7, #6]
 8002bf0:	0052      	lsls	r2, r2, #1
 8002bf2:	2103      	movs	r1, #3
 8002bf4:	fa01 f202 	lsl.w	r2, r1, r2
 8002bf8:	43d2      	mvns	r2, r2
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	7979      	ldrb	r1, [r7, #5]
 8002bfe:	79ba      	ldrb	r2, [r7, #6]
 8002c00:	0052      	lsls	r2, r2, #1
 8002c02:	fa01 f202 	lsl.w	r2, r1, r2
 8002c06:	4611      	mov	r1, r2
 8002c08:	4a07      	ldr	r2, [pc, #28]	; (8002c28 <GPIO_voidSetPinPullUpDownResistor+0xb0>)
 8002c0a:	430b      	orrs	r3, r1
 8002c0c:	6013      	str	r3, [r2, #0]
      break;
 8002c0e:	e000      	b.n	8002c12 <GPIO_voidSetPinPullUpDownResistor+0x9a>
      break;
 8002c10:	bf00      	nop
  }
}
 8002c12:	bf00      	nop
 8002c14:	370c      	adds	r7, #12
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr
 8002c1e:	bf00      	nop
 8002c20:	4002000c 	.word	0x4002000c
 8002c24:	4002040c 	.word	0x4002040c
 8002c28:	4002080c 	.word	0x4002080c

08002c2c <MNVIC_voidEnableIRQ>:
{
	MSCB_voidSetPriorityGrouping();
}

void MNVIC_voidEnableIRQ(IRQn_Type IRQn)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b083      	sub	sp, #12
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	4603      	mov	r3, r0
 8002c34:	71fb      	strb	r3, [r7, #7]
	if(IRQn >=0)
 8002c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	db0b      	blt.n	8002c56 <MNVIC_voidEnableIRQ+0x2a>
	{
		NVIC->ISER[((u32)IRQn >> 5)] = (1UL << ((u32)IRQn & 0x1F));
 8002c3e:	79fb      	ldrb	r3, [r7, #7]
 8002c40:	f003 021f 	and.w	r2, r3, #31
 8002c44:	4907      	ldr	r1, [pc, #28]	; (8002c64 <MNVIC_voidEnableIRQ+0x38>)
 8002c46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c4a:	095b      	lsrs	r3, r3, #5
 8002c4c:	2001      	movs	r0, #1
 8002c4e:	fa00 f202 	lsl.w	r2, r0, r2
 8002c52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}
}
 8002c56:	bf00      	nop
 8002c58:	370c      	adds	r7, #12
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr
 8002c62:	bf00      	nop
 8002c64:	e000e100 	.word	0xe000e100

08002c68 <MNVIC_voidSetPriority>:
	}
	else return 0;
}

void MNVIC_voidSetPriority(IRQn_Type IRQn, u32 Priority)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b083      	sub	sp, #12
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	4603      	mov	r3, r0
 8002c70:	6039      	str	r1, [r7, #0]
 8002c72:	71fb      	strb	r3, [r7, #7]
	if(IRQn >=0)
 8002c74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	db09      	blt.n	8002c90 <MNVIC_voidSetPriority+0x28>
	{
		NVIC->IP[(u32)IRQn] = (u8)(Priority << (8 - NVIC_PRIO_BITS));
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	b2da      	uxtb	r2, r3
 8002c80:	4906      	ldr	r1, [pc, #24]	; (8002c9c <MNVIC_voidSetPriority+0x34>)
 8002c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c86:	0112      	lsls	r2, r2, #4
 8002c88:	b2d2      	uxtb	r2, r2
 8002c8a:	440b      	add	r3, r1
 8002c8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
	}
	else
	{
		/*Nothing*/
	}
}
 8002c90:	bf00      	nop
 8002c92:	370c      	adds	r7, #12
 8002c94:	46bd      	mov	sp, r7
 8002c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9a:	4770      	bx	lr
 8002c9c:	e000e100 	.word	0xe000e100

08002ca0 <RCC_void_PLL_Init>:
    while (GET_BIT(RCC_CR,RCC_CR_HSERDY_Pos) == 0);
    SET_BIT(RCC_CFGR,RCC_CFGR_SW0_Pos);
    CLR_BIT(RCC_CFGR,RCC_CFGR_SW1_Pos);
}
static void RCC_void_PLL_Init(void)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	af00      	add	r7, sp, #0
    /**Must Disable PLL & PLLI2S FIRST**/
    CLR_BIT(RCC_CR,RCC_CR_PLLON_Pos);
 8002ca4:	4b2a      	ldr	r3, [pc, #168]	; (8002d50 <RCC_void_PLL_Init+0xb0>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a29      	ldr	r2, [pc, #164]	; (8002d50 <RCC_void_PLL_Init+0xb0>)
 8002caa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002cae:	6013      	str	r3, [r2, #0]
    CLR_BIT(RCC_CR,RCC_CR_PLLI2SON_Pos);
 8002cb0:	4b27      	ldr	r3, [pc, #156]	; (8002d50 <RCC_void_PLL_Init+0xb0>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a26      	ldr	r2, [pc, #152]	; (8002d50 <RCC_void_PLL_Init+0xb0>)
 8002cb6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002cba:	6013      	str	r3, [r2, #0]
    /**RCC_PLLN_CFG**/
    RCC_PLLCFGR &=~(RCC_PLLN_MASK);
 8002cbc:	4b25      	ldr	r3, [pc, #148]	; (8002d54 <RCC_void_PLL_Init+0xb4>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a24      	ldr	r2, [pc, #144]	; (8002d54 <RCC_void_PLL_Init+0xb4>)
 8002cc2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002cc6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002cca:	6013      	str	r3, [r2, #0]
    RCC_PLLCFGR |=(RCC_PLLN_VALUE<<RCC_PLLCFGR_PLLN_Pos);
 8002ccc:	4b21      	ldr	r3, [pc, #132]	; (8002d54 <RCC_void_PLL_Init+0xb4>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a20      	ldr	r2, [pc, #128]	; (8002d54 <RCC_void_PLL_Init+0xb4>)
 8002cd2:	f443 5328 	orr.w	r3, r3, #10752	; 0x2a00
 8002cd6:	6013      	str	r3, [r2, #0]
    /** RCC_PLLM_CFG**/
    RCC_PLLCFGR &=~(RCC_PLLM_MASK);
 8002cd8:	4b1e      	ldr	r3, [pc, #120]	; (8002d54 <RCC_void_PLL_Init+0xb4>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a1d      	ldr	r2, [pc, #116]	; (8002d54 <RCC_void_PLL_Init+0xb4>)
 8002cde:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002ce2:	6013      	str	r3, [r2, #0]
    RCC_PLLCFGR |=(RCC_PLLM_VALUE<<RCC_PLLCFGR_PLLM0_Pos);
 8002ce4:	4b1b      	ldr	r3, [pc, #108]	; (8002d54 <RCC_void_PLL_Init+0xb4>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a1a      	ldr	r2, [pc, #104]	; (8002d54 <RCC_void_PLL_Init+0xb4>)
 8002cea:	f043 0319 	orr.w	r3, r3, #25
 8002cee:	6013      	str	r3, [r2, #0]
    /** RCC_PLLP_CFG**/
    RCC_PLLCFGR &=~(RCC_PLLP_MASK);
 8002cf0:	4b18      	ldr	r3, [pc, #96]	; (8002d54 <RCC_void_PLL_Init+0xb4>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a17      	ldr	r2, [pc, #92]	; (8002d54 <RCC_void_PLL_Init+0xb4>)
 8002cf6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002cfa:	6013      	str	r3, [r2, #0]
    RCC_PLLCFGR |= RCC_PLLP_VALUE;
 8002cfc:	4b15      	ldr	r3, [pc, #84]	; (8002d54 <RCC_void_PLL_Init+0xb4>)
 8002cfe:	4a15      	ldr	r2, [pc, #84]	; (8002d54 <RCC_void_PLL_Init+0xb4>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	6013      	str	r3, [r2, #0]
    /* Enabling RCC_PLL_CLK */
    #if RCC_CLK_PLL_SRC == RCC_CLK_HSI
        CLR_BIT(RCC_PLLCFGR,RCC_PLLCFGR_PLLSRC_Pos);
    #elif RCC_CLK_PLL_SRC == RCC_CLK_HSE
        SET_BIT(RCC_PLLCFGR,RCC_PLLCFGR_PLLSRC_Pos);
 8002d04:	4b13      	ldr	r3, [pc, #76]	; (8002d54 <RCC_void_PLL_Init+0xb4>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a12      	ldr	r2, [pc, #72]	; (8002d54 <RCC_void_PLL_Init+0xb4>)
 8002d0a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002d0e:	6013      	str	r3, [r2, #0]
    #else
    #endif
    SET_BIT(RCC_CR,RCC_CR_HSEON_Pos); // Disable HSE
 8002d10:	4b0f      	ldr	r3, [pc, #60]	; (8002d50 <RCC_void_PLL_Init+0xb0>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a0e      	ldr	r2, [pc, #56]	; (8002d50 <RCC_void_PLL_Init+0xb0>)
 8002d16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d1a:	6013      	str	r3, [r2, #0]
    SET_BIT(RCC_CR,RCC_CR_PLLON_Pos); // Enable PLL
 8002d1c:	4b0c      	ldr	r3, [pc, #48]	; (8002d50 <RCC_void_PLL_Init+0xb0>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a0b      	ldr	r2, [pc, #44]	; (8002d50 <RCC_void_PLL_Init+0xb0>)
 8002d22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d26:	6013      	str	r3, [r2, #0]
    FPEC->ACR = 0x02;
 8002d28:	4b0b      	ldr	r3, [pc, #44]	; (8002d58 <RCC_void_PLL_Init+0xb8>)
 8002d2a:	2202      	movs	r2, #2
 8002d2c:	601a      	str	r2, [r3, #0]
    CLR_BIT(RCC_CFGR,RCC_CFGR_SW0_Pos);
 8002d2e:	4b0b      	ldr	r3, [pc, #44]	; (8002d5c <RCC_void_PLL_Init+0xbc>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a0a      	ldr	r2, [pc, #40]	; (8002d5c <RCC_void_PLL_Init+0xbc>)
 8002d34:	f023 0301 	bic.w	r3, r3, #1
 8002d38:	6013      	str	r3, [r2, #0]
    SET_BIT(RCC_CFGR,RCC_CFGR_SW1_Pos); 
 8002d3a:	4b08      	ldr	r3, [pc, #32]	; (8002d5c <RCC_void_PLL_Init+0xbc>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a07      	ldr	r2, [pc, #28]	; (8002d5c <RCC_void_PLL_Init+0xbc>)
 8002d40:	f043 0302 	orr.w	r3, r3, #2
 8002d44:	6013      	str	r3, [r2, #0]
}
 8002d46:	bf00      	nop
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr
 8002d50:	40023800 	.word	0x40023800
 8002d54:	40023804 	.word	0x40023804
 8002d58:	40023c00 	.word	0x40023c00
 8002d5c:	40023808 	.word	0x40023808

08002d60 <RCC_void_AHB1Prescaler_Init>:
static void RCC_void_AHB1Prescaler_Init(void)
{
 8002d60:	b480      	push	{r7}
 8002d62:	af00      	add	r7, sp, #0
    #if   RCC_AHB_PRESCALER == RCC_AHB_DIV_1
        RCC_CFGR &= ~(RCC_AHB_PRESCALER_MASK);
 8002d64:	4b07      	ldr	r3, [pc, #28]	; (8002d84 <RCC_void_AHB1Prescaler_Init+0x24>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a06      	ldr	r2, [pc, #24]	; (8002d84 <RCC_void_AHB1Prescaler_Init+0x24>)
 8002d6a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d6e:	6013      	str	r3, [r2, #0]
        RCC_CFGR |= RCC_AHB_DIV_1;
 8002d70:	4b04      	ldr	r3, [pc, #16]	; (8002d84 <RCC_void_AHB1Prescaler_Init+0x24>)
 8002d72:	4a04      	ldr	r2, [pc, #16]	; (8002d84 <RCC_void_AHB1Prescaler_Init+0x24>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	6013      	str	r3, [r2, #0]
        RCC_CFGR |= RCC_AHB_DIV_256;
    #elif RCC_AHB_PRESCALER == RCC_AHB_DIV_512
        RCC_CFGR &= ~(RCC_AHB_PRESCALER_MASK);
        RCC_CFGR |= RCC_AHB_DIV_512;
    #endif
}
 8002d78:	bf00      	nop
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr
 8002d82:	bf00      	nop
 8002d84:	40023808 	.word	0x40023808

08002d88 <RCC_void_APB1Prescaler_Init>:
static void RCC_void_APB1Prescaler_Init(void)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	af00      	add	r7, sp, #0
    #if RCC_APB1_PRESCALER == RCC_APB1_DIV_1
        RCC_CFGR &= ~(RCC_APB1_PRESCALER_MASK);
        RCC_CFGR |= RCC_APB1_DIV_1;
    #elif RCC_APB1_PRESCALER == RCC_APB1_DIV_2
        RCC_CFGR &= ~(RCC_APB1_PRESCALER_MASK);
 8002d8c:	4b08      	ldr	r3, [pc, #32]	; (8002db0 <RCC_void_APB1Prescaler_Init+0x28>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a07      	ldr	r2, [pc, #28]	; (8002db0 <RCC_void_APB1Prescaler_Init+0x28>)
 8002d92:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8002d96:	6013      	str	r3, [r2, #0]
        RCC_CFGR |= RCC_APB1_DIV_2;
 8002d98:	4b05      	ldr	r3, [pc, #20]	; (8002db0 <RCC_void_APB1Prescaler_Init+0x28>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a04      	ldr	r2, [pc, #16]	; (8002db0 <RCC_void_APB1Prescaler_Init+0x28>)
 8002d9e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002da2:	6013      	str	r3, [r2, #0]
        RCC_CFGR |= RCC_APB1_DIV_8;
    #elif RCC_APB1_PRESCALER == RCC_APB1_DIV_16
        RCC_CFGR &= ~(RCC_APB1_PRESCALER_MASK);
        RCC_CFGR |= RCC_APB1_DIV_16;
    #endif
}
 8002da4:	bf00      	nop
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr
 8002dae:	bf00      	nop
 8002db0:	40023808 	.word	0x40023808

08002db4 <RCC_void_APB2Prescaler_Init>:
static void RCC_void_APB2Prescaler_Init(void)
{
 8002db4:	b480      	push	{r7}
 8002db6:	af00      	add	r7, sp, #0
    #if (RCC_APB2_PRESCALER == RCC_APB2_DIV_1)
        RCC_CFGR &= ~(RCC_APB2_PRESCALER_MASK);
 8002db8:	4b07      	ldr	r3, [pc, #28]	; (8002dd8 <RCC_void_APB2Prescaler_Init+0x24>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a06      	ldr	r2, [pc, #24]	; (8002dd8 <RCC_void_APB2Prescaler_Init+0x24>)
 8002dbe:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002dc2:	6013      	str	r3, [r2, #0]
        RCC_CFGR |= RCC_APB2_DIV_1;
 8002dc4:	4b04      	ldr	r3, [pc, #16]	; (8002dd8 <RCC_void_APB2Prescaler_Init+0x24>)
 8002dc6:	4a04      	ldr	r2, [pc, #16]	; (8002dd8 <RCC_void_APB2Prescaler_Init+0x24>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	6013      	str	r3, [r2, #0]
        RCC_CFGR |= RCC_APB2_DIV_8;
    #elif (RCC_APB2_PRESCALER == RCC_APB2_DIV_16)
        RCC_CFGR &= ~(RCC_APB2_PRESCALER_MASK);
        RCC_CFGR |= RCC_APB2_DIV_16;
    #endif
}
 8002dcc:	bf00      	nop
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr
 8002dd6:	bf00      	nop
 8002dd8:	40023808 	.word	0x40023808

08002ddc <RCC_voidInit>:
/**********************************************  */
void RCC_voidInit(void)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	af00      	add	r7, sp, #0
    RCC_void_AHB1Prescaler_Init();
 8002de0:	f7ff ffbe 	bl	8002d60 <RCC_void_AHB1Prescaler_Init>
    RCC_void_APB1Prescaler_Init();
 8002de4:	f7ff ffd0 	bl	8002d88 <RCC_void_APB1Prescaler_Init>
    RCC_void_APB2Prescaler_Init();
 8002de8:	f7ff ffe4 	bl	8002db4 <RCC_void_APB2Prescaler_Init>
    #if RCC_CLOCK_SOURCE == RCC_CLK_HSI
        RCC_void_HSI_Init();        
    #elif RCC_CLOCK_SOURCE == RCC_CLK_HSE
        RCC_void_HSE_Init();
    #elif RCC_CLOCK_SOURCE == RCC_CLK_PLL
        RCC_void_PLL_Init();
 8002dec:	f7ff ff58 	bl	8002ca0 <RCC_void_PLL_Init>
    #else
        #error "RCC_ClOCK_SOURCE_Configuration_Error"
    #endif
}
 8002df0:	bf00      	nop
 8002df2:	bd80      	pop	{r7, pc}

08002df4 <RCC_voidEnablePeripheralClock>:
    else
    {
        // Error
    }
}
void RCC_voidEnablePeripheralClock (u8 Copy_u8BusName, u8 Copy_u8PeripheralName){
 8002df4:	b480      	push	{r7}
 8002df6:	b083      	sub	sp, #12
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	460a      	mov	r2, r1
 8002dfe:	71fb      	strb	r3, [r7, #7]
 8002e00:	4613      	mov	r3, r2
 8002e02:	71bb      	strb	r3, [r7, #6]
    switch (Copy_u8BusName)
 8002e04:	79fb      	ldrb	r3, [r7, #7]
 8002e06:	2b02      	cmp	r3, #2
 8002e08:	d01c      	beq.n	8002e44 <RCC_voidEnablePeripheralClock+0x50>
 8002e0a:	2b02      	cmp	r3, #2
 8002e0c:	dc25      	bgt.n	8002e5a <RCC_voidEnablePeripheralClock+0x66>
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d002      	beq.n	8002e18 <RCC_voidEnablePeripheralClock+0x24>
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d00b      	beq.n	8002e2e <RCC_voidEnablePeripheralClock+0x3a>
        SET_BIT(RCC_APB2ENR,Copy_u8PeripheralName);
        /* code */
        break;  
    default:
        // Error
        break;
 8002e16:	e020      	b.n	8002e5a <RCC_voidEnablePeripheralClock+0x66>
        SET_BIT(RCC_AHB1ENR,Copy_u8PeripheralName);
 8002e18:	4b13      	ldr	r3, [pc, #76]	; (8002e68 <RCC_voidEnablePeripheralClock+0x74>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	79ba      	ldrb	r2, [r7, #6]
 8002e1e:	2101      	movs	r1, #1
 8002e20:	fa01 f202 	lsl.w	r2, r1, r2
 8002e24:	4611      	mov	r1, r2
 8002e26:	4a10      	ldr	r2, [pc, #64]	; (8002e68 <RCC_voidEnablePeripheralClock+0x74>)
 8002e28:	430b      	orrs	r3, r1
 8002e2a:	6013      	str	r3, [r2, #0]
        break;
 8002e2c:	e016      	b.n	8002e5c <RCC_voidEnablePeripheralClock+0x68>
        SET_BIT(RCC_APB1ENR,Copy_u8PeripheralName);
 8002e2e:	4b0f      	ldr	r3, [pc, #60]	; (8002e6c <RCC_voidEnablePeripheralClock+0x78>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	79ba      	ldrb	r2, [r7, #6]
 8002e34:	2101      	movs	r1, #1
 8002e36:	fa01 f202 	lsl.w	r2, r1, r2
 8002e3a:	4611      	mov	r1, r2
 8002e3c:	4a0b      	ldr	r2, [pc, #44]	; (8002e6c <RCC_voidEnablePeripheralClock+0x78>)
 8002e3e:	430b      	orrs	r3, r1
 8002e40:	6013      	str	r3, [r2, #0]
        break;
 8002e42:	e00b      	b.n	8002e5c <RCC_voidEnablePeripheralClock+0x68>
        SET_BIT(RCC_APB2ENR,Copy_u8PeripheralName);
 8002e44:	4b0a      	ldr	r3, [pc, #40]	; (8002e70 <RCC_voidEnablePeripheralClock+0x7c>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	79ba      	ldrb	r2, [r7, #6]
 8002e4a:	2101      	movs	r1, #1
 8002e4c:	fa01 f202 	lsl.w	r2, r1, r2
 8002e50:	4611      	mov	r1, r2
 8002e52:	4a07      	ldr	r2, [pc, #28]	; (8002e70 <RCC_voidEnablePeripheralClock+0x7c>)
 8002e54:	430b      	orrs	r3, r1
 8002e56:	6013      	str	r3, [r2, #0]
        break;  
 8002e58:	e000      	b.n	8002e5c <RCC_voidEnablePeripheralClock+0x68>
        break;
 8002e5a:	bf00      	nop
    }
}
 8002e5c:	bf00      	nop
 8002e5e:	370c      	adds	r7, #12
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr
 8002e68:	40023830 	.word	0x40023830
 8002e6c:	40023840 	.word	0x40023840
 8002e70:	40023844 	.word	0x40023844

08002e74 <MSPI_GPIOInit>:

/**********************************************************************************************************************
 *  LOCAL FUNCTIONS
 *********************************************************************************************************************/
static void MSPI_GPIOInit(const SPI_Config_t* SPIConfig)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b082      	sub	sp, #8
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
	switch (SPIConfig->SPI_Instance)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	781b      	ldrb	r3, [r3, #0]
 8002e80:	2b02      	cmp	r3, #2
 8002e82:	d042      	beq.n	8002f0a <MSPI_GPIOInit+0x96>
 8002e84:	2b02      	cmp	r3, #2
 8002e86:	dc5d      	bgt.n	8002f44 <MSPI_GPIOInit+0xd0>
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d002      	beq.n	8002e92 <MSPI_GPIOInit+0x1e>
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d023      	beq.n	8002ed8 <MSPI_GPIOInit+0x64>
				GPIO_voidSetPinMode(GPIO_PORTB, GPIO_PIN5, GPIO_ALTERNATE_FUNCTION_PIN_MODE);  // SPI3_MOSI_PIN
				GPIO_voidSetPinAlternateFunction(GPIO_PORTB, GPIO_PIN5, SPI3_MOSI_AF);

				break;
		}
}
 8002e90:	e058      	b.n	8002f44 <MSPI_GPIOInit+0xd0>
				RCC_voidEnablePeripheralClock(RCC_AHB,RCC_AHB_GPIOAEN);
 8002e92:	2100      	movs	r1, #0
 8002e94:	2000      	movs	r0, #0
 8002e96:	f7ff ffad 	bl	8002df4 <RCC_voidEnablePeripheralClock>
				GPIO_voidSetPinMode(GPIO_PORTA, GPIO_PIN4, GPIO_ALTERNATE_FUNCTION_PIN_MODE); // SPI1_NSS_PIN
 8002e9a:	2202      	movs	r2, #2
 8002e9c:	2104      	movs	r1, #4
 8002e9e:	2000      	movs	r0, #0
 8002ea0:	f7ff fc5c 	bl	800275c <GPIO_voidSetPinMode>
				GPIO_voidSetPinAlternateFunction(GPIO_PORTA,GPIO_PIN4,SPI1_NSS_AF);
 8002ea4:	2205      	movs	r2, #5
 8002ea6:	2104      	movs	r1, #4
 8002ea8:	2000      	movs	r0, #0
 8002eaa:	f7ff fd03 	bl	80028b4 <GPIO_voidSetPinAlternateFunction>
				GPIO_voidSetPinMode(GPIO_PORTA, GPIO_PIN5, GPIO_ALTERNATE_FUNCTION_PIN_MODE); // SPI1_SCK_PIN
 8002eae:	2202      	movs	r2, #2
 8002eb0:	2105      	movs	r1, #5
 8002eb2:	2000      	movs	r0, #0
 8002eb4:	f7ff fc52 	bl	800275c <GPIO_voidSetPinMode>
				GPIO_voidSetPinAlternateFunction(GPIO_PORTA,GPIO_PIN5,SPI1_SCK_AF);
 8002eb8:	2205      	movs	r2, #5
 8002eba:	2105      	movs	r1, #5
 8002ebc:	2000      	movs	r0, #0
 8002ebe:	f7ff fcf9 	bl	80028b4 <GPIO_voidSetPinAlternateFunction>
				GPIO_voidSetPinMode(GPIO_PORTA, GPIO_PIN7, GPIO_ALTERNATE_FUNCTION_PIN_MODE); // SPI1_MOSI_PIN
 8002ec2:	2202      	movs	r2, #2
 8002ec4:	2107      	movs	r1, #7
 8002ec6:	2000      	movs	r0, #0
 8002ec8:	f7ff fc48 	bl	800275c <GPIO_voidSetPinMode>
				GPIO_voidSetPinAlternateFunction(GPIO_PORTA,GPIO_PIN7,SPI1_MOSI_AF);
 8002ecc:	2205      	movs	r2, #5
 8002ece:	2107      	movs	r1, #7
 8002ed0:	2000      	movs	r0, #0
 8002ed2:	f7ff fcef 	bl	80028b4 <GPIO_voidSetPinAlternateFunction>
				break;
 8002ed6:	e035      	b.n	8002f44 <MSPI_GPIOInit+0xd0>
				RCC_voidEnablePeripheralClock(RCC_AHB,RCC_AHB_GPIOBEN);
 8002ed8:	2101      	movs	r1, #1
 8002eda:	2000      	movs	r0, #0
 8002edc:	f7ff ff8a 	bl	8002df4 <RCC_voidEnablePeripheralClock>
				GPIO_voidSetPinMode(GPIO_PORTB, GPIO_PIN10, GPIO_ALTERNATE_FUNCTION_PIN_MODE); // SP2_SCK_PIN
 8002ee0:	2202      	movs	r2, #2
 8002ee2:	210a      	movs	r1, #10
 8002ee4:	2001      	movs	r0, #1
 8002ee6:	f7ff fc39 	bl	800275c <GPIO_voidSetPinMode>
				GPIO_voidSetPinAlternateFunction(GPIO_PORTB, GPIO_PIN10, SPI2_SCK_AF);
 8002eea:	2205      	movs	r2, #5
 8002eec:	210a      	movs	r1, #10
 8002eee:	2001      	movs	r0, #1
 8002ef0:	f7ff fce0 	bl	80028b4 <GPIO_voidSetPinAlternateFunction>
				GPIO_voidSetPinMode(GPIO_PORTB, GPIO_PIN15, GPIO_ALTERNATE_FUNCTION_PIN_MODE); // SPI2_MOSI_PIN
 8002ef4:	2202      	movs	r2, #2
 8002ef6:	210f      	movs	r1, #15
 8002ef8:	2001      	movs	r0, #1
 8002efa:	f7ff fc2f 	bl	800275c <GPIO_voidSetPinMode>
				GPIO_voidSetPinAlternateFunction(GPIO_PORTB, GPIO_PIN15, SPI2_MOSI_AF);
 8002efe:	2205      	movs	r2, #5
 8002f00:	210f      	movs	r1, #15
 8002f02:	2001      	movs	r0, #1
 8002f04:	f7ff fcd6 	bl	80028b4 <GPIO_voidSetPinAlternateFunction>
				break;
 8002f08:	e01c      	b.n	8002f44 <MSPI_GPIOInit+0xd0>
				RCC_voidEnablePeripheralClock(RCC_AHB,RCC_AHB_GPIOAEN);
 8002f0a:	2100      	movs	r1, #0
 8002f0c:	2000      	movs	r0, #0
 8002f0e:	f7ff ff71 	bl	8002df4 <RCC_voidEnablePeripheralClock>
				RCC_voidEnablePeripheralClock(RCC_AHB,RCC_AHB_GPIOBEN);
 8002f12:	2101      	movs	r1, #1
 8002f14:	2000      	movs	r0, #0
 8002f16:	f7ff ff6d 	bl	8002df4 <RCC_voidEnablePeripheralClock>
				GPIO_voidSetPinMode(GPIO_PORTB, GPIO_PIN3, GPIO_ALTERNATE_FUNCTION_PIN_MODE);  // SPI3_SCK_PIN
 8002f1a:	2202      	movs	r2, #2
 8002f1c:	2103      	movs	r1, #3
 8002f1e:	2001      	movs	r0, #1
 8002f20:	f7ff fc1c 	bl	800275c <GPIO_voidSetPinMode>
				GPIO_voidSetPinAlternateFunction(GPIO_PORTB, GPIO_PIN3, SPI3_SCK_AF);
 8002f24:	2206      	movs	r2, #6
 8002f26:	2103      	movs	r1, #3
 8002f28:	2001      	movs	r0, #1
 8002f2a:	f7ff fcc3 	bl	80028b4 <GPIO_voidSetPinAlternateFunction>
				GPIO_voidSetPinMode(GPIO_PORTB, GPIO_PIN5, GPIO_ALTERNATE_FUNCTION_PIN_MODE);  // SPI3_MOSI_PIN
 8002f2e:	2202      	movs	r2, #2
 8002f30:	2105      	movs	r1, #5
 8002f32:	2001      	movs	r0, #1
 8002f34:	f7ff fc12 	bl	800275c <GPIO_voidSetPinMode>
				GPIO_voidSetPinAlternateFunction(GPIO_PORTB, GPIO_PIN5, SPI3_MOSI_AF);
 8002f38:	2206      	movs	r2, #6
 8002f3a:	2105      	movs	r1, #5
 8002f3c:	2001      	movs	r0, #1
 8002f3e:	f7ff fcb9 	bl	80028b4 <GPIO_voidSetPinAlternateFunction>
				break;
 8002f42:	bf00      	nop
}
 8002f44:	bf00      	nop
 8002f46:	3708      	adds	r7, #8
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}

08002f4c <SPI_Timeout_Handler>:
						break;
				}
	}
#endif
static void SPI_Timeout_Handler(void)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	af00      	add	r7, sp, #0
	SPI_Timeout_Flag=SPI_TIMEOUT;
 8002f50:	4b03      	ldr	r3, [pc, #12]	; (8002f60 <SPI_Timeout_Handler+0x14>)
 8002f52:	2201      	movs	r2, #1
 8002f54:	701a      	strb	r2, [r3, #0]
}
 8002f56:	bf00      	nop
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5e:	4770      	bx	lr
 8002f60:	200001b0 	.word	0x200001b0

08002f64 <MSPIx_voidClockEnable>:


static void MSPIx_voidClockEnable(const SPI_Config_t* SPIConfig){
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b082      	sub	sp, #8
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
	switch (SPIConfig->SPI_Instance){
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	781b      	ldrb	r3, [r3, #0]
 8002f70:	2b02      	cmp	r3, #2
 8002f72:	d010      	beq.n	8002f96 <MSPIx_voidClockEnable+0x32>
 8002f74:	2b02      	cmp	r3, #2
 8002f76:	dc13      	bgt.n	8002fa0 <MSPIx_voidClockEnable+0x3c>
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d002      	beq.n	8002f82 <MSPIx_voidClockEnable+0x1e>
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d005      	beq.n	8002f8c <MSPIx_voidClockEnable+0x28>
		break;
	case SPI3_INSTANCE:
		RCC_voidEnablePeripheralClock(RCC_APB1,RCC_APB1_SPI3EN);
		break;
	}
}
 8002f80:	e00e      	b.n	8002fa0 <MSPIx_voidClockEnable+0x3c>
		RCC_voidEnablePeripheralClock(RCC_APB2,RCC_APB2_SPI1EN);
 8002f82:	210c      	movs	r1, #12
 8002f84:	2002      	movs	r0, #2
 8002f86:	f7ff ff35 	bl	8002df4 <RCC_voidEnablePeripheralClock>
		break;
 8002f8a:	e009      	b.n	8002fa0 <MSPIx_voidClockEnable+0x3c>
		RCC_voidEnablePeripheralClock(RCC_APB1,RCC_APB1_SPI2EN);
 8002f8c:	210e      	movs	r1, #14
 8002f8e:	2001      	movs	r0, #1
 8002f90:	f7ff ff30 	bl	8002df4 <RCC_voidEnablePeripheralClock>
		break;
 8002f94:	e004      	b.n	8002fa0 <MSPIx_voidClockEnable+0x3c>
		RCC_voidEnablePeripheralClock(RCC_APB1,RCC_APB1_SPI3EN);
 8002f96:	210f      	movs	r1, #15
 8002f98:	2001      	movs	r0, #1
 8002f9a:	f7ff ff2b 	bl	8002df4 <RCC_voidEnablePeripheralClock>
		break;
 8002f9e:	bf00      	nop
}
 8002fa0:	bf00      	nop
 8002fa2:	3708      	adds	r7, #8
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}

08002fa8 <MSPI_voidInit>:
/**********************************************************************************************************************
 *  GLOBAL FUNCTIONS
 *********************************************************************************************************************/
void MSPI_voidInit(const SPI_Config_t* SPIConfig)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b082      	sub	sp, #8
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
	MSPI_GPIOInit(SPIConfig);
 8002fb0:	6878      	ldr	r0, [r7, #4]
 8002fb2:	f7ff ff5f 	bl	8002e74 <MSPI_GPIOInit>
	MSPIx_voidClockEnable(SPIConfig);
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f7ff ffd4 	bl	8002f64 <MSPIx_voidClockEnable>
#if (SPI1_TX_INT_ENABLE || SPI2_TX_INT_ENABLE || SPI3_TX_INT_ENABLE ) ||(SPI1_RX_INT_ENABLE || SPI2_RX_INT_ENABLE || SPI3_RX_INT_ENABLE)==(INTERRUPT_ENABLED)
	MSPI_InterruptInit(SPIConfig);
#endif
	SPIx[SPIConfig->SPI_Instance]->CR1 =SPIConfig->SPI_Mode | SPIConfig->SPI_CLKPolarity | SPIConfig->SPI_CLKPhase
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	785a      	ldrb	r2, [r3, #1]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	789b      	ldrb	r3, [r3, #2]
			| SPIConfig->SPI_FirstBit | SPIConfig->SPI_BaudRatePrescaler;
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	b2da      	uxtb	r2, r3
	SPIx[SPIConfig->SPI_Instance]->CR1 =SPIConfig->SPI_Mode | SPIConfig->SPI_CLKPolarity | SPIConfig->SPI_CLKPhase
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	78db      	ldrb	r3, [r3, #3]
			| SPIConfig->SPI_FirstBit | SPIConfig->SPI_BaudRatePrescaler;
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	b2da      	uxtb	r2, r3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	791b      	ldrb	r3, [r3, #4]
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	b2da      	uxtb	r2, r3
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	795b      	ldrb	r3, [r3, #5]
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	b2da      	uxtb	r2, r3
	SPIx[SPIConfig->SPI_Instance]->CR1 =SPIConfig->SPI_Mode | SPIConfig->SPI_CLKPolarity | SPIConfig->SPI_CLKPhase
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	781b      	ldrb	r3, [r3, #0]
 8002fe4:	4619      	mov	r1, r3
 8002fe6:	4b14      	ldr	r3, [pc, #80]	; (8003038 <MSPI_voidInit+0x90>)
 8002fe8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002fec:	601a      	str	r2, [r3, #0]
	SET_BIT(SPIx[SPIConfig->SPI_Instance]->CR2,SSOE_BIT_POS);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	781b      	ldrb	r3, [r3, #0]
 8002ff2:	461a      	mov	r2, r3
 8002ff4:	4b10      	ldr	r3, [pc, #64]	; (8003038 <MSPI_voidInit+0x90>)
 8002ff6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ffa:	685a      	ldr	r2, [r3, #4]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	781b      	ldrb	r3, [r3, #0]
 8003000:	4619      	mov	r1, r3
 8003002:	4b0d      	ldr	r3, [pc, #52]	; (8003038 <MSPI_voidInit+0x90>)
 8003004:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003008:	f042 0204 	orr.w	r2, r2, #4
 800300c:	605a      	str	r2, [r3, #4]
	SET_BIT(SPIx[SPIConfig->SPI_Instance]->CR1, SPI_EN_BIT_POS);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	781b      	ldrb	r3, [r3, #0]
 8003012:	461a      	mov	r2, r3
 8003014:	4b08      	ldr	r3, [pc, #32]	; (8003038 <MSPI_voidInit+0x90>)
 8003016:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	781b      	ldrb	r3, [r3, #0]
 8003020:	4619      	mov	r1, r3
 8003022:	4b05      	ldr	r3, [pc, #20]	; (8003038 <MSPI_voidInit+0x90>)
 8003024:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003028:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800302c:	601a      	str	r2, [r3, #0]
}
 800302e:	bf00      	nop
 8003030:	3708      	adds	r7, #8
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}
 8003036:	bf00      	nop
 8003038:	200000a4 	.word	0x200000a4

0800303c <MSPI_TransmitByte>:
						}
}
#endif

Std_ReturnType MSPI_TransmitByte(SPI_Config_t* SPIConfig , u8 Copy_u8Data , u32 Copy_u32Timeout)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b086      	sub	sp, #24
 8003040:	af00      	add	r7, sp, #0
 8003042:	60f8      	str	r0, [r7, #12]
 8003044:	460b      	mov	r3, r1
 8003046:	607a      	str	r2, [r7, #4]
 8003048:	72fb      	strb	r3, [r7, #11]
	Std_ReturnType Local_u8ErrorState = STD_OK;
 800304a:	2300      	movs	r3, #0
 800304c:	75fb      	strb	r3, [r7, #23]
    u8 Local_u8DummyReceieve = 0;
 800304e:	2300      	movs	r3, #0
 8003050:	75bb      	strb	r3, [r7, #22]
    TIM_SingleInterval(&TIM2_Cfg, Copy_u32Timeout*1000, SPI_Timeout_Handler);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003058:	fb02 f303 	mul.w	r3, r2, r3
 800305c:	4a1b      	ldr	r2, [pc, #108]	; (80030cc <MSPI_TransmitByte+0x90>)
 800305e:	4619      	mov	r1, r3
 8003060:	481b      	ldr	r0, [pc, #108]	; (80030d0 <MSPI_TransmitByte+0x94>)
 8003062:	f000 fc01 	bl	8003868 <TIM_SingleInterval>
    SPIx[SPIConfig->SPI_Instance]->DR = Copy_u8Data;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	781b      	ldrb	r3, [r3, #0]
 800306a:	461a      	mov	r2, r3
 800306c:	4b19      	ldr	r3, [pc, #100]	; (80030d4 <MSPI_TransmitByte+0x98>)
 800306e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003072:	7afa      	ldrb	r2, [r7, #11]
 8003074:	60da      	str	r2, [r3, #12]
    while((GET_BIT(SPIx[SPIConfig->SPI_Instance]->SR,SPI_BSY_BIT_POS) == SPI_BUSY) && (SPI_Timeout_Flag != SPI_TIMEOUT));
 8003076:	bf00      	nop
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	781b      	ldrb	r3, [r3, #0]
 800307c:	461a      	mov	r2, r3
 800307e:	4b15      	ldr	r3, [pc, #84]	; (80030d4 <MSPI_TransmitByte+0x98>)
 8003080:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	09db      	lsrs	r3, r3, #7
 8003088:	f003 0301 	and.w	r3, r3, #1
 800308c:	2b01      	cmp	r3, #1
 800308e:	d103      	bne.n	8003098 <MSPI_TransmitByte+0x5c>
 8003090:	4b11      	ldr	r3, [pc, #68]	; (80030d8 <MSPI_TransmitByte+0x9c>)
 8003092:	781b      	ldrb	r3, [r3, #0]
 8003094:	2b01      	cmp	r3, #1
 8003096:	d1ef      	bne.n	8003078 <MSPI_TransmitByte+0x3c>
    if(SPI_Timeout_Flag == SPI_TIMEOUT)
 8003098:	4b0f      	ldr	r3, [pc, #60]	; (80030d8 <MSPI_TransmitByte+0x9c>)
 800309a:	781b      	ldrb	r3, [r3, #0]
 800309c:	2b01      	cmp	r3, #1
 800309e:	d105      	bne.n	80030ac <MSPI_TransmitByte+0x70>
    {
    	Local_u8ErrorState = STD_TIMEOUT;
 80030a0:	2302      	movs	r3, #2
 80030a2:	75fb      	strb	r3, [r7, #23]
    	SPI_Timeout_Flag = SPI_NO_TIMEOUT;
 80030a4:	4b0c      	ldr	r3, [pc, #48]	; (80030d8 <MSPI_TransmitByte+0x9c>)
 80030a6:	2200      	movs	r2, #0
 80030a8:	701a      	strb	r2, [r3, #0]
 80030aa:	e00a      	b.n	80030c2 <MSPI_TransmitByte+0x86>
    }
    else
    {
    	TIM_DeInit(&TIM2_Cfg);
 80030ac:	4808      	ldr	r0, [pc, #32]	; (80030d0 <MSPI_TransmitByte+0x94>)
 80030ae:	f000 fb97 	bl	80037e0 <TIM_DeInit>
    	Local_u8DummyReceieve = SPIx[SPIConfig->SPI_Instance]->DR;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	781b      	ldrb	r3, [r3, #0]
 80030b6:	461a      	mov	r2, r3
 80030b8:	4b06      	ldr	r3, [pc, #24]	; (80030d4 <MSPI_TransmitByte+0x98>)
 80030ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030be:	68db      	ldr	r3, [r3, #12]
 80030c0:	75bb      	strb	r3, [r7, #22]
    }
	return Local_u8ErrorState;
 80030c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	3718      	adds	r7, #24
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}
 80030cc:	08002f4d 	.word	0x08002f4d
 80030d0:	200000b0 	.word	0x200000b0
 80030d4:	200000a4 	.word	0x200000a4
 80030d8:	200001b0 	.word	0x200001b0

080030dc <MSPI_DMA_Transmit>:
	}
	return Local_u8ErrorState;
}

void MSPI_DMA_Transmit(SPI_Config_t* SPIConfig , u8* Ptr_u8Data , u16 Copy_u16DataSize)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b084      	sub	sp, #16
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	60f8      	str	r0, [r7, #12]
 80030e4:	60b9      	str	r1, [r7, #8]
 80030e6:	4613      	mov	r3, r2
 80030e8:	80fb      	strh	r3, [r7, #6]
	MDMA_voidInit(&SPIConfig->SPI_TX_DMA_Config);
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	3308      	adds	r3, #8
 80030ee:	4618      	mov	r0, r3
 80030f0:	f7fe fecc 	bl	8001e8c <MDMA_voidInit>
	MDMA_voidStart(&SPIConfig->SPI_TX_DMA_Config, &SPIx[SPIConfig->SPI_Instance]->DR,(u32*)Ptr_u8Data, Copy_u16DataSize);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	f103 0008 	add.w	r0, r3, #8
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	781b      	ldrb	r3, [r3, #0]
 80030fe:	461a      	mov	r2, r3
 8003100:	4b0e      	ldr	r3, [pc, #56]	; (800313c <MSPI_DMA_Transmit+0x60>)
 8003102:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003106:	f103 010c 	add.w	r1, r3, #12
 800310a:	88fb      	ldrh	r3, [r7, #6]
 800310c:	68ba      	ldr	r2, [r7, #8]
 800310e:	f7fe ff11 	bl	8001f34 <MDMA_voidStart>
	SET_BIT(SPIx[SPIConfig->SPI_Instance]->CR2, TXDMAEN_BIT_POS);
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	781b      	ldrb	r3, [r3, #0]
 8003116:	461a      	mov	r2, r3
 8003118:	4b08      	ldr	r3, [pc, #32]	; (800313c <MSPI_DMA_Transmit+0x60>)
 800311a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800311e:	685a      	ldr	r2, [r3, #4]
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	4619      	mov	r1, r3
 8003126:	4b05      	ldr	r3, [pc, #20]	; (800313c <MSPI_DMA_Transmit+0x60>)
 8003128:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800312c:	f042 0202 	orr.w	r2, r2, #2
 8003130:	605a      	str	r2, [r3, #4]
}
 8003132:	bf00      	nop
 8003134:	3710      	adds	r7, #16
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}
 800313a:	bf00      	nop
 800313c:	200000a4 	.word	0x200000a4

08003140 <SPI1_IRQHandler>:
	SET_BIT(SPIx[SPIConfig->SPI_Instance]->CR2, TXDMAEN_BIT_POS);
	SET_BIT(SPIx[SPIConfig->SPI_Instance]->CR2, RXDMAEN_BIT_POS);
}
/*************************************************************SPI IRQ HANDLERS******************************************************************/
void SPI1_IRQHandler(void)
{
 8003140:	b480      	push	{r7}
 8003142:	af00      	add	r7, sp, #0
		{
			SPI1_RX_INT_Callback();
		}
	}
#endif
}
 8003144:	bf00      	nop
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr

0800314e <SPI2_IRQHandler>:
void SPI2_IRQHandler(void)
{
 800314e:	b480      	push	{r7}
 8003150:	af00      	add	r7, sp, #0
		{
			SPI2_RX_INT_Callback();
		}
	}
#endif
}
 8003152:	bf00      	nop
 8003154:	46bd      	mov	sp, r7
 8003156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315a:	4770      	bx	lr

0800315c <SPI3_IRQHandler>:
void SPI3_IRQHandler(void)
{
 800315c:	b480      	push	{r7}
 800315e:	af00      	add	r7, sp, #0
		{
			SPI3_RX_INT_Callback();
		}
	}
#endif
}
 8003160:	bf00      	nop
 8003162:	46bd      	mov	sp, r7
 8003164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003168:	4770      	bx	lr
	...

0800316c <TIM_RCC_ENABLE>:

/**********************************************************************************************************************
 *  LOCAL FUNCTIONS
 *********************************************************************************************************************/
static void TIM_RCC_ENABLE(volatile TIM_t* TIM_Instance)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b082      	sub	sp, #8
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
	if(TIM_Instance == TIM1)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	4a25      	ldr	r2, [pc, #148]	; (800320c <TIM_RCC_ENABLE+0xa0>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d104      	bne.n	8003186 <TIM_RCC_ENABLE+0x1a>
	{
		RCC_voidEnablePeripheralClock(RCC_APB2, RCC_APB2_TIM1EN);
 800317c:	2100      	movs	r1, #0
 800317e:	2002      	movs	r0, #2
 8003180:	f7ff fe38 	bl	8002df4 <RCC_voidEnablePeripheralClock>
	}
	else if(TIM_Instance == TIM11)
	{
		RCC_voidEnablePeripheralClock(RCC_APB2, RCC_APB2_TIM11EN);
	}
}
 8003184:	e03d      	b.n	8003202 <TIM_RCC_ENABLE+0x96>
	else if(TIM_Instance == TIM2)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800318c:	d104      	bne.n	8003198 <TIM_RCC_ENABLE+0x2c>
		RCC_voidEnablePeripheralClock(RCC_APB1, RCC_APB1_TIM2EN);
 800318e:	2100      	movs	r1, #0
 8003190:	2001      	movs	r0, #1
 8003192:	f7ff fe2f 	bl	8002df4 <RCC_voidEnablePeripheralClock>
}
 8003196:	e034      	b.n	8003202 <TIM_RCC_ENABLE+0x96>
	else if(TIM_Instance == TIM3)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	4a1d      	ldr	r2, [pc, #116]	; (8003210 <TIM_RCC_ENABLE+0xa4>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d104      	bne.n	80031aa <TIM_RCC_ENABLE+0x3e>
		RCC_voidEnablePeripheralClock(RCC_APB1, RCC_APB1_TIM3EN);
 80031a0:	2101      	movs	r1, #1
 80031a2:	2001      	movs	r0, #1
 80031a4:	f7ff fe26 	bl	8002df4 <RCC_voidEnablePeripheralClock>
}
 80031a8:	e02b      	b.n	8003202 <TIM_RCC_ENABLE+0x96>
	else if(TIM_Instance == TIM4)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	4a19      	ldr	r2, [pc, #100]	; (8003214 <TIM_RCC_ENABLE+0xa8>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d104      	bne.n	80031bc <TIM_RCC_ENABLE+0x50>
		RCC_voidEnablePeripheralClock(RCC_APB1, RCC_APB1_TIM4EN);
 80031b2:	2102      	movs	r1, #2
 80031b4:	2001      	movs	r0, #1
 80031b6:	f7ff fe1d 	bl	8002df4 <RCC_voidEnablePeripheralClock>
}
 80031ba:	e022      	b.n	8003202 <TIM_RCC_ENABLE+0x96>
	else if(TIM_Instance == TIM5)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	4a16      	ldr	r2, [pc, #88]	; (8003218 <TIM_RCC_ENABLE+0xac>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d104      	bne.n	80031ce <TIM_RCC_ENABLE+0x62>
		RCC_voidEnablePeripheralClock(RCC_APB1, RCC_APB1_TIM5EN);
 80031c4:	2103      	movs	r1, #3
 80031c6:	2001      	movs	r0, #1
 80031c8:	f7ff fe14 	bl	8002df4 <RCC_voidEnablePeripheralClock>
}
 80031cc:	e019      	b.n	8003202 <TIM_RCC_ENABLE+0x96>
	else if(TIM_Instance == TIM9)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	4a12      	ldr	r2, [pc, #72]	; (800321c <TIM_RCC_ENABLE+0xb0>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d104      	bne.n	80031e0 <TIM_RCC_ENABLE+0x74>
		RCC_voidEnablePeripheralClock(RCC_APB2, RCC_APB2_TIM9EN);
 80031d6:	2110      	movs	r1, #16
 80031d8:	2002      	movs	r0, #2
 80031da:	f7ff fe0b 	bl	8002df4 <RCC_voidEnablePeripheralClock>
}
 80031de:	e010      	b.n	8003202 <TIM_RCC_ENABLE+0x96>
	else if(TIM_Instance == TIM10)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	4a0f      	ldr	r2, [pc, #60]	; (8003220 <TIM_RCC_ENABLE+0xb4>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d104      	bne.n	80031f2 <TIM_RCC_ENABLE+0x86>
		RCC_voidEnablePeripheralClock(RCC_APB2, RCC_APB2_TIM10EN);
 80031e8:	2111      	movs	r1, #17
 80031ea:	2002      	movs	r0, #2
 80031ec:	f7ff fe02 	bl	8002df4 <RCC_voidEnablePeripheralClock>
}
 80031f0:	e007      	b.n	8003202 <TIM_RCC_ENABLE+0x96>
	else if(TIM_Instance == TIM11)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	4a0b      	ldr	r2, [pc, #44]	; (8003224 <TIM_RCC_ENABLE+0xb8>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d103      	bne.n	8003202 <TIM_RCC_ENABLE+0x96>
		RCC_voidEnablePeripheralClock(RCC_APB2, RCC_APB2_TIM11EN);
 80031fa:	2112      	movs	r1, #18
 80031fc:	2002      	movs	r0, #2
 80031fe:	f7ff fdf9 	bl	8002df4 <RCC_voidEnablePeripheralClock>
}
 8003202:	bf00      	nop
 8003204:	3708      	adds	r7, #8
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
 800320a:	bf00      	nop
 800320c:	40010000 	.word	0x40010000
 8003210:	40000400 	.word	0x40000400
 8003214:	40000800 	.word	0x40000800
 8003218:	40000c00 	.word	0x40000c00
 800321c:	40014000 	.word	0x40014000
 8003220:	40014400 	.word	0x40014400
 8003224:	40014800 	.word	0x40014800

08003228 <TIM_GPIO_INIT>:
static void TIM_GPIO_INIT(volatile TIM_t* TIM_Instance)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b082      	sub	sp, #8
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
	RCC_voidEnablePeripheralClock(RCC_AHB,RCC_AHB_GPIOAEN);
 8003230:	2100      	movs	r1, #0
 8003232:	2000      	movs	r0, #0
 8003234:	f7ff fdde 	bl	8002df4 <RCC_voidEnablePeripheralClock>
	RCC_voidEnablePeripheralClock(RCC_AHB,RCC_AHB_GPIOBEN);
 8003238:	2101      	movs	r1, #1
 800323a:	2000      	movs	r0, #0
 800323c:	f7ff fdda 	bl	8002df4 <RCC_voidEnablePeripheralClock>
	if(TIM_Instance == TIM1)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	4a3d      	ldr	r2, [pc, #244]	; (8003338 <TIM_GPIO_INIT+0x110>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d10a      	bne.n	800325e <TIM_GPIO_INIT+0x36>
	{
		GPIO_voidSetPinMode(GPIO_PORTA, GPIO_PIN8, GPIO_ALTERNATE_FUNCTION_PIN_MODE);
 8003248:	2202      	movs	r2, #2
 800324a:	2108      	movs	r1, #8
 800324c:	2000      	movs	r0, #0
 800324e:	f7ff fa85 	bl	800275c <GPIO_voidSetPinMode>
		GPIO_voidSetPinAlternateFunction(GPIO_PORTA, GPIO_PIN8, 1);
 8003252:	2201      	movs	r2, #1
 8003254:	2108      	movs	r1, #8
 8003256:	2000      	movs	r0, #0
 8003258:	f7ff fb2c 	bl	80028b4 <GPIO_voidSetPinAlternateFunction>
	else if(TIM_Instance == TIM11)
	{
		GPIO_voidSetPinMode(GPIO_PORTB, GPIO_PIN9, GPIO_ALTERNATE_FUNCTION_PIN_MODE);
		GPIO_voidSetPinAlternateFunction(GPIO_PORTB, GPIO_PIN9, 2);
	}
}
 800325c:	e067      	b.n	800332e <TIM_GPIO_INIT+0x106>
	else if(TIM_Instance == TIM2)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003264:	d10a      	bne.n	800327c <TIM_GPIO_INIT+0x54>
		GPIO_voidSetPinMode(GPIO_PORTA, GPIO_PIN5, GPIO_ALTERNATE_FUNCTION_PIN_MODE);
 8003266:	2202      	movs	r2, #2
 8003268:	2105      	movs	r1, #5
 800326a:	2000      	movs	r0, #0
 800326c:	f7ff fa76 	bl	800275c <GPIO_voidSetPinMode>
		GPIO_voidSetPinAlternateFunction(GPIO_PORTA, GPIO_PIN5, 1);
 8003270:	2201      	movs	r2, #1
 8003272:	2105      	movs	r1, #5
 8003274:	2000      	movs	r0, #0
 8003276:	f7ff fb1d 	bl	80028b4 <GPIO_voidSetPinAlternateFunction>
}
 800327a:	e058      	b.n	800332e <TIM_GPIO_INIT+0x106>
	else if(TIM_Instance == TIM3)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	4a2f      	ldr	r2, [pc, #188]	; (800333c <TIM_GPIO_INIT+0x114>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d10a      	bne.n	800329a <TIM_GPIO_INIT+0x72>
		GPIO_voidSetPinMode(GPIO_PORTB, GPIO_PIN4, GPIO_ALTERNATE_FUNCTION_PIN_MODE);
 8003284:	2202      	movs	r2, #2
 8003286:	2104      	movs	r1, #4
 8003288:	2001      	movs	r0, #1
 800328a:	f7ff fa67 	bl	800275c <GPIO_voidSetPinMode>
		GPIO_voidSetPinAlternateFunction(GPIO_PORTB, GPIO_PIN4, 2);
 800328e:	2202      	movs	r2, #2
 8003290:	2104      	movs	r1, #4
 8003292:	2001      	movs	r0, #1
 8003294:	f7ff fb0e 	bl	80028b4 <GPIO_voidSetPinAlternateFunction>
}
 8003298:	e049      	b.n	800332e <TIM_GPIO_INIT+0x106>
	else if(TIM_Instance == TIM4)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	4a28      	ldr	r2, [pc, #160]	; (8003340 <TIM_GPIO_INIT+0x118>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d10a      	bne.n	80032b8 <TIM_GPIO_INIT+0x90>
		GPIO_voidSetPinMode(GPIO_PORTB, GPIO_PIN6, GPIO_ALTERNATE_FUNCTION_PIN_MODE);
 80032a2:	2202      	movs	r2, #2
 80032a4:	2106      	movs	r1, #6
 80032a6:	2001      	movs	r0, #1
 80032a8:	f7ff fa58 	bl	800275c <GPIO_voidSetPinMode>
		GPIO_voidSetPinAlternateFunction(GPIO_PORTB, GPIO_PIN6, 2);
 80032ac:	2202      	movs	r2, #2
 80032ae:	2106      	movs	r1, #6
 80032b0:	2001      	movs	r0, #1
 80032b2:	f7ff faff 	bl	80028b4 <GPIO_voidSetPinAlternateFunction>
}
 80032b6:	e03a      	b.n	800332e <TIM_GPIO_INIT+0x106>
	else if(TIM_Instance == TIM5)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	4a22      	ldr	r2, [pc, #136]	; (8003344 <TIM_GPIO_INIT+0x11c>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d10a      	bne.n	80032d6 <TIM_GPIO_INIT+0xae>
		GPIO_voidSetPinMode(GPIO_PORTA, GPIO_PIN0, GPIO_ALTERNATE_FUNCTION_PIN_MODE);
 80032c0:	2202      	movs	r2, #2
 80032c2:	2100      	movs	r1, #0
 80032c4:	2000      	movs	r0, #0
 80032c6:	f7ff fa49 	bl	800275c <GPIO_voidSetPinMode>
		GPIO_voidSetPinAlternateFunction(GPIO_PORTA, GPIO_PIN0, 2);
 80032ca:	2202      	movs	r2, #2
 80032cc:	2100      	movs	r1, #0
 80032ce:	2000      	movs	r0, #0
 80032d0:	f7ff faf0 	bl	80028b4 <GPIO_voidSetPinAlternateFunction>
}
 80032d4:	e02b      	b.n	800332e <TIM_GPIO_INIT+0x106>
	else if(TIM_Instance == TIM9)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	4a1b      	ldr	r2, [pc, #108]	; (8003348 <TIM_GPIO_INIT+0x120>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d10a      	bne.n	80032f4 <TIM_GPIO_INIT+0xcc>
		GPIO_voidSetPinMode(GPIO_PORTA, GPIO_PIN2, GPIO_ALTERNATE_FUNCTION_PIN_MODE);
 80032de:	2202      	movs	r2, #2
 80032e0:	2102      	movs	r1, #2
 80032e2:	2000      	movs	r0, #0
 80032e4:	f7ff fa3a 	bl	800275c <GPIO_voidSetPinMode>
		GPIO_voidSetPinAlternateFunction(GPIO_PORTA, GPIO_PIN2, 3);
 80032e8:	2203      	movs	r2, #3
 80032ea:	2102      	movs	r1, #2
 80032ec:	2000      	movs	r0, #0
 80032ee:	f7ff fae1 	bl	80028b4 <GPIO_voidSetPinAlternateFunction>
}
 80032f2:	e01c      	b.n	800332e <TIM_GPIO_INIT+0x106>
	else if(TIM_Instance == TIM10)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	4a15      	ldr	r2, [pc, #84]	; (800334c <TIM_GPIO_INIT+0x124>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d10a      	bne.n	8003312 <TIM_GPIO_INIT+0xea>
		GPIO_voidSetPinMode(GPIO_PORTB, GPIO_PIN8, GPIO_ALTERNATE_FUNCTION_PIN_MODE);
 80032fc:	2202      	movs	r2, #2
 80032fe:	2108      	movs	r1, #8
 8003300:	2001      	movs	r0, #1
 8003302:	f7ff fa2b 	bl	800275c <GPIO_voidSetPinMode>
		GPIO_voidSetPinAlternateFunction(GPIO_PORTB, GPIO_PIN8, 2);
 8003306:	2202      	movs	r2, #2
 8003308:	2108      	movs	r1, #8
 800330a:	2001      	movs	r0, #1
 800330c:	f7ff fad2 	bl	80028b4 <GPIO_voidSetPinAlternateFunction>
}
 8003310:	e00d      	b.n	800332e <TIM_GPIO_INIT+0x106>
	else if(TIM_Instance == TIM11)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	4a0e      	ldr	r2, [pc, #56]	; (8003350 <TIM_GPIO_INIT+0x128>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d109      	bne.n	800332e <TIM_GPIO_INIT+0x106>
		GPIO_voidSetPinMode(GPIO_PORTB, GPIO_PIN9, GPIO_ALTERNATE_FUNCTION_PIN_MODE);
 800331a:	2202      	movs	r2, #2
 800331c:	2109      	movs	r1, #9
 800331e:	2001      	movs	r0, #1
 8003320:	f7ff fa1c 	bl	800275c <GPIO_voidSetPinMode>
		GPIO_voidSetPinAlternateFunction(GPIO_PORTB, GPIO_PIN9, 2);
 8003324:	2202      	movs	r2, #2
 8003326:	2109      	movs	r1, #9
 8003328:	2001      	movs	r0, #1
 800332a:	f7ff fac3 	bl	80028b4 <GPIO_voidSetPinAlternateFunction>
}
 800332e:	bf00      	nop
 8003330:	3708      	adds	r7, #8
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}
 8003336:	bf00      	nop
 8003338:	40010000 	.word	0x40010000
 800333c:	40000400 	.word	0x40000400
 8003340:	40000800 	.word	0x40000800
 8003344:	40000c00 	.word	0x40000c00
 8003348:	40014000 	.word	0x40014000
 800334c:	40014400 	.word	0x40014400
 8003350:	40014800 	.word	0x40014800

08003354 <TIM_Update_INT_Init>:
static void TIM_Update_INT_Init(const TIM_Config_t* TIM_Config)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b082      	sub	sp, #8
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
	if(TIM_Config->TIM_Instance == TIM1)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a4d      	ldr	r2, [pc, #308]	; (8003498 <TIM_Update_INT_Init+0x144>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d10d      	bne.n	8003382 <TIM_Update_INT_Init+0x2e>
	{
		MNVIC_voidEnableIRQ(TIM1_UP_TIM10_IRQn);
 8003366:	2019      	movs	r0, #25
 8003368:	f7ff fc60 	bl	8002c2c <MNVIC_voidEnableIRQ>
		TIMx_UP_INT_Callback[TIM1_CALLBACK] = TIM_Config->UP_Callback;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	695b      	ldr	r3, [r3, #20]
 8003370:	4a4a      	ldr	r2, [pc, #296]	; (800349c <TIM_Update_INT_Init+0x148>)
 8003372:	6013      	str	r3, [r2, #0]
		TIM1->DIER |= TIM_UIE;
 8003374:	4b48      	ldr	r3, [pc, #288]	; (8003498 <TIM_Update_INT_Init+0x144>)
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	4a47      	ldr	r2, [pc, #284]	; (8003498 <TIM_Update_INT_Init+0x144>)
 800337a:	f043 0301 	orr.w	r3, r3, #1
 800337e:	60d3      	str	r3, [r2, #12]
		MNVIC_voidEnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
		TIMx_UP_INT_Callback[TIM11_CALLBACK] = TIM_Config->UP_Callback;
		TIM11->DIER |= TIM_UIE;
	}

}
 8003380:	e085      	b.n	800348e <TIM_Update_INT_Init+0x13a>
	else if(TIM_Config->TIM_Instance == TIM2)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800338a:	d10f      	bne.n	80033ac <TIM_Update_INT_Init+0x58>
		MNVIC_voidEnableIRQ(TIM2_IRQn);
 800338c:	201c      	movs	r0, #28
 800338e:	f7ff fc4d 	bl	8002c2c <MNVIC_voidEnableIRQ>
		TIMx_UP_INT_Callback[TIM2_CALLBACK] = TIM_Config->UP_Callback;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	695b      	ldr	r3, [r3, #20]
 8003396:	4a41      	ldr	r2, [pc, #260]	; (800349c <TIM_Update_INT_Init+0x148>)
 8003398:	6053      	str	r3, [r2, #4]
		TIM2->DIER |= TIM_UIE;
 800339a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800339e:	68db      	ldr	r3, [r3, #12]
 80033a0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80033a4:	f043 0301 	orr.w	r3, r3, #1
 80033a8:	60d3      	str	r3, [r2, #12]
}
 80033aa:	e070      	b.n	800348e <TIM_Update_INT_Init+0x13a>
	else if(TIM_Config->TIM_Instance == TIM3)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a3b      	ldr	r2, [pc, #236]	; (80034a0 <TIM_Update_INT_Init+0x14c>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d10d      	bne.n	80033d2 <TIM_Update_INT_Init+0x7e>
		MNVIC_voidEnableIRQ(TIM3_IRQn);
 80033b6:	201d      	movs	r0, #29
 80033b8:	f7ff fc38 	bl	8002c2c <MNVIC_voidEnableIRQ>
		TIMx_UP_INT_Callback[TIM3_CALLBACK] = TIM_Config->UP_Callback;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	695b      	ldr	r3, [r3, #20]
 80033c0:	4a36      	ldr	r2, [pc, #216]	; (800349c <TIM_Update_INT_Init+0x148>)
 80033c2:	6093      	str	r3, [r2, #8]
		TIM3->DIER |= TIM_UIE;
 80033c4:	4b36      	ldr	r3, [pc, #216]	; (80034a0 <TIM_Update_INT_Init+0x14c>)
 80033c6:	68db      	ldr	r3, [r3, #12]
 80033c8:	4a35      	ldr	r2, [pc, #212]	; (80034a0 <TIM_Update_INT_Init+0x14c>)
 80033ca:	f043 0301 	orr.w	r3, r3, #1
 80033ce:	60d3      	str	r3, [r2, #12]
}
 80033d0:	e05d      	b.n	800348e <TIM_Update_INT_Init+0x13a>
	else if(TIM_Config->TIM_Instance == TIM4)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a33      	ldr	r2, [pc, #204]	; (80034a4 <TIM_Update_INT_Init+0x150>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d10d      	bne.n	80033f8 <TIM_Update_INT_Init+0xa4>
		MNVIC_voidEnableIRQ(TIM4_IRQn);
 80033dc:	201e      	movs	r0, #30
 80033de:	f7ff fc25 	bl	8002c2c <MNVIC_voidEnableIRQ>
		TIMx_UP_INT_Callback[TIM4_CALLBACK] = TIM_Config->UP_Callback;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	695b      	ldr	r3, [r3, #20]
 80033e6:	4a2d      	ldr	r2, [pc, #180]	; (800349c <TIM_Update_INT_Init+0x148>)
 80033e8:	60d3      	str	r3, [r2, #12]
		TIM4->DIER |= TIM_UIE;
 80033ea:	4b2e      	ldr	r3, [pc, #184]	; (80034a4 <TIM_Update_INT_Init+0x150>)
 80033ec:	68db      	ldr	r3, [r3, #12]
 80033ee:	4a2d      	ldr	r2, [pc, #180]	; (80034a4 <TIM_Update_INT_Init+0x150>)
 80033f0:	f043 0301 	orr.w	r3, r3, #1
 80033f4:	60d3      	str	r3, [r2, #12]
}
 80033f6:	e04a      	b.n	800348e <TIM_Update_INT_Init+0x13a>
	else if(TIM_Config->TIM_Instance == TIM5)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a2a      	ldr	r2, [pc, #168]	; (80034a8 <TIM_Update_INT_Init+0x154>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d10d      	bne.n	800341e <TIM_Update_INT_Init+0xca>
		MNVIC_voidEnableIRQ(TIM5_IRQn);
 8003402:	2032      	movs	r0, #50	; 0x32
 8003404:	f7ff fc12 	bl	8002c2c <MNVIC_voidEnableIRQ>
		TIMx_UP_INT_Callback[TIM5_CALLBACK] = TIM_Config->UP_Callback;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	695b      	ldr	r3, [r3, #20]
 800340c:	4a23      	ldr	r2, [pc, #140]	; (800349c <TIM_Update_INT_Init+0x148>)
 800340e:	6113      	str	r3, [r2, #16]
		TIM5->DIER |= TIM_UIE;
 8003410:	4b25      	ldr	r3, [pc, #148]	; (80034a8 <TIM_Update_INT_Init+0x154>)
 8003412:	68db      	ldr	r3, [r3, #12]
 8003414:	4a24      	ldr	r2, [pc, #144]	; (80034a8 <TIM_Update_INT_Init+0x154>)
 8003416:	f043 0301 	orr.w	r3, r3, #1
 800341a:	60d3      	str	r3, [r2, #12]
}
 800341c:	e037      	b.n	800348e <TIM_Update_INT_Init+0x13a>
	else if(TIM_Config->TIM_Instance == TIM9)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a22      	ldr	r2, [pc, #136]	; (80034ac <TIM_Update_INT_Init+0x158>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d10d      	bne.n	8003444 <TIM_Update_INT_Init+0xf0>
		MNVIC_voidEnableIRQ(TIM1_BRK_TIM9_IRQn);
 8003428:	2018      	movs	r0, #24
 800342a:	f7ff fbff 	bl	8002c2c <MNVIC_voidEnableIRQ>
		TIMx_UP_INT_Callback[TIM9_CALLBACK] = TIM_Config->UP_Callback;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	695b      	ldr	r3, [r3, #20]
 8003432:	4a1a      	ldr	r2, [pc, #104]	; (800349c <TIM_Update_INT_Init+0x148>)
 8003434:	6153      	str	r3, [r2, #20]
		TIM9->DIER |= TIM_UIE;
 8003436:	4b1d      	ldr	r3, [pc, #116]	; (80034ac <TIM_Update_INT_Init+0x158>)
 8003438:	68db      	ldr	r3, [r3, #12]
 800343a:	4a1c      	ldr	r2, [pc, #112]	; (80034ac <TIM_Update_INT_Init+0x158>)
 800343c:	f043 0301 	orr.w	r3, r3, #1
 8003440:	60d3      	str	r3, [r2, #12]
}
 8003442:	e024      	b.n	800348e <TIM_Update_INT_Init+0x13a>
	else if(TIM_Config->TIM_Instance == TIM10)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a19      	ldr	r2, [pc, #100]	; (80034b0 <TIM_Update_INT_Init+0x15c>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d10d      	bne.n	800346a <TIM_Update_INT_Init+0x116>
		MNVIC_voidEnableIRQ(TIM1_UP_TIM10_IRQn);
 800344e:	2019      	movs	r0, #25
 8003450:	f7ff fbec 	bl	8002c2c <MNVIC_voidEnableIRQ>
		TIMx_UP_INT_Callback[TIM10_CALLBACK] = TIM_Config->UP_Callback;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	695b      	ldr	r3, [r3, #20]
 8003458:	4a10      	ldr	r2, [pc, #64]	; (800349c <TIM_Update_INT_Init+0x148>)
 800345a:	6193      	str	r3, [r2, #24]
		TIM10->DIER |= TIM_UIE;
 800345c:	4b14      	ldr	r3, [pc, #80]	; (80034b0 <TIM_Update_INT_Init+0x15c>)
 800345e:	68db      	ldr	r3, [r3, #12]
 8003460:	4a13      	ldr	r2, [pc, #76]	; (80034b0 <TIM_Update_INT_Init+0x15c>)
 8003462:	f043 0301 	orr.w	r3, r3, #1
 8003466:	60d3      	str	r3, [r2, #12]
}
 8003468:	e011      	b.n	800348e <TIM_Update_INT_Init+0x13a>
	else if(TIM_Config->TIM_Instance == TIM11)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a11      	ldr	r2, [pc, #68]	; (80034b4 <TIM_Update_INT_Init+0x160>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d10c      	bne.n	800348e <TIM_Update_INT_Init+0x13a>
		MNVIC_voidEnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8003474:	201a      	movs	r0, #26
 8003476:	f7ff fbd9 	bl	8002c2c <MNVIC_voidEnableIRQ>
		TIMx_UP_INT_Callback[TIM11_CALLBACK] = TIM_Config->UP_Callback;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	695b      	ldr	r3, [r3, #20]
 800347e:	4a07      	ldr	r2, [pc, #28]	; (800349c <TIM_Update_INT_Init+0x148>)
 8003480:	61d3      	str	r3, [r2, #28]
		TIM11->DIER |= TIM_UIE;
 8003482:	4b0c      	ldr	r3, [pc, #48]	; (80034b4 <TIM_Update_INT_Init+0x160>)
 8003484:	68db      	ldr	r3, [r3, #12]
 8003486:	4a0b      	ldr	r2, [pc, #44]	; (80034b4 <TIM_Update_INT_Init+0x160>)
 8003488:	f043 0301 	orr.w	r3, r3, #1
 800348c:	60d3      	str	r3, [r2, #12]
}
 800348e:	bf00      	nop
 8003490:	3708      	adds	r7, #8
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}
 8003496:	bf00      	nop
 8003498:	40010000 	.word	0x40010000
 800349c:	200001b4 	.word	0x200001b4
 80034a0:	40000400 	.word	0x40000400
 80034a4:	40000800 	.word	0x40000800
 80034a8:	40000c00 	.word	0x40000c00
 80034ac:	40014000 	.word	0x40014000
 80034b0:	40014400 	.word	0x40014400
 80034b4:	40014800 	.word	0x40014800

080034b8 <TIM_Capture_Compare_INT_Init>:
static void TIM_Capture_Compare_INT_Init(const TIM_Config_t* TIM_Config)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b082      	sub	sp, #8
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
	if(TIM_Config->TIM_Instance == TIM1)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a4d      	ldr	r2, [pc, #308]	; (80035fc <TIM_Capture_Compare_INT_Init+0x144>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d10d      	bne.n	80034e6 <TIM_Capture_Compare_INT_Init+0x2e>
	{
		MNVIC_voidEnableIRQ(TIM1_CC_IRQn);
 80034ca:	201b      	movs	r0, #27
 80034cc:	f7ff fbae 	bl	8002c2c <MNVIC_voidEnableIRQ>
		TIMx_CC_INT_Callback[TIM1_CALLBACK] = TIM_Config->CC_Callback;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	699b      	ldr	r3, [r3, #24]
 80034d4:	4a4a      	ldr	r2, [pc, #296]	; (8003600 <TIM_Capture_Compare_INT_Init+0x148>)
 80034d6:	6013      	str	r3, [r2, #0]
		TIM1->DIER |= TIM_CC1IE;
 80034d8:	4b48      	ldr	r3, [pc, #288]	; (80035fc <TIM_Capture_Compare_INT_Init+0x144>)
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	4a47      	ldr	r2, [pc, #284]	; (80035fc <TIM_Capture_Compare_INT_Init+0x144>)
 80034de:	f043 0302 	orr.w	r3, r3, #2
 80034e2:	60d3      	str	r3, [r2, #12]
	{
		MNVIC_voidEnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
		TIMx_CC_INT_Callback[TIM11_CALLBACK] = TIM_Config->CC_Callback;
		TIM11->DIER |= TIM_CC1IE;
	}
}
 80034e4:	e085      	b.n	80035f2 <TIM_Capture_Compare_INT_Init+0x13a>
	else if(TIM_Config->TIM_Instance == TIM2)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034ee:	d10f      	bne.n	8003510 <TIM_Capture_Compare_INT_Init+0x58>
		MNVIC_voidEnableIRQ(TIM2_IRQn);
 80034f0:	201c      	movs	r0, #28
 80034f2:	f7ff fb9b 	bl	8002c2c <MNVIC_voidEnableIRQ>
		TIMx_CC_INT_Callback[TIM2_CALLBACK] = TIM_Config->CC_Callback;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	699b      	ldr	r3, [r3, #24]
 80034fa:	4a41      	ldr	r2, [pc, #260]	; (8003600 <TIM_Capture_Compare_INT_Init+0x148>)
 80034fc:	6053      	str	r3, [r2, #4]
		TIM2->DIER |= TIM_CC1IE;
 80034fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003502:	68db      	ldr	r3, [r3, #12]
 8003504:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003508:	f043 0302 	orr.w	r3, r3, #2
 800350c:	60d3      	str	r3, [r2, #12]
}
 800350e:	e070      	b.n	80035f2 <TIM_Capture_Compare_INT_Init+0x13a>
	else if(TIM_Config->TIM_Instance == TIM3)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a3b      	ldr	r2, [pc, #236]	; (8003604 <TIM_Capture_Compare_INT_Init+0x14c>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d10d      	bne.n	8003536 <TIM_Capture_Compare_INT_Init+0x7e>
		MNVIC_voidEnableIRQ(TIM3_IRQn);
 800351a:	201d      	movs	r0, #29
 800351c:	f7ff fb86 	bl	8002c2c <MNVIC_voidEnableIRQ>
		TIMx_CC_INT_Callback[TIM3_CALLBACK] = TIM_Config->CC_Callback;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	699b      	ldr	r3, [r3, #24]
 8003524:	4a36      	ldr	r2, [pc, #216]	; (8003600 <TIM_Capture_Compare_INT_Init+0x148>)
 8003526:	6093      	str	r3, [r2, #8]
		TIM3->DIER |= TIM_CC1IE;
 8003528:	4b36      	ldr	r3, [pc, #216]	; (8003604 <TIM_Capture_Compare_INT_Init+0x14c>)
 800352a:	68db      	ldr	r3, [r3, #12]
 800352c:	4a35      	ldr	r2, [pc, #212]	; (8003604 <TIM_Capture_Compare_INT_Init+0x14c>)
 800352e:	f043 0302 	orr.w	r3, r3, #2
 8003532:	60d3      	str	r3, [r2, #12]
}
 8003534:	e05d      	b.n	80035f2 <TIM_Capture_Compare_INT_Init+0x13a>
	else if(TIM_Config->TIM_Instance == TIM4)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a33      	ldr	r2, [pc, #204]	; (8003608 <TIM_Capture_Compare_INT_Init+0x150>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d10d      	bne.n	800355c <TIM_Capture_Compare_INT_Init+0xa4>
		MNVIC_voidEnableIRQ(TIM4_IRQn);
 8003540:	201e      	movs	r0, #30
 8003542:	f7ff fb73 	bl	8002c2c <MNVIC_voidEnableIRQ>
		TIMx_CC_INT_Callback[TIM4_CALLBACK] = TIM_Config->CC_Callback;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	699b      	ldr	r3, [r3, #24]
 800354a:	4a2d      	ldr	r2, [pc, #180]	; (8003600 <TIM_Capture_Compare_INT_Init+0x148>)
 800354c:	60d3      	str	r3, [r2, #12]
		TIM4->DIER |= TIM_CC1IE;
 800354e:	4b2e      	ldr	r3, [pc, #184]	; (8003608 <TIM_Capture_Compare_INT_Init+0x150>)
 8003550:	68db      	ldr	r3, [r3, #12]
 8003552:	4a2d      	ldr	r2, [pc, #180]	; (8003608 <TIM_Capture_Compare_INT_Init+0x150>)
 8003554:	f043 0302 	orr.w	r3, r3, #2
 8003558:	60d3      	str	r3, [r2, #12]
}
 800355a:	e04a      	b.n	80035f2 <TIM_Capture_Compare_INT_Init+0x13a>
	else if(TIM_Config->TIM_Instance == TIM5)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a2a      	ldr	r2, [pc, #168]	; (800360c <TIM_Capture_Compare_INT_Init+0x154>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d10d      	bne.n	8003582 <TIM_Capture_Compare_INT_Init+0xca>
		MNVIC_voidEnableIRQ(TIM5_IRQn);
 8003566:	2032      	movs	r0, #50	; 0x32
 8003568:	f7ff fb60 	bl	8002c2c <MNVIC_voidEnableIRQ>
		TIMx_CC_INT_Callback[TIM5_CALLBACK] = TIM_Config->CC_Callback;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	699b      	ldr	r3, [r3, #24]
 8003570:	4a23      	ldr	r2, [pc, #140]	; (8003600 <TIM_Capture_Compare_INT_Init+0x148>)
 8003572:	6113      	str	r3, [r2, #16]
		TIM5->DIER |= TIM_CC1IE;
 8003574:	4b25      	ldr	r3, [pc, #148]	; (800360c <TIM_Capture_Compare_INT_Init+0x154>)
 8003576:	68db      	ldr	r3, [r3, #12]
 8003578:	4a24      	ldr	r2, [pc, #144]	; (800360c <TIM_Capture_Compare_INT_Init+0x154>)
 800357a:	f043 0302 	orr.w	r3, r3, #2
 800357e:	60d3      	str	r3, [r2, #12]
}
 8003580:	e037      	b.n	80035f2 <TIM_Capture_Compare_INT_Init+0x13a>
	else if(TIM_Config->TIM_Instance == TIM9)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a22      	ldr	r2, [pc, #136]	; (8003610 <TIM_Capture_Compare_INT_Init+0x158>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d10d      	bne.n	80035a8 <TIM_Capture_Compare_INT_Init+0xf0>
		MNVIC_voidEnableIRQ(TIM1_BRK_TIM9_IRQn);
 800358c:	2018      	movs	r0, #24
 800358e:	f7ff fb4d 	bl	8002c2c <MNVIC_voidEnableIRQ>
		TIMx_CC_INT_Callback[TIM9_CALLBACK] = TIM_Config->CC_Callback;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	699b      	ldr	r3, [r3, #24]
 8003596:	4a1a      	ldr	r2, [pc, #104]	; (8003600 <TIM_Capture_Compare_INT_Init+0x148>)
 8003598:	6153      	str	r3, [r2, #20]
		TIM9->DIER |= TIM_CC1IE;
 800359a:	4b1d      	ldr	r3, [pc, #116]	; (8003610 <TIM_Capture_Compare_INT_Init+0x158>)
 800359c:	68db      	ldr	r3, [r3, #12]
 800359e:	4a1c      	ldr	r2, [pc, #112]	; (8003610 <TIM_Capture_Compare_INT_Init+0x158>)
 80035a0:	f043 0302 	orr.w	r3, r3, #2
 80035a4:	60d3      	str	r3, [r2, #12]
}
 80035a6:	e024      	b.n	80035f2 <TIM_Capture_Compare_INT_Init+0x13a>
	else if(TIM_Config->TIM_Instance == TIM10)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a19      	ldr	r2, [pc, #100]	; (8003614 <TIM_Capture_Compare_INT_Init+0x15c>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d10d      	bne.n	80035ce <TIM_Capture_Compare_INT_Init+0x116>
		MNVIC_voidEnableIRQ(TIM1_UP_TIM10_IRQn);
 80035b2:	2019      	movs	r0, #25
 80035b4:	f7ff fb3a 	bl	8002c2c <MNVIC_voidEnableIRQ>
		TIMx_CC_INT_Callback[TIM10_CALLBACK] = TIM_Config->CC_Callback;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	699b      	ldr	r3, [r3, #24]
 80035bc:	4a10      	ldr	r2, [pc, #64]	; (8003600 <TIM_Capture_Compare_INT_Init+0x148>)
 80035be:	6193      	str	r3, [r2, #24]
		TIM10->DIER |= TIM_CC1IE;
 80035c0:	4b14      	ldr	r3, [pc, #80]	; (8003614 <TIM_Capture_Compare_INT_Init+0x15c>)
 80035c2:	68db      	ldr	r3, [r3, #12]
 80035c4:	4a13      	ldr	r2, [pc, #76]	; (8003614 <TIM_Capture_Compare_INT_Init+0x15c>)
 80035c6:	f043 0302 	orr.w	r3, r3, #2
 80035ca:	60d3      	str	r3, [r2, #12]
}
 80035cc:	e011      	b.n	80035f2 <TIM_Capture_Compare_INT_Init+0x13a>
	else if(TIM_Config->TIM_Instance == TIM11)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a11      	ldr	r2, [pc, #68]	; (8003618 <TIM_Capture_Compare_INT_Init+0x160>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d10c      	bne.n	80035f2 <TIM_Capture_Compare_INT_Init+0x13a>
		MNVIC_voidEnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80035d8:	201a      	movs	r0, #26
 80035da:	f7ff fb27 	bl	8002c2c <MNVIC_voidEnableIRQ>
		TIMx_CC_INT_Callback[TIM11_CALLBACK] = TIM_Config->CC_Callback;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	699b      	ldr	r3, [r3, #24]
 80035e2:	4a07      	ldr	r2, [pc, #28]	; (8003600 <TIM_Capture_Compare_INT_Init+0x148>)
 80035e4:	61d3      	str	r3, [r2, #28]
		TIM11->DIER |= TIM_CC1IE;
 80035e6:	4b0c      	ldr	r3, [pc, #48]	; (8003618 <TIM_Capture_Compare_INT_Init+0x160>)
 80035e8:	68db      	ldr	r3, [r3, #12]
 80035ea:	4a0b      	ldr	r2, [pc, #44]	; (8003618 <TIM_Capture_Compare_INT_Init+0x160>)
 80035ec:	f043 0302 	orr.w	r3, r3, #2
 80035f0:	60d3      	str	r3, [r2, #12]
}
 80035f2:	bf00      	nop
 80035f4:	3708      	adds	r7, #8
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}
 80035fa:	bf00      	nop
 80035fc:	40010000 	.word	0x40010000
 8003600:	200001d4 	.word	0x200001d4
 8003604:	40000400 	.word	0x40000400
 8003608:	40000800 	.word	0x40000800
 800360c:	40000c00 	.word	0x40000c00
 8003610:	40014000 	.word	0x40014000
 8003614:	40014400 	.word	0x40014400
 8003618:	40014800 	.word	0x40014800

0800361c <TIM_PWM_INIT>:
static void TIM_PWM_INIT(const TIM_Config_t* TIM_Config)
{
 800361c:	b5b0      	push	{r4, r5, r7, lr}
 800361e:	b082      	sub	sp, #8
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
	TIM_Config->TIM_Instance->CCMR1 = TIM_PWM_MODE_ENABLE;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	2278      	movs	r2, #120	; 0x78
 800362a:	619a      	str	r2, [r3, #24]
	TIM_Config->TIM_Instance->CCER = TIM_OUTPUT_MODE_ENABLE;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	2203      	movs	r2, #3
 8003632:	621a      	str	r2, [r3, #32]
	if(TIM_Config->TIM_Instance == TIM1)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a17      	ldr	r2, [pc, #92]	; (8003698 <TIM_PWM_INIT+0x7c>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d104      	bne.n	8003648 <TIM_PWM_INIT+0x2c>
	{
		TIM_Config->TIM_Instance->BDTR = TIM_OC_PIN_ENABLE;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f44f 420c 	mov.w	r2, #35840	; 0x8c00
 8003646:	645a      	str	r2, [r3, #68]	; 0x44
	}
	TIM_Config->TIM_Instance->CCR1 =(u32)(((TIM_Config->TIM_PWM_DutyCycle)/100.0)*TIM_Config->TIM_Preload);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	7c1b      	ldrb	r3, [r3, #16]
 800364c:	4618      	mov	r0, r3
 800364e:	f7fc ff19 	bl	8000484 <__aeabi_i2d>
 8003652:	f04f 0200 	mov.w	r2, #0
 8003656:	4b11      	ldr	r3, [pc, #68]	; (800369c <TIM_PWM_INIT+0x80>)
 8003658:	f7fd f8a8 	bl	80007ac <__aeabi_ddiv>
 800365c:	4602      	mov	r2, r0
 800365e:	460b      	mov	r3, r1
 8003660:	4614      	mov	r4, r2
 8003662:	461d      	mov	r5, r3
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	4618      	mov	r0, r3
 800366a:	f7fc fefb 	bl	8000464 <__aeabi_ui2d>
 800366e:	4602      	mov	r2, r0
 8003670:	460b      	mov	r3, r1
 8003672:	4620      	mov	r0, r4
 8003674:	4629      	mov	r1, r5
 8003676:	f7fc ff6f 	bl	8000558 <__aeabi_dmul>
 800367a:	4602      	mov	r2, r0
 800367c:	460b      	mov	r3, r1
 800367e:	4610      	mov	r0, r2
 8003680:	4619      	mov	r1, r3
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681c      	ldr	r4, [r3, #0]
 8003686:	f7fd f979 	bl	800097c <__aeabi_d2uiz>
 800368a:	4603      	mov	r3, r0
 800368c:	6363      	str	r3, [r4, #52]	; 0x34
}
 800368e:	bf00      	nop
 8003690:	3708      	adds	r7, #8
 8003692:	46bd      	mov	sp, r7
 8003694:	bdb0      	pop	{r4, r5, r7, pc}
 8003696:	bf00      	nop
 8003698:	40010000 	.word	0x40010000
 800369c:	40590000 	.word	0x40590000

080036a0 <TIM_IC_INIT>:
static void TIM_IC_INIT(const TIM_Config_t* TIM_Config)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b083      	sub	sp, #12
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
	TIM_Config->TIM_Instance->CCMR1 = TIM_IC_MODE;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	2201      	movs	r2, #1
 80036ae:	619a      	str	r2, [r3, #24]
	switch(TIM_Config->TIM_IC_Mode)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	7bdb      	ldrb	r3, [r3, #15]
 80036b4:	2b02      	cmp	r3, #2
 80036b6:	d010      	beq.n	80036da <TIM_IC_INIT+0x3a>
 80036b8:	2b02      	cmp	r3, #2
 80036ba:	dc13      	bgt.n	80036e4 <TIM_IC_INIT+0x44>
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d002      	beq.n	80036c6 <TIM_IC_INIT+0x26>
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d005      	beq.n	80036d0 <TIM_IC_INIT+0x30>
		break;
	case TIM_IC_BOTH_EDGES:
		TIM_Config->TIM_Instance->CCER= TIM_IC_BOTH_EDGES_ENABLE;
		break;
	}
}
 80036c4:	e00e      	b.n	80036e4 <TIM_IC_INIT+0x44>
		TIM_Config->TIM_Instance->CCER= TIM_IC_RISING_EDGE_ENABLE;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	2201      	movs	r2, #1
 80036cc:	621a      	str	r2, [r3, #32]
		break;
 80036ce:	e009      	b.n	80036e4 <TIM_IC_INIT+0x44>
		TIM_Config->TIM_Instance->CCER= TIM_IC_FALLING_EDGE_ENABLE;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	2203      	movs	r2, #3
 80036d6:	621a      	str	r2, [r3, #32]
		break;
 80036d8:	e004      	b.n	80036e4 <TIM_IC_INIT+0x44>
		TIM_Config->TIM_Instance->CCER= TIM_IC_BOTH_EDGES_ENABLE;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	220b      	movs	r2, #11
 80036e0:	621a      	str	r2, [r3, #32]
		break;
 80036e2:	bf00      	nop
}
 80036e4:	bf00      	nop
 80036e6:	370c      	adds	r7, #12
 80036e8:	46bd      	mov	sp, r7
 80036ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ee:	4770      	bx	lr

080036f0 <TIM_Init>:
/**********************************************************************************************************************
 *  GLOBAL FUNCTIONS
 *********************************************************************************************************************/
void TIM_Init(const TIM_Config_t* TIM_Config)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b082      	sub	sp, #8
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
	TIM_RCC_ENABLE(TIM_Config->TIM_Instance);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4618      	mov	r0, r3
 80036fe:	f7ff fd35 	bl	800316c <TIM_RCC_ENABLE>
	CLR_BIT(TIM_Config->TIM_Instance->CR1,TIM_CEN_BIT_POS);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f022 0201 	bic.w	r2, r2, #1
 8003710:	601a      	str	r2, [r3, #0]
	if(TIM_Config->TIM_Mode != TIM_NORMAL_MODE)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	7b9b      	ldrb	r3, [r3, #14]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d004      	beq.n	8003724 <TIM_Init+0x34>
	{
		TIM_GPIO_INIT(TIM_Config->TIM_Instance);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4618      	mov	r0, r3
 8003720:	f7ff fd82 	bl	8003228 <TIM_GPIO_INIT>
	}
	if (TIM_Config->CAPTURE_COMPARE_INT_ENABLE == INTERRUPT_ENABLED)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	7c5b      	ldrb	r3, [r3, #17]
 8003728:	2b01      	cmp	r3, #1
 800372a:	d102      	bne.n	8003732 <TIM_Init+0x42>
	{
		TIM_Capture_Compare_INT_Init(TIM_Config);
 800372c:	6878      	ldr	r0, [r7, #4]
 800372e:	f7ff fec3 	bl	80034b8 <TIM_Capture_Compare_INT_Init>
	}
	TIM_Config->TIM_Instance->ARR = TIM_Config->TIM_Preload;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	687a      	ldr	r2, [r7, #4]
 8003738:	6892      	ldr	r2, [r2, #8]
 800373a:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM_Config->TIM_Instance->PSC = TIM_Config->TIM_Prescaler;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	889a      	ldrh	r2, [r3, #4]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	629a      	str	r2, [r3, #40]	; 0x28
	TIM_Config->TIM_Instance->RCR = TIM_Config->TIM_RepetitionCounter;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	899a      	ldrh	r2, [r3, #12]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	631a      	str	r2, [r3, #48]	; 0x30
	if(TIM_Config->TIM_Direction == TIM_UP_COUNTER)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	799b      	ldrb	r3, [r3, #6]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d108      	bne.n	800376a <TIM_Init+0x7a>
	{
		CLR_BIT(TIM_Config->TIM_Instance->CR1,TIM_DIR_BIT_POS);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f022 0210 	bic.w	r2, r2, #16
 8003766:	601a      	str	r2, [r3, #0]
 8003768:	e007      	b.n	800377a <TIM_Init+0x8a>
	}
	else
	{
		SET_BIT(TIM_Config->TIM_Instance->CR1,TIM_DIR_BIT_POS);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f042 0210 	orr.w	r2, r2, #16
 8003778:	601a      	str	r2, [r3, #0]
	}
	if(TIM_Config->TIM_Mode == TIM_PWM_MODE)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	7b9b      	ldrb	r3, [r3, #14]
 800377e:	2b02      	cmp	r3, #2
 8003780:	d103      	bne.n	800378a <TIM_Init+0x9a>
	{
		TIM_PWM_INIT(TIM_Config);
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f7ff ff4a 	bl	800361c <TIM_PWM_INIT>
 8003788:	e006      	b.n	8003798 <TIM_Init+0xa8>
	}
	else if (TIM_Config->TIM_Mode == TIM_INPUT_CAPTURE_MODE)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	7b9b      	ldrb	r3, [r3, #14]
 800378e:	2b01      	cmp	r3, #1
 8003790:	d102      	bne.n	8003798 <TIM_Init+0xa8>
	{
		TIM_IC_INIT(TIM_Config);
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f7ff ff84 	bl	80036a0 <TIM_IC_INIT>
	}
	SET_BIT(TIM_Config->TIM_Instance->CR1,TIM_ARPE_BIT_POS);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80037a6:	601a      	str	r2, [r3, #0]
	SET_BIT(TIM_Config->TIM_Instance->CR1,TIM_URS_BIT_POS);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f042 0204 	orr.w	r2, r2, #4
 80037b6:	601a      	str	r2, [r3, #0]
	SET_BIT(TIM_Config->TIM_Instance->EGR,TIM_UG_BIT_POS);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	695a      	ldr	r2, [r3, #20]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f042 0201 	orr.w	r2, r2, #1
 80037c6:	615a      	str	r2, [r3, #20]
	SET_BIT(TIM_Config->TIM_Instance->CR1,TIM_CEN_BIT_POS);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f042 0201 	orr.w	r2, r2, #1
 80037d6:	601a      	str	r2, [r3, #0]
}
 80037d8:	bf00      	nop
 80037da:	3708      	adds	r7, #8
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}

080037e0 <TIM_DeInit>:
void TIM_DeInit(const TIM_Config_t* TIM_Config)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b083      	sub	sp, #12
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
	SET_BIT(TIM_Config->TIM_Instance->EGR,TIM_UG_BIT_POS);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	695a      	ldr	r2, [r3, #20]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f042 0201 	orr.w	r2, r2, #1
 80037f6:	615a      	str	r2, [r3, #20]
	CLR_BIT(TIM_Config->TIM_Instance->CR1,TIM_CEN_BIT_POS);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f022 0201 	bic.w	r2, r2, #1
 8003806:	601a      	str	r2, [r3, #0]
	TIM_Config->TIM_Instance->DIER &= ~TIM_UIE;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	68da      	ldr	r2, [r3, #12]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f022 0201 	bic.w	r2, r2, #1
 8003816:	60da      	str	r2, [r3, #12]
}
 8003818:	bf00      	nop
 800381a:	370c      	adds	r7, #12
 800381c:	46bd      	mov	sp, r7
 800381e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003822:	4770      	bx	lr

08003824 <TIM_GetElapsedTime>:
void TIM_Reset(const TIM_Config_t* TIM_Config)
{
	SET_BIT(TIM_Config->TIM_Instance->EGR,TIM_UG_BIT_POS);
}
u32 TIM_GetElapsedTime(const TIM_Config_t* TIM_Config)
{
 8003824:	b480      	push	{r7}
 8003826:	b085      	sub	sp, #20
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
	u32 ElapsedTime =0;
 800382c:	2300      	movs	r3, #0
 800382e:	60fb      	str	r3, [r7, #12]
	if(TIM_Config->TIM_Direction ==TIM_UP_COUNTER)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	799b      	ldrb	r3, [r3, #6]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d104      	bne.n	8003842 <TIM_GetElapsedTime+0x1e>
	{
		ElapsedTime = TIM_Config->TIM_Instance->CNT;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800383e:	60fb      	str	r3, [r7, #12]
 8003840:	e00a      	b.n	8003858 <TIM_GetElapsedTime+0x34>
	}
	else if(TIM_Config->TIM_Direction == TIM_DOWN_COUNTER){
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	799b      	ldrb	r3, [r3, #6]
 8003846:	2b01      	cmp	r3, #1
 8003848:	d106      	bne.n	8003858 <TIM_GetElapsedTime+0x34>
		ElapsedTime = TIM_Config->TIM_Preload - TIM_Config->TIM_Instance->CNT;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	689a      	ldr	r2, [r3, #8]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003854:	1ad3      	subs	r3, r2, r3
 8003856:	60fb      	str	r3, [r7, #12]
	}
	return ElapsedTime;
 8003858:	68fb      	ldr	r3, [r7, #12]
}
 800385a:	4618      	mov	r0, r3
 800385c:	3714      	adds	r7, #20
 800385e:	46bd      	mov	sp, r7
 8003860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003864:	4770      	bx	lr
	...

08003868 <TIM_SingleInterval>:
void TIM_SingleInterval(TIM_Config_t* TIM_Config , u32 preload , pCallBackNotification callback)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b084      	sub	sp, #16
 800386c:	af00      	add	r7, sp, #0
 800386e:	60f8      	str	r0, [r7, #12]
 8003870:	60b9      	str	r1, [r7, #8]
 8003872:	607a      	str	r2, [r7, #4]
	CLR_BIT(TIM_Config->TIM_Instance->CR1,TIM_CEN_BIT_POS);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f022 0201 	bic.w	r2, r2, #1
 8003882:	601a      	str	r2, [r3, #0]
	TIM_Config->TIM_Instance->ARR = preload;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	68ba      	ldr	r2, [r7, #8]
 800388a:	62da      	str	r2, [r3, #44]	; 0x2c
	SET_BIT(TIM_Config->TIM_Instance->EGR,TIM_UG_BIT_POS);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	695a      	ldr	r2, [r3, #20]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f042 0201 	orr.w	r2, r2, #1
 800389a:	615a      	str	r2, [r3, #20]
	TIM_Config->UP_Callback = callback;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	687a      	ldr	r2, [r7, #4]
 80038a0:	615a      	str	r2, [r3, #20]
	TIM_Update_INT_Init(TIM_Config);
 80038a2:	68f8      	ldr	r0, [r7, #12]
 80038a4:	f7ff fd56 	bl	8003354 <TIM_Update_INT_Init>
	SET_BIT(TIM_Config->TIM_Instance->CR1,TIM_CEN_BIT_POS);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	681a      	ldr	r2, [r3, #0]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f042 0201 	orr.w	r2, r2, #1
 80038b6:	601a      	str	r2, [r3, #0]
	if(TIM_Config->TIM_Instance == TIM1){
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a24      	ldr	r2, [pc, #144]	; (8003950 <TIM_SingleInterval+0xe8>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d103      	bne.n	80038ca <TIM_SingleInterval+0x62>
		TIM_SingleInterval_FLAG[TIM1_CALLBACK] = TIM_SINGLE_INTERVAL_MODE;
 80038c2:	4b24      	ldr	r3, [pc, #144]	; (8003954 <TIM_SingleInterval+0xec>)
 80038c4:	2201      	movs	r2, #1
 80038c6:	701a      	strb	r2, [r3, #0]
		TIM_SingleInterval_FLAG[TIM10_CALLBACK] = TIM_SINGLE_INTERVAL_MODE;
	}
	else if(TIM_Config->TIM_Instance == TIM11){
		TIM_SingleInterval_FLAG[TIM11_CALLBACK] = TIM_SINGLE_INTERVAL_MODE;
	}
}
 80038c8:	e03d      	b.n	8003946 <TIM_SingleInterval+0xde>
	else if(TIM_Config->TIM_Instance == TIM2)
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038d2:	d103      	bne.n	80038dc <TIM_SingleInterval+0x74>
		TIM_SingleInterval_FLAG[TIM2_CALLBACK] = TIM_SINGLE_INTERVAL_MODE;
 80038d4:	4b1f      	ldr	r3, [pc, #124]	; (8003954 <TIM_SingleInterval+0xec>)
 80038d6:	2201      	movs	r2, #1
 80038d8:	705a      	strb	r2, [r3, #1]
}
 80038da:	e034      	b.n	8003946 <TIM_SingleInterval+0xde>
	else if(TIM_Config->TIM_Instance == TIM3){
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a1d      	ldr	r2, [pc, #116]	; (8003958 <TIM_SingleInterval+0xf0>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d103      	bne.n	80038ee <TIM_SingleInterval+0x86>
		TIM_SingleInterval_FLAG[TIM3_CALLBACK] = TIM_SINGLE_INTERVAL_MODE;
 80038e6:	4b1b      	ldr	r3, [pc, #108]	; (8003954 <TIM_SingleInterval+0xec>)
 80038e8:	2201      	movs	r2, #1
 80038ea:	709a      	strb	r2, [r3, #2]
}
 80038ec:	e02b      	b.n	8003946 <TIM_SingleInterval+0xde>
	else if(TIM_Config->TIM_Instance == TIM4){
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a1a      	ldr	r2, [pc, #104]	; (800395c <TIM_SingleInterval+0xf4>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d103      	bne.n	8003900 <TIM_SingleInterval+0x98>
		TIM_SingleInterval_FLAG[TIM4_CALLBACK] = TIM_SINGLE_INTERVAL_MODE;
 80038f8:	4b16      	ldr	r3, [pc, #88]	; (8003954 <TIM_SingleInterval+0xec>)
 80038fa:	2201      	movs	r2, #1
 80038fc:	70da      	strb	r2, [r3, #3]
}
 80038fe:	e022      	b.n	8003946 <TIM_SingleInterval+0xde>
	else if(TIM_Config->TIM_Instance == TIM5){
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a16      	ldr	r2, [pc, #88]	; (8003960 <TIM_SingleInterval+0xf8>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d103      	bne.n	8003912 <TIM_SingleInterval+0xaa>
		TIM_SingleInterval_FLAG[TIM5_CALLBACK] = TIM_SINGLE_INTERVAL_MODE;
 800390a:	4b12      	ldr	r3, [pc, #72]	; (8003954 <TIM_SingleInterval+0xec>)
 800390c:	2201      	movs	r2, #1
 800390e:	711a      	strb	r2, [r3, #4]
}
 8003910:	e019      	b.n	8003946 <TIM_SingleInterval+0xde>
	else if(TIM_Config->TIM_Instance == TIM9){
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a13      	ldr	r2, [pc, #76]	; (8003964 <TIM_SingleInterval+0xfc>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d103      	bne.n	8003924 <TIM_SingleInterval+0xbc>
		TIM_SingleInterval_FLAG[TIM9_CALLBACK] = TIM_SINGLE_INTERVAL_MODE;
 800391c:	4b0d      	ldr	r3, [pc, #52]	; (8003954 <TIM_SingleInterval+0xec>)
 800391e:	2201      	movs	r2, #1
 8003920:	715a      	strb	r2, [r3, #5]
}
 8003922:	e010      	b.n	8003946 <TIM_SingleInterval+0xde>
	else if(TIM_Config->TIM_Instance == TIM10){
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a0f      	ldr	r2, [pc, #60]	; (8003968 <TIM_SingleInterval+0x100>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d103      	bne.n	8003936 <TIM_SingleInterval+0xce>
		TIM_SingleInterval_FLAG[TIM10_CALLBACK] = TIM_SINGLE_INTERVAL_MODE;
 800392e:	4b09      	ldr	r3, [pc, #36]	; (8003954 <TIM_SingleInterval+0xec>)
 8003930:	2201      	movs	r2, #1
 8003932:	719a      	strb	r2, [r3, #6]
}
 8003934:	e007      	b.n	8003946 <TIM_SingleInterval+0xde>
	else if(TIM_Config->TIM_Instance == TIM11){
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a0c      	ldr	r2, [pc, #48]	; (800396c <TIM_SingleInterval+0x104>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d102      	bne.n	8003946 <TIM_SingleInterval+0xde>
		TIM_SingleInterval_FLAG[TIM11_CALLBACK] = TIM_SINGLE_INTERVAL_MODE;
 8003940:	4b04      	ldr	r3, [pc, #16]	; (8003954 <TIM_SingleInterval+0xec>)
 8003942:	2201      	movs	r2, #1
 8003944:	71da      	strb	r2, [r3, #7]
}
 8003946:	bf00      	nop
 8003948:	3710      	adds	r7, #16
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}
 800394e:	bf00      	nop
 8003950:	40010000 	.word	0x40010000
 8003954:	200001f4 	.word	0x200001f4
 8003958:	40000400 	.word	0x40000400
 800395c:	40000800 	.word	0x40000800
 8003960:	40000c00 	.word	0x40000c00
 8003964:	40014000 	.word	0x40014000
 8003968:	40014400 	.word	0x40014400
 800396c:	40014800 	.word	0x40014800

08003970 <TIM_SetPreload>:
	TIM_IC_INIT(TIM_Config);
	SET_BIT(TIM_Config->TIM_Instance->EGR,TIM_UG_BIT_POS);
	SET_BIT(TIM_Config->TIM_Instance->CR1,TIM_CEN_BIT_POS);
}
void TIM_SetPreload(TIM_Config_t* TIM_Config , u32 preload)
{
 8003970:	b480      	push	{r7}
 8003972:	b083      	sub	sp, #12
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
 8003978:	6039      	str	r1, [r7, #0]
	CLR_BIT(TIM_Config->TIM_Instance->CR1,TIM_CEN_BIT_POS);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	681a      	ldr	r2, [r3, #0]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f022 0201 	bic.w	r2, r2, #1
 8003988:	601a      	str	r2, [r3, #0]
	TIM_Config->TIM_Preload = preload;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	683a      	ldr	r2, [r7, #0]
 800398e:	609a      	str	r2, [r3, #8]
	TIM_Config->TIM_Instance->ARR = preload;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	683a      	ldr	r2, [r7, #0]
 8003996:	62da      	str	r2, [r3, #44]	; 0x2c
	SET_BIT(TIM_Config->TIM_Instance->EGR,TIM_UG_BIT_POS);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	695a      	ldr	r2, [r3, #20]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f042 0201 	orr.w	r2, r2, #1
 80039a6:	615a      	str	r2, [r3, #20]
	SET_BIT(TIM_Config->TIM_Instance->CR1,TIM_CEN_BIT_POS);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f042 0201 	orr.w	r2, r2, #1
 80039b6:	601a      	str	r2, [r3, #0]
}
 80039b8:	bf00      	nop
 80039ba:	370c      	adds	r7, #12
 80039bc:	46bd      	mov	sp, r7
 80039be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c2:	4770      	bx	lr

080039c4 <TIM1_UP_TIM10_IRQHandler>:
	return TIM_Config->TIM_Instance->CCR1;
}
/*************************ISRs*********************************************/

void TIM1_UP_TIM10_IRQHandler(void)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	af00      	add	r7, sp, #0
	/* TIM1 Update interrupt and TIM10 global interrupt  */
	if(GET_BIT(TIM1->SR,TIM_UIF_BIT_POS) == INTERRUPT_ACTIVE)
 80039c8:	4b33      	ldr	r3, [pc, #204]	; (8003a98 <TIM1_UP_TIM10_IRQHandler+0xd4>)
 80039ca:	691b      	ldr	r3, [r3, #16]
 80039cc:	f003 0301 	and.w	r3, r3, #1
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	d122      	bne.n	8003a1a <TIM1_UP_TIM10_IRQHandler+0x56>
	{
		CLR_BIT(TIM1->SR,TIM_UIF_BIT_POS);
 80039d4:	4b30      	ldr	r3, [pc, #192]	; (8003a98 <TIM1_UP_TIM10_IRQHandler+0xd4>)
 80039d6:	691b      	ldr	r3, [r3, #16]
 80039d8:	4a2f      	ldr	r2, [pc, #188]	; (8003a98 <TIM1_UP_TIM10_IRQHandler+0xd4>)
 80039da:	f023 0301 	bic.w	r3, r3, #1
 80039de:	6113      	str	r3, [r2, #16]
		if(TIM_SingleInterval_FLAG[TIM1_CALLBACK] == TIM_SINGLE_INTERVAL_MODE)
 80039e0:	4b2e      	ldr	r3, [pc, #184]	; (8003a9c <TIM1_UP_TIM10_IRQHandler+0xd8>)
 80039e2:	781b      	ldrb	r3, [r3, #0]
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d111      	bne.n	8003a0c <TIM1_UP_TIM10_IRQHandler+0x48>
		{
			CLR_BIT(TIM1->CR1,TIM_CEN_BIT_POS);
 80039e8:	4b2b      	ldr	r3, [pc, #172]	; (8003a98 <TIM1_UP_TIM10_IRQHandler+0xd4>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a2a      	ldr	r2, [pc, #168]	; (8003a98 <TIM1_UP_TIM10_IRQHandler+0xd4>)
 80039ee:	f023 0301 	bic.w	r3, r3, #1
 80039f2:	6013      	str	r3, [r2, #0]
			SET_BIT(TIM1->EGR,TIM_UG_BIT_POS);
 80039f4:	4b28      	ldr	r3, [pc, #160]	; (8003a98 <TIM1_UP_TIM10_IRQHandler+0xd4>)
 80039f6:	695b      	ldr	r3, [r3, #20]
 80039f8:	4a27      	ldr	r2, [pc, #156]	; (8003a98 <TIM1_UP_TIM10_IRQHandler+0xd4>)
 80039fa:	f043 0301 	orr.w	r3, r3, #1
 80039fe:	6153      	str	r3, [r2, #20]
			CLR_BIT(TIM1->DIER,TIM_UIE_BIT_POS);
 8003a00:	4b25      	ldr	r3, [pc, #148]	; (8003a98 <TIM1_UP_TIM10_IRQHandler+0xd4>)
 8003a02:	68db      	ldr	r3, [r3, #12]
 8003a04:	4a24      	ldr	r2, [pc, #144]	; (8003a98 <TIM1_UP_TIM10_IRQHandler+0xd4>)
 8003a06:	f023 0301 	bic.w	r3, r3, #1
 8003a0a:	60d3      	str	r3, [r2, #12]
		}
		if(TIMx_UP_INT_Callback[TIM1_CALLBACK] != NULL)
 8003a0c:	4b24      	ldr	r3, [pc, #144]	; (8003aa0 <TIM1_UP_TIM10_IRQHandler+0xdc>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d002      	beq.n	8003a1a <TIM1_UP_TIM10_IRQHandler+0x56>
		{
			TIMx_UP_INT_Callback[TIM1_CALLBACK]();
 8003a14:	4b22      	ldr	r3, [pc, #136]	; (8003aa0 <TIM1_UP_TIM10_IRQHandler+0xdc>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4798      	blx	r3
		}
	}
	if(GET_BIT(TIM10->SR,TIM_UIF_BIT_POS) == INTERRUPT_ACTIVE)
 8003a1a:	4b22      	ldr	r3, [pc, #136]	; (8003aa4 <TIM1_UP_TIM10_IRQHandler+0xe0>)
 8003a1c:	691b      	ldr	r3, [r3, #16]
 8003a1e:	f003 0301 	and.w	r3, r3, #1
 8003a22:	2b01      	cmp	r3, #1
 8003a24:	d122      	bne.n	8003a6c <TIM1_UP_TIM10_IRQHandler+0xa8>
	{
		CLR_BIT(TIM10->SR,TIM_UIF_BIT_POS);
 8003a26:	4b1f      	ldr	r3, [pc, #124]	; (8003aa4 <TIM1_UP_TIM10_IRQHandler+0xe0>)
 8003a28:	691b      	ldr	r3, [r3, #16]
 8003a2a:	4a1e      	ldr	r2, [pc, #120]	; (8003aa4 <TIM1_UP_TIM10_IRQHandler+0xe0>)
 8003a2c:	f023 0301 	bic.w	r3, r3, #1
 8003a30:	6113      	str	r3, [r2, #16]
		if(TIM_SingleInterval_FLAG[TIM10_CALLBACK] == TIM_SINGLE_INTERVAL_MODE)
 8003a32:	4b1a      	ldr	r3, [pc, #104]	; (8003a9c <TIM1_UP_TIM10_IRQHandler+0xd8>)
 8003a34:	799b      	ldrb	r3, [r3, #6]
 8003a36:	2b01      	cmp	r3, #1
 8003a38:	d111      	bne.n	8003a5e <TIM1_UP_TIM10_IRQHandler+0x9a>
		{
			CLR_BIT(TIM10->CR1,TIM_CEN_BIT_POS);
 8003a3a:	4b1a      	ldr	r3, [pc, #104]	; (8003aa4 <TIM1_UP_TIM10_IRQHandler+0xe0>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a19      	ldr	r2, [pc, #100]	; (8003aa4 <TIM1_UP_TIM10_IRQHandler+0xe0>)
 8003a40:	f023 0301 	bic.w	r3, r3, #1
 8003a44:	6013      	str	r3, [r2, #0]
			SET_BIT(TIM10->EGR,TIM_UG_BIT_POS);
 8003a46:	4b17      	ldr	r3, [pc, #92]	; (8003aa4 <TIM1_UP_TIM10_IRQHandler+0xe0>)
 8003a48:	695b      	ldr	r3, [r3, #20]
 8003a4a:	4a16      	ldr	r2, [pc, #88]	; (8003aa4 <TIM1_UP_TIM10_IRQHandler+0xe0>)
 8003a4c:	f043 0301 	orr.w	r3, r3, #1
 8003a50:	6153      	str	r3, [r2, #20]
			CLR_BIT(TIM10->DIER,TIM_UIE_BIT_POS);
 8003a52:	4b14      	ldr	r3, [pc, #80]	; (8003aa4 <TIM1_UP_TIM10_IRQHandler+0xe0>)
 8003a54:	68db      	ldr	r3, [r3, #12]
 8003a56:	4a13      	ldr	r2, [pc, #76]	; (8003aa4 <TIM1_UP_TIM10_IRQHandler+0xe0>)
 8003a58:	f023 0301 	bic.w	r3, r3, #1
 8003a5c:	60d3      	str	r3, [r2, #12]
		}
		if(TIMx_UP_INT_Callback[TIM10_CALLBACK] != NULL)
 8003a5e:	4b10      	ldr	r3, [pc, #64]	; (8003aa0 <TIM1_UP_TIM10_IRQHandler+0xdc>)
 8003a60:	699b      	ldr	r3, [r3, #24]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d002      	beq.n	8003a6c <TIM1_UP_TIM10_IRQHandler+0xa8>
		{
			TIMx_UP_INT_Callback[TIM10_CALLBACK]();
 8003a66:	4b0e      	ldr	r3, [pc, #56]	; (8003aa0 <TIM1_UP_TIM10_IRQHandler+0xdc>)
 8003a68:	699b      	ldr	r3, [r3, #24]
 8003a6a:	4798      	blx	r3
		}
	}
	if(GET_BIT(TIM10->SR,TIM_CC1IF_BIT_POS) == INTERRUPT_ACTIVE)
 8003a6c:	4b0d      	ldr	r3, [pc, #52]	; (8003aa4 <TIM1_UP_TIM10_IRQHandler+0xe0>)
 8003a6e:	691b      	ldr	r3, [r3, #16]
 8003a70:	085b      	lsrs	r3, r3, #1
 8003a72:	f003 0301 	and.w	r3, r3, #1
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	d10c      	bne.n	8003a94 <TIM1_UP_TIM10_IRQHandler+0xd0>
	{
		CLR_BIT(TIM10->SR,TIM_CC1IF_BIT_POS);
 8003a7a:	4b0a      	ldr	r3, [pc, #40]	; (8003aa4 <TIM1_UP_TIM10_IRQHandler+0xe0>)
 8003a7c:	691b      	ldr	r3, [r3, #16]
 8003a7e:	4a09      	ldr	r2, [pc, #36]	; (8003aa4 <TIM1_UP_TIM10_IRQHandler+0xe0>)
 8003a80:	f023 0302 	bic.w	r3, r3, #2
 8003a84:	6113      	str	r3, [r2, #16]
		if(TIMx_CC_INT_Callback[TIM10_CALLBACK] != NULL)
 8003a86:	4b08      	ldr	r3, [pc, #32]	; (8003aa8 <TIM1_UP_TIM10_IRQHandler+0xe4>)
 8003a88:	699b      	ldr	r3, [r3, #24]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d002      	beq.n	8003a94 <TIM1_UP_TIM10_IRQHandler+0xd0>
		{
			TIMx_CC_INT_Callback[TIM10_CALLBACK]();
 8003a8e:	4b06      	ldr	r3, [pc, #24]	; (8003aa8 <TIM1_UP_TIM10_IRQHandler+0xe4>)
 8003a90:	699b      	ldr	r3, [r3, #24]
 8003a92:	4798      	blx	r3
		}
	}
}
 8003a94:	bf00      	nop
 8003a96:	bd80      	pop	{r7, pc}
 8003a98:	40010000 	.word	0x40010000
 8003a9c:	200001f4 	.word	0x200001f4
 8003aa0:	200001b4 	.word	0x200001b4
 8003aa4:	40014400 	.word	0x40014400
 8003aa8:	200001d4 	.word	0x200001d4

08003aac <TIM1_TRG_COM_TIM11_IRQHandler>:
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	af00      	add	r7, sp, #0
	/* TIM1 Trigger and Commutation interrupts and TIM11 global interrupt              */
	if(GET_BIT(TIM11->SR,TIM_UIF_BIT_POS) == INTERRUPT_ACTIVE)
 8003ab0:	4b1f      	ldr	r3, [pc, #124]	; (8003b30 <TIM1_TRG_COM_TIM11_IRQHandler+0x84>)
 8003ab2:	691b      	ldr	r3, [r3, #16]
 8003ab4:	f003 0301 	and.w	r3, r3, #1
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d122      	bne.n	8003b02 <TIM1_TRG_COM_TIM11_IRQHandler+0x56>
	{
		CLR_BIT(TIM11->SR,TIM_UIF_BIT_POS);
 8003abc:	4b1c      	ldr	r3, [pc, #112]	; (8003b30 <TIM1_TRG_COM_TIM11_IRQHandler+0x84>)
 8003abe:	691b      	ldr	r3, [r3, #16]
 8003ac0:	4a1b      	ldr	r2, [pc, #108]	; (8003b30 <TIM1_TRG_COM_TIM11_IRQHandler+0x84>)
 8003ac2:	f023 0301 	bic.w	r3, r3, #1
 8003ac6:	6113      	str	r3, [r2, #16]
		if(TIM_SingleInterval_FLAG[TIM11_CALLBACK] == TIM_SINGLE_INTERVAL_MODE)
 8003ac8:	4b1a      	ldr	r3, [pc, #104]	; (8003b34 <TIM1_TRG_COM_TIM11_IRQHandler+0x88>)
 8003aca:	79db      	ldrb	r3, [r3, #7]
 8003acc:	2b01      	cmp	r3, #1
 8003ace:	d111      	bne.n	8003af4 <TIM1_TRG_COM_TIM11_IRQHandler+0x48>
		{
			CLR_BIT(TIM11->CR1,TIM_CEN_BIT_POS);
 8003ad0:	4b17      	ldr	r3, [pc, #92]	; (8003b30 <TIM1_TRG_COM_TIM11_IRQHandler+0x84>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a16      	ldr	r2, [pc, #88]	; (8003b30 <TIM1_TRG_COM_TIM11_IRQHandler+0x84>)
 8003ad6:	f023 0301 	bic.w	r3, r3, #1
 8003ada:	6013      	str	r3, [r2, #0]
			SET_BIT(TIM11->EGR,TIM_UG_BIT_POS);
 8003adc:	4b14      	ldr	r3, [pc, #80]	; (8003b30 <TIM1_TRG_COM_TIM11_IRQHandler+0x84>)
 8003ade:	695b      	ldr	r3, [r3, #20]
 8003ae0:	4a13      	ldr	r2, [pc, #76]	; (8003b30 <TIM1_TRG_COM_TIM11_IRQHandler+0x84>)
 8003ae2:	f043 0301 	orr.w	r3, r3, #1
 8003ae6:	6153      	str	r3, [r2, #20]
			CLR_BIT(TIM11->DIER,TIM_UIE_BIT_POS);
 8003ae8:	4b11      	ldr	r3, [pc, #68]	; (8003b30 <TIM1_TRG_COM_TIM11_IRQHandler+0x84>)
 8003aea:	68db      	ldr	r3, [r3, #12]
 8003aec:	4a10      	ldr	r2, [pc, #64]	; (8003b30 <TIM1_TRG_COM_TIM11_IRQHandler+0x84>)
 8003aee:	f023 0301 	bic.w	r3, r3, #1
 8003af2:	60d3      	str	r3, [r2, #12]
		}
		if(TIMx_UP_INT_Callback[TIM11_CALLBACK] != NULL)
 8003af4:	4b10      	ldr	r3, [pc, #64]	; (8003b38 <TIM1_TRG_COM_TIM11_IRQHandler+0x8c>)
 8003af6:	69db      	ldr	r3, [r3, #28]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d002      	beq.n	8003b02 <TIM1_TRG_COM_TIM11_IRQHandler+0x56>
		{
			TIMx_UP_INT_Callback[TIM11_CALLBACK]();
 8003afc:	4b0e      	ldr	r3, [pc, #56]	; (8003b38 <TIM1_TRG_COM_TIM11_IRQHandler+0x8c>)
 8003afe:	69db      	ldr	r3, [r3, #28]
 8003b00:	4798      	blx	r3
		}
	}
	if(GET_BIT(TIM11->SR,TIM_CC1IF_BIT_POS) == INTERRUPT_ACTIVE)
 8003b02:	4b0b      	ldr	r3, [pc, #44]	; (8003b30 <TIM1_TRG_COM_TIM11_IRQHandler+0x84>)
 8003b04:	691b      	ldr	r3, [r3, #16]
 8003b06:	085b      	lsrs	r3, r3, #1
 8003b08:	f003 0301 	and.w	r3, r3, #1
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	d10c      	bne.n	8003b2a <TIM1_TRG_COM_TIM11_IRQHandler+0x7e>
	{
		CLR_BIT(TIM11->SR,TIM_CC1IF_BIT_POS);
 8003b10:	4b07      	ldr	r3, [pc, #28]	; (8003b30 <TIM1_TRG_COM_TIM11_IRQHandler+0x84>)
 8003b12:	691b      	ldr	r3, [r3, #16]
 8003b14:	4a06      	ldr	r2, [pc, #24]	; (8003b30 <TIM1_TRG_COM_TIM11_IRQHandler+0x84>)
 8003b16:	f023 0302 	bic.w	r3, r3, #2
 8003b1a:	6113      	str	r3, [r2, #16]
		if(TIMx_CC_INT_Callback[TIM11_CALLBACK] != NULL)
 8003b1c:	4b07      	ldr	r3, [pc, #28]	; (8003b3c <TIM1_TRG_COM_TIM11_IRQHandler+0x90>)
 8003b1e:	69db      	ldr	r3, [r3, #28]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d002      	beq.n	8003b2a <TIM1_TRG_COM_TIM11_IRQHandler+0x7e>
		{
			TIMx_CC_INT_Callback[TIM11_CALLBACK]();
 8003b24:	4b05      	ldr	r3, [pc, #20]	; (8003b3c <TIM1_TRG_COM_TIM11_IRQHandler+0x90>)
 8003b26:	69db      	ldr	r3, [r3, #28]
 8003b28:	4798      	blx	r3
		}
	}
}
 8003b2a:	bf00      	nop
 8003b2c:	bd80      	pop	{r7, pc}
 8003b2e:	bf00      	nop
 8003b30:	40014800 	.word	0x40014800
 8003b34:	200001f4 	.word	0x200001f4
 8003b38:	200001b4 	.word	0x200001b4
 8003b3c:	200001d4 	.word	0x200001d4

08003b40 <TIM1_BRK_TIM9_IRQHandler>:
void TIM1_BRK_TIM9_IRQHandler(void){
 8003b40:	b580      	push	{r7, lr}
 8003b42:	af00      	add	r7, sp, #0
	if(GET_BIT(TIM9->SR,TIM_UIF_BIT_POS) == INTERRUPT_ACTIVE){
 8003b44:	4b1f      	ldr	r3, [pc, #124]	; (8003bc4 <TIM1_BRK_TIM9_IRQHandler+0x84>)
 8003b46:	691b      	ldr	r3, [r3, #16]
 8003b48:	f003 0301 	and.w	r3, r3, #1
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	d122      	bne.n	8003b96 <TIM1_BRK_TIM9_IRQHandler+0x56>
		CLR_BIT(TIM9->SR,TIM_UIF_BIT_POS);
 8003b50:	4b1c      	ldr	r3, [pc, #112]	; (8003bc4 <TIM1_BRK_TIM9_IRQHandler+0x84>)
 8003b52:	691b      	ldr	r3, [r3, #16]
 8003b54:	4a1b      	ldr	r2, [pc, #108]	; (8003bc4 <TIM1_BRK_TIM9_IRQHandler+0x84>)
 8003b56:	f023 0301 	bic.w	r3, r3, #1
 8003b5a:	6113      	str	r3, [r2, #16]
		if(TIM_SingleInterval_FLAG[TIM9_CALLBACK] == TIM_SINGLE_INTERVAL_MODE)
 8003b5c:	4b1a      	ldr	r3, [pc, #104]	; (8003bc8 <TIM1_BRK_TIM9_IRQHandler+0x88>)
 8003b5e:	795b      	ldrb	r3, [r3, #5]
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d111      	bne.n	8003b88 <TIM1_BRK_TIM9_IRQHandler+0x48>
		{
			CLR_BIT(TIM9->CR1,TIM_CEN_BIT_POS);
 8003b64:	4b17      	ldr	r3, [pc, #92]	; (8003bc4 <TIM1_BRK_TIM9_IRQHandler+0x84>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a16      	ldr	r2, [pc, #88]	; (8003bc4 <TIM1_BRK_TIM9_IRQHandler+0x84>)
 8003b6a:	f023 0301 	bic.w	r3, r3, #1
 8003b6e:	6013      	str	r3, [r2, #0]
			SET_BIT(TIM9->EGR,TIM_UG_BIT_POS);
 8003b70:	4b14      	ldr	r3, [pc, #80]	; (8003bc4 <TIM1_BRK_TIM9_IRQHandler+0x84>)
 8003b72:	695b      	ldr	r3, [r3, #20]
 8003b74:	4a13      	ldr	r2, [pc, #76]	; (8003bc4 <TIM1_BRK_TIM9_IRQHandler+0x84>)
 8003b76:	f043 0301 	orr.w	r3, r3, #1
 8003b7a:	6153      	str	r3, [r2, #20]
			CLR_BIT(TIM9->DIER,TIM_UIE_BIT_POS);
 8003b7c:	4b11      	ldr	r3, [pc, #68]	; (8003bc4 <TIM1_BRK_TIM9_IRQHandler+0x84>)
 8003b7e:	68db      	ldr	r3, [r3, #12]
 8003b80:	4a10      	ldr	r2, [pc, #64]	; (8003bc4 <TIM1_BRK_TIM9_IRQHandler+0x84>)
 8003b82:	f023 0301 	bic.w	r3, r3, #1
 8003b86:	60d3      	str	r3, [r2, #12]
		}
		if(TIMx_UP_INT_Callback[TIM9_CALLBACK] != NULL){
 8003b88:	4b10      	ldr	r3, [pc, #64]	; (8003bcc <TIM1_BRK_TIM9_IRQHandler+0x8c>)
 8003b8a:	695b      	ldr	r3, [r3, #20]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d002      	beq.n	8003b96 <TIM1_BRK_TIM9_IRQHandler+0x56>
			TIMx_UP_INT_Callback[TIM9_CALLBACK]();
 8003b90:	4b0e      	ldr	r3, [pc, #56]	; (8003bcc <TIM1_BRK_TIM9_IRQHandler+0x8c>)
 8003b92:	695b      	ldr	r3, [r3, #20]
 8003b94:	4798      	blx	r3
		}
	}
	if(GET_BIT(TIM9->SR,TIM_CC1IF_BIT_POS) == INTERRUPT_ACTIVE){
 8003b96:	4b0b      	ldr	r3, [pc, #44]	; (8003bc4 <TIM1_BRK_TIM9_IRQHandler+0x84>)
 8003b98:	691b      	ldr	r3, [r3, #16]
 8003b9a:	085b      	lsrs	r3, r3, #1
 8003b9c:	f003 0301 	and.w	r3, r3, #1
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d10c      	bne.n	8003bbe <TIM1_BRK_TIM9_IRQHandler+0x7e>
		CLR_BIT(TIM9->SR,TIM_CC1IF_BIT_POS);
 8003ba4:	4b07      	ldr	r3, [pc, #28]	; (8003bc4 <TIM1_BRK_TIM9_IRQHandler+0x84>)
 8003ba6:	691b      	ldr	r3, [r3, #16]
 8003ba8:	4a06      	ldr	r2, [pc, #24]	; (8003bc4 <TIM1_BRK_TIM9_IRQHandler+0x84>)
 8003baa:	f023 0302 	bic.w	r3, r3, #2
 8003bae:	6113      	str	r3, [r2, #16]
		if(TIMx_CC_INT_Callback[TIM9_CALLBACK] != NULL){
 8003bb0:	4b07      	ldr	r3, [pc, #28]	; (8003bd0 <TIM1_BRK_TIM9_IRQHandler+0x90>)
 8003bb2:	695b      	ldr	r3, [r3, #20]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d002      	beq.n	8003bbe <TIM1_BRK_TIM9_IRQHandler+0x7e>
			TIMx_CC_INT_Callback[TIM9_CALLBACK]();
 8003bb8:	4b05      	ldr	r3, [pc, #20]	; (8003bd0 <TIM1_BRK_TIM9_IRQHandler+0x90>)
 8003bba:	695b      	ldr	r3, [r3, #20]
 8003bbc:	4798      	blx	r3
		}
	}
}
 8003bbe:	bf00      	nop
 8003bc0:	bd80      	pop	{r7, pc}
 8003bc2:	bf00      	nop
 8003bc4:	40014000 	.word	0x40014000
 8003bc8:	200001f4 	.word	0x200001f4
 8003bcc:	200001b4 	.word	0x200001b4
 8003bd0:	200001d4 	.word	0x200001d4

08003bd4 <TIM1_CC_IRQHandler>:
void TIM1_CC_IRQHandler(void)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	af00      	add	r7, sp, #0
	CLR_BIT(TIM1->SR,TIM_CC1IF_BIT_POS);
 8003bd8:	4b07      	ldr	r3, [pc, #28]	; (8003bf8 <TIM1_CC_IRQHandler+0x24>)
 8003bda:	691b      	ldr	r3, [r3, #16]
 8003bdc:	4a06      	ldr	r2, [pc, #24]	; (8003bf8 <TIM1_CC_IRQHandler+0x24>)
 8003bde:	f023 0302 	bic.w	r3, r3, #2
 8003be2:	6113      	str	r3, [r2, #16]
	if(TIMx_CC_INT_Callback[TIM1_CALLBACK] != NULL)
 8003be4:	4b05      	ldr	r3, [pc, #20]	; (8003bfc <TIM1_CC_IRQHandler+0x28>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d002      	beq.n	8003bf2 <TIM1_CC_IRQHandler+0x1e>
	{
		TIMx_CC_INT_Callback[TIM1_CALLBACK]();
 8003bec:	4b03      	ldr	r3, [pc, #12]	; (8003bfc <TIM1_CC_IRQHandler+0x28>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4798      	blx	r3
	}
}
 8003bf2:	bf00      	nop
 8003bf4:	bd80      	pop	{r7, pc}
 8003bf6:	bf00      	nop
 8003bf8:	40010000 	.word	0x40010000
 8003bfc:	200001d4 	.word	0x200001d4

08003c00 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void){
 8003c00:	b580      	push	{r7, lr}
 8003c02:	af00      	add	r7, sp, #0
	if(GET_BIT(TIM2->SR,TIM_UIF_BIT_POS) == INTERRUPT_ACTIVE){
 8003c04:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003c08:	691b      	ldr	r3, [r3, #16]
 8003c0a:	f003 0301 	and.w	r3, r3, #1
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	d12a      	bne.n	8003c68 <TIM2_IRQHandler+0x68>
		CLR_BIT(TIM2->SR,TIM_UIF_BIT_POS);
 8003c12:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003c16:	691b      	ldr	r3, [r3, #16]
 8003c18:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003c1c:	f023 0301 	bic.w	r3, r3, #1
 8003c20:	6113      	str	r3, [r2, #16]
		if(TIM_SingleInterval_FLAG[TIM2_CALLBACK] == TIM_SINGLE_INTERVAL_MODE)
 8003c22:	4b1e      	ldr	r3, [pc, #120]	; (8003c9c <TIM2_IRQHandler+0x9c>)
 8003c24:	785b      	ldrb	r3, [r3, #1]
 8003c26:	2b01      	cmp	r3, #1
 8003c28:	d117      	bne.n	8003c5a <TIM2_IRQHandler+0x5a>
		{
			CLR_BIT(TIM2->CR1,TIM_CEN_BIT_POS);
 8003c2a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003c34:	f023 0301 	bic.w	r3, r3, #1
 8003c38:	6013      	str	r3, [r2, #0]
			SET_BIT(TIM2->EGR,TIM_UG_BIT_POS);
 8003c3a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003c3e:	695b      	ldr	r3, [r3, #20]
 8003c40:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003c44:	f043 0301 	orr.w	r3, r3, #1
 8003c48:	6153      	str	r3, [r2, #20]
			CLR_BIT(TIM2->DIER,TIM_UIE_BIT_POS);
 8003c4a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003c4e:	68db      	ldr	r3, [r3, #12]
 8003c50:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003c54:	f023 0301 	bic.w	r3, r3, #1
 8003c58:	60d3      	str	r3, [r2, #12]
		}
		if(TIMx_UP_INT_Callback[TIM2_CALLBACK] != NULL){
 8003c5a:	4b11      	ldr	r3, [pc, #68]	; (8003ca0 <TIM2_IRQHandler+0xa0>)
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d002      	beq.n	8003c68 <TIM2_IRQHandler+0x68>
			TIMx_UP_INT_Callback[TIM2_CALLBACK]();
 8003c62:	4b0f      	ldr	r3, [pc, #60]	; (8003ca0 <TIM2_IRQHandler+0xa0>)
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	4798      	blx	r3
		}
	}
	if(GET_BIT(TIM2->SR,TIM_CC1IF_BIT_POS) == INTERRUPT_ACTIVE){
 8003c68:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003c6c:	691b      	ldr	r3, [r3, #16]
 8003c6e:	085b      	lsrs	r3, r3, #1
 8003c70:	f003 0301 	and.w	r3, r3, #1
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d10e      	bne.n	8003c96 <TIM2_IRQHandler+0x96>
		CLR_BIT(TIM2->SR,TIM_CC1IF_BIT_POS);
 8003c78:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003c7c:	691b      	ldr	r3, [r3, #16]
 8003c7e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003c82:	f023 0302 	bic.w	r3, r3, #2
 8003c86:	6113      	str	r3, [r2, #16]
		if(TIMx_CC_INT_Callback[TIM2_CALLBACK] != NULL){
 8003c88:	4b06      	ldr	r3, [pc, #24]	; (8003ca4 <TIM2_IRQHandler+0xa4>)
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d002      	beq.n	8003c96 <TIM2_IRQHandler+0x96>
			TIMx_CC_INT_Callback[TIM2_CALLBACK]();
 8003c90:	4b04      	ldr	r3, [pc, #16]	; (8003ca4 <TIM2_IRQHandler+0xa4>)
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	4798      	blx	r3
		}
	}
}
 8003c96:	bf00      	nop
 8003c98:	bd80      	pop	{r7, pc}
 8003c9a:	bf00      	nop
 8003c9c:	200001f4 	.word	0x200001f4
 8003ca0:	200001b4 	.word	0x200001b4
 8003ca4:	200001d4 	.word	0x200001d4

08003ca8 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	af00      	add	r7, sp, #0
	if(GET_BIT(TIM3->SR,TIM_UIF_BIT_POS) == INTERRUPT_ACTIVE)
 8003cac:	4b1f      	ldr	r3, [pc, #124]	; (8003d2c <TIM3_IRQHandler+0x84>)
 8003cae:	691b      	ldr	r3, [r3, #16]
 8003cb0:	f003 0301 	and.w	r3, r3, #1
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	d122      	bne.n	8003cfe <TIM3_IRQHandler+0x56>
	{
		CLR_BIT(TIM3->SR,TIM_UIF_BIT_POS);
 8003cb8:	4b1c      	ldr	r3, [pc, #112]	; (8003d2c <TIM3_IRQHandler+0x84>)
 8003cba:	691b      	ldr	r3, [r3, #16]
 8003cbc:	4a1b      	ldr	r2, [pc, #108]	; (8003d2c <TIM3_IRQHandler+0x84>)
 8003cbe:	f023 0301 	bic.w	r3, r3, #1
 8003cc2:	6113      	str	r3, [r2, #16]
		if(TIM_SingleInterval_FLAG[TIM3_CALLBACK] == TIM_SINGLE_INTERVAL_MODE)
 8003cc4:	4b1a      	ldr	r3, [pc, #104]	; (8003d30 <TIM3_IRQHandler+0x88>)
 8003cc6:	789b      	ldrb	r3, [r3, #2]
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	d111      	bne.n	8003cf0 <TIM3_IRQHandler+0x48>
		{
			CLR_BIT(TIM3->CR1,TIM_CEN_BIT_POS);
 8003ccc:	4b17      	ldr	r3, [pc, #92]	; (8003d2c <TIM3_IRQHandler+0x84>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a16      	ldr	r2, [pc, #88]	; (8003d2c <TIM3_IRQHandler+0x84>)
 8003cd2:	f023 0301 	bic.w	r3, r3, #1
 8003cd6:	6013      	str	r3, [r2, #0]
			SET_BIT(TIM3->EGR,TIM_UG_BIT_POS);
 8003cd8:	4b14      	ldr	r3, [pc, #80]	; (8003d2c <TIM3_IRQHandler+0x84>)
 8003cda:	695b      	ldr	r3, [r3, #20]
 8003cdc:	4a13      	ldr	r2, [pc, #76]	; (8003d2c <TIM3_IRQHandler+0x84>)
 8003cde:	f043 0301 	orr.w	r3, r3, #1
 8003ce2:	6153      	str	r3, [r2, #20]
			CLR_BIT(TIM3->DIER,TIM_UIE_BIT_POS);
 8003ce4:	4b11      	ldr	r3, [pc, #68]	; (8003d2c <TIM3_IRQHandler+0x84>)
 8003ce6:	68db      	ldr	r3, [r3, #12]
 8003ce8:	4a10      	ldr	r2, [pc, #64]	; (8003d2c <TIM3_IRQHandler+0x84>)
 8003cea:	f023 0301 	bic.w	r3, r3, #1
 8003cee:	60d3      	str	r3, [r2, #12]
		}
		if(TIMx_UP_INT_Callback[TIM3_CALLBACK] != NULL)
 8003cf0:	4b10      	ldr	r3, [pc, #64]	; (8003d34 <TIM3_IRQHandler+0x8c>)
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d002      	beq.n	8003cfe <TIM3_IRQHandler+0x56>
		{
			TIMx_UP_INT_Callback[TIM3_CALLBACK]();
 8003cf8:	4b0e      	ldr	r3, [pc, #56]	; (8003d34 <TIM3_IRQHandler+0x8c>)
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	4798      	blx	r3
		}
	}
	if(GET_BIT(TIM3->SR,TIM_CC1IF_BIT_POS) == INTERRUPT_ACTIVE)
 8003cfe:	4b0b      	ldr	r3, [pc, #44]	; (8003d2c <TIM3_IRQHandler+0x84>)
 8003d00:	691b      	ldr	r3, [r3, #16]
 8003d02:	085b      	lsrs	r3, r3, #1
 8003d04:	f003 0301 	and.w	r3, r3, #1
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d10c      	bne.n	8003d26 <TIM3_IRQHandler+0x7e>
	{
		CLR_BIT(TIM3->SR,TIM_CC1IF_BIT_POS);
 8003d0c:	4b07      	ldr	r3, [pc, #28]	; (8003d2c <TIM3_IRQHandler+0x84>)
 8003d0e:	691b      	ldr	r3, [r3, #16]
 8003d10:	4a06      	ldr	r2, [pc, #24]	; (8003d2c <TIM3_IRQHandler+0x84>)
 8003d12:	f023 0302 	bic.w	r3, r3, #2
 8003d16:	6113      	str	r3, [r2, #16]
		if(TIMx_CC_INT_Callback[TIM3_CALLBACK] != NULL)
 8003d18:	4b07      	ldr	r3, [pc, #28]	; (8003d38 <TIM3_IRQHandler+0x90>)
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d002      	beq.n	8003d26 <TIM3_IRQHandler+0x7e>
		{
			TIMx_CC_INT_Callback[TIM3_CALLBACK]();
 8003d20:	4b05      	ldr	r3, [pc, #20]	; (8003d38 <TIM3_IRQHandler+0x90>)
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	4798      	blx	r3
		}
	}
}
 8003d26:	bf00      	nop
 8003d28:	bd80      	pop	{r7, pc}
 8003d2a:	bf00      	nop
 8003d2c:	40000400 	.word	0x40000400
 8003d30:	200001f4 	.word	0x200001f4
 8003d34:	200001b4 	.word	0x200001b4
 8003d38:	200001d4 	.word	0x200001d4

08003d3c <TIM4_IRQHandler>:
void TIM4_IRQHandler(void)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	af00      	add	r7, sp, #0
	if(GET_BIT(TIM4->SR,TIM_UIF_BIT_POS) == INTERRUPT_ACTIVE){
 8003d40:	4b1f      	ldr	r3, [pc, #124]	; (8003dc0 <TIM4_IRQHandler+0x84>)
 8003d42:	691b      	ldr	r3, [r3, #16]
 8003d44:	f003 0301 	and.w	r3, r3, #1
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d122      	bne.n	8003d92 <TIM4_IRQHandler+0x56>
		CLR_BIT(TIM4->SR,TIM_UIF_BIT_POS);
 8003d4c:	4b1c      	ldr	r3, [pc, #112]	; (8003dc0 <TIM4_IRQHandler+0x84>)
 8003d4e:	691b      	ldr	r3, [r3, #16]
 8003d50:	4a1b      	ldr	r2, [pc, #108]	; (8003dc0 <TIM4_IRQHandler+0x84>)
 8003d52:	f023 0301 	bic.w	r3, r3, #1
 8003d56:	6113      	str	r3, [r2, #16]
		if(TIM_SingleInterval_FLAG[TIM4_CALLBACK] == TIM_SINGLE_INTERVAL_MODE)
 8003d58:	4b1a      	ldr	r3, [pc, #104]	; (8003dc4 <TIM4_IRQHandler+0x88>)
 8003d5a:	78db      	ldrb	r3, [r3, #3]
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	d111      	bne.n	8003d84 <TIM4_IRQHandler+0x48>
		{
			CLR_BIT(TIM4->CR1,TIM_CEN_BIT_POS);
 8003d60:	4b17      	ldr	r3, [pc, #92]	; (8003dc0 <TIM4_IRQHandler+0x84>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a16      	ldr	r2, [pc, #88]	; (8003dc0 <TIM4_IRQHandler+0x84>)
 8003d66:	f023 0301 	bic.w	r3, r3, #1
 8003d6a:	6013      	str	r3, [r2, #0]
			SET_BIT(TIM4->EGR,TIM_UG_BIT_POS);
 8003d6c:	4b14      	ldr	r3, [pc, #80]	; (8003dc0 <TIM4_IRQHandler+0x84>)
 8003d6e:	695b      	ldr	r3, [r3, #20]
 8003d70:	4a13      	ldr	r2, [pc, #76]	; (8003dc0 <TIM4_IRQHandler+0x84>)
 8003d72:	f043 0301 	orr.w	r3, r3, #1
 8003d76:	6153      	str	r3, [r2, #20]
			CLR_BIT(TIM4->DIER,TIM_UIE_BIT_POS);
 8003d78:	4b11      	ldr	r3, [pc, #68]	; (8003dc0 <TIM4_IRQHandler+0x84>)
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	4a10      	ldr	r2, [pc, #64]	; (8003dc0 <TIM4_IRQHandler+0x84>)
 8003d7e:	f023 0301 	bic.w	r3, r3, #1
 8003d82:	60d3      	str	r3, [r2, #12]
		}
		if(TIMx_UP_INT_Callback[TIM4_CALLBACK] != NULL){
 8003d84:	4b10      	ldr	r3, [pc, #64]	; (8003dc8 <TIM4_IRQHandler+0x8c>)
 8003d86:	68db      	ldr	r3, [r3, #12]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d002      	beq.n	8003d92 <TIM4_IRQHandler+0x56>
			TIMx_UP_INT_Callback[TIM4_CALLBACK]();
 8003d8c:	4b0e      	ldr	r3, [pc, #56]	; (8003dc8 <TIM4_IRQHandler+0x8c>)
 8003d8e:	68db      	ldr	r3, [r3, #12]
 8003d90:	4798      	blx	r3
		}
	}
	if(GET_BIT(TIM4->SR,TIM_CC1IF_BIT_POS) == INTERRUPT_ACTIVE){
 8003d92:	4b0b      	ldr	r3, [pc, #44]	; (8003dc0 <TIM4_IRQHandler+0x84>)
 8003d94:	691b      	ldr	r3, [r3, #16]
 8003d96:	085b      	lsrs	r3, r3, #1
 8003d98:	f003 0301 	and.w	r3, r3, #1
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	d10c      	bne.n	8003dba <TIM4_IRQHandler+0x7e>
		CLR_BIT(TIM4->SR,TIM_CC1IF_BIT_POS);
 8003da0:	4b07      	ldr	r3, [pc, #28]	; (8003dc0 <TIM4_IRQHandler+0x84>)
 8003da2:	691b      	ldr	r3, [r3, #16]
 8003da4:	4a06      	ldr	r2, [pc, #24]	; (8003dc0 <TIM4_IRQHandler+0x84>)
 8003da6:	f023 0302 	bic.w	r3, r3, #2
 8003daa:	6113      	str	r3, [r2, #16]
		if(TIMx_CC_INT_Callback[TIM4_CALLBACK] != NULL){
 8003dac:	4b07      	ldr	r3, [pc, #28]	; (8003dcc <TIM4_IRQHandler+0x90>)
 8003dae:	68db      	ldr	r3, [r3, #12]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d002      	beq.n	8003dba <TIM4_IRQHandler+0x7e>
			TIMx_CC_INT_Callback[TIM4_CALLBACK]();
 8003db4:	4b05      	ldr	r3, [pc, #20]	; (8003dcc <TIM4_IRQHandler+0x90>)
 8003db6:	68db      	ldr	r3, [r3, #12]
 8003db8:	4798      	blx	r3
		}
	}
}
 8003dba:	bf00      	nop
 8003dbc:	bd80      	pop	{r7, pc}
 8003dbe:	bf00      	nop
 8003dc0:	40000800 	.word	0x40000800
 8003dc4:	200001f4 	.word	0x200001f4
 8003dc8:	200001b4 	.word	0x200001b4
 8003dcc:	200001d4 	.word	0x200001d4

08003dd0 <TIM5_IRQHandler>:
void TIM5_IRQHandler(void)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	af00      	add	r7, sp, #0
	if(GET_BIT(TIM5->SR,TIM_UIF_BIT_POS) == INTERRUPT_ACTIVE){
 8003dd4:	4b1f      	ldr	r3, [pc, #124]	; (8003e54 <TIM5_IRQHandler+0x84>)
 8003dd6:	691b      	ldr	r3, [r3, #16]
 8003dd8:	f003 0301 	and.w	r3, r3, #1
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	d122      	bne.n	8003e26 <TIM5_IRQHandler+0x56>
		CLR_BIT(TIM5->SR,TIM_UIF_BIT_POS);
 8003de0:	4b1c      	ldr	r3, [pc, #112]	; (8003e54 <TIM5_IRQHandler+0x84>)
 8003de2:	691b      	ldr	r3, [r3, #16]
 8003de4:	4a1b      	ldr	r2, [pc, #108]	; (8003e54 <TIM5_IRQHandler+0x84>)
 8003de6:	f023 0301 	bic.w	r3, r3, #1
 8003dea:	6113      	str	r3, [r2, #16]
		if(TIM_SingleInterval_FLAG[TIM5_CALLBACK] == TIM_SINGLE_INTERVAL_MODE)
 8003dec:	4b1a      	ldr	r3, [pc, #104]	; (8003e58 <TIM5_IRQHandler+0x88>)
 8003dee:	791b      	ldrb	r3, [r3, #4]
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	d111      	bne.n	8003e18 <TIM5_IRQHandler+0x48>
		{
			CLR_BIT(TIM5->CR1,TIM_CEN_BIT_POS);
 8003df4:	4b17      	ldr	r3, [pc, #92]	; (8003e54 <TIM5_IRQHandler+0x84>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a16      	ldr	r2, [pc, #88]	; (8003e54 <TIM5_IRQHandler+0x84>)
 8003dfa:	f023 0301 	bic.w	r3, r3, #1
 8003dfe:	6013      	str	r3, [r2, #0]
			SET_BIT(TIM5->EGR,TIM_UG_BIT_POS);
 8003e00:	4b14      	ldr	r3, [pc, #80]	; (8003e54 <TIM5_IRQHandler+0x84>)
 8003e02:	695b      	ldr	r3, [r3, #20]
 8003e04:	4a13      	ldr	r2, [pc, #76]	; (8003e54 <TIM5_IRQHandler+0x84>)
 8003e06:	f043 0301 	orr.w	r3, r3, #1
 8003e0a:	6153      	str	r3, [r2, #20]
			CLR_BIT(TIM5->DIER,TIM_UIE_BIT_POS);
 8003e0c:	4b11      	ldr	r3, [pc, #68]	; (8003e54 <TIM5_IRQHandler+0x84>)
 8003e0e:	68db      	ldr	r3, [r3, #12]
 8003e10:	4a10      	ldr	r2, [pc, #64]	; (8003e54 <TIM5_IRQHandler+0x84>)
 8003e12:	f023 0301 	bic.w	r3, r3, #1
 8003e16:	60d3      	str	r3, [r2, #12]
		}
		if(TIMx_UP_INT_Callback[TIM5_CALLBACK] != NULL){
 8003e18:	4b10      	ldr	r3, [pc, #64]	; (8003e5c <TIM5_IRQHandler+0x8c>)
 8003e1a:	691b      	ldr	r3, [r3, #16]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d002      	beq.n	8003e26 <TIM5_IRQHandler+0x56>
			TIMx_UP_INT_Callback[TIM5_CALLBACK]();
 8003e20:	4b0e      	ldr	r3, [pc, #56]	; (8003e5c <TIM5_IRQHandler+0x8c>)
 8003e22:	691b      	ldr	r3, [r3, #16]
 8003e24:	4798      	blx	r3
		}
	}
	if(GET_BIT(TIM5->SR,TIM_CC1IF_BIT_POS) == INTERRUPT_ACTIVE){
 8003e26:	4b0b      	ldr	r3, [pc, #44]	; (8003e54 <TIM5_IRQHandler+0x84>)
 8003e28:	691b      	ldr	r3, [r3, #16]
 8003e2a:	085b      	lsrs	r3, r3, #1
 8003e2c:	f003 0301 	and.w	r3, r3, #1
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	d10c      	bne.n	8003e4e <TIM5_IRQHandler+0x7e>
		CLR_BIT(TIM5->SR,TIM_CC1IF_BIT_POS);
 8003e34:	4b07      	ldr	r3, [pc, #28]	; (8003e54 <TIM5_IRQHandler+0x84>)
 8003e36:	691b      	ldr	r3, [r3, #16]
 8003e38:	4a06      	ldr	r2, [pc, #24]	; (8003e54 <TIM5_IRQHandler+0x84>)
 8003e3a:	f023 0302 	bic.w	r3, r3, #2
 8003e3e:	6113      	str	r3, [r2, #16]
		if(TIMx_CC_INT_Callback[TIM5_CALLBACK] != NULL){
 8003e40:	4b07      	ldr	r3, [pc, #28]	; (8003e60 <TIM5_IRQHandler+0x90>)
 8003e42:	691b      	ldr	r3, [r3, #16]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d002      	beq.n	8003e4e <TIM5_IRQHandler+0x7e>
			TIMx_CC_INT_Callback[TIM5_CALLBACK]();
 8003e48:	4b05      	ldr	r3, [pc, #20]	; (8003e60 <TIM5_IRQHandler+0x90>)
 8003e4a:	691b      	ldr	r3, [r3, #16]
 8003e4c:	4798      	blx	r3
		}
	}
}
 8003e4e:	bf00      	nop
 8003e50:	bd80      	pop	{r7, pc}
 8003e52:	bf00      	nop
 8003e54:	40000c00 	.word	0x40000c00
 8003e58:	200001f4 	.word	0x200001f4
 8003e5c:	200001b4 	.word	0x200001b4
 8003e60:	200001d4 	.word	0x200001d4

08003e64 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003e64:	b480      	push	{r7}
 8003e66:	b083      	sub	sp, #12
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	f103 0208 	add.w	r2, r3, #8
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	f04f 32ff 	mov.w	r2, #4294967295
 8003e7c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	f103 0208 	add.w	r2, r3, #8
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	f103 0208 	add.w	r2, r3, #8
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2200      	movs	r2, #0
 8003e96:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003e98:	bf00      	nop
 8003e9a:	370c      	adds	r7, #12
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea2:	4770      	bx	lr

08003ea4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b083      	sub	sp, #12
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003eb2:	bf00      	nop
 8003eb4:	370c      	adds	r7, #12
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebc:	4770      	bx	lr

08003ebe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003ebe:	b480      	push	{r7}
 8003ec0:	b085      	sub	sp, #20
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	6078      	str	r0, [r7, #4]
 8003ec6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	68fa      	ldr	r2, [r7, #12]
 8003ed2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	689a      	ldr	r2, [r3, #8]
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	683a      	ldr	r2, [r7, #0]
 8003ee2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	683a      	ldr	r2, [r7, #0]
 8003ee8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	687a      	ldr	r2, [r7, #4]
 8003eee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	1c5a      	adds	r2, r3, #1
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	601a      	str	r2, [r3, #0]
}
 8003efa:	bf00      	nop
 8003efc:	3714      	adds	r7, #20
 8003efe:	46bd      	mov	sp, r7
 8003f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f04:	4770      	bx	lr

08003f06 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003f06:	b480      	push	{r7}
 8003f08:	b085      	sub	sp, #20
 8003f0a:	af00      	add	r7, sp, #0
 8003f0c:	6078      	str	r0, [r7, #4]
 8003f0e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f1c:	d103      	bne.n	8003f26 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	691b      	ldr	r3, [r3, #16]
 8003f22:	60fb      	str	r3, [r7, #12]
 8003f24:	e00c      	b.n	8003f40 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	3308      	adds	r3, #8
 8003f2a:	60fb      	str	r3, [r7, #12]
 8003f2c:	e002      	b.n	8003f34 <vListInsert+0x2e>
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	60fb      	str	r3, [r7, #12]
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	68ba      	ldr	r2, [r7, #8]
 8003f3c:	429a      	cmp	r2, r3
 8003f3e:	d2f6      	bcs.n	8003f2e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	685a      	ldr	r2, [r3, #4]
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	683a      	ldr	r2, [r7, #0]
 8003f4e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	68fa      	ldr	r2, [r7, #12]
 8003f54:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	683a      	ldr	r2, [r7, #0]
 8003f5a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	687a      	ldr	r2, [r7, #4]
 8003f60:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	1c5a      	adds	r2, r3, #1
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	601a      	str	r2, [r3, #0]
}
 8003f6c:	bf00      	nop
 8003f6e:	3714      	adds	r7, #20
 8003f70:	46bd      	mov	sp, r7
 8003f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f76:	4770      	bx	lr

08003f78 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b085      	sub	sp, #20
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	691b      	ldr	r3, [r3, #16]
 8003f84:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	687a      	ldr	r2, [r7, #4]
 8003f8c:	6892      	ldr	r2, [r2, #8]
 8003f8e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	687a      	ldr	r2, [r7, #4]
 8003f96:	6852      	ldr	r2, [r2, #4]
 8003f98:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	687a      	ldr	r2, [r7, #4]
 8003fa0:	429a      	cmp	r2, r3
 8003fa2:	d103      	bne.n	8003fac <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	689a      	ldr	r2, [r3, #8]
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	1e5a      	subs	r2, r3, #1
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	3714      	adds	r7, #20
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fca:	4770      	bx	lr

08003fcc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b084      	sub	sp, #16
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
 8003fd4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d10a      	bne.n	8003ff6 <xQueueGenericReset+0x2a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8003fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fe4:	f383 8811 	msr	BASEPRI, r3
 8003fe8:	f3bf 8f6f 	isb	sy
 8003fec:	f3bf 8f4f 	dsb	sy
 8003ff0:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8003ff2:	bf00      	nop
 8003ff4:	e7fe      	b.n	8003ff4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003ff6:	f002 fa6f 	bl	80064d8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681a      	ldr	r2, [r3, #0]
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004002:	68f9      	ldr	r1, [r7, #12]
 8004004:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004006:	fb01 f303 	mul.w	r3, r1, r3
 800400a:	441a      	add	r2, r3
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	2200      	movs	r2, #0
 8004014:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681a      	ldr	r2, [r3, #0]
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004026:	3b01      	subs	r3, #1
 8004028:	68f9      	ldr	r1, [r7, #12]
 800402a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800402c:	fb01 f303 	mul.w	r3, r1, r3
 8004030:	441a      	add	r2, r3
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	22ff      	movs	r2, #255	; 0xff
 800403a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	22ff      	movs	r2, #255	; 0xff
 8004042:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d114      	bne.n	8004076 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	691b      	ldr	r3, [r3, #16]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d01a      	beq.n	800408a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	3310      	adds	r3, #16
 8004058:	4618      	mov	r0, r3
 800405a:	f001 fa25 	bl	80054a8 <xTaskRemoveFromEventList>
 800405e:	4603      	mov	r3, r0
 8004060:	2b00      	cmp	r3, #0
 8004062:	d012      	beq.n	800408a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004064:	4b0c      	ldr	r3, [pc, #48]	; (8004098 <xQueueGenericReset+0xcc>)
 8004066:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800406a:	601a      	str	r2, [r3, #0]
 800406c:	f3bf 8f4f 	dsb	sy
 8004070:	f3bf 8f6f 	isb	sy
 8004074:	e009      	b.n	800408a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	3310      	adds	r3, #16
 800407a:	4618      	mov	r0, r3
 800407c:	f7ff fef2 	bl	8003e64 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	3324      	adds	r3, #36	; 0x24
 8004084:	4618      	mov	r0, r3
 8004086:	f7ff feed 	bl	8003e64 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800408a:	f002 fa55 	bl	8006538 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800408e:	2301      	movs	r3, #1
}
 8004090:	4618      	mov	r0, r3
 8004092:	3710      	adds	r7, #16
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}
 8004098:	e000ed04 	.word	0xe000ed04

0800409c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800409c:	b580      	push	{r7, lr}
 800409e:	b08a      	sub	sp, #40	; 0x28
 80040a0:	af02      	add	r7, sp, #8
 80040a2:	60f8      	str	r0, [r7, #12]
 80040a4:	60b9      	str	r1, [r7, #8]
 80040a6:	4613      	mov	r3, r2
 80040a8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d10a      	bne.n	80040c6 <xQueueGenericCreate+0x2a>
        __asm volatile
 80040b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040b4:	f383 8811 	msr	BASEPRI, r3
 80040b8:	f3bf 8f6f 	isb	sy
 80040bc:	f3bf 8f4f 	dsb	sy
 80040c0:	613b      	str	r3, [r7, #16]
    }
 80040c2:	bf00      	nop
 80040c4:	e7fe      	b.n	80040c4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	68ba      	ldr	r2, [r7, #8]
 80040ca:	fb02 f303 	mul.w	r3, r2, r3
 80040ce:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80040d0:	69fb      	ldr	r3, [r7, #28]
 80040d2:	3350      	adds	r3, #80	; 0x50
 80040d4:	4618      	mov	r0, r3
 80040d6:	f002 fb17 	bl	8006708 <pvPortMalloc>
 80040da:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80040dc:	69bb      	ldr	r3, [r7, #24]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d00d      	beq.n	80040fe <xQueueGenericCreate+0x62>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80040e2:	69bb      	ldr	r3, [r7, #24]
 80040e4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	3350      	adds	r3, #80	; 0x50
 80040ea:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80040ec:	79fa      	ldrb	r2, [r7, #7]
 80040ee:	69bb      	ldr	r3, [r7, #24]
 80040f0:	9300      	str	r3, [sp, #0]
 80040f2:	4613      	mov	r3, r2
 80040f4:	697a      	ldr	r2, [r7, #20]
 80040f6:	68b9      	ldr	r1, [r7, #8]
 80040f8:	68f8      	ldr	r0, [r7, #12]
 80040fa:	f000 f805 	bl	8004108 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80040fe:	69bb      	ldr	r3, [r7, #24]
	}
 8004100:	4618      	mov	r0, r3
 8004102:	3720      	adds	r7, #32
 8004104:	46bd      	mov	sp, r7
 8004106:	bd80      	pop	{r7, pc}

08004108 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b084      	sub	sp, #16
 800410c:	af00      	add	r7, sp, #0
 800410e:	60f8      	str	r0, [r7, #12]
 8004110:	60b9      	str	r1, [r7, #8]
 8004112:	607a      	str	r2, [r7, #4]
 8004114:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d103      	bne.n	8004124 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800411c:	69bb      	ldr	r3, [r7, #24]
 800411e:	69ba      	ldr	r2, [r7, #24]
 8004120:	601a      	str	r2, [r3, #0]
 8004122:	e002      	b.n	800412a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004124:	69bb      	ldr	r3, [r7, #24]
 8004126:	687a      	ldr	r2, [r7, #4]
 8004128:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800412a:	69bb      	ldr	r3, [r7, #24]
 800412c:	68fa      	ldr	r2, [r7, #12]
 800412e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004130:	69bb      	ldr	r3, [r7, #24]
 8004132:	68ba      	ldr	r2, [r7, #8]
 8004134:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004136:	2101      	movs	r1, #1
 8004138:	69b8      	ldr	r0, [r7, #24]
 800413a:	f7ff ff47 	bl	8003fcc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800413e:	69bb      	ldr	r3, [r7, #24]
 8004140:	78fa      	ldrb	r2, [r7, #3]
 8004142:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004146:	bf00      	nop
 8004148:	3710      	adds	r7, #16
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}

0800414e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800414e:	b580      	push	{r7, lr}
 8004150:	b082      	sub	sp, #8
 8004152:	af00      	add	r7, sp, #0
 8004154:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d00e      	beq.n	800417a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2200      	movs	r2, #0
 8004160:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2200      	movs	r2, #0
 8004166:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2200      	movs	r2, #0
 800416c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800416e:	2300      	movs	r3, #0
 8004170:	2200      	movs	r2, #0
 8004172:	2100      	movs	r1, #0
 8004174:	6878      	ldr	r0, [r7, #4]
 8004176:	f000 f81d 	bl	80041b4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800417a:	bf00      	nop
 800417c:	3708      	adds	r7, #8
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}

08004182 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8004182:	b580      	push	{r7, lr}
 8004184:	b086      	sub	sp, #24
 8004186:	af00      	add	r7, sp, #0
 8004188:	4603      	mov	r3, r0
 800418a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800418c:	2301      	movs	r3, #1
 800418e:	617b      	str	r3, [r7, #20]
 8004190:	2300      	movs	r3, #0
 8004192:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8004194:	79fb      	ldrb	r3, [r7, #7]
 8004196:	461a      	mov	r2, r3
 8004198:	6939      	ldr	r1, [r7, #16]
 800419a:	6978      	ldr	r0, [r7, #20]
 800419c:	f7ff ff7e 	bl	800409c <xQueueGenericCreate>
 80041a0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80041a2:	68f8      	ldr	r0, [r7, #12]
 80041a4:	f7ff ffd3 	bl	800414e <prvInitialiseMutex>

		return xNewQueue;
 80041a8:	68fb      	ldr	r3, [r7, #12]
	}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3718      	adds	r7, #24
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}
	...

080041b4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b08e      	sub	sp, #56	; 0x38
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	60f8      	str	r0, [r7, #12]
 80041bc:	60b9      	str	r1, [r7, #8]
 80041be:	607a      	str	r2, [r7, #4]
 80041c0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80041c2:	2300      	movs	r3, #0
 80041c4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80041ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d10a      	bne.n	80041e6 <xQueueGenericSend+0x32>
        __asm volatile
 80041d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041d4:	f383 8811 	msr	BASEPRI, r3
 80041d8:	f3bf 8f6f 	isb	sy
 80041dc:	f3bf 8f4f 	dsb	sy
 80041e0:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80041e2:	bf00      	nop
 80041e4:	e7fe      	b.n	80041e4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d103      	bne.n	80041f4 <xQueueGenericSend+0x40>
 80041ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d101      	bne.n	80041f8 <xQueueGenericSend+0x44>
 80041f4:	2301      	movs	r3, #1
 80041f6:	e000      	b.n	80041fa <xQueueGenericSend+0x46>
 80041f8:	2300      	movs	r3, #0
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d10a      	bne.n	8004214 <xQueueGenericSend+0x60>
        __asm volatile
 80041fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004202:	f383 8811 	msr	BASEPRI, r3
 8004206:	f3bf 8f6f 	isb	sy
 800420a:	f3bf 8f4f 	dsb	sy
 800420e:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8004210:	bf00      	nop
 8004212:	e7fe      	b.n	8004212 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	2b02      	cmp	r3, #2
 8004218:	d103      	bne.n	8004222 <xQueueGenericSend+0x6e>
 800421a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800421c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800421e:	2b01      	cmp	r3, #1
 8004220:	d101      	bne.n	8004226 <xQueueGenericSend+0x72>
 8004222:	2301      	movs	r3, #1
 8004224:	e000      	b.n	8004228 <xQueueGenericSend+0x74>
 8004226:	2300      	movs	r3, #0
 8004228:	2b00      	cmp	r3, #0
 800422a:	d10a      	bne.n	8004242 <xQueueGenericSend+0x8e>
        __asm volatile
 800422c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004230:	f383 8811 	msr	BASEPRI, r3
 8004234:	f3bf 8f6f 	isb	sy
 8004238:	f3bf 8f4f 	dsb	sy
 800423c:	623b      	str	r3, [r7, #32]
    }
 800423e:	bf00      	nop
 8004240:	e7fe      	b.n	8004240 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004242:	f001 facf 	bl	80057e4 <xTaskGetSchedulerState>
 8004246:	4603      	mov	r3, r0
 8004248:	2b00      	cmp	r3, #0
 800424a:	d102      	bne.n	8004252 <xQueueGenericSend+0x9e>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d101      	bne.n	8004256 <xQueueGenericSend+0xa2>
 8004252:	2301      	movs	r3, #1
 8004254:	e000      	b.n	8004258 <xQueueGenericSend+0xa4>
 8004256:	2300      	movs	r3, #0
 8004258:	2b00      	cmp	r3, #0
 800425a:	d10a      	bne.n	8004272 <xQueueGenericSend+0xbe>
        __asm volatile
 800425c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004260:	f383 8811 	msr	BASEPRI, r3
 8004264:	f3bf 8f6f 	isb	sy
 8004268:	f3bf 8f4f 	dsb	sy
 800426c:	61fb      	str	r3, [r7, #28]
    }
 800426e:	bf00      	nop
 8004270:	e7fe      	b.n	8004270 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004272:	f002 f931 	bl	80064d8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004278:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800427a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800427c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800427e:	429a      	cmp	r2, r3
 8004280:	d302      	bcc.n	8004288 <xQueueGenericSend+0xd4>
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	2b02      	cmp	r3, #2
 8004286:	d129      	bne.n	80042dc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004288:	683a      	ldr	r2, [r7, #0]
 800428a:	68b9      	ldr	r1, [r7, #8]
 800428c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800428e:	f000 fb2f 	bl	80048f0 <prvCopyDataToQueue>
 8004292:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004298:	2b00      	cmp	r3, #0
 800429a:	d010      	beq.n	80042be <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800429c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800429e:	3324      	adds	r3, #36	; 0x24
 80042a0:	4618      	mov	r0, r3
 80042a2:	f001 f901 	bl	80054a8 <xTaskRemoveFromEventList>
 80042a6:	4603      	mov	r3, r0
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d013      	beq.n	80042d4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80042ac:	4b3f      	ldr	r3, [pc, #252]	; (80043ac <xQueueGenericSend+0x1f8>)
 80042ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042b2:	601a      	str	r2, [r3, #0]
 80042b4:	f3bf 8f4f 	dsb	sy
 80042b8:	f3bf 8f6f 	isb	sy
 80042bc:	e00a      	b.n	80042d4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80042be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d007      	beq.n	80042d4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80042c4:	4b39      	ldr	r3, [pc, #228]	; (80043ac <xQueueGenericSend+0x1f8>)
 80042c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042ca:	601a      	str	r2, [r3, #0]
 80042cc:	f3bf 8f4f 	dsb	sy
 80042d0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80042d4:	f002 f930 	bl	8006538 <vPortExitCritical>
				return pdPASS;
 80042d8:	2301      	movs	r3, #1
 80042da:	e063      	b.n	80043a4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d103      	bne.n	80042ea <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80042e2:	f002 f929 	bl	8006538 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80042e6:	2300      	movs	r3, #0
 80042e8:	e05c      	b.n	80043a4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80042ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d106      	bne.n	80042fe <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80042f0:	f107 0314 	add.w	r3, r7, #20
 80042f4:	4618      	mov	r0, r3
 80042f6:	f001 f93b 	bl	8005570 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80042fa:	2301      	movs	r3, #1
 80042fc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80042fe:	f002 f91b 	bl	8006538 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004302:	f000 fe9b 	bl	800503c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004306:	f002 f8e7 	bl	80064d8 <vPortEnterCritical>
 800430a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800430c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004310:	b25b      	sxtb	r3, r3
 8004312:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004316:	d103      	bne.n	8004320 <xQueueGenericSend+0x16c>
 8004318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800431a:	2200      	movs	r2, #0
 800431c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004322:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004326:	b25b      	sxtb	r3, r3
 8004328:	f1b3 3fff 	cmp.w	r3, #4294967295
 800432c:	d103      	bne.n	8004336 <xQueueGenericSend+0x182>
 800432e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004330:	2200      	movs	r2, #0
 8004332:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004336:	f002 f8ff 	bl	8006538 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800433a:	1d3a      	adds	r2, r7, #4
 800433c:	f107 0314 	add.w	r3, r7, #20
 8004340:	4611      	mov	r1, r2
 8004342:	4618      	mov	r0, r3
 8004344:	f001 f92a 	bl	800559c <xTaskCheckForTimeOut>
 8004348:	4603      	mov	r3, r0
 800434a:	2b00      	cmp	r3, #0
 800434c:	d124      	bne.n	8004398 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800434e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004350:	f000 fbc6 	bl	8004ae0 <prvIsQueueFull>
 8004354:	4603      	mov	r3, r0
 8004356:	2b00      	cmp	r3, #0
 8004358:	d018      	beq.n	800438c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800435a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800435c:	3310      	adds	r3, #16
 800435e:	687a      	ldr	r2, [r7, #4]
 8004360:	4611      	mov	r1, r2
 8004362:	4618      	mov	r0, r3
 8004364:	f001 f850 	bl	8005408 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004368:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800436a:	f000 fb51 	bl	8004a10 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800436e:	f000 fe73 	bl	8005058 <xTaskResumeAll>
 8004372:	4603      	mov	r3, r0
 8004374:	2b00      	cmp	r3, #0
 8004376:	f47f af7c 	bne.w	8004272 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800437a:	4b0c      	ldr	r3, [pc, #48]	; (80043ac <xQueueGenericSend+0x1f8>)
 800437c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004380:	601a      	str	r2, [r3, #0]
 8004382:	f3bf 8f4f 	dsb	sy
 8004386:	f3bf 8f6f 	isb	sy
 800438a:	e772      	b.n	8004272 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800438c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800438e:	f000 fb3f 	bl	8004a10 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004392:	f000 fe61 	bl	8005058 <xTaskResumeAll>
 8004396:	e76c      	b.n	8004272 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004398:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800439a:	f000 fb39 	bl	8004a10 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800439e:	f000 fe5b 	bl	8005058 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80043a2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	3738      	adds	r7, #56	; 0x38
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}
 80043ac:	e000ed04 	.word	0xe000ed04

080043b0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b090      	sub	sp, #64	; 0x40
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	60f8      	str	r0, [r7, #12]
 80043b8:	60b9      	str	r1, [r7, #8]
 80043ba:	607a      	str	r2, [r7, #4]
 80043bc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80043c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d10a      	bne.n	80043de <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 80043c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043cc:	f383 8811 	msr	BASEPRI, r3
 80043d0:	f3bf 8f6f 	isb	sy
 80043d4:	f3bf 8f4f 	dsb	sy
 80043d8:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80043da:	bf00      	nop
 80043dc:	e7fe      	b.n	80043dc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d103      	bne.n	80043ec <xQueueGenericSendFromISR+0x3c>
 80043e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d101      	bne.n	80043f0 <xQueueGenericSendFromISR+0x40>
 80043ec:	2301      	movs	r3, #1
 80043ee:	e000      	b.n	80043f2 <xQueueGenericSendFromISR+0x42>
 80043f0:	2300      	movs	r3, #0
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d10a      	bne.n	800440c <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 80043f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043fa:	f383 8811 	msr	BASEPRI, r3
 80043fe:	f3bf 8f6f 	isb	sy
 8004402:	f3bf 8f4f 	dsb	sy
 8004406:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8004408:	bf00      	nop
 800440a:	e7fe      	b.n	800440a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	2b02      	cmp	r3, #2
 8004410:	d103      	bne.n	800441a <xQueueGenericSendFromISR+0x6a>
 8004412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004414:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004416:	2b01      	cmp	r3, #1
 8004418:	d101      	bne.n	800441e <xQueueGenericSendFromISR+0x6e>
 800441a:	2301      	movs	r3, #1
 800441c:	e000      	b.n	8004420 <xQueueGenericSendFromISR+0x70>
 800441e:	2300      	movs	r3, #0
 8004420:	2b00      	cmp	r3, #0
 8004422:	d10a      	bne.n	800443a <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8004424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004428:	f383 8811 	msr	BASEPRI, r3
 800442c:	f3bf 8f6f 	isb	sy
 8004430:	f3bf 8f4f 	dsb	sy
 8004434:	623b      	str	r3, [r7, #32]
    }
 8004436:	bf00      	nop
 8004438:	e7fe      	b.n	8004438 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800443a:	f002 f925 	bl	8006688 <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 800443e:	f3ef 8211 	mrs	r2, BASEPRI
 8004442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004446:	f383 8811 	msr	BASEPRI, r3
 800444a:	f3bf 8f6f 	isb	sy
 800444e:	f3bf 8f4f 	dsb	sy
 8004452:	61fa      	str	r2, [r7, #28]
 8004454:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8004456:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004458:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800445a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800445c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800445e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004460:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004462:	429a      	cmp	r2, r3
 8004464:	d302      	bcc.n	800446c <xQueueGenericSendFromISR+0xbc>
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	2b02      	cmp	r3, #2
 800446a:	d12f      	bne.n	80044cc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800446c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800446e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004472:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800447a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800447c:	683a      	ldr	r2, [r7, #0]
 800447e:	68b9      	ldr	r1, [r7, #8]
 8004480:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004482:	f000 fa35 	bl	80048f0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004486:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800448a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800448e:	d112      	bne.n	80044b6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004494:	2b00      	cmp	r3, #0
 8004496:	d016      	beq.n	80044c6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800449a:	3324      	adds	r3, #36	; 0x24
 800449c:	4618      	mov	r0, r3
 800449e:	f001 f803 	bl	80054a8 <xTaskRemoveFromEventList>
 80044a2:	4603      	mov	r3, r0
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d00e      	beq.n	80044c6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d00b      	beq.n	80044c6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2201      	movs	r2, #1
 80044b2:	601a      	str	r2, [r3, #0]
 80044b4:	e007      	b.n	80044c6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80044b6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80044ba:	3301      	adds	r3, #1
 80044bc:	b2db      	uxtb	r3, r3
 80044be:	b25a      	sxtb	r2, r3
 80044c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80044c6:	2301      	movs	r3, #1
 80044c8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80044ca:	e001      	b.n	80044d0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80044cc:	2300      	movs	r3, #0
 80044ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80044d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044d2:	617b      	str	r3, [r7, #20]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80044da:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80044dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80044de:	4618      	mov	r0, r3
 80044e0:	3740      	adds	r7, #64	; 0x40
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}
	...

080044e8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b08c      	sub	sp, #48	; 0x30
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	60f8      	str	r0, [r7, #12]
 80044f0:	60b9      	str	r1, [r7, #8]
 80044f2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80044f4:	2300      	movs	r3, #0
 80044f6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80044fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d10a      	bne.n	8004518 <xQueueReceive+0x30>
        __asm volatile
 8004502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004506:	f383 8811 	msr	BASEPRI, r3
 800450a:	f3bf 8f6f 	isb	sy
 800450e:	f3bf 8f4f 	dsb	sy
 8004512:	623b      	str	r3, [r7, #32]
    }
 8004514:	bf00      	nop
 8004516:	e7fe      	b.n	8004516 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d103      	bne.n	8004526 <xQueueReceive+0x3e>
 800451e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004522:	2b00      	cmp	r3, #0
 8004524:	d101      	bne.n	800452a <xQueueReceive+0x42>
 8004526:	2301      	movs	r3, #1
 8004528:	e000      	b.n	800452c <xQueueReceive+0x44>
 800452a:	2300      	movs	r3, #0
 800452c:	2b00      	cmp	r3, #0
 800452e:	d10a      	bne.n	8004546 <xQueueReceive+0x5e>
        __asm volatile
 8004530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004534:	f383 8811 	msr	BASEPRI, r3
 8004538:	f3bf 8f6f 	isb	sy
 800453c:	f3bf 8f4f 	dsb	sy
 8004540:	61fb      	str	r3, [r7, #28]
    }
 8004542:	bf00      	nop
 8004544:	e7fe      	b.n	8004544 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004546:	f001 f94d 	bl	80057e4 <xTaskGetSchedulerState>
 800454a:	4603      	mov	r3, r0
 800454c:	2b00      	cmp	r3, #0
 800454e:	d102      	bne.n	8004556 <xQueueReceive+0x6e>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d101      	bne.n	800455a <xQueueReceive+0x72>
 8004556:	2301      	movs	r3, #1
 8004558:	e000      	b.n	800455c <xQueueReceive+0x74>
 800455a:	2300      	movs	r3, #0
 800455c:	2b00      	cmp	r3, #0
 800455e:	d10a      	bne.n	8004576 <xQueueReceive+0x8e>
        __asm volatile
 8004560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004564:	f383 8811 	msr	BASEPRI, r3
 8004568:	f3bf 8f6f 	isb	sy
 800456c:	f3bf 8f4f 	dsb	sy
 8004570:	61bb      	str	r3, [r7, #24]
    }
 8004572:	bf00      	nop
 8004574:	e7fe      	b.n	8004574 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004576:	f001 ffaf 	bl	80064d8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800457a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800457c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800457e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004582:	2b00      	cmp	r3, #0
 8004584:	d01f      	beq.n	80045c6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004586:	68b9      	ldr	r1, [r7, #8]
 8004588:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800458a:	f000 fa1b 	bl	80049c4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800458e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004590:	1e5a      	subs	r2, r3, #1
 8004592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004594:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004598:	691b      	ldr	r3, [r3, #16]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d00f      	beq.n	80045be <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800459e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045a0:	3310      	adds	r3, #16
 80045a2:	4618      	mov	r0, r3
 80045a4:	f000 ff80 	bl	80054a8 <xTaskRemoveFromEventList>
 80045a8:	4603      	mov	r3, r0
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d007      	beq.n	80045be <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80045ae:	4b3d      	ldr	r3, [pc, #244]	; (80046a4 <xQueueReceive+0x1bc>)
 80045b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045b4:	601a      	str	r2, [r3, #0]
 80045b6:	f3bf 8f4f 	dsb	sy
 80045ba:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80045be:	f001 ffbb 	bl	8006538 <vPortExitCritical>
				return pdPASS;
 80045c2:	2301      	movs	r3, #1
 80045c4:	e069      	b.n	800469a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d103      	bne.n	80045d4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80045cc:	f001 ffb4 	bl	8006538 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80045d0:	2300      	movs	r3, #0
 80045d2:	e062      	b.n	800469a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80045d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d106      	bne.n	80045e8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80045da:	f107 0310 	add.w	r3, r7, #16
 80045de:	4618      	mov	r0, r3
 80045e0:	f000 ffc6 	bl	8005570 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80045e4:	2301      	movs	r3, #1
 80045e6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80045e8:	f001 ffa6 	bl	8006538 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80045ec:	f000 fd26 	bl	800503c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80045f0:	f001 ff72 	bl	80064d8 <vPortEnterCritical>
 80045f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80045fa:	b25b      	sxtb	r3, r3
 80045fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004600:	d103      	bne.n	800460a <xQueueReceive+0x122>
 8004602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004604:	2200      	movs	r2, #0
 8004606:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800460a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800460c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004610:	b25b      	sxtb	r3, r3
 8004612:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004616:	d103      	bne.n	8004620 <xQueueReceive+0x138>
 8004618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800461a:	2200      	movs	r2, #0
 800461c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004620:	f001 ff8a 	bl	8006538 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004624:	1d3a      	adds	r2, r7, #4
 8004626:	f107 0310 	add.w	r3, r7, #16
 800462a:	4611      	mov	r1, r2
 800462c:	4618      	mov	r0, r3
 800462e:	f000 ffb5 	bl	800559c <xTaskCheckForTimeOut>
 8004632:	4603      	mov	r3, r0
 8004634:	2b00      	cmp	r3, #0
 8004636:	d123      	bne.n	8004680 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004638:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800463a:	f000 fa3b 	bl	8004ab4 <prvIsQueueEmpty>
 800463e:	4603      	mov	r3, r0
 8004640:	2b00      	cmp	r3, #0
 8004642:	d017      	beq.n	8004674 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004646:	3324      	adds	r3, #36	; 0x24
 8004648:	687a      	ldr	r2, [r7, #4]
 800464a:	4611      	mov	r1, r2
 800464c:	4618      	mov	r0, r3
 800464e:	f000 fedb 	bl	8005408 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004652:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004654:	f000 f9dc 	bl	8004a10 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004658:	f000 fcfe 	bl	8005058 <xTaskResumeAll>
 800465c:	4603      	mov	r3, r0
 800465e:	2b00      	cmp	r3, #0
 8004660:	d189      	bne.n	8004576 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004662:	4b10      	ldr	r3, [pc, #64]	; (80046a4 <xQueueReceive+0x1bc>)
 8004664:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004668:	601a      	str	r2, [r3, #0]
 800466a:	f3bf 8f4f 	dsb	sy
 800466e:	f3bf 8f6f 	isb	sy
 8004672:	e780      	b.n	8004576 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004674:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004676:	f000 f9cb 	bl	8004a10 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800467a:	f000 fced 	bl	8005058 <xTaskResumeAll>
 800467e:	e77a      	b.n	8004576 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004680:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004682:	f000 f9c5 	bl	8004a10 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004686:	f000 fce7 	bl	8005058 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800468a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800468c:	f000 fa12 	bl	8004ab4 <prvIsQueueEmpty>
 8004690:	4603      	mov	r3, r0
 8004692:	2b00      	cmp	r3, #0
 8004694:	f43f af6f 	beq.w	8004576 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004698:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800469a:	4618      	mov	r0, r3
 800469c:	3730      	adds	r7, #48	; 0x30
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}
 80046a2:	bf00      	nop
 80046a4:	e000ed04 	.word	0xe000ed04

080046a8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b08e      	sub	sp, #56	; 0x38
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
 80046b0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80046b2:	2300      	movs	r3, #0
 80046b4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80046ba:	2300      	movs	r3, #0
 80046bc:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80046be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d10a      	bne.n	80046da <xQueueSemaphoreTake+0x32>
        __asm volatile
 80046c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046c8:	f383 8811 	msr	BASEPRI, r3
 80046cc:	f3bf 8f6f 	isb	sy
 80046d0:	f3bf 8f4f 	dsb	sy
 80046d4:	623b      	str	r3, [r7, #32]
    }
 80046d6:	bf00      	nop
 80046d8:	e7fe      	b.n	80046d8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80046da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d00a      	beq.n	80046f8 <xQueueSemaphoreTake+0x50>
        __asm volatile
 80046e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046e6:	f383 8811 	msr	BASEPRI, r3
 80046ea:	f3bf 8f6f 	isb	sy
 80046ee:	f3bf 8f4f 	dsb	sy
 80046f2:	61fb      	str	r3, [r7, #28]
    }
 80046f4:	bf00      	nop
 80046f6:	e7fe      	b.n	80046f6 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80046f8:	f001 f874 	bl	80057e4 <xTaskGetSchedulerState>
 80046fc:	4603      	mov	r3, r0
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d102      	bne.n	8004708 <xQueueSemaphoreTake+0x60>
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d101      	bne.n	800470c <xQueueSemaphoreTake+0x64>
 8004708:	2301      	movs	r3, #1
 800470a:	e000      	b.n	800470e <xQueueSemaphoreTake+0x66>
 800470c:	2300      	movs	r3, #0
 800470e:	2b00      	cmp	r3, #0
 8004710:	d10a      	bne.n	8004728 <xQueueSemaphoreTake+0x80>
        __asm volatile
 8004712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004716:	f383 8811 	msr	BASEPRI, r3
 800471a:	f3bf 8f6f 	isb	sy
 800471e:	f3bf 8f4f 	dsb	sy
 8004722:	61bb      	str	r3, [r7, #24]
    }
 8004724:	bf00      	nop
 8004726:	e7fe      	b.n	8004726 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004728:	f001 fed6 	bl	80064d8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800472c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800472e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004730:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004734:	2b00      	cmp	r3, #0
 8004736:	d024      	beq.n	8004782 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800473a:	1e5a      	subs	r2, r3, #1
 800473c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800473e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d104      	bne.n	8004752 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8004748:	f001 f9c2 	bl	8005ad0 <pvTaskIncrementMutexHeldCount>
 800474c:	4602      	mov	r2, r0
 800474e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004750:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004754:	691b      	ldr	r3, [r3, #16]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d00f      	beq.n	800477a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800475a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800475c:	3310      	adds	r3, #16
 800475e:	4618      	mov	r0, r3
 8004760:	f000 fea2 	bl	80054a8 <xTaskRemoveFromEventList>
 8004764:	4603      	mov	r3, r0
 8004766:	2b00      	cmp	r3, #0
 8004768:	d007      	beq.n	800477a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800476a:	4b54      	ldr	r3, [pc, #336]	; (80048bc <xQueueSemaphoreTake+0x214>)
 800476c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004770:	601a      	str	r2, [r3, #0]
 8004772:	f3bf 8f4f 	dsb	sy
 8004776:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800477a:	f001 fedd 	bl	8006538 <vPortExitCritical>
				return pdPASS;
 800477e:	2301      	movs	r3, #1
 8004780:	e097      	b.n	80048b2 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d111      	bne.n	80047ac <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800478a:	2b00      	cmp	r3, #0
 800478c:	d00a      	beq.n	80047a4 <xQueueSemaphoreTake+0xfc>
        __asm volatile
 800478e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004792:	f383 8811 	msr	BASEPRI, r3
 8004796:	f3bf 8f6f 	isb	sy
 800479a:	f3bf 8f4f 	dsb	sy
 800479e:	617b      	str	r3, [r7, #20]
    }
 80047a0:	bf00      	nop
 80047a2:	e7fe      	b.n	80047a2 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80047a4:	f001 fec8 	bl	8006538 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80047a8:	2300      	movs	r3, #0
 80047aa:	e082      	b.n	80048b2 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80047ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d106      	bne.n	80047c0 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80047b2:	f107 030c 	add.w	r3, r7, #12
 80047b6:	4618      	mov	r0, r3
 80047b8:	f000 feda 	bl	8005570 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80047bc:	2301      	movs	r3, #1
 80047be:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80047c0:	f001 feba 	bl	8006538 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80047c4:	f000 fc3a 	bl	800503c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80047c8:	f001 fe86 	bl	80064d8 <vPortEnterCritical>
 80047cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047ce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80047d2:	b25b      	sxtb	r3, r3
 80047d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047d8:	d103      	bne.n	80047e2 <xQueueSemaphoreTake+0x13a>
 80047da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047dc:	2200      	movs	r2, #0
 80047de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80047e8:	b25b      	sxtb	r3, r3
 80047ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047ee:	d103      	bne.n	80047f8 <xQueueSemaphoreTake+0x150>
 80047f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047f2:	2200      	movs	r2, #0
 80047f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80047f8:	f001 fe9e 	bl	8006538 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80047fc:	463a      	mov	r2, r7
 80047fe:	f107 030c 	add.w	r3, r7, #12
 8004802:	4611      	mov	r1, r2
 8004804:	4618      	mov	r0, r3
 8004806:	f000 fec9 	bl	800559c <xTaskCheckForTimeOut>
 800480a:	4603      	mov	r3, r0
 800480c:	2b00      	cmp	r3, #0
 800480e:	d132      	bne.n	8004876 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004810:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004812:	f000 f94f 	bl	8004ab4 <prvIsQueueEmpty>
 8004816:	4603      	mov	r3, r0
 8004818:	2b00      	cmp	r3, #0
 800481a:	d026      	beq.n	800486a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800481c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d109      	bne.n	8004838 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8004824:	f001 fe58 	bl	80064d8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	4618      	mov	r0, r3
 800482e:	f000 fff7 	bl	8005820 <xTaskPriorityInherit>
 8004832:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8004834:	f001 fe80 	bl	8006538 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800483a:	3324      	adds	r3, #36	; 0x24
 800483c:	683a      	ldr	r2, [r7, #0]
 800483e:	4611      	mov	r1, r2
 8004840:	4618      	mov	r0, r3
 8004842:	f000 fde1 	bl	8005408 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004846:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004848:	f000 f8e2 	bl	8004a10 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800484c:	f000 fc04 	bl	8005058 <xTaskResumeAll>
 8004850:	4603      	mov	r3, r0
 8004852:	2b00      	cmp	r3, #0
 8004854:	f47f af68 	bne.w	8004728 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8004858:	4b18      	ldr	r3, [pc, #96]	; (80048bc <xQueueSemaphoreTake+0x214>)
 800485a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800485e:	601a      	str	r2, [r3, #0]
 8004860:	f3bf 8f4f 	dsb	sy
 8004864:	f3bf 8f6f 	isb	sy
 8004868:	e75e      	b.n	8004728 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800486a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800486c:	f000 f8d0 	bl	8004a10 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004870:	f000 fbf2 	bl	8005058 <xTaskResumeAll>
 8004874:	e758      	b.n	8004728 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8004876:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004878:	f000 f8ca 	bl	8004a10 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800487c:	f000 fbec 	bl	8005058 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004880:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004882:	f000 f917 	bl	8004ab4 <prvIsQueueEmpty>
 8004886:	4603      	mov	r3, r0
 8004888:	2b00      	cmp	r3, #0
 800488a:	f43f af4d 	beq.w	8004728 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800488e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004890:	2b00      	cmp	r3, #0
 8004892:	d00d      	beq.n	80048b0 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8004894:	f001 fe20 	bl	80064d8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004898:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800489a:	f000 f811 	bl	80048c0 <prvGetDisinheritPriorityAfterTimeout>
 800489e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80048a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048a2:	689b      	ldr	r3, [r3, #8]
 80048a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80048a6:	4618      	mov	r0, r3
 80048a8:	f001 f890 	bl	80059cc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80048ac:	f001 fe44 	bl	8006538 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80048b0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	3738      	adds	r7, #56	; 0x38
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}
 80048ba:	bf00      	nop
 80048bc:	e000ed04 	.word	0xe000ed04

080048c0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80048c0:	b480      	push	{r7}
 80048c2:	b085      	sub	sp, #20
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d006      	beq.n	80048de <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80048da:	60fb      	str	r3, [r7, #12]
 80048dc:	e001      	b.n	80048e2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80048de:	2300      	movs	r3, #0
 80048e0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80048e2:	68fb      	ldr	r3, [r7, #12]
	}
 80048e4:	4618      	mov	r0, r3
 80048e6:	3714      	adds	r7, #20
 80048e8:	46bd      	mov	sp, r7
 80048ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ee:	4770      	bx	lr

080048f0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b086      	sub	sp, #24
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	60f8      	str	r0, [r7, #12]
 80048f8:	60b9      	str	r1, [r7, #8]
 80048fa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80048fc:	2300      	movs	r3, #0
 80048fe:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004904:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800490a:	2b00      	cmp	r3, #0
 800490c:	d10d      	bne.n	800492a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d14d      	bne.n	80049b2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	689b      	ldr	r3, [r3, #8]
 800491a:	4618      	mov	r0, r3
 800491c:	f000 ffe8 	bl	80058f0 <xTaskPriorityDisinherit>
 8004920:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2200      	movs	r2, #0
 8004926:	609a      	str	r2, [r3, #8]
 8004928:	e043      	b.n	80049b2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d119      	bne.n	8004964 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	6858      	ldr	r0, [r3, #4]
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004938:	461a      	mov	r2, r3
 800493a:	68b9      	ldr	r1, [r7, #8]
 800493c:	f002 f912 	bl	8006b64 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	685a      	ldr	r2, [r3, #4]
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004948:	441a      	add	r2, r3
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	685a      	ldr	r2, [r3, #4]
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	689b      	ldr	r3, [r3, #8]
 8004956:	429a      	cmp	r2, r3
 8004958:	d32b      	bcc.n	80049b2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681a      	ldr	r2, [r3, #0]
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	605a      	str	r2, [r3, #4]
 8004962:	e026      	b.n	80049b2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	68d8      	ldr	r0, [r3, #12]
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800496c:	461a      	mov	r2, r3
 800496e:	68b9      	ldr	r1, [r7, #8]
 8004970:	f002 f8f8 	bl	8006b64 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	68da      	ldr	r2, [r3, #12]
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800497c:	425b      	negs	r3, r3
 800497e:	441a      	add	r2, r3
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	68da      	ldr	r2, [r3, #12]
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	429a      	cmp	r2, r3
 800498e:	d207      	bcs.n	80049a0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	689a      	ldr	r2, [r3, #8]
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004998:	425b      	negs	r3, r3
 800499a:	441a      	add	r2, r3
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2b02      	cmp	r3, #2
 80049a4:	d105      	bne.n	80049b2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d002      	beq.n	80049b2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80049ac:	693b      	ldr	r3, [r7, #16]
 80049ae:	3b01      	subs	r3, #1
 80049b0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	1c5a      	adds	r2, r3, #1
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80049ba:	697b      	ldr	r3, [r7, #20]
}
 80049bc:	4618      	mov	r0, r3
 80049be:	3718      	adds	r7, #24
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}

080049c4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b082      	sub	sp, #8
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
 80049cc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d018      	beq.n	8004a08 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	68da      	ldr	r2, [r3, #12]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049de:	441a      	add	r2, r3
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	68da      	ldr	r2, [r3, #12]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	429a      	cmp	r2, r3
 80049ee:	d303      	bcc.n	80049f8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681a      	ldr	r2, [r3, #0]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	68d9      	ldr	r1, [r3, #12]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a00:	461a      	mov	r2, r3
 8004a02:	6838      	ldr	r0, [r7, #0]
 8004a04:	f002 f8ae 	bl	8006b64 <memcpy>
	}
}
 8004a08:	bf00      	nop
 8004a0a:	3708      	adds	r7, #8
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bd80      	pop	{r7, pc}

08004a10 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b084      	sub	sp, #16
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004a18:	f001 fd5e 	bl	80064d8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004a22:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004a24:	e011      	b.n	8004a4a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d012      	beq.n	8004a54 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	3324      	adds	r3, #36	; 0x24
 8004a32:	4618      	mov	r0, r3
 8004a34:	f000 fd38 	bl	80054a8 <xTaskRemoveFromEventList>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d001      	beq.n	8004a42 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004a3e:	f000 fe0f 	bl	8005660 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004a42:	7bfb      	ldrb	r3, [r7, #15]
 8004a44:	3b01      	subs	r3, #1
 8004a46:	b2db      	uxtb	r3, r3
 8004a48:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004a4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	dce9      	bgt.n	8004a26 <prvUnlockQueue+0x16>
 8004a52:	e000      	b.n	8004a56 <prvUnlockQueue+0x46>
					break;
 8004a54:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	22ff      	movs	r2, #255	; 0xff
 8004a5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004a5e:	f001 fd6b 	bl	8006538 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004a62:	f001 fd39 	bl	80064d8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004a6c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004a6e:	e011      	b.n	8004a94 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	691b      	ldr	r3, [r3, #16]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d012      	beq.n	8004a9e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	3310      	adds	r3, #16
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	f000 fd13 	bl	80054a8 <xTaskRemoveFromEventList>
 8004a82:	4603      	mov	r3, r0
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d001      	beq.n	8004a8c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004a88:	f000 fdea 	bl	8005660 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004a8c:	7bbb      	ldrb	r3, [r7, #14]
 8004a8e:	3b01      	subs	r3, #1
 8004a90:	b2db      	uxtb	r3, r3
 8004a92:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004a94:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	dce9      	bgt.n	8004a70 <prvUnlockQueue+0x60>
 8004a9c:	e000      	b.n	8004aa0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004a9e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	22ff      	movs	r2, #255	; 0xff
 8004aa4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004aa8:	f001 fd46 	bl	8006538 <vPortExitCritical>
}
 8004aac:	bf00      	nop
 8004aae:	3710      	adds	r7, #16
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}

08004ab4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b084      	sub	sp, #16
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004abc:	f001 fd0c 	bl	80064d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d102      	bne.n	8004ace <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	60fb      	str	r3, [r7, #12]
 8004acc:	e001      	b.n	8004ad2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004ace:	2300      	movs	r3, #0
 8004ad0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004ad2:	f001 fd31 	bl	8006538 <vPortExitCritical>

	return xReturn;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	3710      	adds	r7, #16
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bd80      	pop	{r7, pc}

08004ae0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b084      	sub	sp, #16
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004ae8:	f001 fcf6 	bl	80064d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004af4:	429a      	cmp	r2, r3
 8004af6:	d102      	bne.n	8004afe <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004af8:	2301      	movs	r3, #1
 8004afa:	60fb      	str	r3, [r7, #12]
 8004afc:	e001      	b.n	8004b02 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004afe:	2300      	movs	r3, #0
 8004b00:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004b02:	f001 fd19 	bl	8006538 <vPortExitCritical>

	return xReturn;
 8004b06:	68fb      	ldr	r3, [r7, #12]
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	3710      	adds	r7, #16
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}

08004b10 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004b10:	b480      	push	{r7}
 8004b12:	b085      	sub	sp, #20
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
 8004b18:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	60fb      	str	r3, [r7, #12]
 8004b1e:	e014      	b.n	8004b4a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004b20:	4a0f      	ldr	r2, [pc, #60]	; (8004b60 <vQueueAddToRegistry+0x50>)
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d10b      	bne.n	8004b44 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004b2c:	490c      	ldr	r1, [pc, #48]	; (8004b60 <vQueueAddToRegistry+0x50>)
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	683a      	ldr	r2, [r7, #0]
 8004b32:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004b36:	4a0a      	ldr	r2, [pc, #40]	; (8004b60 <vQueueAddToRegistry+0x50>)
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	00db      	lsls	r3, r3, #3
 8004b3c:	4413      	add	r3, r2
 8004b3e:	687a      	ldr	r2, [r7, #4]
 8004b40:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004b42:	e006      	b.n	8004b52 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	3301      	adds	r3, #1
 8004b48:	60fb      	str	r3, [r7, #12]
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	2b07      	cmp	r3, #7
 8004b4e:	d9e7      	bls.n	8004b20 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004b50:	bf00      	nop
 8004b52:	bf00      	nop
 8004b54:	3714      	adds	r7, #20
 8004b56:	46bd      	mov	sp, r7
 8004b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5c:	4770      	bx	lr
 8004b5e:	bf00      	nop
 8004b60:	200001fc 	.word	0x200001fc

08004b64 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b086      	sub	sp, #24
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	60f8      	str	r0, [r7, #12]
 8004b6c:	60b9      	str	r1, [r7, #8]
 8004b6e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004b74:	f001 fcb0 	bl	80064d8 <vPortEnterCritical>
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004b7e:	b25b      	sxtb	r3, r3
 8004b80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b84:	d103      	bne.n	8004b8e <vQueueWaitForMessageRestricted+0x2a>
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004b94:	b25b      	sxtb	r3, r3
 8004b96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b9a:	d103      	bne.n	8004ba4 <vQueueWaitForMessageRestricted+0x40>
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ba4:	f001 fcc8 	bl	8006538 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d106      	bne.n	8004bbe <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	3324      	adds	r3, #36	; 0x24
 8004bb4:	687a      	ldr	r2, [r7, #4]
 8004bb6:	68b9      	ldr	r1, [r7, #8]
 8004bb8:	4618      	mov	r0, r3
 8004bba:	f000 fc49 	bl	8005450 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004bbe:	6978      	ldr	r0, [r7, #20]
 8004bc0:	f7ff ff26 	bl	8004a10 <prvUnlockQueue>
	}
 8004bc4:	bf00      	nop
 8004bc6:	3718      	adds	r7, #24
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd80      	pop	{r7, pc}

08004bcc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b08c      	sub	sp, #48	; 0x30
 8004bd0:	af04      	add	r7, sp, #16
 8004bd2:	60f8      	str	r0, [r7, #12]
 8004bd4:	60b9      	str	r1, [r7, #8]
 8004bd6:	603b      	str	r3, [r7, #0]
 8004bd8:	4613      	mov	r3, r2
 8004bda:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004bdc:	88fb      	ldrh	r3, [r7, #6]
 8004bde:	009b      	lsls	r3, r3, #2
 8004be0:	4618      	mov	r0, r3
 8004be2:	f001 fd91 	bl	8006708 <pvPortMalloc>
 8004be6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004be8:	697b      	ldr	r3, [r7, #20]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d00e      	beq.n	8004c0c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004bee:	2060      	movs	r0, #96	; 0x60
 8004bf0:	f001 fd8a 	bl	8006708 <pvPortMalloc>
 8004bf4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004bf6:	69fb      	ldr	r3, [r7, #28]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d003      	beq.n	8004c04 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004bfc:	69fb      	ldr	r3, [r7, #28]
 8004bfe:	697a      	ldr	r2, [r7, #20]
 8004c00:	631a      	str	r2, [r3, #48]	; 0x30
 8004c02:	e005      	b.n	8004c10 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004c04:	6978      	ldr	r0, [r7, #20]
 8004c06:	f001 fe39 	bl	800687c <vPortFree>
 8004c0a:	e001      	b.n	8004c10 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004c10:	69fb      	ldr	r3, [r7, #28]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d013      	beq.n	8004c3e <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004c16:	88fa      	ldrh	r2, [r7, #6]
 8004c18:	2300      	movs	r3, #0
 8004c1a:	9303      	str	r3, [sp, #12]
 8004c1c:	69fb      	ldr	r3, [r7, #28]
 8004c1e:	9302      	str	r3, [sp, #8]
 8004c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c22:	9301      	str	r3, [sp, #4]
 8004c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c26:	9300      	str	r3, [sp, #0]
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	68b9      	ldr	r1, [r7, #8]
 8004c2c:	68f8      	ldr	r0, [r7, #12]
 8004c2e:	f000 f80e 	bl	8004c4e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004c32:	69f8      	ldr	r0, [r7, #28]
 8004c34:	f000 f89e 	bl	8004d74 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	61bb      	str	r3, [r7, #24]
 8004c3c:	e002      	b.n	8004c44 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004c3e:	f04f 33ff 	mov.w	r3, #4294967295
 8004c42:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004c44:	69bb      	ldr	r3, [r7, #24]
	}
 8004c46:	4618      	mov	r0, r3
 8004c48:	3720      	adds	r7, #32
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}

08004c4e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004c4e:	b580      	push	{r7, lr}
 8004c50:	b088      	sub	sp, #32
 8004c52:	af00      	add	r7, sp, #0
 8004c54:	60f8      	str	r0, [r7, #12]
 8004c56:	60b9      	str	r1, [r7, #8]
 8004c58:	607a      	str	r2, [r7, #4]
 8004c5a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c5e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	009b      	lsls	r3, r3, #2
 8004c64:	461a      	mov	r2, r3
 8004c66:	21a5      	movs	r1, #165	; 0xa5
 8004c68:	f001 ff4f 	bl	8006b0a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004c76:	3b01      	subs	r3, #1
 8004c78:	009b      	lsls	r3, r3, #2
 8004c7a:	4413      	add	r3, r2
 8004c7c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004c7e:	69bb      	ldr	r3, [r7, #24]
 8004c80:	f023 0307 	bic.w	r3, r3, #7
 8004c84:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004c86:	69bb      	ldr	r3, [r7, #24]
 8004c88:	f003 0307 	and.w	r3, r3, #7
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d00a      	beq.n	8004ca6 <prvInitialiseNewTask+0x58>
        __asm volatile
 8004c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c94:	f383 8811 	msr	BASEPRI, r3
 8004c98:	f3bf 8f6f 	isb	sy
 8004c9c:	f3bf 8f4f 	dsb	sy
 8004ca0:	617b      	str	r3, [r7, #20]
    }
 8004ca2:	bf00      	nop
 8004ca4:	e7fe      	b.n	8004ca4 <prvInitialiseNewTask+0x56>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 8004ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ca8:	69ba      	ldr	r2, [r7, #24]
 8004caa:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d01f      	beq.n	8004cf2 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	61fb      	str	r3, [r7, #28]
 8004cb6:	e012      	b.n	8004cde <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004cb8:	68ba      	ldr	r2, [r7, #8]
 8004cba:	69fb      	ldr	r3, [r7, #28]
 8004cbc:	4413      	add	r3, r2
 8004cbe:	7819      	ldrb	r1, [r3, #0]
 8004cc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004cc2:	69fb      	ldr	r3, [r7, #28]
 8004cc4:	4413      	add	r3, r2
 8004cc6:	3334      	adds	r3, #52	; 0x34
 8004cc8:	460a      	mov	r2, r1
 8004cca:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004ccc:	68ba      	ldr	r2, [r7, #8]
 8004cce:	69fb      	ldr	r3, [r7, #28]
 8004cd0:	4413      	add	r3, r2
 8004cd2:	781b      	ldrb	r3, [r3, #0]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d006      	beq.n	8004ce6 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004cd8:	69fb      	ldr	r3, [r7, #28]
 8004cda:	3301      	adds	r3, #1
 8004cdc:	61fb      	str	r3, [r7, #28]
 8004cde:	69fb      	ldr	r3, [r7, #28]
 8004ce0:	2b0f      	cmp	r3, #15
 8004ce2:	d9e9      	bls.n	8004cb8 <prvInitialiseNewTask+0x6a>
 8004ce4:	e000      	b.n	8004ce8 <prvInitialiseNewTask+0x9a>
			{
				break;
 8004ce6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cea:	2200      	movs	r2, #0
 8004cec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004cf0:	e003      	b.n	8004cfa <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cfc:	2b37      	cmp	r3, #55	; 0x37
 8004cfe:	d901      	bls.n	8004d04 <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004d00:	2337      	movs	r3, #55	; 0x37
 8004d02:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d08:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d0e:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
 8004d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d12:	2200      	movs	r2, #0
 8004d14:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d18:	3304      	adds	r3, #4
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	f7ff f8c2 	bl	8003ea4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d22:	3318      	adds	r3, #24
 8004d24:	4618      	mov	r0, r3
 8004d26:	f7ff f8bd 	bl	8003ea4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d2e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d32:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d38:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d3e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d42:	2200      	movs	r2, #0
 8004d44:	659a      	str	r2, [r3, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d48:	2200      	movs	r2, #0
 8004d4a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004d4e:	683a      	ldr	r2, [r7, #0]
 8004d50:	68f9      	ldr	r1, [r7, #12]
 8004d52:	69b8      	ldr	r0, [r7, #24]
 8004d54:	f001 fa92 	bl	800627c <pxPortInitialiseStack>
 8004d58:	4602      	mov	r2, r0
 8004d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d5c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d002      	beq.n	8004d6a <prvInitialiseNewTask+0x11c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004d64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d68:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004d6a:	bf00      	nop
 8004d6c:	3720      	adds	r7, #32
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bd80      	pop	{r7, pc}
	...

08004d74 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b082      	sub	sp, #8
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004d7c:	f001 fbac 	bl	80064d8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004d80:	4b2d      	ldr	r3, [pc, #180]	; (8004e38 <prvAddNewTaskToReadyList+0xc4>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	3301      	adds	r3, #1
 8004d86:	4a2c      	ldr	r2, [pc, #176]	; (8004e38 <prvAddNewTaskToReadyList+0xc4>)
 8004d88:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004d8a:	4b2c      	ldr	r3, [pc, #176]	; (8004e3c <prvAddNewTaskToReadyList+0xc8>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d109      	bne.n	8004da6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004d92:	4a2a      	ldr	r2, [pc, #168]	; (8004e3c <prvAddNewTaskToReadyList+0xc8>)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004d98:	4b27      	ldr	r3, [pc, #156]	; (8004e38 <prvAddNewTaskToReadyList+0xc4>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	d110      	bne.n	8004dc2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004da0:	f000 fc82 	bl	80056a8 <prvInitialiseTaskLists>
 8004da4:	e00d      	b.n	8004dc2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004da6:	4b26      	ldr	r3, [pc, #152]	; (8004e40 <prvAddNewTaskToReadyList+0xcc>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d109      	bne.n	8004dc2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004dae:	4b23      	ldr	r3, [pc, #140]	; (8004e3c <prvAddNewTaskToReadyList+0xc8>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004db8:	429a      	cmp	r2, r3
 8004dba:	d802      	bhi.n	8004dc2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004dbc:	4a1f      	ldr	r2, [pc, #124]	; (8004e3c <prvAddNewTaskToReadyList+0xc8>)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004dc2:	4b20      	ldr	r3, [pc, #128]	; (8004e44 <prvAddNewTaskToReadyList+0xd0>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	3301      	adds	r3, #1
 8004dc8:	4a1e      	ldr	r2, [pc, #120]	; (8004e44 <prvAddNewTaskToReadyList+0xd0>)
 8004dca:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004dcc:	4b1d      	ldr	r3, [pc, #116]	; (8004e44 <prvAddNewTaskToReadyList+0xd0>)
 8004dce:	681a      	ldr	r2, [r3, #0]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	649a      	str	r2, [r3, #72]	; 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dd8:	4b1b      	ldr	r3, [pc, #108]	; (8004e48 <prvAddNewTaskToReadyList+0xd4>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	429a      	cmp	r2, r3
 8004dde:	d903      	bls.n	8004de8 <prvAddNewTaskToReadyList+0x74>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004de4:	4a18      	ldr	r2, [pc, #96]	; (8004e48 <prvAddNewTaskToReadyList+0xd4>)
 8004de6:	6013      	str	r3, [r2, #0]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dec:	4613      	mov	r3, r2
 8004dee:	009b      	lsls	r3, r3, #2
 8004df0:	4413      	add	r3, r2
 8004df2:	009b      	lsls	r3, r3, #2
 8004df4:	4a15      	ldr	r2, [pc, #84]	; (8004e4c <prvAddNewTaskToReadyList+0xd8>)
 8004df6:	441a      	add	r2, r3
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	3304      	adds	r3, #4
 8004dfc:	4619      	mov	r1, r3
 8004dfe:	4610      	mov	r0, r2
 8004e00:	f7ff f85d 	bl	8003ebe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004e04:	f001 fb98 	bl	8006538 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004e08:	4b0d      	ldr	r3, [pc, #52]	; (8004e40 <prvAddNewTaskToReadyList+0xcc>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d00e      	beq.n	8004e2e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004e10:	4b0a      	ldr	r3, [pc, #40]	; (8004e3c <prvAddNewTaskToReadyList+0xc8>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e1a:	429a      	cmp	r2, r3
 8004e1c:	d207      	bcs.n	8004e2e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004e1e:	4b0c      	ldr	r3, [pc, #48]	; (8004e50 <prvAddNewTaskToReadyList+0xdc>)
 8004e20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e24:	601a      	str	r2, [r3, #0]
 8004e26:	f3bf 8f4f 	dsb	sy
 8004e2a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004e2e:	bf00      	nop
 8004e30:	3708      	adds	r7, #8
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}
 8004e36:	bf00      	nop
 8004e38:	20000710 	.word	0x20000710
 8004e3c:	2000023c 	.word	0x2000023c
 8004e40:	2000071c 	.word	0x2000071c
 8004e44:	2000072c 	.word	0x2000072c
 8004e48:	20000718 	.word	0x20000718
 8004e4c:	20000240 	.word	0x20000240
 8004e50:	e000ed04 	.word	0xe000ed04

08004e54 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b084      	sub	sp, #16
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8004e5c:	f001 fb3c 	bl	80064d8 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d102      	bne.n	8004e6c <vTaskDelete+0x18>
 8004e66:	4b2c      	ldr	r3, [pc, #176]	; (8004f18 <vTaskDelete+0xc4>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	e000      	b.n	8004e6e <vTaskDelete+0x1a>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	3304      	adds	r3, #4
 8004e74:	4618      	mov	r0, r3
 8004e76:	f7ff f87f 	bl	8003f78 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d004      	beq.n	8004e8c <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	3318      	adds	r3, #24
 8004e86:	4618      	mov	r0, r3
 8004e88:	f7ff f876 	bl	8003f78 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8004e8c:	4b23      	ldr	r3, [pc, #140]	; (8004f1c <vTaskDelete+0xc8>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	3301      	adds	r3, #1
 8004e92:	4a22      	ldr	r2, [pc, #136]	; (8004f1c <vTaskDelete+0xc8>)
 8004e94:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8004e96:	4b20      	ldr	r3, [pc, #128]	; (8004f18 <vTaskDelete+0xc4>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	68fa      	ldr	r2, [r7, #12]
 8004e9c:	429a      	cmp	r2, r3
 8004e9e:	d10b      	bne.n	8004eb8 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	3304      	adds	r3, #4
 8004ea4:	4619      	mov	r1, r3
 8004ea6:	481e      	ldr	r0, [pc, #120]	; (8004f20 <vTaskDelete+0xcc>)
 8004ea8:	f7ff f809 	bl	8003ebe <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8004eac:	4b1d      	ldr	r3, [pc, #116]	; (8004f24 <vTaskDelete+0xd0>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	3301      	adds	r3, #1
 8004eb2:	4a1c      	ldr	r2, [pc, #112]	; (8004f24 <vTaskDelete+0xd0>)
 8004eb4:	6013      	str	r3, [r2, #0]
 8004eb6:	e009      	b.n	8004ecc <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8004eb8:	4b1b      	ldr	r3, [pc, #108]	; (8004f28 <vTaskDelete+0xd4>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	3b01      	subs	r3, #1
 8004ebe:	4a1a      	ldr	r2, [pc, #104]	; (8004f28 <vTaskDelete+0xd4>)
 8004ec0:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8004ec2:	68f8      	ldr	r0, [r7, #12]
 8004ec4:	f000 fc5e 	bl	8005784 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8004ec8:	f000 fc6c 	bl	80057a4 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8004ecc:	f001 fb34 	bl	8006538 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8004ed0:	4b16      	ldr	r3, [pc, #88]	; (8004f2c <vTaskDelete+0xd8>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d01b      	beq.n	8004f10 <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 8004ed8:	4b0f      	ldr	r3, [pc, #60]	; (8004f18 <vTaskDelete+0xc4>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	68fa      	ldr	r2, [r7, #12]
 8004ede:	429a      	cmp	r2, r3
 8004ee0:	d116      	bne.n	8004f10 <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8004ee2:	4b13      	ldr	r3, [pc, #76]	; (8004f30 <vTaskDelete+0xdc>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d00a      	beq.n	8004f00 <vTaskDelete+0xac>
        __asm volatile
 8004eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eee:	f383 8811 	msr	BASEPRI, r3
 8004ef2:	f3bf 8f6f 	isb	sy
 8004ef6:	f3bf 8f4f 	dsb	sy
 8004efa:	60bb      	str	r3, [r7, #8]
    }
 8004efc:	bf00      	nop
 8004efe:	e7fe      	b.n	8004efe <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 8004f00:	4b0c      	ldr	r3, [pc, #48]	; (8004f34 <vTaskDelete+0xe0>)
 8004f02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f06:	601a      	str	r2, [r3, #0]
 8004f08:	f3bf 8f4f 	dsb	sy
 8004f0c:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004f10:	bf00      	nop
 8004f12:	3710      	adds	r7, #16
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd80      	pop	{r7, pc}
 8004f18:	2000023c 	.word	0x2000023c
 8004f1c:	2000072c 	.word	0x2000072c
 8004f20:	200006e4 	.word	0x200006e4
 8004f24:	200006f8 	.word	0x200006f8
 8004f28:	20000710 	.word	0x20000710
 8004f2c:	2000071c 	.word	0x2000071c
 8004f30:	20000738 	.word	0x20000738
 8004f34:	e000ed04 	.word	0xe000ed04

08004f38 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b084      	sub	sp, #16
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004f40:	2300      	movs	r3, #0
 8004f42:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d017      	beq.n	8004f7a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004f4a:	4b13      	ldr	r3, [pc, #76]	; (8004f98 <vTaskDelay+0x60>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d00a      	beq.n	8004f68 <vTaskDelay+0x30>
        __asm volatile
 8004f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f56:	f383 8811 	msr	BASEPRI, r3
 8004f5a:	f3bf 8f6f 	isb	sy
 8004f5e:	f3bf 8f4f 	dsb	sy
 8004f62:	60bb      	str	r3, [r7, #8]
    }
 8004f64:	bf00      	nop
 8004f66:	e7fe      	b.n	8004f66 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004f68:	f000 f868 	bl	800503c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004f6c:	2100      	movs	r1, #0
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f000 fdc2 	bl	8005af8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004f74:	f000 f870 	bl	8005058 <xTaskResumeAll>
 8004f78:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d107      	bne.n	8004f90 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004f80:	4b06      	ldr	r3, [pc, #24]	; (8004f9c <vTaskDelay+0x64>)
 8004f82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f86:	601a      	str	r2, [r3, #0]
 8004f88:	f3bf 8f4f 	dsb	sy
 8004f8c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004f90:	bf00      	nop
 8004f92:	3710      	adds	r7, #16
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bd80      	pop	{r7, pc}
 8004f98:	20000738 	.word	0x20000738
 8004f9c:	e000ed04 	.word	0xe000ed04

08004fa0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b086      	sub	sp, #24
 8004fa4:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8004fa6:	4b1f      	ldr	r3, [pc, #124]	; (8005024 <vTaskStartScheduler+0x84>)
 8004fa8:	9301      	str	r3, [sp, #4]
 8004faa:	2300      	movs	r3, #0
 8004fac:	9300      	str	r3, [sp, #0]
 8004fae:	2300      	movs	r3, #0
 8004fb0:	2280      	movs	r2, #128	; 0x80
 8004fb2:	491d      	ldr	r1, [pc, #116]	; (8005028 <vTaskStartScheduler+0x88>)
 8004fb4:	481d      	ldr	r0, [pc, #116]	; (800502c <vTaskStartScheduler+0x8c>)
 8004fb6:	f7ff fe09 	bl	8004bcc <xTaskCreate>
 8004fba:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	2b01      	cmp	r3, #1
 8004fc0:	d102      	bne.n	8004fc8 <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 8004fc2:	f000 fded 	bl	8005ba0 <xTimerCreateTimerTask>
 8004fc6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	2b01      	cmp	r3, #1
 8004fcc:	d116      	bne.n	8004ffc <vTaskStartScheduler+0x5c>
        __asm volatile
 8004fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fd2:	f383 8811 	msr	BASEPRI, r3
 8004fd6:	f3bf 8f6f 	isb	sy
 8004fda:	f3bf 8f4f 	dsb	sy
 8004fde:	60bb      	str	r3, [r7, #8]
    }
 8004fe0:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004fe2:	4b13      	ldr	r3, [pc, #76]	; (8005030 <vTaskStartScheduler+0x90>)
 8004fe4:	f04f 32ff 	mov.w	r2, #4294967295
 8004fe8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004fea:	4b12      	ldr	r3, [pc, #72]	; (8005034 <vTaskStartScheduler+0x94>)
 8004fec:	2201      	movs	r2, #1
 8004fee:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004ff0:	4b11      	ldr	r3, [pc, #68]	; (8005038 <vTaskStartScheduler+0x98>)
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004ff6:	f001 f9cd 	bl	8006394 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004ffa:	e00e      	b.n	800501a <vTaskStartScheduler+0x7a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005002:	d10a      	bne.n	800501a <vTaskStartScheduler+0x7a>
        __asm volatile
 8005004:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005008:	f383 8811 	msr	BASEPRI, r3
 800500c:	f3bf 8f6f 	isb	sy
 8005010:	f3bf 8f4f 	dsb	sy
 8005014:	607b      	str	r3, [r7, #4]
    }
 8005016:	bf00      	nop
 8005018:	e7fe      	b.n	8005018 <vTaskStartScheduler+0x78>
}
 800501a:	bf00      	nop
 800501c:	3710      	adds	r7, #16
 800501e:	46bd      	mov	sp, r7
 8005020:	bd80      	pop	{r7, pc}
 8005022:	bf00      	nop
 8005024:	20000734 	.word	0x20000734
 8005028:	08006be0 	.word	0x08006be0
 800502c:	08005679 	.word	0x08005679
 8005030:	20000730 	.word	0x20000730
 8005034:	2000071c 	.word	0x2000071c
 8005038:	20000714 	.word	0x20000714

0800503c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800503c:	b480      	push	{r7}
 800503e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005040:	4b04      	ldr	r3, [pc, #16]	; (8005054 <vTaskSuspendAll+0x18>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	3301      	adds	r3, #1
 8005046:	4a03      	ldr	r2, [pc, #12]	; (8005054 <vTaskSuspendAll+0x18>)
 8005048:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800504a:	bf00      	nop
 800504c:	46bd      	mov	sp, r7
 800504e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005052:	4770      	bx	lr
 8005054:	20000738 	.word	0x20000738

08005058 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b084      	sub	sp, #16
 800505c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800505e:	2300      	movs	r3, #0
 8005060:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005062:	2300      	movs	r3, #0
 8005064:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005066:	4b42      	ldr	r3, [pc, #264]	; (8005170 <xTaskResumeAll+0x118>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d10a      	bne.n	8005084 <xTaskResumeAll+0x2c>
        __asm volatile
 800506e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005072:	f383 8811 	msr	BASEPRI, r3
 8005076:	f3bf 8f6f 	isb	sy
 800507a:	f3bf 8f4f 	dsb	sy
 800507e:	603b      	str	r3, [r7, #0]
    }
 8005080:	bf00      	nop
 8005082:	e7fe      	b.n	8005082 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005084:	f001 fa28 	bl	80064d8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005088:	4b39      	ldr	r3, [pc, #228]	; (8005170 <xTaskResumeAll+0x118>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	3b01      	subs	r3, #1
 800508e:	4a38      	ldr	r2, [pc, #224]	; (8005170 <xTaskResumeAll+0x118>)
 8005090:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005092:	4b37      	ldr	r3, [pc, #220]	; (8005170 <xTaskResumeAll+0x118>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d162      	bne.n	8005160 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800509a:	4b36      	ldr	r3, [pc, #216]	; (8005174 <xTaskResumeAll+0x11c>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d05e      	beq.n	8005160 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80050a2:	e02f      	b.n	8005104 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80050a4:	4b34      	ldr	r3, [pc, #208]	; (8005178 <xTaskResumeAll+0x120>)
 80050a6:	68db      	ldr	r3, [r3, #12]
 80050a8:	68db      	ldr	r3, [r3, #12]
 80050aa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	3318      	adds	r3, #24
 80050b0:	4618      	mov	r0, r3
 80050b2:	f7fe ff61 	bl	8003f78 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	3304      	adds	r3, #4
 80050ba:	4618      	mov	r0, r3
 80050bc:	f7fe ff5c 	bl	8003f78 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050c4:	4b2d      	ldr	r3, [pc, #180]	; (800517c <xTaskResumeAll+0x124>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	429a      	cmp	r2, r3
 80050ca:	d903      	bls.n	80050d4 <xTaskResumeAll+0x7c>
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050d0:	4a2a      	ldr	r2, [pc, #168]	; (800517c <xTaskResumeAll+0x124>)
 80050d2:	6013      	str	r3, [r2, #0]
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050d8:	4613      	mov	r3, r2
 80050da:	009b      	lsls	r3, r3, #2
 80050dc:	4413      	add	r3, r2
 80050de:	009b      	lsls	r3, r3, #2
 80050e0:	4a27      	ldr	r2, [pc, #156]	; (8005180 <xTaskResumeAll+0x128>)
 80050e2:	441a      	add	r2, r3
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	3304      	adds	r3, #4
 80050e8:	4619      	mov	r1, r3
 80050ea:	4610      	mov	r0, r2
 80050ec:	f7fe fee7 	bl	8003ebe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050f4:	4b23      	ldr	r3, [pc, #140]	; (8005184 <xTaskResumeAll+0x12c>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050fa:	429a      	cmp	r2, r3
 80050fc:	d302      	bcc.n	8005104 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80050fe:	4b22      	ldr	r3, [pc, #136]	; (8005188 <xTaskResumeAll+0x130>)
 8005100:	2201      	movs	r2, #1
 8005102:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005104:	4b1c      	ldr	r3, [pc, #112]	; (8005178 <xTaskResumeAll+0x120>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d1cb      	bne.n	80050a4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d001      	beq.n	8005116 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005112:	f000 fb47 	bl	80057a4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005116:	4b1d      	ldr	r3, [pc, #116]	; (800518c <xTaskResumeAll+0x134>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d010      	beq.n	8005144 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005122:	f000 f859 	bl	80051d8 <xTaskIncrementTick>
 8005126:	4603      	mov	r3, r0
 8005128:	2b00      	cmp	r3, #0
 800512a:	d002      	beq.n	8005132 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800512c:	4b16      	ldr	r3, [pc, #88]	; (8005188 <xTaskResumeAll+0x130>)
 800512e:	2201      	movs	r2, #1
 8005130:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	3b01      	subs	r3, #1
 8005136:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d1f1      	bne.n	8005122 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800513e:	4b13      	ldr	r3, [pc, #76]	; (800518c <xTaskResumeAll+0x134>)
 8005140:	2200      	movs	r2, #0
 8005142:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005144:	4b10      	ldr	r3, [pc, #64]	; (8005188 <xTaskResumeAll+0x130>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d009      	beq.n	8005160 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800514c:	2301      	movs	r3, #1
 800514e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005150:	4b0f      	ldr	r3, [pc, #60]	; (8005190 <xTaskResumeAll+0x138>)
 8005152:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005156:	601a      	str	r2, [r3, #0]
 8005158:	f3bf 8f4f 	dsb	sy
 800515c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005160:	f001 f9ea 	bl	8006538 <vPortExitCritical>

	return xAlreadyYielded;
 8005164:	68bb      	ldr	r3, [r7, #8]
}
 8005166:	4618      	mov	r0, r3
 8005168:	3710      	adds	r7, #16
 800516a:	46bd      	mov	sp, r7
 800516c:	bd80      	pop	{r7, pc}
 800516e:	bf00      	nop
 8005170:	20000738 	.word	0x20000738
 8005174:	20000710 	.word	0x20000710
 8005178:	200006d0 	.word	0x200006d0
 800517c:	20000718 	.word	0x20000718
 8005180:	20000240 	.word	0x20000240
 8005184:	2000023c 	.word	0x2000023c
 8005188:	20000724 	.word	0x20000724
 800518c:	20000720 	.word	0x20000720
 8005190:	e000ed04 	.word	0xe000ed04

08005194 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005194:	b480      	push	{r7}
 8005196:	b083      	sub	sp, #12
 8005198:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800519a:	4b05      	ldr	r3, [pc, #20]	; (80051b0 <xTaskGetTickCount+0x1c>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80051a0:	687b      	ldr	r3, [r7, #4]
}
 80051a2:	4618      	mov	r0, r3
 80051a4:	370c      	adds	r7, #12
 80051a6:	46bd      	mov	sp, r7
 80051a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ac:	4770      	bx	lr
 80051ae:	bf00      	nop
 80051b0:	20000714 	.word	0x20000714

080051b4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b082      	sub	sp, #8
 80051b8:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80051ba:	f001 fa65 	bl	8006688 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80051be:	2300      	movs	r3, #0
 80051c0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80051c2:	4b04      	ldr	r3, [pc, #16]	; (80051d4 <xTaskGetTickCountFromISR+0x20>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80051c8:	683b      	ldr	r3, [r7, #0]
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	3708      	adds	r7, #8
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}
 80051d2:	bf00      	nop
 80051d4:	20000714 	.word	0x20000714

080051d8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b086      	sub	sp, #24
 80051dc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80051de:	2300      	movs	r3, #0
 80051e0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80051e2:	4b4f      	ldr	r3, [pc, #316]	; (8005320 <xTaskIncrementTick+0x148>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	f040 808f 	bne.w	800530a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80051ec:	4b4d      	ldr	r3, [pc, #308]	; (8005324 <xTaskIncrementTick+0x14c>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	3301      	adds	r3, #1
 80051f2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80051f4:	4a4b      	ldr	r2, [pc, #300]	; (8005324 <xTaskIncrementTick+0x14c>)
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80051fa:	693b      	ldr	r3, [r7, #16]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d120      	bne.n	8005242 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005200:	4b49      	ldr	r3, [pc, #292]	; (8005328 <xTaskIncrementTick+0x150>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d00a      	beq.n	8005220 <xTaskIncrementTick+0x48>
        __asm volatile
 800520a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800520e:	f383 8811 	msr	BASEPRI, r3
 8005212:	f3bf 8f6f 	isb	sy
 8005216:	f3bf 8f4f 	dsb	sy
 800521a:	603b      	str	r3, [r7, #0]
    }
 800521c:	bf00      	nop
 800521e:	e7fe      	b.n	800521e <xTaskIncrementTick+0x46>
 8005220:	4b41      	ldr	r3, [pc, #260]	; (8005328 <xTaskIncrementTick+0x150>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	60fb      	str	r3, [r7, #12]
 8005226:	4b41      	ldr	r3, [pc, #260]	; (800532c <xTaskIncrementTick+0x154>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a3f      	ldr	r2, [pc, #252]	; (8005328 <xTaskIncrementTick+0x150>)
 800522c:	6013      	str	r3, [r2, #0]
 800522e:	4a3f      	ldr	r2, [pc, #252]	; (800532c <xTaskIncrementTick+0x154>)
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	6013      	str	r3, [r2, #0]
 8005234:	4b3e      	ldr	r3, [pc, #248]	; (8005330 <xTaskIncrementTick+0x158>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	3301      	adds	r3, #1
 800523a:	4a3d      	ldr	r2, [pc, #244]	; (8005330 <xTaskIncrementTick+0x158>)
 800523c:	6013      	str	r3, [r2, #0]
 800523e:	f000 fab1 	bl	80057a4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005242:	4b3c      	ldr	r3, [pc, #240]	; (8005334 <xTaskIncrementTick+0x15c>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	693a      	ldr	r2, [r7, #16]
 8005248:	429a      	cmp	r2, r3
 800524a:	d349      	bcc.n	80052e0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800524c:	4b36      	ldr	r3, [pc, #216]	; (8005328 <xTaskIncrementTick+0x150>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d104      	bne.n	8005260 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005256:	4b37      	ldr	r3, [pc, #220]	; (8005334 <xTaskIncrementTick+0x15c>)
 8005258:	f04f 32ff 	mov.w	r2, #4294967295
 800525c:	601a      	str	r2, [r3, #0]
					break;
 800525e:	e03f      	b.n	80052e0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005260:	4b31      	ldr	r3, [pc, #196]	; (8005328 <xTaskIncrementTick+0x150>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	68db      	ldr	r3, [r3, #12]
 8005266:	68db      	ldr	r3, [r3, #12]
 8005268:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005270:	693a      	ldr	r2, [r7, #16]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	429a      	cmp	r2, r3
 8005276:	d203      	bcs.n	8005280 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005278:	4a2e      	ldr	r2, [pc, #184]	; (8005334 <xTaskIncrementTick+0x15c>)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800527e:	e02f      	b.n	80052e0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	3304      	adds	r3, #4
 8005284:	4618      	mov	r0, r3
 8005286:	f7fe fe77 	bl	8003f78 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800528e:	2b00      	cmp	r3, #0
 8005290:	d004      	beq.n	800529c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	3318      	adds	r3, #24
 8005296:	4618      	mov	r0, r3
 8005298:	f7fe fe6e 	bl	8003f78 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052a0:	4b25      	ldr	r3, [pc, #148]	; (8005338 <xTaskIncrementTick+0x160>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	429a      	cmp	r2, r3
 80052a6:	d903      	bls.n	80052b0 <xTaskIncrementTick+0xd8>
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ac:	4a22      	ldr	r2, [pc, #136]	; (8005338 <xTaskIncrementTick+0x160>)
 80052ae:	6013      	str	r3, [r2, #0]
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052b4:	4613      	mov	r3, r2
 80052b6:	009b      	lsls	r3, r3, #2
 80052b8:	4413      	add	r3, r2
 80052ba:	009b      	lsls	r3, r3, #2
 80052bc:	4a1f      	ldr	r2, [pc, #124]	; (800533c <xTaskIncrementTick+0x164>)
 80052be:	441a      	add	r2, r3
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	3304      	adds	r3, #4
 80052c4:	4619      	mov	r1, r3
 80052c6:	4610      	mov	r0, r2
 80052c8:	f7fe fdf9 	bl	8003ebe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052d0:	4b1b      	ldr	r3, [pc, #108]	; (8005340 <xTaskIncrementTick+0x168>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052d6:	429a      	cmp	r2, r3
 80052d8:	d3b8      	bcc.n	800524c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80052da:	2301      	movs	r3, #1
 80052dc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80052de:	e7b5      	b.n	800524c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80052e0:	4b17      	ldr	r3, [pc, #92]	; (8005340 <xTaskIncrementTick+0x168>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052e6:	4915      	ldr	r1, [pc, #84]	; (800533c <xTaskIncrementTick+0x164>)
 80052e8:	4613      	mov	r3, r2
 80052ea:	009b      	lsls	r3, r3, #2
 80052ec:	4413      	add	r3, r2
 80052ee:	009b      	lsls	r3, r3, #2
 80052f0:	440b      	add	r3, r1
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	2b01      	cmp	r3, #1
 80052f6:	d901      	bls.n	80052fc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80052f8:	2301      	movs	r3, #1
 80052fa:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80052fc:	4b11      	ldr	r3, [pc, #68]	; (8005344 <xTaskIncrementTick+0x16c>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d007      	beq.n	8005314 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005304:	2301      	movs	r3, #1
 8005306:	617b      	str	r3, [r7, #20]
 8005308:	e004      	b.n	8005314 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800530a:	4b0f      	ldr	r3, [pc, #60]	; (8005348 <xTaskIncrementTick+0x170>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	3301      	adds	r3, #1
 8005310:	4a0d      	ldr	r2, [pc, #52]	; (8005348 <xTaskIncrementTick+0x170>)
 8005312:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005314:	697b      	ldr	r3, [r7, #20]
}
 8005316:	4618      	mov	r0, r3
 8005318:	3718      	adds	r7, #24
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}
 800531e:	bf00      	nop
 8005320:	20000738 	.word	0x20000738
 8005324:	20000714 	.word	0x20000714
 8005328:	200006c8 	.word	0x200006c8
 800532c:	200006cc 	.word	0x200006cc
 8005330:	20000728 	.word	0x20000728
 8005334:	20000730 	.word	0x20000730
 8005338:	20000718 	.word	0x20000718
 800533c:	20000240 	.word	0x20000240
 8005340:	2000023c 	.word	0x2000023c
 8005344:	20000724 	.word	0x20000724
 8005348:	20000720 	.word	0x20000720

0800534c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800534c:	b480      	push	{r7}
 800534e:	b085      	sub	sp, #20
 8005350:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005352:	4b28      	ldr	r3, [pc, #160]	; (80053f4 <vTaskSwitchContext+0xa8>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d003      	beq.n	8005362 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800535a:	4b27      	ldr	r3, [pc, #156]	; (80053f8 <vTaskSwitchContext+0xac>)
 800535c:	2201      	movs	r2, #1
 800535e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005360:	e041      	b.n	80053e6 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8005362:	4b25      	ldr	r3, [pc, #148]	; (80053f8 <vTaskSwitchContext+0xac>)
 8005364:	2200      	movs	r2, #0
 8005366:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005368:	4b24      	ldr	r3, [pc, #144]	; (80053fc <vTaskSwitchContext+0xb0>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	60fb      	str	r3, [r7, #12]
 800536e:	e010      	b.n	8005392 <vTaskSwitchContext+0x46>
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d10a      	bne.n	800538c <vTaskSwitchContext+0x40>
        __asm volatile
 8005376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800537a:	f383 8811 	msr	BASEPRI, r3
 800537e:	f3bf 8f6f 	isb	sy
 8005382:	f3bf 8f4f 	dsb	sy
 8005386:	607b      	str	r3, [r7, #4]
    }
 8005388:	bf00      	nop
 800538a:	e7fe      	b.n	800538a <vTaskSwitchContext+0x3e>
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	3b01      	subs	r3, #1
 8005390:	60fb      	str	r3, [r7, #12]
 8005392:	491b      	ldr	r1, [pc, #108]	; (8005400 <vTaskSwitchContext+0xb4>)
 8005394:	68fa      	ldr	r2, [r7, #12]
 8005396:	4613      	mov	r3, r2
 8005398:	009b      	lsls	r3, r3, #2
 800539a:	4413      	add	r3, r2
 800539c:	009b      	lsls	r3, r3, #2
 800539e:	440b      	add	r3, r1
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d0e4      	beq.n	8005370 <vTaskSwitchContext+0x24>
 80053a6:	68fa      	ldr	r2, [r7, #12]
 80053a8:	4613      	mov	r3, r2
 80053aa:	009b      	lsls	r3, r3, #2
 80053ac:	4413      	add	r3, r2
 80053ae:	009b      	lsls	r3, r3, #2
 80053b0:	4a13      	ldr	r2, [pc, #76]	; (8005400 <vTaskSwitchContext+0xb4>)
 80053b2:	4413      	add	r3, r2
 80053b4:	60bb      	str	r3, [r7, #8]
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	685a      	ldr	r2, [r3, #4]
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	605a      	str	r2, [r3, #4]
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	685a      	ldr	r2, [r3, #4]
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	3308      	adds	r3, #8
 80053c8:	429a      	cmp	r2, r3
 80053ca:	d104      	bne.n	80053d6 <vTaskSwitchContext+0x8a>
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	685a      	ldr	r2, [r3, #4]
 80053d2:	68bb      	ldr	r3, [r7, #8]
 80053d4:	605a      	str	r2, [r3, #4]
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	68db      	ldr	r3, [r3, #12]
 80053dc:	4a09      	ldr	r2, [pc, #36]	; (8005404 <vTaskSwitchContext+0xb8>)
 80053de:	6013      	str	r3, [r2, #0]
 80053e0:	4a06      	ldr	r2, [pc, #24]	; (80053fc <vTaskSwitchContext+0xb0>)
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	6013      	str	r3, [r2, #0]
}
 80053e6:	bf00      	nop
 80053e8:	3714      	adds	r7, #20
 80053ea:	46bd      	mov	sp, r7
 80053ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f0:	4770      	bx	lr
 80053f2:	bf00      	nop
 80053f4:	20000738 	.word	0x20000738
 80053f8:	20000724 	.word	0x20000724
 80053fc:	20000718 	.word	0x20000718
 8005400:	20000240 	.word	0x20000240
 8005404:	2000023c 	.word	0x2000023c

08005408 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b084      	sub	sp, #16
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
 8005410:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d10a      	bne.n	800542e <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8005418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800541c:	f383 8811 	msr	BASEPRI, r3
 8005420:	f3bf 8f6f 	isb	sy
 8005424:	f3bf 8f4f 	dsb	sy
 8005428:	60fb      	str	r3, [r7, #12]
    }
 800542a:	bf00      	nop
 800542c:	e7fe      	b.n	800542c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800542e:	4b07      	ldr	r3, [pc, #28]	; (800544c <vTaskPlaceOnEventList+0x44>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	3318      	adds	r3, #24
 8005434:	4619      	mov	r1, r3
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	f7fe fd65 	bl	8003f06 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800543c:	2101      	movs	r1, #1
 800543e:	6838      	ldr	r0, [r7, #0]
 8005440:	f000 fb5a 	bl	8005af8 <prvAddCurrentTaskToDelayedList>
}
 8005444:	bf00      	nop
 8005446:	3710      	adds	r7, #16
 8005448:	46bd      	mov	sp, r7
 800544a:	bd80      	pop	{r7, pc}
 800544c:	2000023c 	.word	0x2000023c

08005450 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005450:	b580      	push	{r7, lr}
 8005452:	b086      	sub	sp, #24
 8005454:	af00      	add	r7, sp, #0
 8005456:	60f8      	str	r0, [r7, #12]
 8005458:	60b9      	str	r1, [r7, #8]
 800545a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d10a      	bne.n	8005478 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8005462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005466:	f383 8811 	msr	BASEPRI, r3
 800546a:	f3bf 8f6f 	isb	sy
 800546e:	f3bf 8f4f 	dsb	sy
 8005472:	617b      	str	r3, [r7, #20]
    }
 8005474:	bf00      	nop
 8005476:	e7fe      	b.n	8005476 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005478:	4b0a      	ldr	r3, [pc, #40]	; (80054a4 <vTaskPlaceOnEventListRestricted+0x54>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	3318      	adds	r3, #24
 800547e:	4619      	mov	r1, r3
 8005480:	68f8      	ldr	r0, [r7, #12]
 8005482:	f7fe fd1c 	bl	8003ebe <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d002      	beq.n	8005492 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800548c:	f04f 33ff 	mov.w	r3, #4294967295
 8005490:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005492:	6879      	ldr	r1, [r7, #4]
 8005494:	68b8      	ldr	r0, [r7, #8]
 8005496:	f000 fb2f 	bl	8005af8 <prvAddCurrentTaskToDelayedList>
	}
 800549a:	bf00      	nop
 800549c:	3718      	adds	r7, #24
 800549e:	46bd      	mov	sp, r7
 80054a0:	bd80      	pop	{r7, pc}
 80054a2:	bf00      	nop
 80054a4:	2000023c 	.word	0x2000023c

080054a8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b086      	sub	sp, #24
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	68db      	ldr	r3, [r3, #12]
 80054b4:	68db      	ldr	r3, [r3, #12]
 80054b6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80054b8:	693b      	ldr	r3, [r7, #16]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d10a      	bne.n	80054d4 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 80054be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054c2:	f383 8811 	msr	BASEPRI, r3
 80054c6:	f3bf 8f6f 	isb	sy
 80054ca:	f3bf 8f4f 	dsb	sy
 80054ce:	60fb      	str	r3, [r7, #12]
    }
 80054d0:	bf00      	nop
 80054d2:	e7fe      	b.n	80054d2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80054d4:	693b      	ldr	r3, [r7, #16]
 80054d6:	3318      	adds	r3, #24
 80054d8:	4618      	mov	r0, r3
 80054da:	f7fe fd4d 	bl	8003f78 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80054de:	4b1e      	ldr	r3, [pc, #120]	; (8005558 <xTaskRemoveFromEventList+0xb0>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d11d      	bne.n	8005522 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80054e6:	693b      	ldr	r3, [r7, #16]
 80054e8:	3304      	adds	r3, #4
 80054ea:	4618      	mov	r0, r3
 80054ec:	f7fe fd44 	bl	8003f78 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80054f0:	693b      	ldr	r3, [r7, #16]
 80054f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054f4:	4b19      	ldr	r3, [pc, #100]	; (800555c <xTaskRemoveFromEventList+0xb4>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	429a      	cmp	r2, r3
 80054fa:	d903      	bls.n	8005504 <xTaskRemoveFromEventList+0x5c>
 80054fc:	693b      	ldr	r3, [r7, #16]
 80054fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005500:	4a16      	ldr	r2, [pc, #88]	; (800555c <xTaskRemoveFromEventList+0xb4>)
 8005502:	6013      	str	r3, [r2, #0]
 8005504:	693b      	ldr	r3, [r7, #16]
 8005506:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005508:	4613      	mov	r3, r2
 800550a:	009b      	lsls	r3, r3, #2
 800550c:	4413      	add	r3, r2
 800550e:	009b      	lsls	r3, r3, #2
 8005510:	4a13      	ldr	r2, [pc, #76]	; (8005560 <xTaskRemoveFromEventList+0xb8>)
 8005512:	441a      	add	r2, r3
 8005514:	693b      	ldr	r3, [r7, #16]
 8005516:	3304      	adds	r3, #4
 8005518:	4619      	mov	r1, r3
 800551a:	4610      	mov	r0, r2
 800551c:	f7fe fccf 	bl	8003ebe <vListInsertEnd>
 8005520:	e005      	b.n	800552e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005522:	693b      	ldr	r3, [r7, #16]
 8005524:	3318      	adds	r3, #24
 8005526:	4619      	mov	r1, r3
 8005528:	480e      	ldr	r0, [pc, #56]	; (8005564 <xTaskRemoveFromEventList+0xbc>)
 800552a:	f7fe fcc8 	bl	8003ebe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800552e:	693b      	ldr	r3, [r7, #16]
 8005530:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005532:	4b0d      	ldr	r3, [pc, #52]	; (8005568 <xTaskRemoveFromEventList+0xc0>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005538:	429a      	cmp	r2, r3
 800553a:	d905      	bls.n	8005548 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800553c:	2301      	movs	r3, #1
 800553e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005540:	4b0a      	ldr	r3, [pc, #40]	; (800556c <xTaskRemoveFromEventList+0xc4>)
 8005542:	2201      	movs	r2, #1
 8005544:	601a      	str	r2, [r3, #0]
 8005546:	e001      	b.n	800554c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005548:	2300      	movs	r3, #0
 800554a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800554c:	697b      	ldr	r3, [r7, #20]
}
 800554e:	4618      	mov	r0, r3
 8005550:	3718      	adds	r7, #24
 8005552:	46bd      	mov	sp, r7
 8005554:	bd80      	pop	{r7, pc}
 8005556:	bf00      	nop
 8005558:	20000738 	.word	0x20000738
 800555c:	20000718 	.word	0x20000718
 8005560:	20000240 	.word	0x20000240
 8005564:	200006d0 	.word	0x200006d0
 8005568:	2000023c 	.word	0x2000023c
 800556c:	20000724 	.word	0x20000724

08005570 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005570:	b480      	push	{r7}
 8005572:	b083      	sub	sp, #12
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005578:	4b06      	ldr	r3, [pc, #24]	; (8005594 <vTaskInternalSetTimeOutState+0x24>)
 800557a:	681a      	ldr	r2, [r3, #0]
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005580:	4b05      	ldr	r3, [pc, #20]	; (8005598 <vTaskInternalSetTimeOutState+0x28>)
 8005582:	681a      	ldr	r2, [r3, #0]
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	605a      	str	r2, [r3, #4]
}
 8005588:	bf00      	nop
 800558a:	370c      	adds	r7, #12
 800558c:	46bd      	mov	sp, r7
 800558e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005592:	4770      	bx	lr
 8005594:	20000728 	.word	0x20000728
 8005598:	20000714 	.word	0x20000714

0800559c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b088      	sub	sp, #32
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
 80055a4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d10a      	bne.n	80055c2 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 80055ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055b0:	f383 8811 	msr	BASEPRI, r3
 80055b4:	f3bf 8f6f 	isb	sy
 80055b8:	f3bf 8f4f 	dsb	sy
 80055bc:	613b      	str	r3, [r7, #16]
    }
 80055be:	bf00      	nop
 80055c0:	e7fe      	b.n	80055c0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d10a      	bne.n	80055de <xTaskCheckForTimeOut+0x42>
        __asm volatile
 80055c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055cc:	f383 8811 	msr	BASEPRI, r3
 80055d0:	f3bf 8f6f 	isb	sy
 80055d4:	f3bf 8f4f 	dsb	sy
 80055d8:	60fb      	str	r3, [r7, #12]
    }
 80055da:	bf00      	nop
 80055dc:	e7fe      	b.n	80055dc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80055de:	f000 ff7b 	bl	80064d8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80055e2:	4b1d      	ldr	r3, [pc, #116]	; (8005658 <xTaskCheckForTimeOut+0xbc>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	685b      	ldr	r3, [r3, #4]
 80055ec:	69ba      	ldr	r2, [r7, #24]
 80055ee:	1ad3      	subs	r3, r2, r3
 80055f0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055fa:	d102      	bne.n	8005602 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80055fc:	2300      	movs	r3, #0
 80055fe:	61fb      	str	r3, [r7, #28]
 8005600:	e023      	b.n	800564a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681a      	ldr	r2, [r3, #0]
 8005606:	4b15      	ldr	r3, [pc, #84]	; (800565c <xTaskCheckForTimeOut+0xc0>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	429a      	cmp	r2, r3
 800560c:	d007      	beq.n	800561e <xTaskCheckForTimeOut+0x82>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	69ba      	ldr	r2, [r7, #24]
 8005614:	429a      	cmp	r2, r3
 8005616:	d302      	bcc.n	800561e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005618:	2301      	movs	r3, #1
 800561a:	61fb      	str	r3, [r7, #28]
 800561c:	e015      	b.n	800564a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	697a      	ldr	r2, [r7, #20]
 8005624:	429a      	cmp	r2, r3
 8005626:	d20b      	bcs.n	8005640 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	681a      	ldr	r2, [r3, #0]
 800562c:	697b      	ldr	r3, [r7, #20]
 800562e:	1ad2      	subs	r2, r2, r3
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005634:	6878      	ldr	r0, [r7, #4]
 8005636:	f7ff ff9b 	bl	8005570 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800563a:	2300      	movs	r3, #0
 800563c:	61fb      	str	r3, [r7, #28]
 800563e:	e004      	b.n	800564a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	2200      	movs	r2, #0
 8005644:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005646:	2301      	movs	r3, #1
 8005648:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800564a:	f000 ff75 	bl	8006538 <vPortExitCritical>

	return xReturn;
 800564e:	69fb      	ldr	r3, [r7, #28]
}
 8005650:	4618      	mov	r0, r3
 8005652:	3720      	adds	r7, #32
 8005654:	46bd      	mov	sp, r7
 8005656:	bd80      	pop	{r7, pc}
 8005658:	20000714 	.word	0x20000714
 800565c:	20000728 	.word	0x20000728

08005660 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005660:	b480      	push	{r7}
 8005662:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005664:	4b03      	ldr	r3, [pc, #12]	; (8005674 <vTaskMissedYield+0x14>)
 8005666:	2201      	movs	r2, #1
 8005668:	601a      	str	r2, [r3, #0]
}
 800566a:	bf00      	nop
 800566c:	46bd      	mov	sp, r7
 800566e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005672:	4770      	bx	lr
 8005674:	20000724 	.word	0x20000724

08005678 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b082      	sub	sp, #8
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005680:	f000 f852 	bl	8005728 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005684:	4b06      	ldr	r3, [pc, #24]	; (80056a0 <prvIdleTask+0x28>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	2b01      	cmp	r3, #1
 800568a:	d9f9      	bls.n	8005680 <prvIdleTask+0x8>
			{
				taskYIELD();
 800568c:	4b05      	ldr	r3, [pc, #20]	; (80056a4 <prvIdleTask+0x2c>)
 800568e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005692:	601a      	str	r2, [r3, #0]
 8005694:	f3bf 8f4f 	dsb	sy
 8005698:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800569c:	e7f0      	b.n	8005680 <prvIdleTask+0x8>
 800569e:	bf00      	nop
 80056a0:	20000240 	.word	0x20000240
 80056a4:	e000ed04 	.word	0xe000ed04

080056a8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b082      	sub	sp, #8
 80056ac:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80056ae:	2300      	movs	r3, #0
 80056b0:	607b      	str	r3, [r7, #4]
 80056b2:	e00c      	b.n	80056ce <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80056b4:	687a      	ldr	r2, [r7, #4]
 80056b6:	4613      	mov	r3, r2
 80056b8:	009b      	lsls	r3, r3, #2
 80056ba:	4413      	add	r3, r2
 80056bc:	009b      	lsls	r3, r3, #2
 80056be:	4a12      	ldr	r2, [pc, #72]	; (8005708 <prvInitialiseTaskLists+0x60>)
 80056c0:	4413      	add	r3, r2
 80056c2:	4618      	mov	r0, r3
 80056c4:	f7fe fbce 	bl	8003e64 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	3301      	adds	r3, #1
 80056cc:	607b      	str	r3, [r7, #4]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2b37      	cmp	r3, #55	; 0x37
 80056d2:	d9ef      	bls.n	80056b4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80056d4:	480d      	ldr	r0, [pc, #52]	; (800570c <prvInitialiseTaskLists+0x64>)
 80056d6:	f7fe fbc5 	bl	8003e64 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80056da:	480d      	ldr	r0, [pc, #52]	; (8005710 <prvInitialiseTaskLists+0x68>)
 80056dc:	f7fe fbc2 	bl	8003e64 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80056e0:	480c      	ldr	r0, [pc, #48]	; (8005714 <prvInitialiseTaskLists+0x6c>)
 80056e2:	f7fe fbbf 	bl	8003e64 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80056e6:	480c      	ldr	r0, [pc, #48]	; (8005718 <prvInitialiseTaskLists+0x70>)
 80056e8:	f7fe fbbc 	bl	8003e64 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80056ec:	480b      	ldr	r0, [pc, #44]	; (800571c <prvInitialiseTaskLists+0x74>)
 80056ee:	f7fe fbb9 	bl	8003e64 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80056f2:	4b0b      	ldr	r3, [pc, #44]	; (8005720 <prvInitialiseTaskLists+0x78>)
 80056f4:	4a05      	ldr	r2, [pc, #20]	; (800570c <prvInitialiseTaskLists+0x64>)
 80056f6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80056f8:	4b0a      	ldr	r3, [pc, #40]	; (8005724 <prvInitialiseTaskLists+0x7c>)
 80056fa:	4a05      	ldr	r2, [pc, #20]	; (8005710 <prvInitialiseTaskLists+0x68>)
 80056fc:	601a      	str	r2, [r3, #0]
}
 80056fe:	bf00      	nop
 8005700:	3708      	adds	r7, #8
 8005702:	46bd      	mov	sp, r7
 8005704:	bd80      	pop	{r7, pc}
 8005706:	bf00      	nop
 8005708:	20000240 	.word	0x20000240
 800570c:	200006a0 	.word	0x200006a0
 8005710:	200006b4 	.word	0x200006b4
 8005714:	200006d0 	.word	0x200006d0
 8005718:	200006e4 	.word	0x200006e4
 800571c:	200006fc 	.word	0x200006fc
 8005720:	200006c8 	.word	0x200006c8
 8005724:	200006cc 	.word	0x200006cc

08005728 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b082      	sub	sp, #8
 800572c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800572e:	e019      	b.n	8005764 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005730:	f000 fed2 	bl	80064d8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005734:	4b10      	ldr	r3, [pc, #64]	; (8005778 <prvCheckTasksWaitingTermination+0x50>)
 8005736:	68db      	ldr	r3, [r3, #12]
 8005738:	68db      	ldr	r3, [r3, #12]
 800573a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	3304      	adds	r3, #4
 8005740:	4618      	mov	r0, r3
 8005742:	f7fe fc19 	bl	8003f78 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005746:	4b0d      	ldr	r3, [pc, #52]	; (800577c <prvCheckTasksWaitingTermination+0x54>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	3b01      	subs	r3, #1
 800574c:	4a0b      	ldr	r2, [pc, #44]	; (800577c <prvCheckTasksWaitingTermination+0x54>)
 800574e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005750:	4b0b      	ldr	r3, [pc, #44]	; (8005780 <prvCheckTasksWaitingTermination+0x58>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	3b01      	subs	r3, #1
 8005756:	4a0a      	ldr	r2, [pc, #40]	; (8005780 <prvCheckTasksWaitingTermination+0x58>)
 8005758:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800575a:	f000 feed 	bl	8006538 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	f000 f810 	bl	8005784 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005764:	4b06      	ldr	r3, [pc, #24]	; (8005780 <prvCheckTasksWaitingTermination+0x58>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d1e1      	bne.n	8005730 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800576c:	bf00      	nop
 800576e:	bf00      	nop
 8005770:	3708      	adds	r7, #8
 8005772:	46bd      	mov	sp, r7
 8005774:	bd80      	pop	{r7, pc}
 8005776:	bf00      	nop
 8005778:	200006e4 	.word	0x200006e4
 800577c:	20000710 	.word	0x20000710
 8005780:	200006f8 	.word	0x200006f8

08005784 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005784:	b580      	push	{r7, lr}
 8005786:	b082      	sub	sp, #8
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005790:	4618      	mov	r0, r3
 8005792:	f001 f873 	bl	800687c <vPortFree>
			vPortFree( pxTCB );
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	f001 f870 	bl	800687c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800579c:	bf00      	nop
 800579e:	3708      	adds	r7, #8
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bd80      	pop	{r7, pc}

080057a4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80057a4:	b480      	push	{r7}
 80057a6:	b083      	sub	sp, #12
 80057a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80057aa:	4b0c      	ldr	r3, [pc, #48]	; (80057dc <prvResetNextTaskUnblockTime+0x38>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d104      	bne.n	80057be <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80057b4:	4b0a      	ldr	r3, [pc, #40]	; (80057e0 <prvResetNextTaskUnblockTime+0x3c>)
 80057b6:	f04f 32ff 	mov.w	r2, #4294967295
 80057ba:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80057bc:	e008      	b.n	80057d0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057be:	4b07      	ldr	r3, [pc, #28]	; (80057dc <prvResetNextTaskUnblockTime+0x38>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	68db      	ldr	r3, [r3, #12]
 80057c4:	68db      	ldr	r3, [r3, #12]
 80057c6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	4a04      	ldr	r2, [pc, #16]	; (80057e0 <prvResetNextTaskUnblockTime+0x3c>)
 80057ce:	6013      	str	r3, [r2, #0]
}
 80057d0:	bf00      	nop
 80057d2:	370c      	adds	r7, #12
 80057d4:	46bd      	mov	sp, r7
 80057d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057da:	4770      	bx	lr
 80057dc:	200006c8 	.word	0x200006c8
 80057e0:	20000730 	.word	0x20000730

080057e4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80057e4:	b480      	push	{r7}
 80057e6:	b083      	sub	sp, #12
 80057e8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80057ea:	4b0b      	ldr	r3, [pc, #44]	; (8005818 <xTaskGetSchedulerState+0x34>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d102      	bne.n	80057f8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80057f2:	2301      	movs	r3, #1
 80057f4:	607b      	str	r3, [r7, #4]
 80057f6:	e008      	b.n	800580a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80057f8:	4b08      	ldr	r3, [pc, #32]	; (800581c <xTaskGetSchedulerState+0x38>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d102      	bne.n	8005806 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005800:	2302      	movs	r3, #2
 8005802:	607b      	str	r3, [r7, #4]
 8005804:	e001      	b.n	800580a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005806:	2300      	movs	r3, #0
 8005808:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800580a:	687b      	ldr	r3, [r7, #4]
	}
 800580c:	4618      	mov	r0, r3
 800580e:	370c      	adds	r7, #12
 8005810:	46bd      	mov	sp, r7
 8005812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005816:	4770      	bx	lr
 8005818:	2000071c 	.word	0x2000071c
 800581c:	20000738 	.word	0x20000738

08005820 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005820:	b580      	push	{r7, lr}
 8005822:	b084      	sub	sp, #16
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800582c:	2300      	movs	r3, #0
 800582e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d051      	beq.n	80058da <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005836:	68bb      	ldr	r3, [r7, #8]
 8005838:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800583a:	4b2a      	ldr	r3, [pc, #168]	; (80058e4 <xTaskPriorityInherit+0xc4>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005840:	429a      	cmp	r2, r3
 8005842:	d241      	bcs.n	80058c8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	699b      	ldr	r3, [r3, #24]
 8005848:	2b00      	cmp	r3, #0
 800584a:	db06      	blt.n	800585a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800584c:	4b25      	ldr	r3, [pc, #148]	; (80058e4 <xTaskPriorityInherit+0xc4>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005852:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005856:	68bb      	ldr	r3, [r7, #8]
 8005858:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	6959      	ldr	r1, [r3, #20]
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005862:	4613      	mov	r3, r2
 8005864:	009b      	lsls	r3, r3, #2
 8005866:	4413      	add	r3, r2
 8005868:	009b      	lsls	r3, r3, #2
 800586a:	4a1f      	ldr	r2, [pc, #124]	; (80058e8 <xTaskPriorityInherit+0xc8>)
 800586c:	4413      	add	r3, r2
 800586e:	4299      	cmp	r1, r3
 8005870:	d122      	bne.n	80058b8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	3304      	adds	r3, #4
 8005876:	4618      	mov	r0, r3
 8005878:	f7fe fb7e 	bl	8003f78 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800587c:	4b19      	ldr	r3, [pc, #100]	; (80058e4 <xTaskPriorityInherit+0xc4>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800588a:	4b18      	ldr	r3, [pc, #96]	; (80058ec <xTaskPriorityInherit+0xcc>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	429a      	cmp	r2, r3
 8005890:	d903      	bls.n	800589a <xTaskPriorityInherit+0x7a>
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005896:	4a15      	ldr	r2, [pc, #84]	; (80058ec <xTaskPriorityInherit+0xcc>)
 8005898:	6013      	str	r3, [r2, #0]
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800589e:	4613      	mov	r3, r2
 80058a0:	009b      	lsls	r3, r3, #2
 80058a2:	4413      	add	r3, r2
 80058a4:	009b      	lsls	r3, r3, #2
 80058a6:	4a10      	ldr	r2, [pc, #64]	; (80058e8 <xTaskPriorityInherit+0xc8>)
 80058a8:	441a      	add	r2, r3
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	3304      	adds	r3, #4
 80058ae:	4619      	mov	r1, r3
 80058b0:	4610      	mov	r0, r2
 80058b2:	f7fe fb04 	bl	8003ebe <vListInsertEnd>
 80058b6:	e004      	b.n	80058c2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80058b8:	4b0a      	ldr	r3, [pc, #40]	; (80058e4 <xTaskPriorityInherit+0xc4>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80058c2:	2301      	movs	r3, #1
 80058c4:	60fb      	str	r3, [r7, #12]
 80058c6:	e008      	b.n	80058da <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80058cc:	4b05      	ldr	r3, [pc, #20]	; (80058e4 <xTaskPriorityInherit+0xc4>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058d2:	429a      	cmp	r2, r3
 80058d4:	d201      	bcs.n	80058da <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80058d6:	2301      	movs	r3, #1
 80058d8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80058da:	68fb      	ldr	r3, [r7, #12]
	}
 80058dc:	4618      	mov	r0, r3
 80058de:	3710      	adds	r7, #16
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bd80      	pop	{r7, pc}
 80058e4:	2000023c 	.word	0x2000023c
 80058e8:	20000240 	.word	0x20000240
 80058ec:	20000718 	.word	0x20000718

080058f0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b086      	sub	sp, #24
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80058fc:	2300      	movs	r3, #0
 80058fe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d056      	beq.n	80059b4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005906:	4b2e      	ldr	r3, [pc, #184]	; (80059c0 <xTaskPriorityDisinherit+0xd0>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	693a      	ldr	r2, [r7, #16]
 800590c:	429a      	cmp	r2, r3
 800590e:	d00a      	beq.n	8005926 <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8005910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005914:	f383 8811 	msr	BASEPRI, r3
 8005918:	f3bf 8f6f 	isb	sy
 800591c:	f3bf 8f4f 	dsb	sy
 8005920:	60fb      	str	r3, [r7, #12]
    }
 8005922:	bf00      	nop
 8005924:	e7fe      	b.n	8005924 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005926:	693b      	ldr	r3, [r7, #16]
 8005928:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800592a:	2b00      	cmp	r3, #0
 800592c:	d10a      	bne.n	8005944 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 800592e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005932:	f383 8811 	msr	BASEPRI, r3
 8005936:	f3bf 8f6f 	isb	sy
 800593a:	f3bf 8f4f 	dsb	sy
 800593e:	60bb      	str	r3, [r7, #8]
    }
 8005940:	bf00      	nop
 8005942:	e7fe      	b.n	8005942 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005944:	693b      	ldr	r3, [r7, #16]
 8005946:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005948:	1e5a      	subs	r2, r3, #1
 800594a:	693b      	ldr	r3, [r7, #16]
 800594c:	655a      	str	r2, [r3, #84]	; 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005952:	693b      	ldr	r3, [r7, #16]
 8005954:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005956:	429a      	cmp	r2, r3
 8005958:	d02c      	beq.n	80059b4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800595e:	2b00      	cmp	r3, #0
 8005960:	d128      	bne.n	80059b4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005962:	693b      	ldr	r3, [r7, #16]
 8005964:	3304      	adds	r3, #4
 8005966:	4618      	mov	r0, r3
 8005968:	f7fe fb06 	bl	8003f78 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800596c:	693b      	ldr	r3, [r7, #16]
 800596e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005974:	693b      	ldr	r3, [r7, #16]
 8005976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005978:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800597c:	693b      	ldr	r3, [r7, #16]
 800597e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005980:	693b      	ldr	r3, [r7, #16]
 8005982:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005984:	4b0f      	ldr	r3, [pc, #60]	; (80059c4 <xTaskPriorityDisinherit+0xd4>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	429a      	cmp	r2, r3
 800598a:	d903      	bls.n	8005994 <xTaskPriorityDisinherit+0xa4>
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005990:	4a0c      	ldr	r2, [pc, #48]	; (80059c4 <xTaskPriorityDisinherit+0xd4>)
 8005992:	6013      	str	r3, [r2, #0]
 8005994:	693b      	ldr	r3, [r7, #16]
 8005996:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005998:	4613      	mov	r3, r2
 800599a:	009b      	lsls	r3, r3, #2
 800599c:	4413      	add	r3, r2
 800599e:	009b      	lsls	r3, r3, #2
 80059a0:	4a09      	ldr	r2, [pc, #36]	; (80059c8 <xTaskPriorityDisinherit+0xd8>)
 80059a2:	441a      	add	r2, r3
 80059a4:	693b      	ldr	r3, [r7, #16]
 80059a6:	3304      	adds	r3, #4
 80059a8:	4619      	mov	r1, r3
 80059aa:	4610      	mov	r0, r2
 80059ac:	f7fe fa87 	bl	8003ebe <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80059b0:	2301      	movs	r3, #1
 80059b2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80059b4:	697b      	ldr	r3, [r7, #20]
	}
 80059b6:	4618      	mov	r0, r3
 80059b8:	3718      	adds	r7, #24
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bd80      	pop	{r7, pc}
 80059be:	bf00      	nop
 80059c0:	2000023c 	.word	0x2000023c
 80059c4:	20000718 	.word	0x20000718
 80059c8:	20000240 	.word	0x20000240

080059cc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b088      	sub	sp, #32
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
 80059d4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80059da:	2301      	movs	r3, #1
 80059dc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d06a      	beq.n	8005aba <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80059e4:	69bb      	ldr	r3, [r7, #24]
 80059e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d10a      	bne.n	8005a02 <vTaskPriorityDisinheritAfterTimeout+0x36>
        __asm volatile
 80059ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059f0:	f383 8811 	msr	BASEPRI, r3
 80059f4:	f3bf 8f6f 	isb	sy
 80059f8:	f3bf 8f4f 	dsb	sy
 80059fc:	60fb      	str	r3, [r7, #12]
    }
 80059fe:	bf00      	nop
 8005a00:	e7fe      	b.n	8005a00 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005a02:	69bb      	ldr	r3, [r7, #24]
 8005a04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a06:	683a      	ldr	r2, [r7, #0]
 8005a08:	429a      	cmp	r2, r3
 8005a0a:	d902      	bls.n	8005a12 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	61fb      	str	r3, [r7, #28]
 8005a10:	e002      	b.n	8005a18 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005a12:	69bb      	ldr	r3, [r7, #24]
 8005a14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a16:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005a18:	69bb      	ldr	r3, [r7, #24]
 8005a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a1c:	69fa      	ldr	r2, [r7, #28]
 8005a1e:	429a      	cmp	r2, r3
 8005a20:	d04b      	beq.n	8005aba <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005a22:	69bb      	ldr	r3, [r7, #24]
 8005a24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a26:	697a      	ldr	r2, [r7, #20]
 8005a28:	429a      	cmp	r2, r3
 8005a2a:	d146      	bne.n	8005aba <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005a2c:	4b25      	ldr	r3, [pc, #148]	; (8005ac4 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	69ba      	ldr	r2, [r7, #24]
 8005a32:	429a      	cmp	r2, r3
 8005a34:	d10a      	bne.n	8005a4c <vTaskPriorityDisinheritAfterTimeout+0x80>
        __asm volatile
 8005a36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a3a:	f383 8811 	msr	BASEPRI, r3
 8005a3e:	f3bf 8f6f 	isb	sy
 8005a42:	f3bf 8f4f 	dsb	sy
 8005a46:	60bb      	str	r3, [r7, #8]
    }
 8005a48:	bf00      	nop
 8005a4a:	e7fe      	b.n	8005a4a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005a4c:	69bb      	ldr	r3, [r7, #24]
 8005a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a50:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005a52:	69bb      	ldr	r3, [r7, #24]
 8005a54:	69fa      	ldr	r2, [r7, #28]
 8005a56:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005a58:	69bb      	ldr	r3, [r7, #24]
 8005a5a:	699b      	ldr	r3, [r3, #24]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	db04      	blt.n	8005a6a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a60:	69fb      	ldr	r3, [r7, #28]
 8005a62:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005a66:	69bb      	ldr	r3, [r7, #24]
 8005a68:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005a6a:	69bb      	ldr	r3, [r7, #24]
 8005a6c:	6959      	ldr	r1, [r3, #20]
 8005a6e:	693a      	ldr	r2, [r7, #16]
 8005a70:	4613      	mov	r3, r2
 8005a72:	009b      	lsls	r3, r3, #2
 8005a74:	4413      	add	r3, r2
 8005a76:	009b      	lsls	r3, r3, #2
 8005a78:	4a13      	ldr	r2, [pc, #76]	; (8005ac8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8005a7a:	4413      	add	r3, r2
 8005a7c:	4299      	cmp	r1, r3
 8005a7e:	d11c      	bne.n	8005aba <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005a80:	69bb      	ldr	r3, [r7, #24]
 8005a82:	3304      	adds	r3, #4
 8005a84:	4618      	mov	r0, r3
 8005a86:	f7fe fa77 	bl	8003f78 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005a8a:	69bb      	ldr	r3, [r7, #24]
 8005a8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a8e:	4b0f      	ldr	r3, [pc, #60]	; (8005acc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	429a      	cmp	r2, r3
 8005a94:	d903      	bls.n	8005a9e <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8005a96:	69bb      	ldr	r3, [r7, #24]
 8005a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a9a:	4a0c      	ldr	r2, [pc, #48]	; (8005acc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8005a9c:	6013      	str	r3, [r2, #0]
 8005a9e:	69bb      	ldr	r3, [r7, #24]
 8005aa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005aa2:	4613      	mov	r3, r2
 8005aa4:	009b      	lsls	r3, r3, #2
 8005aa6:	4413      	add	r3, r2
 8005aa8:	009b      	lsls	r3, r3, #2
 8005aaa:	4a07      	ldr	r2, [pc, #28]	; (8005ac8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8005aac:	441a      	add	r2, r3
 8005aae:	69bb      	ldr	r3, [r7, #24]
 8005ab0:	3304      	adds	r3, #4
 8005ab2:	4619      	mov	r1, r3
 8005ab4:	4610      	mov	r0, r2
 8005ab6:	f7fe fa02 	bl	8003ebe <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005aba:	bf00      	nop
 8005abc:	3720      	adds	r7, #32
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	bd80      	pop	{r7, pc}
 8005ac2:	bf00      	nop
 8005ac4:	2000023c 	.word	0x2000023c
 8005ac8:	20000240 	.word	0x20000240
 8005acc:	20000718 	.word	0x20000718

08005ad0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8005ad0:	b480      	push	{r7}
 8005ad2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005ad4:	4b07      	ldr	r3, [pc, #28]	; (8005af4 <pvTaskIncrementMutexHeldCount+0x24>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d004      	beq.n	8005ae6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005adc:	4b05      	ldr	r3, [pc, #20]	; (8005af4 <pvTaskIncrementMutexHeldCount+0x24>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005ae2:	3201      	adds	r2, #1
 8005ae4:	655a      	str	r2, [r3, #84]	; 0x54
		}

		return pxCurrentTCB;
 8005ae6:	4b03      	ldr	r3, [pc, #12]	; (8005af4 <pvTaskIncrementMutexHeldCount+0x24>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
	}
 8005aea:	4618      	mov	r0, r3
 8005aec:	46bd      	mov	sp, r7
 8005aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af2:	4770      	bx	lr
 8005af4:	2000023c 	.word	0x2000023c

08005af8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b084      	sub	sp, #16
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
 8005b00:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005b02:	4b21      	ldr	r3, [pc, #132]	; (8005b88 <prvAddCurrentTaskToDelayedList+0x90>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005b08:	4b20      	ldr	r3, [pc, #128]	; (8005b8c <prvAddCurrentTaskToDelayedList+0x94>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	3304      	adds	r3, #4
 8005b0e:	4618      	mov	r0, r3
 8005b10:	f7fe fa32 	bl	8003f78 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b1a:	d10a      	bne.n	8005b32 <prvAddCurrentTaskToDelayedList+0x3a>
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d007      	beq.n	8005b32 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005b22:	4b1a      	ldr	r3, [pc, #104]	; (8005b8c <prvAddCurrentTaskToDelayedList+0x94>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	3304      	adds	r3, #4
 8005b28:	4619      	mov	r1, r3
 8005b2a:	4819      	ldr	r0, [pc, #100]	; (8005b90 <prvAddCurrentTaskToDelayedList+0x98>)
 8005b2c:	f7fe f9c7 	bl	8003ebe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005b30:	e026      	b.n	8005b80 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005b32:	68fa      	ldr	r2, [r7, #12]
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	4413      	add	r3, r2
 8005b38:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005b3a:	4b14      	ldr	r3, [pc, #80]	; (8005b8c <prvAddCurrentTaskToDelayedList+0x94>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	68ba      	ldr	r2, [r7, #8]
 8005b40:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005b42:	68ba      	ldr	r2, [r7, #8]
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	429a      	cmp	r2, r3
 8005b48:	d209      	bcs.n	8005b5e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005b4a:	4b12      	ldr	r3, [pc, #72]	; (8005b94 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005b4c:	681a      	ldr	r2, [r3, #0]
 8005b4e:	4b0f      	ldr	r3, [pc, #60]	; (8005b8c <prvAddCurrentTaskToDelayedList+0x94>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	3304      	adds	r3, #4
 8005b54:	4619      	mov	r1, r3
 8005b56:	4610      	mov	r0, r2
 8005b58:	f7fe f9d5 	bl	8003f06 <vListInsert>
}
 8005b5c:	e010      	b.n	8005b80 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005b5e:	4b0e      	ldr	r3, [pc, #56]	; (8005b98 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005b60:	681a      	ldr	r2, [r3, #0]
 8005b62:	4b0a      	ldr	r3, [pc, #40]	; (8005b8c <prvAddCurrentTaskToDelayedList+0x94>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	3304      	adds	r3, #4
 8005b68:	4619      	mov	r1, r3
 8005b6a:	4610      	mov	r0, r2
 8005b6c:	f7fe f9cb 	bl	8003f06 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005b70:	4b0a      	ldr	r3, [pc, #40]	; (8005b9c <prvAddCurrentTaskToDelayedList+0xa4>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	68ba      	ldr	r2, [r7, #8]
 8005b76:	429a      	cmp	r2, r3
 8005b78:	d202      	bcs.n	8005b80 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005b7a:	4a08      	ldr	r2, [pc, #32]	; (8005b9c <prvAddCurrentTaskToDelayedList+0xa4>)
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	6013      	str	r3, [r2, #0]
}
 8005b80:	bf00      	nop
 8005b82:	3710      	adds	r7, #16
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bd80      	pop	{r7, pc}
 8005b88:	20000714 	.word	0x20000714
 8005b8c:	2000023c 	.word	0x2000023c
 8005b90:	200006fc 	.word	0x200006fc
 8005b94:	200006cc 	.word	0x200006cc
 8005b98:	200006c8 	.word	0x200006c8
 8005b9c:	20000730 	.word	0x20000730

08005ba0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b084      	sub	sp, #16
 8005ba4:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005baa:	f000 fb31 	bl	8006210 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005bae:	4b11      	ldr	r3, [pc, #68]	; (8005bf4 <xTimerCreateTimerTask+0x54>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d00b      	beq.n	8005bce <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 8005bb6:	4b10      	ldr	r3, [pc, #64]	; (8005bf8 <xTimerCreateTimerTask+0x58>)
 8005bb8:	9301      	str	r3, [sp, #4]
 8005bba:	2305      	movs	r3, #5
 8005bbc:	9300      	str	r3, [sp, #0]
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005bc4:	490d      	ldr	r1, [pc, #52]	; (8005bfc <xTimerCreateTimerTask+0x5c>)
 8005bc6:	480e      	ldr	r0, [pc, #56]	; (8005c00 <xTimerCreateTimerTask+0x60>)
 8005bc8:	f7ff f800 	bl	8004bcc <xTaskCreate>
 8005bcc:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d10a      	bne.n	8005bea <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8005bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bd8:	f383 8811 	msr	BASEPRI, r3
 8005bdc:	f3bf 8f6f 	isb	sy
 8005be0:	f3bf 8f4f 	dsb	sy
 8005be4:	603b      	str	r3, [r7, #0]
    }
 8005be6:	bf00      	nop
 8005be8:	e7fe      	b.n	8005be8 <xTimerCreateTimerTask+0x48>
	return xReturn;
 8005bea:	687b      	ldr	r3, [r7, #4]
}
 8005bec:	4618      	mov	r0, r3
 8005bee:	3708      	adds	r7, #8
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	bd80      	pop	{r7, pc}
 8005bf4:	2000076c 	.word	0x2000076c
 8005bf8:	20000770 	.word	0x20000770
 8005bfc:	08006be8 	.word	0x08006be8
 8005c00:	08005df1 	.word	0x08005df1

08005c04 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b088      	sub	sp, #32
 8005c08:	af02      	add	r7, sp, #8
 8005c0a:	60f8      	str	r0, [r7, #12]
 8005c0c:	60b9      	str	r1, [r7, #8]
 8005c0e:	607a      	str	r2, [r7, #4]
 8005c10:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8005c12:	202c      	movs	r0, #44	; 0x2c
 8005c14:	f000 fd78 	bl	8006708 <pvPortMalloc>
 8005c18:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8005c1a:	697b      	ldr	r3, [r7, #20]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d00d      	beq.n	8005c3c <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8005c20:	697b      	ldr	r3, [r7, #20]
 8005c22:	2200      	movs	r2, #0
 8005c24:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	9301      	str	r3, [sp, #4]
 8005c2c:	6a3b      	ldr	r3, [r7, #32]
 8005c2e:	9300      	str	r3, [sp, #0]
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	687a      	ldr	r2, [r7, #4]
 8005c34:	68b9      	ldr	r1, [r7, #8]
 8005c36:	68f8      	ldr	r0, [r7, #12]
 8005c38:	f000 f805 	bl	8005c46 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8005c3c:	697b      	ldr	r3, [r7, #20]
	}
 8005c3e:	4618      	mov	r0, r3
 8005c40:	3718      	adds	r7, #24
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd80      	pop	{r7, pc}

08005c46 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8005c46:	b580      	push	{r7, lr}
 8005c48:	b086      	sub	sp, #24
 8005c4a:	af00      	add	r7, sp, #0
 8005c4c:	60f8      	str	r0, [r7, #12]
 8005c4e:	60b9      	str	r1, [r7, #8]
 8005c50:	607a      	str	r2, [r7, #4]
 8005c52:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d10a      	bne.n	8005c70 <prvInitialiseNewTimer+0x2a>
        __asm volatile
 8005c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c5e:	f383 8811 	msr	BASEPRI, r3
 8005c62:	f3bf 8f6f 	isb	sy
 8005c66:	f3bf 8f4f 	dsb	sy
 8005c6a:	617b      	str	r3, [r7, #20]
    }
 8005c6c:	bf00      	nop
 8005c6e:	e7fe      	b.n	8005c6e <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8005c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d01e      	beq.n	8005cb4 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8005c76:	f000 facb 	bl	8006210 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8005c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c7c:	68fa      	ldr	r2, [r7, #12]
 8005c7e:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8005c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c82:	68ba      	ldr	r2, [r7, #8]
 8005c84:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8005c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c88:	683a      	ldr	r2, [r7, #0]
 8005c8a:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8005c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c8e:	6a3a      	ldr	r2, [r7, #32]
 8005c90:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8005c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c94:	3304      	adds	r3, #4
 8005c96:	4618      	mov	r0, r3
 8005c98:	f7fe f904 	bl	8003ea4 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d008      	beq.n	8005cb4 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8005ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005ca8:	f043 0304 	orr.w	r3, r3, #4
 8005cac:	b2da      	uxtb	r2, r3
 8005cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8005cb4:	bf00      	nop
 8005cb6:	3718      	adds	r7, #24
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	bd80      	pop	{r7, pc}

08005cbc <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b08a      	sub	sp, #40	; 0x28
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	60f8      	str	r0, [r7, #12]
 8005cc4:	60b9      	str	r1, [r7, #8]
 8005cc6:	607a      	str	r2, [r7, #4]
 8005cc8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005cca:	2300      	movs	r3, #0
 8005ccc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d10a      	bne.n	8005cea <xTimerGenericCommand+0x2e>
        __asm volatile
 8005cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cd8:	f383 8811 	msr	BASEPRI, r3
 8005cdc:	f3bf 8f6f 	isb	sy
 8005ce0:	f3bf 8f4f 	dsb	sy
 8005ce4:	623b      	str	r3, [r7, #32]
    }
 8005ce6:	bf00      	nop
 8005ce8:	e7fe      	b.n	8005ce8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005cea:	4b1a      	ldr	r3, [pc, #104]	; (8005d54 <xTimerGenericCommand+0x98>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d02a      	beq.n	8005d48 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	2b05      	cmp	r3, #5
 8005d02:	dc18      	bgt.n	8005d36 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005d04:	f7ff fd6e 	bl	80057e4 <xTaskGetSchedulerState>
 8005d08:	4603      	mov	r3, r0
 8005d0a:	2b02      	cmp	r3, #2
 8005d0c:	d109      	bne.n	8005d22 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005d0e:	4b11      	ldr	r3, [pc, #68]	; (8005d54 <xTimerGenericCommand+0x98>)
 8005d10:	6818      	ldr	r0, [r3, #0]
 8005d12:	f107 0114 	add.w	r1, r7, #20
 8005d16:	2300      	movs	r3, #0
 8005d18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d1a:	f7fe fa4b 	bl	80041b4 <xQueueGenericSend>
 8005d1e:	6278      	str	r0, [r7, #36]	; 0x24
 8005d20:	e012      	b.n	8005d48 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005d22:	4b0c      	ldr	r3, [pc, #48]	; (8005d54 <xTimerGenericCommand+0x98>)
 8005d24:	6818      	ldr	r0, [r3, #0]
 8005d26:	f107 0114 	add.w	r1, r7, #20
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	f7fe fa41 	bl	80041b4 <xQueueGenericSend>
 8005d32:	6278      	str	r0, [r7, #36]	; 0x24
 8005d34:	e008      	b.n	8005d48 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005d36:	4b07      	ldr	r3, [pc, #28]	; (8005d54 <xTimerGenericCommand+0x98>)
 8005d38:	6818      	ldr	r0, [r3, #0]
 8005d3a:	f107 0114 	add.w	r1, r7, #20
 8005d3e:	2300      	movs	r3, #0
 8005d40:	683a      	ldr	r2, [r7, #0]
 8005d42:	f7fe fb35 	bl	80043b0 <xQueueGenericSendFromISR>
 8005d46:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	3728      	adds	r7, #40	; 0x28
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd80      	pop	{r7, pc}
 8005d52:	bf00      	nop
 8005d54:	2000076c 	.word	0x2000076c

08005d58 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b088      	sub	sp, #32
 8005d5c:	af02      	add	r7, sp, #8
 8005d5e:	6078      	str	r0, [r7, #4]
 8005d60:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d62:	4b22      	ldr	r3, [pc, #136]	; (8005dec <prvProcessExpiredTimer+0x94>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	68db      	ldr	r3, [r3, #12]
 8005d68:	68db      	ldr	r3, [r3, #12]
 8005d6a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005d6c:	697b      	ldr	r3, [r7, #20]
 8005d6e:	3304      	adds	r3, #4
 8005d70:	4618      	mov	r0, r3
 8005d72:	f7fe f901 	bl	8003f78 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005d7c:	f003 0304 	and.w	r3, r3, #4
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d022      	beq.n	8005dca <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005d84:	697b      	ldr	r3, [r7, #20]
 8005d86:	699a      	ldr	r2, [r3, #24]
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	18d1      	adds	r1, r2, r3
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	683a      	ldr	r2, [r7, #0]
 8005d90:	6978      	ldr	r0, [r7, #20]
 8005d92:	f000 f8d1 	bl	8005f38 <prvInsertTimerInActiveList>
 8005d96:	4603      	mov	r3, r0
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d01f      	beq.n	8005ddc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	9300      	str	r3, [sp, #0]
 8005da0:	2300      	movs	r3, #0
 8005da2:	687a      	ldr	r2, [r7, #4]
 8005da4:	2100      	movs	r1, #0
 8005da6:	6978      	ldr	r0, [r7, #20]
 8005da8:	f7ff ff88 	bl	8005cbc <xTimerGenericCommand>
 8005dac:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d113      	bne.n	8005ddc <prvProcessExpiredTimer+0x84>
        __asm volatile
 8005db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005db8:	f383 8811 	msr	BASEPRI, r3
 8005dbc:	f3bf 8f6f 	isb	sy
 8005dc0:	f3bf 8f4f 	dsb	sy
 8005dc4:	60fb      	str	r3, [r7, #12]
    }
 8005dc6:	bf00      	nop
 8005dc8:	e7fe      	b.n	8005dc8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005dca:	697b      	ldr	r3, [r7, #20]
 8005dcc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005dd0:	f023 0301 	bic.w	r3, r3, #1
 8005dd4:	b2da      	uxtb	r2, r3
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005ddc:	697b      	ldr	r3, [r7, #20]
 8005dde:	6a1b      	ldr	r3, [r3, #32]
 8005de0:	6978      	ldr	r0, [r7, #20]
 8005de2:	4798      	blx	r3
}
 8005de4:	bf00      	nop
 8005de6:	3718      	adds	r7, #24
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bd80      	pop	{r7, pc}
 8005dec:	20000764 	.word	0x20000764

08005df0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b084      	sub	sp, #16
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005df8:	f107 0308 	add.w	r3, r7, #8
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	f000 f857 	bl	8005eb0 <prvGetNextExpireTime>
 8005e02:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	4619      	mov	r1, r3
 8005e08:	68f8      	ldr	r0, [r7, #12]
 8005e0a:	f000 f803 	bl	8005e14 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005e0e:	f000 f8d5 	bl	8005fbc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005e12:	e7f1      	b.n	8005df8 <prvTimerTask+0x8>

08005e14 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b084      	sub	sp, #16
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
 8005e1c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005e1e:	f7ff f90d 	bl	800503c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005e22:	f107 0308 	add.w	r3, r7, #8
 8005e26:	4618      	mov	r0, r3
 8005e28:	f000 f866 	bl	8005ef8 <prvSampleTimeNow>
 8005e2c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d130      	bne.n	8005e96 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d10a      	bne.n	8005e50 <prvProcessTimerOrBlockTask+0x3c>
 8005e3a:	687a      	ldr	r2, [r7, #4]
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	429a      	cmp	r2, r3
 8005e40:	d806      	bhi.n	8005e50 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005e42:	f7ff f909 	bl	8005058 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005e46:	68f9      	ldr	r1, [r7, #12]
 8005e48:	6878      	ldr	r0, [r7, #4]
 8005e4a:	f7ff ff85 	bl	8005d58 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005e4e:	e024      	b.n	8005e9a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d008      	beq.n	8005e68 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005e56:	4b13      	ldr	r3, [pc, #76]	; (8005ea4 <prvProcessTimerOrBlockTask+0x90>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d101      	bne.n	8005e64 <prvProcessTimerOrBlockTask+0x50>
 8005e60:	2301      	movs	r3, #1
 8005e62:	e000      	b.n	8005e66 <prvProcessTimerOrBlockTask+0x52>
 8005e64:	2300      	movs	r3, #0
 8005e66:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005e68:	4b0f      	ldr	r3, [pc, #60]	; (8005ea8 <prvProcessTimerOrBlockTask+0x94>)
 8005e6a:	6818      	ldr	r0, [r3, #0]
 8005e6c:	687a      	ldr	r2, [r7, #4]
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	1ad3      	subs	r3, r2, r3
 8005e72:	683a      	ldr	r2, [r7, #0]
 8005e74:	4619      	mov	r1, r3
 8005e76:	f7fe fe75 	bl	8004b64 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005e7a:	f7ff f8ed 	bl	8005058 <xTaskResumeAll>
 8005e7e:	4603      	mov	r3, r0
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d10a      	bne.n	8005e9a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005e84:	4b09      	ldr	r3, [pc, #36]	; (8005eac <prvProcessTimerOrBlockTask+0x98>)
 8005e86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e8a:	601a      	str	r2, [r3, #0]
 8005e8c:	f3bf 8f4f 	dsb	sy
 8005e90:	f3bf 8f6f 	isb	sy
}
 8005e94:	e001      	b.n	8005e9a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005e96:	f7ff f8df 	bl	8005058 <xTaskResumeAll>
}
 8005e9a:	bf00      	nop
 8005e9c:	3710      	adds	r7, #16
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	bd80      	pop	{r7, pc}
 8005ea2:	bf00      	nop
 8005ea4:	20000768 	.word	0x20000768
 8005ea8:	2000076c 	.word	0x2000076c
 8005eac:	e000ed04 	.word	0xe000ed04

08005eb0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b085      	sub	sp, #20
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005eb8:	4b0e      	ldr	r3, [pc, #56]	; (8005ef4 <prvGetNextExpireTime+0x44>)
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d101      	bne.n	8005ec6 <prvGetNextExpireTime+0x16>
 8005ec2:	2201      	movs	r2, #1
 8005ec4:	e000      	b.n	8005ec8 <prvGetNextExpireTime+0x18>
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d105      	bne.n	8005ee0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005ed4:	4b07      	ldr	r3, [pc, #28]	; (8005ef4 <prvGetNextExpireTime+0x44>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	68db      	ldr	r3, [r3, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	60fb      	str	r3, [r7, #12]
 8005ede:	e001      	b.n	8005ee4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
}
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	3714      	adds	r7, #20
 8005eea:	46bd      	mov	sp, r7
 8005eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef0:	4770      	bx	lr
 8005ef2:	bf00      	nop
 8005ef4:	20000764 	.word	0x20000764

08005ef8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b084      	sub	sp, #16
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005f00:	f7ff f948 	bl	8005194 <xTaskGetTickCount>
 8005f04:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005f06:	4b0b      	ldr	r3, [pc, #44]	; (8005f34 <prvSampleTimeNow+0x3c>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	68fa      	ldr	r2, [r7, #12]
 8005f0c:	429a      	cmp	r2, r3
 8005f0e:	d205      	bcs.n	8005f1c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005f10:	f000 f91a 	bl	8006148 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2201      	movs	r2, #1
 8005f18:	601a      	str	r2, [r3, #0]
 8005f1a:	e002      	b.n	8005f22 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005f22:	4a04      	ldr	r2, [pc, #16]	; (8005f34 <prvSampleTimeNow+0x3c>)
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005f28:	68fb      	ldr	r3, [r7, #12]
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	3710      	adds	r7, #16
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bd80      	pop	{r7, pc}
 8005f32:	bf00      	nop
 8005f34:	20000774 	.word	0x20000774

08005f38 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b086      	sub	sp, #24
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	60f8      	str	r0, [r7, #12]
 8005f40:	60b9      	str	r1, [r7, #8]
 8005f42:	607a      	str	r2, [r7, #4]
 8005f44:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005f46:	2300      	movs	r3, #0
 8005f48:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	68ba      	ldr	r2, [r7, #8]
 8005f4e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	68fa      	ldr	r2, [r7, #12]
 8005f54:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005f56:	68ba      	ldr	r2, [r7, #8]
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	429a      	cmp	r2, r3
 8005f5c:	d812      	bhi.n	8005f84 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f5e:	687a      	ldr	r2, [r7, #4]
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	1ad2      	subs	r2, r2, r3
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	699b      	ldr	r3, [r3, #24]
 8005f68:	429a      	cmp	r2, r3
 8005f6a:	d302      	bcc.n	8005f72 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	617b      	str	r3, [r7, #20]
 8005f70:	e01b      	b.n	8005faa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005f72:	4b10      	ldr	r3, [pc, #64]	; (8005fb4 <prvInsertTimerInActiveList+0x7c>)
 8005f74:	681a      	ldr	r2, [r3, #0]
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	3304      	adds	r3, #4
 8005f7a:	4619      	mov	r1, r3
 8005f7c:	4610      	mov	r0, r2
 8005f7e:	f7fd ffc2 	bl	8003f06 <vListInsert>
 8005f82:	e012      	b.n	8005faa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005f84:	687a      	ldr	r2, [r7, #4]
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	429a      	cmp	r2, r3
 8005f8a:	d206      	bcs.n	8005f9a <prvInsertTimerInActiveList+0x62>
 8005f8c:	68ba      	ldr	r2, [r7, #8]
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	429a      	cmp	r2, r3
 8005f92:	d302      	bcc.n	8005f9a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005f94:	2301      	movs	r3, #1
 8005f96:	617b      	str	r3, [r7, #20]
 8005f98:	e007      	b.n	8005faa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005f9a:	4b07      	ldr	r3, [pc, #28]	; (8005fb8 <prvInsertTimerInActiveList+0x80>)
 8005f9c:	681a      	ldr	r2, [r3, #0]
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	3304      	adds	r3, #4
 8005fa2:	4619      	mov	r1, r3
 8005fa4:	4610      	mov	r0, r2
 8005fa6:	f7fd ffae 	bl	8003f06 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005faa:	697b      	ldr	r3, [r7, #20]
}
 8005fac:	4618      	mov	r0, r3
 8005fae:	3718      	adds	r7, #24
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	bd80      	pop	{r7, pc}
 8005fb4:	20000768 	.word	0x20000768
 8005fb8:	20000764 	.word	0x20000764

08005fbc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b08c      	sub	sp, #48	; 0x30
 8005fc0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005fc2:	e0ae      	b.n	8006122 <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	f2c0 80ab 	blt.w	8006122 <prvProcessReceivedCommands+0x166>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005fcc:	693b      	ldr	r3, [r7, #16]
 8005fce:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd2:	695b      	ldr	r3, [r3, #20]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d004      	beq.n	8005fe2 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fda:	3304      	adds	r3, #4
 8005fdc:	4618      	mov	r0, r3
 8005fde:	f7fd ffcb 	bl	8003f78 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005fe2:	1d3b      	adds	r3, r7, #4
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	f7ff ff87 	bl	8005ef8 <prvSampleTimeNow>
 8005fea:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	2b09      	cmp	r3, #9
 8005ff0:	f200 8096 	bhi.w	8006120 <prvProcessReceivedCommands+0x164>
 8005ff4:	a201      	add	r2, pc, #4	; (adr r2, 8005ffc <prvProcessReceivedCommands+0x40>)
 8005ff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ffa:	bf00      	nop
 8005ffc:	08006025 	.word	0x08006025
 8006000:	08006025 	.word	0x08006025
 8006004:	08006025 	.word	0x08006025
 8006008:	08006099 	.word	0x08006099
 800600c:	080060ad 	.word	0x080060ad
 8006010:	080060f7 	.word	0x080060f7
 8006014:	08006025 	.word	0x08006025
 8006018:	08006025 	.word	0x08006025
 800601c:	08006099 	.word	0x08006099
 8006020:	080060ad 	.word	0x080060ad
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006026:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800602a:	f043 0301 	orr.w	r3, r3, #1
 800602e:	b2da      	uxtb	r2, r3
 8006030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006032:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006036:	68fa      	ldr	r2, [r7, #12]
 8006038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800603a:	699b      	ldr	r3, [r3, #24]
 800603c:	18d1      	adds	r1, r2, r3
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	6a3a      	ldr	r2, [r7, #32]
 8006042:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006044:	f7ff ff78 	bl	8005f38 <prvInsertTimerInActiveList>
 8006048:	4603      	mov	r3, r0
 800604a:	2b00      	cmp	r3, #0
 800604c:	d069      	beq.n	8006122 <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800604e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006050:	6a1b      	ldr	r3, [r3, #32]
 8006052:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006054:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006058:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800605c:	f003 0304 	and.w	r3, r3, #4
 8006060:	2b00      	cmp	r3, #0
 8006062:	d05e      	beq.n	8006122 <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006064:	68fa      	ldr	r2, [r7, #12]
 8006066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006068:	699b      	ldr	r3, [r3, #24]
 800606a:	441a      	add	r2, r3
 800606c:	2300      	movs	r3, #0
 800606e:	9300      	str	r3, [sp, #0]
 8006070:	2300      	movs	r3, #0
 8006072:	2100      	movs	r1, #0
 8006074:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006076:	f7ff fe21 	bl	8005cbc <xTimerGenericCommand>
 800607a:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 800607c:	69fb      	ldr	r3, [r7, #28]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d14f      	bne.n	8006122 <prvProcessReceivedCommands+0x166>
        __asm volatile
 8006082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006086:	f383 8811 	msr	BASEPRI, r3
 800608a:	f3bf 8f6f 	isb	sy
 800608e:	f3bf 8f4f 	dsb	sy
 8006092:	61bb      	str	r3, [r7, #24]
    }
 8006094:	bf00      	nop
 8006096:	e7fe      	b.n	8006096 <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800609a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800609e:	f023 0301 	bic.w	r3, r3, #1
 80060a2:	b2da      	uxtb	r2, r3
 80060a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80060aa:	e03a      	b.n	8006122 <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80060ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80060b2:	f043 0301 	orr.w	r3, r3, #1
 80060b6:	b2da      	uxtb	r2, r3
 80060b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80060be:	68fa      	ldr	r2, [r7, #12]
 80060c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060c2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80060c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060c6:	699b      	ldr	r3, [r3, #24]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d10a      	bne.n	80060e2 <prvProcessReceivedCommands+0x126>
        __asm volatile
 80060cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060d0:	f383 8811 	msr	BASEPRI, r3
 80060d4:	f3bf 8f6f 	isb	sy
 80060d8:	f3bf 8f4f 	dsb	sy
 80060dc:	617b      	str	r3, [r7, #20]
    }
 80060de:	bf00      	nop
 80060e0:	e7fe      	b.n	80060e0 <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80060e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e4:	699a      	ldr	r2, [r3, #24]
 80060e6:	6a3b      	ldr	r3, [r7, #32]
 80060e8:	18d1      	adds	r1, r2, r3
 80060ea:	6a3b      	ldr	r3, [r7, #32]
 80060ec:	6a3a      	ldr	r2, [r7, #32]
 80060ee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80060f0:	f7ff ff22 	bl	8005f38 <prvInsertTimerInActiveList>
					break;
 80060f4:	e015      	b.n	8006122 <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80060f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80060fc:	f003 0302 	and.w	r3, r3, #2
 8006100:	2b00      	cmp	r3, #0
 8006102:	d103      	bne.n	800610c <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 8006104:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006106:	f000 fbb9 	bl	800687c <vPortFree>
 800610a:	e00a      	b.n	8006122 <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800610c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800610e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006112:	f023 0301 	bic.w	r3, r3, #1
 8006116:	b2da      	uxtb	r2, r3
 8006118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800611a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800611e:	e000      	b.n	8006122 <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
 8006120:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006122:	4b08      	ldr	r3, [pc, #32]	; (8006144 <prvProcessReceivedCommands+0x188>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f107 0108 	add.w	r1, r7, #8
 800612a:	2200      	movs	r2, #0
 800612c:	4618      	mov	r0, r3
 800612e:	f7fe f9db 	bl	80044e8 <xQueueReceive>
 8006132:	4603      	mov	r3, r0
 8006134:	2b00      	cmp	r3, #0
 8006136:	f47f af45 	bne.w	8005fc4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800613a:	bf00      	nop
 800613c:	bf00      	nop
 800613e:	3728      	adds	r7, #40	; 0x28
 8006140:	46bd      	mov	sp, r7
 8006142:	bd80      	pop	{r7, pc}
 8006144:	2000076c 	.word	0x2000076c

08006148 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b088      	sub	sp, #32
 800614c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800614e:	e048      	b.n	80061e2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006150:	4b2d      	ldr	r3, [pc, #180]	; (8006208 <prvSwitchTimerLists+0xc0>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	68db      	ldr	r3, [r3, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800615a:	4b2b      	ldr	r3, [pc, #172]	; (8006208 <prvSwitchTimerLists+0xc0>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	68db      	ldr	r3, [r3, #12]
 8006160:	68db      	ldr	r3, [r3, #12]
 8006162:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	3304      	adds	r3, #4
 8006168:	4618      	mov	r0, r3
 800616a:	f7fd ff05 	bl	8003f78 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	6a1b      	ldr	r3, [r3, #32]
 8006172:	68f8      	ldr	r0, [r7, #12]
 8006174:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800617c:	f003 0304 	and.w	r3, r3, #4
 8006180:	2b00      	cmp	r3, #0
 8006182:	d02e      	beq.n	80061e2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	699b      	ldr	r3, [r3, #24]
 8006188:	693a      	ldr	r2, [r7, #16]
 800618a:	4413      	add	r3, r2
 800618c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800618e:	68ba      	ldr	r2, [r7, #8]
 8006190:	693b      	ldr	r3, [r7, #16]
 8006192:	429a      	cmp	r2, r3
 8006194:	d90e      	bls.n	80061b4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	68ba      	ldr	r2, [r7, #8]
 800619a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	68fa      	ldr	r2, [r7, #12]
 80061a0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80061a2:	4b19      	ldr	r3, [pc, #100]	; (8006208 <prvSwitchTimerLists+0xc0>)
 80061a4:	681a      	ldr	r2, [r3, #0]
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	3304      	adds	r3, #4
 80061aa:	4619      	mov	r1, r3
 80061ac:	4610      	mov	r0, r2
 80061ae:	f7fd feaa 	bl	8003f06 <vListInsert>
 80061b2:	e016      	b.n	80061e2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80061b4:	2300      	movs	r3, #0
 80061b6:	9300      	str	r3, [sp, #0]
 80061b8:	2300      	movs	r3, #0
 80061ba:	693a      	ldr	r2, [r7, #16]
 80061bc:	2100      	movs	r1, #0
 80061be:	68f8      	ldr	r0, [r7, #12]
 80061c0:	f7ff fd7c 	bl	8005cbc <xTimerGenericCommand>
 80061c4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d10a      	bne.n	80061e2 <prvSwitchTimerLists+0x9a>
        __asm volatile
 80061cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061d0:	f383 8811 	msr	BASEPRI, r3
 80061d4:	f3bf 8f6f 	isb	sy
 80061d8:	f3bf 8f4f 	dsb	sy
 80061dc:	603b      	str	r3, [r7, #0]
    }
 80061de:	bf00      	nop
 80061e0:	e7fe      	b.n	80061e0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80061e2:	4b09      	ldr	r3, [pc, #36]	; (8006208 <prvSwitchTimerLists+0xc0>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d1b1      	bne.n	8006150 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80061ec:	4b06      	ldr	r3, [pc, #24]	; (8006208 <prvSwitchTimerLists+0xc0>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80061f2:	4b06      	ldr	r3, [pc, #24]	; (800620c <prvSwitchTimerLists+0xc4>)
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	4a04      	ldr	r2, [pc, #16]	; (8006208 <prvSwitchTimerLists+0xc0>)
 80061f8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80061fa:	4a04      	ldr	r2, [pc, #16]	; (800620c <prvSwitchTimerLists+0xc4>)
 80061fc:	697b      	ldr	r3, [r7, #20]
 80061fe:	6013      	str	r3, [r2, #0]
}
 8006200:	bf00      	nop
 8006202:	3718      	adds	r7, #24
 8006204:	46bd      	mov	sp, r7
 8006206:	bd80      	pop	{r7, pc}
 8006208:	20000764 	.word	0x20000764
 800620c:	20000768 	.word	0x20000768

08006210 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006210:	b580      	push	{r7, lr}
 8006212:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006214:	f000 f960 	bl	80064d8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006218:	4b12      	ldr	r3, [pc, #72]	; (8006264 <prvCheckForValidListAndQueue+0x54>)
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d11d      	bne.n	800625c <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 8006220:	4811      	ldr	r0, [pc, #68]	; (8006268 <prvCheckForValidListAndQueue+0x58>)
 8006222:	f7fd fe1f 	bl	8003e64 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006226:	4811      	ldr	r0, [pc, #68]	; (800626c <prvCheckForValidListAndQueue+0x5c>)
 8006228:	f7fd fe1c 	bl	8003e64 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800622c:	4b10      	ldr	r3, [pc, #64]	; (8006270 <prvCheckForValidListAndQueue+0x60>)
 800622e:	4a0e      	ldr	r2, [pc, #56]	; (8006268 <prvCheckForValidListAndQueue+0x58>)
 8006230:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006232:	4b10      	ldr	r3, [pc, #64]	; (8006274 <prvCheckForValidListAndQueue+0x64>)
 8006234:	4a0d      	ldr	r2, [pc, #52]	; (800626c <prvCheckForValidListAndQueue+0x5c>)
 8006236:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8006238:	2200      	movs	r2, #0
 800623a:	210c      	movs	r1, #12
 800623c:	200a      	movs	r0, #10
 800623e:	f7fd ff2d 	bl	800409c <xQueueGenericCreate>
 8006242:	4603      	mov	r3, r0
 8006244:	4a07      	ldr	r2, [pc, #28]	; (8006264 <prvCheckForValidListAndQueue+0x54>)
 8006246:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006248:	4b06      	ldr	r3, [pc, #24]	; (8006264 <prvCheckForValidListAndQueue+0x54>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d005      	beq.n	800625c <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006250:	4b04      	ldr	r3, [pc, #16]	; (8006264 <prvCheckForValidListAndQueue+0x54>)
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4908      	ldr	r1, [pc, #32]	; (8006278 <prvCheckForValidListAndQueue+0x68>)
 8006256:	4618      	mov	r0, r3
 8006258:	f7fe fc5a 	bl	8004b10 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800625c:	f000 f96c 	bl	8006538 <vPortExitCritical>
}
 8006260:	bf00      	nop
 8006262:	bd80      	pop	{r7, pc}
 8006264:	2000076c 	.word	0x2000076c
 8006268:	2000073c 	.word	0x2000073c
 800626c:	20000750 	.word	0x20000750
 8006270:	20000764 	.word	0x20000764
 8006274:	20000768 	.word	0x20000768
 8006278:	08006bf0 	.word	0x08006bf0

0800627c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 800627c:	b480      	push	{r7}
 800627e:	b085      	sub	sp, #20
 8006280:	af00      	add	r7, sp, #0
 8006282:	60f8      	str	r0, [r7, #12]
 8006284:	60b9      	str	r1, [r7, #8]
 8006286:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	3b04      	subs	r3, #4
 800628c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006294:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	3b04      	subs	r3, #4
 800629a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	f023 0201 	bic.w	r2, r3, #1
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	3b04      	subs	r3, #4
 80062aa:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80062ac:	4a0c      	ldr	r2, [pc, #48]	; (80062e0 <pxPortInitialiseStack+0x64>)
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	3b14      	subs	r3, #20
 80062b6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80062b8:	687a      	ldr	r2, [r7, #4]
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	3b04      	subs	r3, #4
 80062c2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	f06f 0202 	mvn.w	r2, #2
 80062ca:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	3b20      	subs	r3, #32
 80062d0:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80062d2:	68fb      	ldr	r3, [r7, #12]
}
 80062d4:	4618      	mov	r0, r3
 80062d6:	3714      	adds	r7, #20
 80062d8:	46bd      	mov	sp, r7
 80062da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062de:	4770      	bx	lr
 80062e0:	080062e5 	.word	0x080062e5

080062e4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80062e4:	b480      	push	{r7}
 80062e6:	b085      	sub	sp, #20
 80062e8:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80062ea:	2300      	movs	r3, #0
 80062ec:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80062ee:	4b12      	ldr	r3, [pc, #72]	; (8006338 <prvTaskExitError+0x54>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062f6:	d00a      	beq.n	800630e <prvTaskExitError+0x2a>
        __asm volatile
 80062f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062fc:	f383 8811 	msr	BASEPRI, r3
 8006300:	f3bf 8f6f 	isb	sy
 8006304:	f3bf 8f4f 	dsb	sy
 8006308:	60fb      	str	r3, [r7, #12]
    }
 800630a:	bf00      	nop
 800630c:	e7fe      	b.n	800630c <prvTaskExitError+0x28>
        __asm volatile
 800630e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006312:	f383 8811 	msr	BASEPRI, r3
 8006316:	f3bf 8f6f 	isb	sy
 800631a:	f3bf 8f4f 	dsb	sy
 800631e:	60bb      	str	r3, [r7, #8]
    }
 8006320:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8006322:	bf00      	nop
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d0fc      	beq.n	8006324 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800632a:	bf00      	nop
 800632c:	bf00      	nop
 800632e:	3714      	adds	r7, #20
 8006330:	46bd      	mov	sp, r7
 8006332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006336:	4770      	bx	lr
 8006338:	200000cc 	.word	0x200000cc
 800633c:	00000000 	.word	0x00000000

08006340 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8006340:	4b07      	ldr	r3, [pc, #28]	; (8006360 <pxCurrentTCBConst2>)
 8006342:	6819      	ldr	r1, [r3, #0]
 8006344:	6808      	ldr	r0, [r1, #0]
 8006346:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800634a:	f380 8809 	msr	PSP, r0
 800634e:	f3bf 8f6f 	isb	sy
 8006352:	f04f 0000 	mov.w	r0, #0
 8006356:	f380 8811 	msr	BASEPRI, r0
 800635a:	4770      	bx	lr
 800635c:	f3af 8000 	nop.w

08006360 <pxCurrentTCBConst2>:
 8006360:	2000023c 	.word	0x2000023c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8006364:	bf00      	nop
 8006366:	bf00      	nop

08006368 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8006368:	4808      	ldr	r0, [pc, #32]	; (800638c <prvPortStartFirstTask+0x24>)
 800636a:	6800      	ldr	r0, [r0, #0]
 800636c:	6800      	ldr	r0, [r0, #0]
 800636e:	f380 8808 	msr	MSP, r0
 8006372:	f04f 0000 	mov.w	r0, #0
 8006376:	f380 8814 	msr	CONTROL, r0
 800637a:	b662      	cpsie	i
 800637c:	b661      	cpsie	f
 800637e:	f3bf 8f4f 	dsb	sy
 8006382:	f3bf 8f6f 	isb	sy
 8006386:	df00      	svc	0
 8006388:	bf00      	nop
 800638a:	0000      	.short	0x0000
 800638c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8006390:	bf00      	nop
 8006392:	bf00      	nop

08006394 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b086      	sub	sp, #24
 8006398:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800639a:	4b46      	ldr	r3, [pc, #280]	; (80064b4 <xPortStartScheduler+0x120>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	4a46      	ldr	r2, [pc, #280]	; (80064b8 <xPortStartScheduler+0x124>)
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d10a      	bne.n	80063ba <xPortStartScheduler+0x26>
        __asm volatile
 80063a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063a8:	f383 8811 	msr	BASEPRI, r3
 80063ac:	f3bf 8f6f 	isb	sy
 80063b0:	f3bf 8f4f 	dsb	sy
 80063b4:	613b      	str	r3, [r7, #16]
    }
 80063b6:	bf00      	nop
 80063b8:	e7fe      	b.n	80063b8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80063ba:	4b3e      	ldr	r3, [pc, #248]	; (80064b4 <xPortStartScheduler+0x120>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	4a3f      	ldr	r2, [pc, #252]	; (80064bc <xPortStartScheduler+0x128>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d10a      	bne.n	80063da <xPortStartScheduler+0x46>
        __asm volatile
 80063c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063c8:	f383 8811 	msr	BASEPRI, r3
 80063cc:	f3bf 8f6f 	isb	sy
 80063d0:	f3bf 8f4f 	dsb	sy
 80063d4:	60fb      	str	r3, [r7, #12]
    }
 80063d6:	bf00      	nop
 80063d8:	e7fe      	b.n	80063d8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80063da:	4b39      	ldr	r3, [pc, #228]	; (80064c0 <xPortStartScheduler+0x12c>)
 80063dc:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 80063de:	697b      	ldr	r3, [r7, #20]
 80063e0:	781b      	ldrb	r3, [r3, #0]
 80063e2:	b2db      	uxtb	r3, r3
 80063e4:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80063e6:	697b      	ldr	r3, [r7, #20]
 80063e8:	22ff      	movs	r2, #255	; 0xff
 80063ea:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80063ec:	697b      	ldr	r3, [r7, #20]
 80063ee:	781b      	ldrb	r3, [r3, #0]
 80063f0:	b2db      	uxtb	r3, r3
 80063f2:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80063f4:	78fb      	ldrb	r3, [r7, #3]
 80063f6:	b2db      	uxtb	r3, r3
 80063f8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80063fc:	b2da      	uxtb	r2, r3
 80063fe:	4b31      	ldr	r3, [pc, #196]	; (80064c4 <xPortStartScheduler+0x130>)
 8006400:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006402:	4b31      	ldr	r3, [pc, #196]	; (80064c8 <xPortStartScheduler+0x134>)
 8006404:	2207      	movs	r2, #7
 8006406:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006408:	e009      	b.n	800641e <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 800640a:	4b2f      	ldr	r3, [pc, #188]	; (80064c8 <xPortStartScheduler+0x134>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	3b01      	subs	r3, #1
 8006410:	4a2d      	ldr	r2, [pc, #180]	; (80064c8 <xPortStartScheduler+0x134>)
 8006412:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006414:	78fb      	ldrb	r3, [r7, #3]
 8006416:	b2db      	uxtb	r3, r3
 8006418:	005b      	lsls	r3, r3, #1
 800641a:	b2db      	uxtb	r3, r3
 800641c:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800641e:	78fb      	ldrb	r3, [r7, #3]
 8006420:	b2db      	uxtb	r3, r3
 8006422:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006426:	2b80      	cmp	r3, #128	; 0x80
 8006428:	d0ef      	beq.n	800640a <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800642a:	4b27      	ldr	r3, [pc, #156]	; (80064c8 <xPortStartScheduler+0x134>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f1c3 0307 	rsb	r3, r3, #7
 8006432:	2b04      	cmp	r3, #4
 8006434:	d00a      	beq.n	800644c <xPortStartScheduler+0xb8>
        __asm volatile
 8006436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800643a:	f383 8811 	msr	BASEPRI, r3
 800643e:	f3bf 8f6f 	isb	sy
 8006442:	f3bf 8f4f 	dsb	sy
 8006446:	60bb      	str	r3, [r7, #8]
    }
 8006448:	bf00      	nop
 800644a:	e7fe      	b.n	800644a <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800644c:	4b1e      	ldr	r3, [pc, #120]	; (80064c8 <xPortStartScheduler+0x134>)
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	021b      	lsls	r3, r3, #8
 8006452:	4a1d      	ldr	r2, [pc, #116]	; (80064c8 <xPortStartScheduler+0x134>)
 8006454:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006456:	4b1c      	ldr	r3, [pc, #112]	; (80064c8 <xPortStartScheduler+0x134>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800645e:	4a1a      	ldr	r2, [pc, #104]	; (80064c8 <xPortStartScheduler+0x134>)
 8006460:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	b2da      	uxtb	r2, r3
 8006466:	697b      	ldr	r3, [r7, #20]
 8006468:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800646a:	4b18      	ldr	r3, [pc, #96]	; (80064cc <xPortStartScheduler+0x138>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	4a17      	ldr	r2, [pc, #92]	; (80064cc <xPortStartScheduler+0x138>)
 8006470:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006474:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8006476:	4b15      	ldr	r3, [pc, #84]	; (80064cc <xPortStartScheduler+0x138>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4a14      	ldr	r2, [pc, #80]	; (80064cc <xPortStartScheduler+0x138>)
 800647c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006480:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8006482:	f000 f8db 	bl	800663c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8006486:	4b12      	ldr	r3, [pc, #72]	; (80064d0 <xPortStartScheduler+0x13c>)
 8006488:	2200      	movs	r2, #0
 800648a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800648c:	f000 f8f0 	bl	8006670 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006490:	4b10      	ldr	r3, [pc, #64]	; (80064d4 <xPortStartScheduler+0x140>)
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4a0f      	ldr	r2, [pc, #60]	; (80064d4 <xPortStartScheduler+0x140>)
 8006496:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800649a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800649c:	f7ff ff64 	bl	8006368 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80064a0:	f7fe ff54 	bl	800534c <vTaskSwitchContext>
    prvTaskExitError();
 80064a4:	f7ff ff1e 	bl	80062e4 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80064a8:	2300      	movs	r3, #0
}
 80064aa:	4618      	mov	r0, r3
 80064ac:	3718      	adds	r7, #24
 80064ae:	46bd      	mov	sp, r7
 80064b0:	bd80      	pop	{r7, pc}
 80064b2:	bf00      	nop
 80064b4:	e000ed00 	.word	0xe000ed00
 80064b8:	410fc271 	.word	0x410fc271
 80064bc:	410fc270 	.word	0x410fc270
 80064c0:	e000e400 	.word	0xe000e400
 80064c4:	20000778 	.word	0x20000778
 80064c8:	2000077c 	.word	0x2000077c
 80064cc:	e000ed20 	.word	0xe000ed20
 80064d0:	200000cc 	.word	0x200000cc
 80064d4:	e000ef34 	.word	0xe000ef34

080064d8 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80064d8:	b480      	push	{r7}
 80064da:	b083      	sub	sp, #12
 80064dc:	af00      	add	r7, sp, #0
        __asm volatile
 80064de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064e2:	f383 8811 	msr	BASEPRI, r3
 80064e6:	f3bf 8f6f 	isb	sy
 80064ea:	f3bf 8f4f 	dsb	sy
 80064ee:	607b      	str	r3, [r7, #4]
    }
 80064f0:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80064f2:	4b0f      	ldr	r3, [pc, #60]	; (8006530 <vPortEnterCritical+0x58>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	3301      	adds	r3, #1
 80064f8:	4a0d      	ldr	r2, [pc, #52]	; (8006530 <vPortEnterCritical+0x58>)
 80064fa:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80064fc:	4b0c      	ldr	r3, [pc, #48]	; (8006530 <vPortEnterCritical+0x58>)
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	2b01      	cmp	r3, #1
 8006502:	d10f      	bne.n	8006524 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006504:	4b0b      	ldr	r3, [pc, #44]	; (8006534 <vPortEnterCritical+0x5c>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	b2db      	uxtb	r3, r3
 800650a:	2b00      	cmp	r3, #0
 800650c:	d00a      	beq.n	8006524 <vPortEnterCritical+0x4c>
        __asm volatile
 800650e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006512:	f383 8811 	msr	BASEPRI, r3
 8006516:	f3bf 8f6f 	isb	sy
 800651a:	f3bf 8f4f 	dsb	sy
 800651e:	603b      	str	r3, [r7, #0]
    }
 8006520:	bf00      	nop
 8006522:	e7fe      	b.n	8006522 <vPortEnterCritical+0x4a>
    }
}
 8006524:	bf00      	nop
 8006526:	370c      	adds	r7, #12
 8006528:	46bd      	mov	sp, r7
 800652a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652e:	4770      	bx	lr
 8006530:	200000cc 	.word	0x200000cc
 8006534:	e000ed04 	.word	0xe000ed04

08006538 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006538:	b480      	push	{r7}
 800653a:	b083      	sub	sp, #12
 800653c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800653e:	4b12      	ldr	r3, [pc, #72]	; (8006588 <vPortExitCritical+0x50>)
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d10a      	bne.n	800655c <vPortExitCritical+0x24>
        __asm volatile
 8006546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800654a:	f383 8811 	msr	BASEPRI, r3
 800654e:	f3bf 8f6f 	isb	sy
 8006552:	f3bf 8f4f 	dsb	sy
 8006556:	607b      	str	r3, [r7, #4]
    }
 8006558:	bf00      	nop
 800655a:	e7fe      	b.n	800655a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800655c:	4b0a      	ldr	r3, [pc, #40]	; (8006588 <vPortExitCritical+0x50>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	3b01      	subs	r3, #1
 8006562:	4a09      	ldr	r2, [pc, #36]	; (8006588 <vPortExitCritical+0x50>)
 8006564:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8006566:	4b08      	ldr	r3, [pc, #32]	; (8006588 <vPortExitCritical+0x50>)
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d105      	bne.n	800657a <vPortExitCritical+0x42>
 800656e:	2300      	movs	r3, #0
 8006570:	603b      	str	r3, [r7, #0]
        __asm volatile
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	f383 8811 	msr	BASEPRI, r3
    }
 8006578:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800657a:	bf00      	nop
 800657c:	370c      	adds	r7, #12
 800657e:	46bd      	mov	sp, r7
 8006580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006584:	4770      	bx	lr
 8006586:	bf00      	nop
 8006588:	200000cc 	.word	0x200000cc
 800658c:	00000000 	.word	0x00000000

08006590 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8006590:	f3ef 8009 	mrs	r0, PSP
 8006594:	f3bf 8f6f 	isb	sy
 8006598:	4b15      	ldr	r3, [pc, #84]	; (80065f0 <pxCurrentTCBConst>)
 800659a:	681a      	ldr	r2, [r3, #0]
 800659c:	f01e 0f10 	tst.w	lr, #16
 80065a0:	bf08      	it	eq
 80065a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80065a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065aa:	6010      	str	r0, [r2, #0]
 80065ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80065b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80065b4:	f380 8811 	msr	BASEPRI, r0
 80065b8:	f3bf 8f4f 	dsb	sy
 80065bc:	f3bf 8f6f 	isb	sy
 80065c0:	f7fe fec4 	bl	800534c <vTaskSwitchContext>
 80065c4:	f04f 0000 	mov.w	r0, #0
 80065c8:	f380 8811 	msr	BASEPRI, r0
 80065cc:	bc09      	pop	{r0, r3}
 80065ce:	6819      	ldr	r1, [r3, #0]
 80065d0:	6808      	ldr	r0, [r1, #0]
 80065d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065d6:	f01e 0f10 	tst.w	lr, #16
 80065da:	bf08      	it	eq
 80065dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80065e0:	f380 8809 	msr	PSP, r0
 80065e4:	f3bf 8f6f 	isb	sy
 80065e8:	4770      	bx	lr
 80065ea:	bf00      	nop
 80065ec:	f3af 8000 	nop.w

080065f0 <pxCurrentTCBConst>:
 80065f0:	2000023c 	.word	0x2000023c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80065f4:	bf00      	nop
 80065f6:	bf00      	nop

080065f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b082      	sub	sp, #8
 80065fc:	af00      	add	r7, sp, #0
        __asm volatile
 80065fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006602:	f383 8811 	msr	BASEPRI, r3
 8006606:	f3bf 8f6f 	isb	sy
 800660a:	f3bf 8f4f 	dsb	sy
 800660e:	607b      	str	r3, [r7, #4]
    }
 8006610:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8006612:	f7fe fde1 	bl	80051d8 <xTaskIncrementTick>
 8006616:	4603      	mov	r3, r0
 8006618:	2b00      	cmp	r3, #0
 800661a:	d003      	beq.n	8006624 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800661c:	4b06      	ldr	r3, [pc, #24]	; (8006638 <SysTick_Handler+0x40>)
 800661e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006622:	601a      	str	r2, [r3, #0]
 8006624:	2300      	movs	r3, #0
 8006626:	603b      	str	r3, [r7, #0]
        __asm volatile
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	f383 8811 	msr	BASEPRI, r3
    }
 800662e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8006630:	bf00      	nop
 8006632:	3708      	adds	r7, #8
 8006634:	46bd      	mov	sp, r7
 8006636:	bd80      	pop	{r7, pc}
 8006638:	e000ed04 	.word	0xe000ed04

0800663c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800663c:	b480      	push	{r7}
 800663e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006640:	4b08      	ldr	r3, [pc, #32]	; (8006664 <vPortSetupTimerInterrupt+0x28>)
 8006642:	2200      	movs	r2, #0
 8006644:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006646:	4b08      	ldr	r3, [pc, #32]	; (8006668 <vPortSetupTimerInterrupt+0x2c>)
 8006648:	2200      	movs	r2, #0
 800664a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800664c:	4b07      	ldr	r3, [pc, #28]	; (800666c <vPortSetupTimerInterrupt+0x30>)
 800664e:	f240 12a3 	movw	r2, #419	; 0x1a3
 8006652:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006654:	4b03      	ldr	r3, [pc, #12]	; (8006664 <vPortSetupTimerInterrupt+0x28>)
 8006656:	2207      	movs	r2, #7
 8006658:	601a      	str	r2, [r3, #0]
}
 800665a:	bf00      	nop
 800665c:	46bd      	mov	sp, r7
 800665e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006662:	4770      	bx	lr
 8006664:	e000e010 	.word	0xe000e010
 8006668:	e000e018 	.word	0xe000e018
 800666c:	e000e014 	.word	0xe000e014

08006670 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8006670:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006680 <vPortEnableVFP+0x10>
 8006674:	6801      	ldr	r1, [r0, #0]
 8006676:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800667a:	6001      	str	r1, [r0, #0]
 800667c:	4770      	bx	lr
 800667e:	0000      	.short	0x0000
 8006680:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8006684:	bf00      	nop
 8006686:	bf00      	nop

08006688 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8006688:	b480      	push	{r7}
 800668a:	b085      	sub	sp, #20
 800668c:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 800668e:	f3ef 8305 	mrs	r3, IPSR
 8006692:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	2b0f      	cmp	r3, #15
 8006698:	d914      	bls.n	80066c4 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800669a:	4a17      	ldr	r2, [pc, #92]	; (80066f8 <vPortValidateInterruptPriority+0x70>)
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	4413      	add	r3, r2
 80066a0:	781b      	ldrb	r3, [r3, #0]
 80066a2:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80066a4:	4b15      	ldr	r3, [pc, #84]	; (80066fc <vPortValidateInterruptPriority+0x74>)
 80066a6:	781b      	ldrb	r3, [r3, #0]
 80066a8:	7afa      	ldrb	r2, [r7, #11]
 80066aa:	429a      	cmp	r2, r3
 80066ac:	d20a      	bcs.n	80066c4 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 80066ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066b2:	f383 8811 	msr	BASEPRI, r3
 80066b6:	f3bf 8f6f 	isb	sy
 80066ba:	f3bf 8f4f 	dsb	sy
 80066be:	607b      	str	r3, [r7, #4]
    }
 80066c0:	bf00      	nop
 80066c2:	e7fe      	b.n	80066c2 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80066c4:	4b0e      	ldr	r3, [pc, #56]	; (8006700 <vPortValidateInterruptPriority+0x78>)
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80066cc:	4b0d      	ldr	r3, [pc, #52]	; (8006704 <vPortValidateInterruptPriority+0x7c>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	429a      	cmp	r2, r3
 80066d2:	d90a      	bls.n	80066ea <vPortValidateInterruptPriority+0x62>
        __asm volatile
 80066d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066d8:	f383 8811 	msr	BASEPRI, r3
 80066dc:	f3bf 8f6f 	isb	sy
 80066e0:	f3bf 8f4f 	dsb	sy
 80066e4:	603b      	str	r3, [r7, #0]
    }
 80066e6:	bf00      	nop
 80066e8:	e7fe      	b.n	80066e8 <vPortValidateInterruptPriority+0x60>
    }
 80066ea:	bf00      	nop
 80066ec:	3714      	adds	r7, #20
 80066ee:	46bd      	mov	sp, r7
 80066f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f4:	4770      	bx	lr
 80066f6:	bf00      	nop
 80066f8:	e000e3f0 	.word	0xe000e3f0
 80066fc:	20000778 	.word	0x20000778
 8006700:	e000ed0c 	.word	0xe000ed0c
 8006704:	2000077c 	.word	0x2000077c

08006708 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b08a      	sub	sp, #40	; 0x28
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8006710:	2300      	movs	r3, #0
 8006712:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8006714:	f7fe fc92 	bl	800503c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8006718:	4b53      	ldr	r3, [pc, #332]	; (8006868 <pvPortMalloc+0x160>)
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d101      	bne.n	8006724 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8006720:	f000 f908 	bl	8006934 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d012      	beq.n	8006750 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800672a:	2208      	movs	r2, #8
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	f003 0307 	and.w	r3, r3, #7
 8006732:	1ad3      	subs	r3, r2, r3
 8006734:	3308      	adds	r3, #8
 8006736:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8006738:	69bb      	ldr	r3, [r7, #24]
 800673a:	43db      	mvns	r3, r3
 800673c:	687a      	ldr	r2, [r7, #4]
 800673e:	429a      	cmp	r2, r3
 8006740:	d804      	bhi.n	800674c <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8006742:	687a      	ldr	r2, [r7, #4]
 8006744:	69bb      	ldr	r3, [r7, #24]
 8006746:	4413      	add	r3, r2
 8006748:	607b      	str	r3, [r7, #4]
 800674a:	e001      	b.n	8006750 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 800674c:	2300      	movs	r3, #0
 800674e:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2b00      	cmp	r3, #0
 8006754:	db70      	blt.n	8006838 <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d06d      	beq.n	8006838 <pvPortMalloc+0x130>
 800675c:	4b43      	ldr	r3, [pc, #268]	; (800686c <pvPortMalloc+0x164>)
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	687a      	ldr	r2, [r7, #4]
 8006762:	429a      	cmp	r2, r3
 8006764:	d868      	bhi.n	8006838 <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8006766:	4b42      	ldr	r3, [pc, #264]	; (8006870 <pvPortMalloc+0x168>)
 8006768:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800676a:	4b41      	ldr	r3, [pc, #260]	; (8006870 <pvPortMalloc+0x168>)
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006770:	e004      	b.n	800677c <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8006772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006774:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8006776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800677c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800677e:	685b      	ldr	r3, [r3, #4]
 8006780:	687a      	ldr	r2, [r7, #4]
 8006782:	429a      	cmp	r2, r3
 8006784:	d903      	bls.n	800678e <pvPortMalloc+0x86>
 8006786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d1f1      	bne.n	8006772 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800678e:	4b36      	ldr	r3, [pc, #216]	; (8006868 <pvPortMalloc+0x160>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006794:	429a      	cmp	r2, r3
 8006796:	d04f      	beq.n	8006838 <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006798:	6a3b      	ldr	r3, [r7, #32]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	2208      	movs	r2, #8
 800679e:	4413      	add	r3, r2
 80067a0:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80067a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a4:	681a      	ldr	r2, [r3, #0]
 80067a6:	6a3b      	ldr	r3, [r7, #32]
 80067a8:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80067aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ac:	685a      	ldr	r2, [r3, #4]
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	1ad2      	subs	r2, r2, r3
 80067b2:	2308      	movs	r3, #8
 80067b4:	005b      	lsls	r3, r3, #1
 80067b6:	429a      	cmp	r2, r3
 80067b8:	d91f      	bls.n	80067fa <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80067ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	4413      	add	r3, r2
 80067c0:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80067c2:	697b      	ldr	r3, [r7, #20]
 80067c4:	f003 0307 	and.w	r3, r3, #7
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d00a      	beq.n	80067e2 <pvPortMalloc+0xda>
        __asm volatile
 80067cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067d0:	f383 8811 	msr	BASEPRI, r3
 80067d4:	f3bf 8f6f 	isb	sy
 80067d8:	f3bf 8f4f 	dsb	sy
 80067dc:	613b      	str	r3, [r7, #16]
    }
 80067de:	bf00      	nop
 80067e0:	e7fe      	b.n	80067e0 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80067e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e4:	685a      	ldr	r2, [r3, #4]
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	1ad2      	subs	r2, r2, r3
 80067ea:	697b      	ldr	r3, [r7, #20]
 80067ec:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80067ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f0:	687a      	ldr	r2, [r7, #4]
 80067f2:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80067f4:	6978      	ldr	r0, [r7, #20]
 80067f6:	f000 f8f9 	bl	80069ec <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80067fa:	4b1c      	ldr	r3, [pc, #112]	; (800686c <pvPortMalloc+0x164>)
 80067fc:	681a      	ldr	r2, [r3, #0]
 80067fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006800:	685b      	ldr	r3, [r3, #4]
 8006802:	1ad3      	subs	r3, r2, r3
 8006804:	4a19      	ldr	r2, [pc, #100]	; (800686c <pvPortMalloc+0x164>)
 8006806:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006808:	4b18      	ldr	r3, [pc, #96]	; (800686c <pvPortMalloc+0x164>)
 800680a:	681a      	ldr	r2, [r3, #0]
 800680c:	4b19      	ldr	r3, [pc, #100]	; (8006874 <pvPortMalloc+0x16c>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	429a      	cmp	r2, r3
 8006812:	d203      	bcs.n	800681c <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006814:	4b15      	ldr	r3, [pc, #84]	; (800686c <pvPortMalloc+0x164>)
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	4a16      	ldr	r2, [pc, #88]	; (8006874 <pvPortMalloc+0x16c>)
 800681a:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 800681c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800681e:	685b      	ldr	r3, [r3, #4]
 8006820:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006826:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8006828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800682a:	2200      	movs	r2, #0
 800682c:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800682e:	4b12      	ldr	r3, [pc, #72]	; (8006878 <pvPortMalloc+0x170>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	3301      	adds	r3, #1
 8006834:	4a10      	ldr	r2, [pc, #64]	; (8006878 <pvPortMalloc+0x170>)
 8006836:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8006838:	f7fe fc0e 	bl	8005058 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800683c:	69fb      	ldr	r3, [r7, #28]
 800683e:	f003 0307 	and.w	r3, r3, #7
 8006842:	2b00      	cmp	r3, #0
 8006844:	d00a      	beq.n	800685c <pvPortMalloc+0x154>
        __asm volatile
 8006846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800684a:	f383 8811 	msr	BASEPRI, r3
 800684e:	f3bf 8f6f 	isb	sy
 8006852:	f3bf 8f4f 	dsb	sy
 8006856:	60fb      	str	r3, [r7, #12]
    }
 8006858:	bf00      	nop
 800685a:	e7fe      	b.n	800685a <pvPortMalloc+0x152>
    return pvReturn;
 800685c:	69fb      	ldr	r3, [r7, #28]
}
 800685e:	4618      	mov	r0, r3
 8006860:	3728      	adds	r7, #40	; 0x28
 8006862:	46bd      	mov	sp, r7
 8006864:	bd80      	pop	{r7, pc}
 8006866:	bf00      	nop
 8006868:	20004388 	.word	0x20004388
 800686c:	2000438c 	.word	0x2000438c
 8006870:	20004380 	.word	0x20004380
 8006874:	20004390 	.word	0x20004390
 8006878:	20004394 	.word	0x20004394

0800687c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b086      	sub	sp, #24
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d049      	beq.n	8006922 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800688e:	2308      	movs	r3, #8
 8006890:	425b      	negs	r3, r3
 8006892:	697a      	ldr	r2, [r7, #20]
 8006894:	4413      	add	r3, r2
 8006896:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8006898:	697b      	ldr	r3, [r7, #20]
 800689a:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 800689c:	693b      	ldr	r3, [r7, #16]
 800689e:	685b      	ldr	r3, [r3, #4]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	db0a      	blt.n	80068ba <vPortFree+0x3e>
        __asm volatile
 80068a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068a8:	f383 8811 	msr	BASEPRI, r3
 80068ac:	f3bf 8f6f 	isb	sy
 80068b0:	f3bf 8f4f 	dsb	sy
 80068b4:	60fb      	str	r3, [r7, #12]
    }
 80068b6:	bf00      	nop
 80068b8:	e7fe      	b.n	80068b8 <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80068ba:	693b      	ldr	r3, [r7, #16]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d00a      	beq.n	80068d8 <vPortFree+0x5c>
        __asm volatile
 80068c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068c6:	f383 8811 	msr	BASEPRI, r3
 80068ca:	f3bf 8f6f 	isb	sy
 80068ce:	f3bf 8f4f 	dsb	sy
 80068d2:	60bb      	str	r3, [r7, #8]
    }
 80068d4:	bf00      	nop
 80068d6:	e7fe      	b.n	80068d6 <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 80068d8:	693b      	ldr	r3, [r7, #16]
 80068da:	685b      	ldr	r3, [r3, #4]
 80068dc:	0fdb      	lsrs	r3, r3, #31
 80068de:	f003 0301 	and.w	r3, r3, #1
 80068e2:	b2db      	uxtb	r3, r3
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d01c      	beq.n	8006922 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80068e8:	693b      	ldr	r3, [r7, #16]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d118      	bne.n	8006922 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 80068f0:	693b      	ldr	r3, [r7, #16]
 80068f2:	685b      	ldr	r3, [r3, #4]
 80068f4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80068f8:	693b      	ldr	r3, [r7, #16]
 80068fa:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 80068fc:	f7fe fb9e 	bl	800503c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8006900:	693b      	ldr	r3, [r7, #16]
 8006902:	685a      	ldr	r2, [r3, #4]
 8006904:	4b09      	ldr	r3, [pc, #36]	; (800692c <vPortFree+0xb0>)
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4413      	add	r3, r2
 800690a:	4a08      	ldr	r2, [pc, #32]	; (800692c <vPortFree+0xb0>)
 800690c:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800690e:	6938      	ldr	r0, [r7, #16]
 8006910:	f000 f86c 	bl	80069ec <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8006914:	4b06      	ldr	r3, [pc, #24]	; (8006930 <vPortFree+0xb4>)
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	3301      	adds	r3, #1
 800691a:	4a05      	ldr	r2, [pc, #20]	; (8006930 <vPortFree+0xb4>)
 800691c:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 800691e:	f7fe fb9b 	bl	8005058 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8006922:	bf00      	nop
 8006924:	3718      	adds	r7, #24
 8006926:	46bd      	mov	sp, r7
 8006928:	bd80      	pop	{r7, pc}
 800692a:	bf00      	nop
 800692c:	2000438c 	.word	0x2000438c
 8006930:	20004398 	.word	0x20004398

08006934 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8006934:	b480      	push	{r7}
 8006936:	b085      	sub	sp, #20
 8006938:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800693a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800693e:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8006940:	4b25      	ldr	r3, [pc, #148]	; (80069d8 <prvHeapInit+0xa4>)
 8006942:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	f003 0307 	and.w	r3, r3, #7
 800694a:	2b00      	cmp	r3, #0
 800694c:	d00c      	beq.n	8006968 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	3307      	adds	r3, #7
 8006952:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	f023 0307 	bic.w	r3, r3, #7
 800695a:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 800695c:	68ba      	ldr	r2, [r7, #8]
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	1ad3      	subs	r3, r2, r3
 8006962:	4a1d      	ldr	r2, [pc, #116]	; (80069d8 <prvHeapInit+0xa4>)
 8006964:	4413      	add	r3, r2
 8006966:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800696c:	4a1b      	ldr	r2, [pc, #108]	; (80069dc <prvHeapInit+0xa8>)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8006972:	4b1a      	ldr	r3, [pc, #104]	; (80069dc <prvHeapInit+0xa8>)
 8006974:	2200      	movs	r2, #0
 8006976:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	68ba      	ldr	r2, [r7, #8]
 800697c:	4413      	add	r3, r2
 800697e:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8006980:	2208      	movs	r2, #8
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	1a9b      	subs	r3, r3, r2
 8006986:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	f023 0307 	bic.w	r3, r3, #7
 800698e:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	4a13      	ldr	r2, [pc, #76]	; (80069e0 <prvHeapInit+0xac>)
 8006994:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8006996:	4b12      	ldr	r3, [pc, #72]	; (80069e0 <prvHeapInit+0xac>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	2200      	movs	r2, #0
 800699c:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800699e:	4b10      	ldr	r3, [pc, #64]	; (80069e0 <prvHeapInit+0xac>)
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	2200      	movs	r2, #0
 80069a4:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	68fa      	ldr	r2, [r7, #12]
 80069ae:	1ad2      	subs	r2, r2, r3
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80069b4:	4b0a      	ldr	r3, [pc, #40]	; (80069e0 <prvHeapInit+0xac>)
 80069b6:	681a      	ldr	r2, [r3, #0]
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	685b      	ldr	r3, [r3, #4]
 80069c0:	4a08      	ldr	r2, [pc, #32]	; (80069e4 <prvHeapInit+0xb0>)
 80069c2:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	685b      	ldr	r3, [r3, #4]
 80069c8:	4a07      	ldr	r2, [pc, #28]	; (80069e8 <prvHeapInit+0xb4>)
 80069ca:	6013      	str	r3, [r2, #0]
}
 80069cc:	bf00      	nop
 80069ce:	3714      	adds	r7, #20
 80069d0:	46bd      	mov	sp, r7
 80069d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d6:	4770      	bx	lr
 80069d8:	20000780 	.word	0x20000780
 80069dc:	20004380 	.word	0x20004380
 80069e0:	20004388 	.word	0x20004388
 80069e4:	20004390 	.word	0x20004390
 80069e8:	2000438c 	.word	0x2000438c

080069ec <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80069ec:	b480      	push	{r7}
 80069ee:	b085      	sub	sp, #20
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80069f4:	4b28      	ldr	r3, [pc, #160]	; (8006a98 <prvInsertBlockIntoFreeList+0xac>)
 80069f6:	60fb      	str	r3, [r7, #12]
 80069f8:	e002      	b.n	8006a00 <prvInsertBlockIntoFreeList+0x14>
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	60fb      	str	r3, [r7, #12]
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	687a      	ldr	r2, [r7, #4]
 8006a06:	429a      	cmp	r2, r3
 8006a08:	d8f7      	bhi.n	80069fa <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	685b      	ldr	r3, [r3, #4]
 8006a12:	68ba      	ldr	r2, [r7, #8]
 8006a14:	4413      	add	r3, r2
 8006a16:	687a      	ldr	r2, [r7, #4]
 8006a18:	429a      	cmp	r2, r3
 8006a1a:	d108      	bne.n	8006a2e <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	685a      	ldr	r2, [r3, #4]
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	685b      	ldr	r3, [r3, #4]
 8006a24:	441a      	add	r2, r3
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	685b      	ldr	r3, [r3, #4]
 8006a36:	68ba      	ldr	r2, [r7, #8]
 8006a38:	441a      	add	r2, r3
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	429a      	cmp	r2, r3
 8006a40:	d118      	bne.n	8006a74 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681a      	ldr	r2, [r3, #0]
 8006a46:	4b15      	ldr	r3, [pc, #84]	; (8006a9c <prvInsertBlockIntoFreeList+0xb0>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	429a      	cmp	r2, r3
 8006a4c:	d00d      	beq.n	8006a6a <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	685a      	ldr	r2, [r3, #4]
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	685b      	ldr	r3, [r3, #4]
 8006a58:	441a      	add	r2, r3
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	681a      	ldr	r2, [r3, #0]
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	601a      	str	r2, [r3, #0]
 8006a68:	e008      	b.n	8006a7c <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006a6a:	4b0c      	ldr	r3, [pc, #48]	; (8006a9c <prvInsertBlockIntoFreeList+0xb0>)
 8006a6c:	681a      	ldr	r2, [r3, #0]
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	601a      	str	r2, [r3, #0]
 8006a72:	e003      	b.n	8006a7c <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	681a      	ldr	r2, [r3, #0]
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8006a7c:	68fa      	ldr	r2, [r7, #12]
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	429a      	cmp	r2, r3
 8006a82:	d002      	beq.n	8006a8a <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	687a      	ldr	r2, [r7, #4]
 8006a88:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8006a8a:	bf00      	nop
 8006a8c:	3714      	adds	r7, #20
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a94:	4770      	bx	lr
 8006a96:	bf00      	nop
 8006a98:	20004380 	.word	0x20004380
 8006a9c:	20004388 	.word	0x20004388

08006aa0 <SystemInit>:

/**********************************************************************************************************************
 *  GLOBAL FUNCTIONS
 *********************************************************************************************************************/
void SystemInit(void)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	af00      	add	r7, sp, #0
	RCC_voidInit();
 8006aa4:	f7fc f99a 	bl	8002ddc <RCC_voidInit>
	TIM_Init(&TIM2_Cfg);
 8006aa8:	4802      	ldr	r0, [pc, #8]	; (8006ab4 <SystemInit+0x14>)
 8006aaa:	f7fc fe21 	bl	80036f0 <TIM_Init>
}
 8006aae:	bf00      	nop
 8006ab0:	bd80      	pop	{r7, pc}
 8006ab2:	bf00      	nop
 8006ab4:	200000b0 	.word	0x200000b0

08006ab8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8006ab8:	480d      	ldr	r0, [pc, #52]	; (8006af0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8006aba:	4685      	mov	sp, r0


/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006abc:	480d      	ldr	r0, [pc, #52]	; (8006af4 <LoopForever+0x6>)
  ldr r1, =_edata
 8006abe:	490e      	ldr	r1, [pc, #56]	; (8006af8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8006ac0:	4a0e      	ldr	r2, [pc, #56]	; (8006afc <LoopForever+0xe>)
  movs r3, #0
 8006ac2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006ac4:	e002      	b.n	8006acc <LoopCopyDataInit>

08006ac6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006ac6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006ac8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006aca:	3304      	adds	r3, #4

08006acc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006acc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006ace:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006ad0:	d3f9      	bcc.n	8006ac6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006ad2:	4a0b      	ldr	r2, [pc, #44]	; (8006b00 <LoopForever+0x12>)
  ldr r4, =_ebss
 8006ad4:	4c0b      	ldr	r4, [pc, #44]	; (8006b04 <LoopForever+0x16>)
  movs r3, #0
 8006ad6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006ad8:	e001      	b.n	8006ade <LoopFillZerobss>

08006ada <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006ada:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006adc:	3204      	adds	r2, #4

08006ade <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006ade:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006ae0:	d3fb      	bcc.n	8006ada <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8006ae2:	f000 f81b 	bl	8006b1c <__libc_init_array>
/* Call the application's entry point.*/

/* Call the clock system initialization function.*/
  bl  SystemInit
 8006ae6:	f7ff ffdb 	bl	8006aa0 <SystemInit>

  bl main
 8006aea:	f7fa fa61 	bl	8000fb0 <main>

08006aee <LoopForever>:

LoopForever:
  b LoopForever
 8006aee:	e7fe      	b.n	8006aee <LoopForever>
  ldr   r0, =_estack
 8006af0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8006af4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006af8:	200000d0 	.word	0x200000d0
  ldr r2, =_sidata
 8006afc:	08036478 	.word	0x08036478
  ldr r2, =_sbss
 8006b00:	200000d0 	.word	0x200000d0
  ldr r4, =_ebss
 8006b04:	2000439c 	.word	0x2000439c

08006b08 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8006b08:	e7fe      	b.n	8006b08 <ADC_IRQHandler>

08006b0a <memset>:
 8006b0a:	4402      	add	r2, r0
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d100      	bne.n	8006b14 <memset+0xa>
 8006b12:	4770      	bx	lr
 8006b14:	f803 1b01 	strb.w	r1, [r3], #1
 8006b18:	e7f9      	b.n	8006b0e <memset+0x4>
	...

08006b1c <__libc_init_array>:
 8006b1c:	b570      	push	{r4, r5, r6, lr}
 8006b1e:	4d0d      	ldr	r5, [pc, #52]	; (8006b54 <__libc_init_array+0x38>)
 8006b20:	4c0d      	ldr	r4, [pc, #52]	; (8006b58 <__libc_init_array+0x3c>)
 8006b22:	1b64      	subs	r4, r4, r5
 8006b24:	10a4      	asrs	r4, r4, #2
 8006b26:	2600      	movs	r6, #0
 8006b28:	42a6      	cmp	r6, r4
 8006b2a:	d109      	bne.n	8006b40 <__libc_init_array+0x24>
 8006b2c:	4d0b      	ldr	r5, [pc, #44]	; (8006b5c <__libc_init_array+0x40>)
 8006b2e:	4c0c      	ldr	r4, [pc, #48]	; (8006b60 <__libc_init_array+0x44>)
 8006b30:	f000 f826 	bl	8006b80 <_init>
 8006b34:	1b64      	subs	r4, r4, r5
 8006b36:	10a4      	asrs	r4, r4, #2
 8006b38:	2600      	movs	r6, #0
 8006b3a:	42a6      	cmp	r6, r4
 8006b3c:	d105      	bne.n	8006b4a <__libc_init_array+0x2e>
 8006b3e:	bd70      	pop	{r4, r5, r6, pc}
 8006b40:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b44:	4798      	blx	r3
 8006b46:	3601      	adds	r6, #1
 8006b48:	e7ee      	b.n	8006b28 <__libc_init_array+0xc>
 8006b4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b4e:	4798      	blx	r3
 8006b50:	3601      	adds	r6, #1
 8006b52:	e7f2      	b.n	8006b3a <__libc_init_array+0x1e>
 8006b54:	08036470 	.word	0x08036470
 8006b58:	08036470 	.word	0x08036470
 8006b5c:	08036470 	.word	0x08036470
 8006b60:	08036474 	.word	0x08036474

08006b64 <memcpy>:
 8006b64:	440a      	add	r2, r1
 8006b66:	4291      	cmp	r1, r2
 8006b68:	f100 33ff 	add.w	r3, r0, #4294967295
 8006b6c:	d100      	bne.n	8006b70 <memcpy+0xc>
 8006b6e:	4770      	bx	lr
 8006b70:	b510      	push	{r4, lr}
 8006b72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006b76:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006b7a:	4291      	cmp	r1, r2
 8006b7c:	d1f9      	bne.n	8006b72 <memcpy+0xe>
 8006b7e:	bd10      	pop	{r4, pc}

08006b80 <_init>:
 8006b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b82:	bf00      	nop
 8006b84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b86:	bc08      	pop	{r3}
 8006b88:	469e      	mov	lr, r3
 8006b8a:	4770      	bx	lr

08006b8c <_fini>:
 8006b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b8e:	bf00      	nop
 8006b90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b92:	bc08      	pop	{r3}
 8006b94:	469e      	mov	lr, r3
 8006b96:	4770      	bx	lr
